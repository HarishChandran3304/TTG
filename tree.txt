Directory: tmp/repo/fastlane-dev-yeoshin-backend-v2
Files analyzed: 1595

Estimated tokens: 646.6kDirectory structure:
└── fastlane-dev-yeoshin-backend-v2/
    ├── admin/
    │   └── src/
    │       └── main/
    │           └── java/
    │               └── kr/
    │                   └── co/
    │                       └── yeoshin/
    │                           └── admin/
    │                               ├── administrator/
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── AdminGroupsPayload.java
    │                               │   │       ├── AdminPayload.java
    │                               │   │       ├── AdminShortPayload.java
    │                               │   │       ├── AdminsPayload.java
    │                               │   │       ├── PlusAdminPayload.java
    │                               │   │       └── PlusAdminsPayload.java
    │                               │   └── usecase/
    │                               │       ├── AdminMutationUseCase.java
    │                               │       ├── AdminUseCase.java
    │                               │       ├── PlusUseCase.java
    │                               │       └── model/
    │                               │           └── GroupAdminsPayload.java
    │                               ├── audit/
    │                               │   └── usecase/
    │                               │       ├── AuditUseCase.java
    │                               │       └── model/
    │                               │           └── AdminAuditPageablePayload.java
    │                               ├── auth/
    │                               │   └── usecase/
    │                               │       ├── AuthAdminUseCase.java
    │                               │       └── AuthUseCase.java
    │                               ├── banner/
    │                               │   └── usecase/
    │                               │       ├── BannerUseCase.java
    │                               │       └── model/
    │                               │           ├── BannerListPayload.java
    │                               │           ├── BannerPageablePayload.java
    │                               │           └── BannerPayload.java
    │                               ├── board/
    │                               │   ├── component/
    │                               │   │   └── extension/
    │                               │   │       └── NavigationEventTemplate.java
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── AdminMemoPageablePayload.java
    │                               │   │       ├── AdminMemoPayload.java
    │                               │   │       ├── ExplorerThemePageablePayload.java
    │                               │   │       ├── ExplorerThemePayload.java
    │                               │   │       ├── PromotionPageablePayload.java
    │                               │   │       ├── PromotionPayload.java
    │                               │   │       ├── PromotionReplyPageablePayload.java
    │                               │   │       ├── PromotionReplyPayload.java
    │                               │   │       ├── TreatmentCounselingCheckPayload.java
    │                               │   │       ├── TreatmentCounselingPageablePayload.java
    │                               │   │       ├── TreatmentCounselingPayload.java
    │                               │   │       ├── TreatmentFocusPageablePayload.java
    │                               │   │       └── TreatmentFocusPayload.java
    │                               │   └── usecase/
    │                               │       ├── AdminMemoUseCase.java
    │                               │       ├── ExplorerThemeUseCase.java
    │                               │       ├── PromotionUseCase.java
    │                               │       ├── TreatmentCounselingUseCase.java
    │                               │       ├── TreatmentFocusUseCase.java
    │                               │       └── model/
    │                               │           ├── ExplorerThemeListPayload.java
    │                               │           └── TreatmentFocusListPayload.java
    │                               ├── browser/
    │                               │   └── usecase/
    │                               │       ├── BrowserUseCase.java
    │                               │       └── model/
    │                               │           ├── BrowserCollectionPageablePayload.java
    │                               │           ├── BrowserCollectionPayload.java
    │                               │           ├── BrowserCollectionPublishLogPayload.java
    │                               │           ├── BrowserCollectionPublishPayload.java
    │                               │           ├── BrowserCollectionsPayload.java
    │                               │           ├── BrowserLibraryPageablePayload.java
    │                               │           ├── BrowserLibraryPayload.java
    │                               │           ├── BrowserSegmentPageablePayload.java
    │                               │           └── BrowserSegmentPayload.java
    │                               ├── code/
    │                               │   └── usecase/
    │                               │       └── CodeUseCase.java
    │                               ├── common/
    │                               │   ├── component/
    │                               │   │   ├── CacheTemplate.java
    │                               │   │   └── TransactionTemplate.java
    │                               │   ├── model/
    │                               │   │   ├── api/
    │                               │   │   │   └── payload/
    │                               │   │   │       ├── ApiValidationErrorResponsePayload.java
    │                               │   │   │       ├── BoolPayload.java
    │                               │   │   │       ├── HierarchyPayload.java
    │                               │   │   │       ├── ListPayload.java
    │                               │   │   │       ├── MultipleResultPayload.java
    │                               │   │   │       ├── OrderedHierarchyPayload.java
    │                               │   │   │       ├── PagePayload.java
    │                               │   │   │       └── SimpleHierarchyPayload.java
    │                               │   │   └── template/
    │                               │   │       ├── AdPointConversionTemplate.java
    │                               │   │       ├── AdPointPaymentTemplate.java
    │                               │   │       ├── AdPointProductTemplate.java
    │                               │   │       ├── AdPointTemplate.java
    │                               │   │       ├── AdminAccountTemplate.java
    │                               │   │       ├── AdminAuditTemplate.java
    │                               │   │       ├── AdminGroupTemplate.java
    │                               │   │       ├── AdminMemoTemplate.java
    │                               │   │       ├── AdminShortTemplate.java
    │                               │   │       ├── AdminTemplate.java
    │                               │   │       ├── AppVersionTemplate.java
    │                               │   │       ├── BadgeTemplate.java
    │                               │   │       ├── BankAccountTemplate.java
    │                               │   │       ├── BannerTemplate.java
    │                               │   │       ├── BlacklistMemberTemplate.java
    │                               │   │       ├── BrowserCollectionPublishLogTemplate.java
    │                               │   │       ├── BrowserCollectionPublishTemplate.java
    │                               │   │       ├── BrowserCollectionTemplate.java
    │                               │   │       ├── BrowserLibraryPageableTemplate.java
    │                               │   │       ├── BrowserLibraryTemplate.java
    │                               │   │       ├── BrowserSegmentTemplate.java
    │                               │   │       ├── CategoryTemplate.java
    │                               │   │       ├── CodeTemplate.java
    │                               │   │       ├── CommitInfoTemplate.java
    │                               │   │       ├── ContentConcealReasonTemplate.java
    │                               │   │       ├── ContentReportTemplate.java
    │                               │   │       ├── CouponIssueConditionTemplate.java
    │                               │   │       ├── CouponShortTemplate.java
    │                               │   │       ├── CouponTemplate.java
    │                               │   │       ├── CpmAdClickPriceTemplate.java
    │                               │   │       ├── CpmAdConfigTemplate.java
    │                               │   │       ├── CpmAdDayBudgetFixPriceTemplate.java
    │                               │   │       ├── CpmAdGuidanceReportTemplate.java
    │                               │   │       ├── CpmAdHospitalReportDailyShortTemplate.java
    │                               │   │       ├── CpmAdHospitalReportTemplate.java
    │                               │   │       ├── CpmAdReportFigureTemplate.java
    │                               │   │       ├── CpmAdReportRatioTemplate.java
    │                               │   │       ├── CpmAdReportStatTemplate.java
    │                               │   │       ├── CpmAdRuleTemplate.java
    │                               │   │       ├── CpmAdSalesEventDetailReportTemplate.java
    │                               │   │       ├── CpmAdStatusLogTemplate.java
    │                               │   │       ├── CpmPaidAdPointStatusTemplate.java
    │                               │   │       ├── CrmDeviceTemplate.java
    │                               │   │       ├── CrmReservationCountTemplate.java
    │                               │   │       ├── CrmReservationHolidayTemplate.java
    │                               │   │       ├── CrmReservationTemplate.java
    │                               │   │       ├── DateTimeRangeTemplate.java
    │                               │   │       ├── DateTimeTemplate.java
    │                               │   │       ├── DepositRefundTemplate.java
    │                               │   │       ├── DepositTemplate.java
    │                               │   │       ├── DetailTextTemplate.java
    │                               │   │       ├── ExplorerThemeSalesEventListTemplate.java
    │                               │   │       ├── ExplorerThemeShortTemplate.java
    │                               │   │       ├── ExplorerThemeTemplate.java
    │                               │   │       ├── FaceAnalysisReportTemplate.java
    │                               │   │       ├── FigureTemplate.java
    │                               │   │       ├── FileTemplate.java
    │                               │   │       ├── FrayMemberTemplate.java
    │                               │   │       ├── GiftOrderTemplate.java
    │                               │   │       ├── HolidayTemplate.java
    │                               │   │       ├── HospitalAdditionTemplate.java
    │                               │   │       ├── HospitalConfigTemplate.java
    │                               │   │       ├── HospitalDepartmentStatTemplate.java
    │                               │   │       ├── HospitalDepartmentTemplate.java
    │                               │   │       ├── HospitalDoctorApprovalTemplate.java
    │                               │   │       ├── HospitalDoctorTemplate.java
    │                               │   │       ├── HospitalImageTemplate.java
    │                               │   │       ├── HospitalKahfTemplate.java
    │                               │   │       ├── HospitalManagementContactTemplate.java
    │                               │   │       ├── HospitalMessengerTemplate.java
    │                               │   │       ├── HospitalOfflineUpsellTemplate.java
    │                               │   │       ├── HospitalOnboardMemberTemplate.java
    │                               │   │       ├── HospitalOnboardPageableTemplate.java
    │                               │   │       ├── HospitalOnboardTemplate.java
    │                               │   │       ├── HospitalPartnershipSettlementTemplate.java
    │                               │   │       ├── HospitalPartnershipTemplate.java
    │                               │   │       ├── HospitalShortTemplate.java
    │                               │   │       ├── HospitalStatTemplate.java
    │                               │   │       ├── HospitalSuggestTemplate.java
    │                               │   │       ├── HospitalTemplate.java
    │                               │   │       ├── HospitalTreatmentGuideTemplate.java
    │                               │   │       ├── HospitalTreatmentStatTemplate.java
    │                               │   │       ├── HospitalTreatmentTemplate.java
    │                               │   │       ├── ImageTemplate.java
    │                               │   │       ├── InquiryHospitalEntryTemplate.java
    │                               │   │       ├── InstantLogTemplate.java
    │                               │   │       ├── LevelTemplate.java
    │                               │   │       ├── ListTemplate.java
    │                               │   │       ├── MemberAccountTemplate.java
    │                               │   │       ├── MemberCouponTemplate.java
    │                               │   │       ├── MemberLevelTemplate.java
    │                               │   │       ├── MemberPlaceTemplate.java
    │                               │   │       ├── MemberPointCompositionTemplate.java
    │                               │   │       ├── MemberPointTemplate.java
    │                               │   │       ├── MemberProfileTemplate.java
    │                               │   │       ├── MemberReportTemplate.java
    │                               │   │       ├── MemberServiceStatTemplate.java
    │                               │   │       ├── MemberServiceStatTicketLogTemplate.java
    │                               │   │       ├── MemberShortTemplate.java
    │                               │   │       ├── MemberSkinTypeTemplate.java
    │                               │   │       ├── MemberTemplate.java
    │                               │   │       ├── MemberTermsAgreeLogTemplate.java
    │                               │   │       ├── MoneyReceiptLogTemplate.java
    │                               │   │       ├── NamedImageTemplate.java
    │                               │   │       ├── NotificationConfigTemplate.java
    │                               │   │       ├── NumberTemplate.java
    │                               │   │       ├── OrderAdPointProductTemplate.java
    │                               │   │       ├── OrderPartCancelTemplate.java
    │                               │   │       ├── OrderSalesProductTemplate.java
    │                               │   │       ├── OrderSheetConfigTemplate.java
    │                               │   │       ├── OrderTemplate.java
    │                               │   │       ├── PageableTemplate.java
    │                               │   │       ├── PaymentBenefitTemplate.java
    │                               │   │       ├── PaymentNicepayConfigTemplate.java
    │                               │   │       ├── PaymentTemplate.java
    │                               │   │       ├── PgFeeTemplate.java
    │                               │   │       ├── PlusAdminTemplate.java
    │                               │   │       ├── PopupTemplate.java
    │                               │   │       ├── PriceTemplate.java
    │                               │   │       ├── PromotionReplyTemplate.java
    │                               │   │       ├── PromotionTemplate.java
    │                               │   │       ├── RecommendKeywordTemplate.java
    │                               │   │       ├── RecommendSalesEventTemplate.java
    │                               │   │       ├── ReservationAsTicketLogTemplate.java
    │                               │   │       ├── ReservationChangeLogTemplate.java
    │                               │   │       ├── ReservationCloseDateTimeTemplate.java
    │                               │   │       ├── ReservationDoctorTemplate.java
    │                               │   │       ├── ReservationHospitalConfigTemplate.java
    │                               │   │       ├── ReservationOperationTimeTemplate.java
    │                               │   │       ├── ReservationRevisionTemplate.java
    │                               │   │       ├── ReservationShortTemplate.java
    │                               │   │       ├── ReservationStatusLogTemplate.java
    │                               │   │       ├── ReservationTemplate.java
    │                               │   │       ├── ReservationTemporaryOperationTimeTemplate.java
    │                               │   │       ├── RestrictionGeoPositionUsageTemplate.java
    │                               │   │       ├── RevisionTemplate.java
    │                               │   │       ├── SalesEventCommissionDetailTemplate.java
    │                               │   │       ├── SalesEventCommissionShortTemplate.java
    │                               │   │       ├── SalesEventCommissionTemplate.java
    │                               │   │       ├── SalesEventConsultationConfigTemplate.java
    │                               │   │       ├── SalesEventConsultationPaidStatusLogTemplate.java
    │                               │   │       ├── SalesEventConsultationPriceTagTemplate.java
    │                               │   │       ├── SalesEventConsultationTemplate.java
    │                               │   │       ├── SalesEventCpmTemplate.java
    │                               │   │       ├── SalesEventDetailTemplate.java
    │                               │   │       ├── SalesEventImageTemplate.java
    │                               │   │       ├── SalesEventModificationObjectTemplate.java
    │                               │   │       ├── SalesEventQuestionReplyTemplate.java
    │                               │   │       ├── SalesEventQuestionTemplate.java
    │                               │   │       ├── SalesEventShortTemplate.java
    │                               │   │       ├── SalesEventStatTemplate.java
    │                               │   │       ├── SalesEventTemplate.java
    │                               │   │       ├── SalesEventTreatmentLibraryTemplate.java
    │                               │   │       ├── SalesEventUsageApprovalTemplate.java
    │                               │   │       ├── SalesEventUsageImageTemplate.java
    │                               │   │       ├── SalesEventUsageTemplate.java
    │                               │   │       ├── SalesProductObjectTemplate.java
    │                               │   │       ├── SalesProductShortTemplate.java
    │                               │   │       ├── SalesProductTemplate.java
    │                               │   │       ├── SalesProductVersionTemplate.java
    │                               │   │       ├── SearchDictionaryTemplate.java
    │                               │   │       ├── SettlementAdjustContextTemplate.java
    │                               │   │       ├── SettlementAdjustTemplate.java
    │                               │   │       ├── SettlementOrderTemplate.java
    │                               │   │       ├── SettlementReportPeriodTemplate.java
    │                               │   │       ├── SettlementReportTemplate.java
    │                               │   │       ├── SettlementSalesTemplate.java
    │                               │   │       ├── SettlementScheduleTemplate.java
    │                               │   │       ├── SettlementStatTemplate.java
    │                               │   │       ├── SettlementTicketTemplate.java
    │                               │   │       ├── SplashTemplate.java
    │                               │   │       ├── SystemCashRefundAccountTemplate.java
    │                               │   │       ├── SystemCashRefundStatusTemplate.java
    │                               │   │       ├── SystemCashReportTemplate.java
    │                               │   │       ├── SystemCashTemplate.java
    │                               │   │       ├── SystemCashVoucherConfigTemplate.java
    │                               │   │       ├── SystemCashVoucherExtraBenefitTemplate.java
    │                               │   │       ├── SystemCashVoucherPartnershipTemplate.java
    │                               │   │       ├── SystemCashVoucherStatTemplate.java
    │                               │   │       ├── SystemCashVoucherTemplate.java
    │                               │   │       ├── TabooDictionaryTemplate.java
    │                               │   │       ├── TagTemplate.java
    │                               │   │       ├── TextIconTemplate.java
    │                               │   │       ├── TextPropertyTemplate.java
    │                               │   │       ├── TextTemplate.java
    │                               │   │       ├── ThumbnailCodeTemplate.java
    │                               │   │       ├── TicketGroupPriceTemplate.java
    │                               │   │       ├── TicketPaymentTemplate.java
    │                               │   │       ├── TicketRestorationInquiryTemplate.java
    │                               │   │       ├── TicketTemplate.java
    │                               │   │       ├── TicketTrashTemplate.java
    │                               │   │       ├── TitleContentObjectTemplate.java
    │                               │   │       ├── TranslatorTemplate.java
    │                               │   │       ├── TreatmentCounselingFaqTemplate.java
    │                               │   │       ├── TreatmentCounselingTemplate.java
    │                               │   │       ├── TreatmentFocusTemplate.java
    │                               │   │       ├── TreatmentLibraryShortTemplate.java
    │                               │   │       ├── TreatmentLibraryTemplate.java
    │                               │   │       ├── TreatmentPrincipleDetailTemplate.java
    │                               │   │       ├── TreatmentPrincipleTemplate.java
    │                               │   │       ├── TreatmentReceiptReviewTemplate.java
    │                               │   │       ├── TreatmentReviewConfirmShortTemplate.java
    │                               │   │       ├── TreatmentReviewConfirmTemplate.java
    │                               │   │       ├── TreatmentReviewHospitalCommentTemplate.java
    │                               │   │       ├── TreatmentReviewRewardTemplate.java
    │                               │   │       ├── TreatmentReviewShortTemplate.java
    │                               │   │       ├── TreatmentReviewStatTemplate.java
    │                               │   │       ├── TreatmentReviewTemplate.java
    │                               │   │       ├── TreatmentTemplate.java
    │                               │   │       ├── TvCategoryTemplate.java
    │                               │   │       ├── TvReplyTemplate.java
    │                               │   │       ├── TvShortTemplate.java
    │                               │   │       ├── TvStatTemplate.java
    │                               │   │       ├── TvTemplate.java
    │                               │   │       ├── ValueTemplate.java
    │                               │   │       ├── VatReportTemplate.java
    │                               │   │       ├── VirtualBankTemplate.java
    │                               │   │       └── thirdparty/
    │                               │   │           ├── CrmHospitalDoctorTemplate.java
    │                               │   │           ├── CrmHospitalTemplate.java
    │                               │   │           ├── CrmMemberTemplate.java
    │                               │   │           ├── CrmReservationCloseDateTimeTemplate.java
    │                               │   │           ├── CrmReservationTemplate.java
    │                               │   │           ├── CrmSalesEventQuestionReplyTemplate.java
    │                               │   │           ├── CrmSalesEventQuestionTemplate.java
    │                               │   │           ├── CrmScrollablePageTemplate.java
    │                               │   │           └── CrmTicketTemplate.java
    │                               │   └── stereotype/
    │                               │       ├── SearchRepository.java
    │                               │       └── UseCase.java
    │                               ├── config/
    │                               │   ├── messages/
    │                               │   │   └── LocaleMessageSourceTemplate.java
    │                               │   └── web/
    │                               │       └── resttemplate/
    │                               │           └── RestApiTemplate.java
    │                               ├── coupon/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── CouponPageablePayload.java
    │                               │   │       ├── CouponPayload.java
    │                               │   │       ├── MemberCouponPageablePayload.java
    │                               │   │       └── MemberCouponPayload.java
    │                               │   └── usecase/
    │                               │       └── CouponUseCase.java
    │                               ├── cpm/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── CpmAdAnalysisReportPageablePayload.java
    │                               │   │       ├── CpmAdAnalysisReportSummaryPayload.java
    │                               │   │       ├── CpmAdConfigPayload.java
    │                               │   │       ├── CpmAdGuidanceReportPageablePayload.java
    │                               │   │       ├── CpmAdPageablePayload.java
    │                               │   │       ├── CpmAdRulePayload.java
    │                               │   │       ├── CpmAdSalesEventReportPageablePayload.java
    │                               │   │       ├── CpmAdStatusLogPageablePayload.java
    │                               │   │       ├── CpmAdSummaryPayload.java
    │                               │   │       └── DayBudgetFixPricePayload.java
    │                               │   └── usecase/
    │                               │       └── CpmAdUseCase.java
    │                               ├── dashboard/
    │                               │   └── usecase/
    │                               │       ├── DashboardUseCase.java
    │                               │       └── model/
    │                               │           ├── CpmAdDashboardPayload.java
    │                               │           └── SalesEventDashboardPayload.java
    │                               ├── dictionary/
    │                               │   └── usecase/
    │                               │       ├── SearchDictionaryUseCase.java
    │                               │       └── model/
    │                               │           ├── RecommendRankingKeywordPageablePayload.java
    │                               │           ├── RecommendRankingKeywordPayload.java
    │                               │           ├── RecommendRankingKeywordsPayload.java
    │                               │           ├── SearchDictionaryPageablePayload.java
    │                               │           ├── SearchDictionaryPayload.java
    │                               │           ├── TabooDictionaryPageablePayload.java
    │                               │           └── TabooDictionaryPayload.java
    │                               ├── export/
    │                               │   └── usecase/
    │                               │       └── ExportUseCase.java
    │                               ├── face/
    │                               │   └── usecase/
    │                               │       ├── FaceAnalysisUseCase.java
    │                               │       └── model/
    │                               │           └── FaceAnalysisReportPageablePayload.java
    │                               ├── hospital/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── HospitalPageableTemplate.java
    │                               │   │       └── HospitalSuggestPageablePayload.java
    │                               │   └── usecase/
    │                               │       ├── HospitalDepartmentUseCase.java
    │                               │       ├── HospitalDoctorUseCase.java
    │                               │       ├── HospitalManagementContactUseCase.java
    │                               │       ├── HospitalOnboardUseCase.java
    │                               │       ├── HospitalPartnershipUseCase.java
    │                               │       ├── HospitalUseCase.java
    │                               │       └── model/
    │                               │           ├── BadgePayload.java
    │                               │           ├── DoctorPayload.java
    │                               │           ├── DoctorsPayload.java
    │                               │           ├── HospitalAdditionPayload.java
    │                               │           ├── HospitalDepartmentsPayload.java
    │                               │           ├── HospitalDoctorApprovalPageablePayload.java
    │                               │           ├── HospitalDoctorPageablePayload.java
    │                               │           ├── HospitalDoctorPayload.java
    │                               │           ├── HospitalImagePayload.java
    │                               │           ├── HospitalManagementContactPayload.java
    │                               │           ├── HospitalManagementContactsPayload.java
    │                               │           ├── HospitalOfflineUpsellPageablePayload.java
    │                               │           ├── HospitalOfflineUpsellPayload.java
    │                               │           ├── HospitalOnboardCompleteStatPayload.java
    │                               │           ├── HospitalOnboardMemberPageablePayload.java
    │                               │           ├── HospitalOnboardPageablePayload.java
    │                               │           ├── HospitalOnboardsPayload.java
    │                               │           ├── HospitalPageablePayload.java
    │                               │           ├── HospitalPartnershipPayload.java
    │                               │           ├── HospitalPayload.java
    │                               │           ├── HospitalTreatmentGuidePageablePayload.java
    │                               │           ├── HospitalTreatmentGuidePayload.java
    │                               │           └── HospitalTreatmentGuidesPayload.java
    │                               ├── hospitalmanager/
    │                               │   └── usecase/
    │                               │       └── HospitalManagerUseCase.java
    │                               ├── inquiry/
    │                               │   └── usecase/
    │                               │       ├── InquiryHospitalEntryUseCase.java
    │                               │       └── model/
    │                               │           ├── InquiryHospitalEntryPageablePayload.java
    │                               │           └── InquiryHospitalEntryPayload.java
    │                               ├── invitation/
    │                               │   └── usecase/
    │                               │       └── InvitationUseCase.java
    │                               ├── log/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       └── RestrictionGeoPositionUsagePageablePayload.java
    │                               │   └── usecase/
    │                               │       └── LogUseCase.java
    │                               ├── media/
    │                               │   ├── component/
    │                               │   │   ├── cdn/
    │                               │   │   │   └── CdnTemplate.java
    │                               │   │   └── template/
    │                               │   │       ├── LocalMediaTemplate.java
    │                               │   │       ├── MediaTemplate.java
    │                               │   │       └── S3Template.java
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── MediaEndpointPayload.java
    │                               │   │       ├── MediaFileUploadPayload.java
    │                               │   │       ├── MediaImageUploadPayload.java
    │                               │   │       ├── MediaJobStatusPayload.java
    │                               │   │       ├── MediaJobTaskPayload.java
    │                               │   │       └── MediaSignaturesPayload.java
    │                               │   └── usecase/
    │                               │       └── MediaUseCase.java
    │                               ├── member/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── BlacklistMemberPageablePayload.java
    │                               │   │       ├── DormantMemberPageablePayload.java
    │                               │   │       ├── MemberLevelPayload.java
    │                               │   │       ├── MemberLevelsPayload.java
    │                               │   │       ├── MemberOrderPageablePayload.java
    │                               │   │       └── ReportBlockMemberPageablePayload.java
    │                               │   └── usecase/
    │                               │       ├── MemberUseCase.java
    │                               │       └── model/
    │                               │           ├── BlockMembersPayload.java
    │                               │           ├── ExtinctionPointPayload.java
    │                               │           ├── MemberCouponDetailPageablePayload.java
    │                               │           ├── MemberLevelStatLogPageablePayload.java
    │                               │           ├── MemberPageablePayload.java
    │                               │           ├── MemberPayload.java
    │                               │           ├── MemberPointDetailPageablePayload.java
    │                               │           ├── MemberReportBlockPageablePayload.java
    │                               │           ├── MemberStatPayload.java
    │                               │           ├── MemberSystemCashDetailPageablePayload.java
    │                               │           └── MembersPayload.java
    │                               ├── notification/
    │                               │   └── component/
    │                               │       └── mapper/
    │                               │           ├── NotificationMailTemplate.java
    │                               │           └── NotificationTemplate.java
    │                               ├── order/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── OrderPageablePayload.java
    │                               │   │       └── OrderPayload.java
    │                               │   └── usecase/
    │                               │       ├── IamPortUseCase.java
    │                               │       ├── OrderTestUseCase.java
    │                               │       ├── OrderUseCase.java
    │                               │       └── model/
    │                               │           └── OrderCancelDryRunPayload.java
    │                               ├── payment/
    │                               │   ├── iamport/
    │                               │   │   └── component/
    │                               │   │       └── retrofit/
    │                               │   │           └── model/
    │                               │   │               └── PaymentPayload.java
    │                               │   ├── nicepay/
    │                               │   │   └── component/
    │                               │   │       └── retrofit/
    │                               │   │           └── model/
    │                               │   │               └── NicepaySubMerchantPayload.java
    │                               │   └── usecase/
    │                               │       ├── PaymentBenefitUseCase.java
    │                               │       ├── PaymentUseCase.java
    │                               │       └── model/
    │                               │           ├── AdPointPaymentPayload.java
    │                               │           ├── PaymentBenefitPageablePayload.java
    │                               │           └── VirtualBankPayload.java
    │                               ├── point/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── AdPointPageablePayload.java
    │                               │   │       ├── AdPointPayload.java
    │                               │   │       ├── AdPointProductPageablePayload.java
    │                               │   │       ├── AdPointProductPayload.java
    │                               │   │       ├── MemberPointPageablePayload.java
    │                               │   │       ├── MemberPointPayload.java
    │                               │   │       └── OrderAdPointProductPageablePayload.java
    │                               │   └── usecase/
    │                               │       ├── AdPointUseCase.java
    │                               │       ├── MemberPointUseCase.java
    │                               │       └── model/
    │                               │           ├── MemberPointListPayload.java
    │                               │           ├── OrderAdPointProductListPayload.java
    │                               │           └── OrderAdPointProductPayload.java
    │                               ├── popup/
    │                               │   └── usecase/
    │                               │       ├── PopupUseCase.java
    │                               │       └── model/
    │                               │           ├── PopupPageablePayload.java
    │                               │           └── PopupPayload.java
    │                               ├── product/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── SalesEventChangesPayload.java
    │                               │   │       ├── SalesEventConsultationPageablePayload.java
    │                               │   │       ├── SalesEventConsultationPayload.java
    │                               │   │       ├── SalesEventDetailPayload.java
    │                               │   │       ├── SalesEventQuestionPageablePayload.java
    │                               │   │       ├── SalesEventQuestionPayload.java
    │                               │   │       ├── SalesEventQuestionReplyPayload.java
    │                               │   │       └── TreatmentMethodPayload.java
    │                               │   └── usecase/
    │                               │       ├── SalesEventConsultationUseCase.java
    │                               │       ├── SalesEventQuestionUseCase.java
    │                               │       ├── SalesEventUsageUseCase.java
    │                               │       ├── SalesEventUseCase.java
    │                               │       ├── SalesProductUseCase.java
    │                               │       └── model/
    │                               │           ├── ActivationResultPayload.java
    │                               │           ├── AttributeTypeDescriptionPresetPayload.java
    │                               │           ├── PriorityTargetSalesEventListPayload.java
    │                               │           ├── SalesEventPageablePayload.java
    │                               │           ├── SalesEventStatPayload.java
    │                               │           ├── SalesEventUsageApprovalPageablePayload.java
    │                               │           ├── SalesEventUsageListPayload.java
    │                               │           ├── SalesEventUsagePageablePayload.java
    │                               │           ├── SalesEventUsagePayload.java
    │                               │           ├── SalesProductPageablePayload.java
    │                               │           └── SalesProductPayload.java
    │                               ├── queue/
    │                               │   ├── component/
    │                               │   │   └── publisher/
    │                               │   │       ├── MessagePublisherTemplate.java
    │                               │   │       └── QueueMessagePublisherTemplate.java
    │                               │   └── model/
    │                               │       ├── MonitoringReservationStatusLogPayload.java
    │                               │       ├── cpm/
    │                               │       │   └── CpmPayload.java
    │                               │       ├── domainevent/
    │                               │       │   └── DomainEventPayload.java
    │                               │       ├── domainlog/
    │                               │       │   ├── DomainLogPayload.java
    │                               │       │   └── ReservationCrmLogPayload.java
    │                               │       └── notificationevent/
    │                               │           └── NotificationPayload.java
    │                               ├── report/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── ContentReportPageablePayload.java
    │                               │   │       └── MemberReportPageablePayload.java
    │                               │   └── usecase/
    │                               │       └── ReportBlockUseCase.java
    │                               ├── reservation/
    │                               │   ├── component/
    │                               │   │   └── crm/
    │                               │   │       └── api/
    │                               │   │           └── model/
    │                               │   │               └── SmartDoctorCrmApiErrorPayload.java
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── LinkUpWithCrmResultPayload.java
    │                               │   │       └── ReservationDoctorsPayload.java
    │                               │   ├── usecase/
    │                               │   │   ├── CrmVegasReservationUseCase.java
    │                               │   │   ├── ReservationReadableUseCase.java
    │                               │   │   ├── ReservationWritableUseCase.java
    │                               │   │   └── model/
    │                               │   │       ├── CrmConfirmReservationCountPayload.java
    │                               │   │       ├── CrmDoctorsPayload.java
    │                               │   │       ├── CrmReservationPayload.java
    │                               │   │       ├── CrmReservationsPayload.java
    │                               │   │       ├── DeniedVisitCompleteReservationsPayload.java
    │                               │   │       ├── ReservationCalendarPayload.java
    │                               │   │       ├── ReservationChangeLogPayload.java
    │                               │   │       ├── ReservationCloseDateTimeMutationResultPayload.java
    │                               │   │       ├── ReservationCloseDateTimesPayload.java
    │                               │   │       ├── ReservationHospitalConfigPayload.java
    │                               │   │       ├── ReservationPageablePayload.java
    │                               │   │       ├── ReservationPayload.java
    │                               │   │       ├── ReservationShortPayload.java
    │                               │   │       ├── ReservationStatisticsPayload.java
    │                               │   │       ├── ReservationTemporaryOperationTimesPayload.java
    │                               │   │       ├── ReservationTimeSchedulePayload.java
    │                               │   │       ├── TicketOwnMembersPayload.java
    │                               │   │       └── TicketsPayload.java
    │                               │   └── vegas/
    │                               │       └── component/
    │                               │           └── retrofit/
    │                               │               └── model/
    │                               │                   ├── CrmIdPayload.java
    │                               │                   ├── DoctorPayload.java
    │                               │                   ├── HolidayPayload.java
    │                               │                   ├── HospitalInformationPayload.java
    │                               │                   ├── OperationTimePayload.java
    │                               │                   └── ReservationPayload.java
    │                               ├── review/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── TreatmentReviewConfirmPageablePayload.java
    │                               │   │       ├── TreatmentReviewConfirmPayload.java
    │                               │   │       ├── TreatmentReviewHospitalCommentPageablePayload.java
    │                               │   │       ├── TreatmentReviewHospitalCommentPayload.java
    │                               │   │       ├── TreatmentReviewPageablePayload.java
    │                               │   │       └── TreatmentReviewPayload.java
    │                               │   └── usecase/
    │                               │       └── TreatmentReviewUseCase.java
    │                               ├── revision/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       └── RevisionPayload.java
    │                               │   └── usecase/
    │                               │       └── RevisionUseCase.java
    │                               ├── saleseventcommission/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── SalesEventCommissionPageablePayload.java
    │                               │   │       ├── SalesEventCommissionPayload.java
    │                               │   │       └── SalesEventCommissionTempSavePayload.java
    │                               │   └── usecase/
    │                               │       └── SalesEventCommissionUseCase.java
    │                               ├── search/
    │                               │   └── repository/
    │                               │       └── ElasticsearchRepository.java
    │                               ├── settlement/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── DepositPageablePayload.java
    │                               │   │       ├── DepositPayload.java
    │                               │   │       ├── DepositRefundPageablePayload.java
    │                               │   │       ├── DepositRefundPayload.java
    │                               │   │       ├── DepositRefundRegisterPayload.java
    │                               │   │       ├── SettlementAdjustDetailPayload.java
    │                               │   │       ├── SettlementAdjustPageablePayload.java
    │                               │   │       ├── SettlementAdjustPayload.java
    │                               │   │       ├── SettlementPgFeePageablePayload.java
    │                               │   │       └── VatReportPageablePayload.java
    │                               │   └── usecase/
    │                               │       ├── DepositUseCase.java
    │                               │       ├── SettlementUseCase.java
    │                               │       ├── VatReportUseCase.java
    │                               │       └── model/
    │                               │           ├── LatestFixedPayAtPayload.java
    │                               │           ├── SettlementPageablePayload.java
    │                               │           ├── SettlementPayload.java
    │                               │           ├── SettlementPgFeePayload.java
    │                               │           └── SettlementSchedulePageablePayload.java
    │                               ├── setup/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── AppVersionListPayload.java
    │                               │   │       ├── AppVersionPayload.java
    │                               │   │       ├── CpaPriceTagPayload.java
    │                               │   │       ├── SplashCheckPayload.java
    │                               │   │       ├── SplashPageablePayload.java
    │                               │   │       └── SplashPayload.java
    │                               │   └── usecase/
    │                               │       └── SetupUseCase.java
    │                               ├── systemcash/
    │                               │   └── usecase/
    │                               │       ├── SystemCashReportUseCase.java
    │                               │       ├── SystemCashUseCase.java
    │                               │       ├── SystemCashVoucherUseCase.java
    │                               │       └── model/
    │                               │           ├── MemberSystemCashRefundPayload.java
    │                               │           ├── SystemCashPageablePayload.java
    │                               │           ├── SystemCashRefundStatusPageablePayload.java
    │                               │           ├── SystemCashRefundStatusPayload.java
    │                               │           ├── SystemCashReportPayload.java
    │                               │           ├── SystemCashVoucherConfigPageablePayload.java
    │                               │           ├── SystemCashVoucherConfigPayload.java
    │                               │           ├── SystemCashVoucherDryRunPayload.java
    │                               │           ├── SystemCashVoucherPageablePayload.java
    │                               │           └── SystemCashVoucherPartnershipsPayload.java
    │                               ├── thirdparty/
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── SmartDoctorCrmReservationIdPayload.java
    │                               │   │       ├── SmartDoctorCrmSalesProductMutationRequestPayload.java
    │                               │   │       └── SmartDoctorCrmSalesProductPayload.java
    │                               │   ├── fray/
    │                               │   │   ├── component/
    │                               │   │   │   └── model/
    │                               │   │   │       ├── MemberRequestPayload.java
    │                               │   │   │       └── MemberResponsePayload.java
    │                               │   │   ├── service/
    │                               │   │   │   └── model/
    │                               │   │   │       ├── FrayMemberPageablePayload.java
    │                               │   │   │       └── FrayMemberPayload.java
    │                               │   │   └── usecase/
    │                               │   │       └── FrayUseCase.java
    │                               │   └── usecase/
    │                               │       ├── CrmReservationUseCase.java
    │                               │       ├── CrmSalesEventQuestionUseCase.java
    │                               │       ├── DrPaletteUseCase.java
    │                               │       ├── SmartDoctorCrmUseCase.java
    │                               │       ├── ThirdPartyUseCase.java
    │                               │       └── model/
    │                               │           ├── CrmHospitalPayload.java
    │                               │           ├── CrmMemberPayload.java
    │                               │           ├── CrmReservationCloseDateTimeMutationResultPayload.java
    │                               │           ├── CrmReservationCloseDateTimesPayload.java
    │                               │           ├── CrmReservationPageablePayload.java
    │                               │           ├── CrmReservationPayload.java
    │                               │           ├── CrmSalesEventQuestionPageablePayload.java
    │                               │           ├── CrmSalesEventQuestionPayload.java
    │                               │           ├── CrmTicketPayload.java
    │                               │           ├── CrmTokenPayload.java
    │                               │           └── ThirdPartyTokenPayload.java
    │                               ├── ticket/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── CountPayload.java
    │                               │   │       ├── TicketPageablePayload.java
    │                               │   │       └── TicketPayload.java
    │                               │   └── usecase/
    │                               │       ├── TicketInquiryUseCase.java
    │                               │       ├── TicketUseCase.java
    │                               │       └── model/
    │                               │           ├── TicketRestorationInquiryPageablePayload.java
    │                               │           └── TicketRestorationInquiryPayload.java
    │                               ├── tosspayments/
    │                               │   └── model/
    │                               │       ├── TossPaymentsPaymentPayload.java
    │                               │       ├── TossPaymentsRegisterSellerRequestPayload.java
    │                               │       ├── TossPaymentsRegisterSellerSuccessPayload.java
    │                               │       ├── TossPaymentsSellerApiErrorPayload.java
    │                               │       └── TossPaymentsSellerResponsePayload.java
    │                               ├── translation/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       └── TranslatorPayload.java
    │                               │   └── usecase/
    │                               │       ├── MultiLanguageUseCase.java
    │                               │       └── TranslationUseCase.java
    │                               ├── treatment/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── TreatmentLibraryPageablePayload.java
    │                               │   │       ├── TreatmentLibraryPayload.java
    │                               │   │       ├── TreatmentPrinciplePageablePayload.java
    │                               │   │       └── TreatmentPrinciplePayload.java
    │                               │   └── usecase/
    │                               │       ├── TreatmentLibraryUseCase.java
    │                               │       ├── TreatmentPrincipleUseCase.java
    │                               │       ├── TreatmentUseCase.java
    │                               │       └── model/
    │                               │           ├── TreatmentPageablePayload.java
    │                               │           └── TreatmentPayload.java
    │                               ├── tv/
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       ├── CategoryTypeListPayload.java
    │                               │   │       ├── TvCategoryPayload.java
    │                               │   │       ├── TvHidePayload.java
    │                               │   │       └── TvReplyPageablePayload.java
    │                               │   └── usecase/
    │                               │       ├── TvUseCase.java
    │                               │       └── model/
    │                               │           ├── TvPageablePayload.java
    │                               │           ├── TvPayload.java
    │                               │           └── TvReplyPayload.java
    │                               ├── validator/
    │                               │   └── usecase/
    │                               │       └── ValidationUseCase.java
    │                               └── verify/
    │                                   └── usecase/
    │                                       └── VerificationUseCase.java
    ├── backend/
    │   └── src/
    │       └── main/
    │           └── java/
    │               └── kr/
    │                   └── co/
    │                       └── yeoshin/
    │                           └── backend/
    │                               ├── auth/
    │                               │   ├── component/
    │                               │   │   └── retrofit/
    │                               │   │       └── model/
    │                               │   │           ├── FacebookDebugTokenPayload.java
    │                               │   │           └── LineIdTokenPayload.java
    │                               │   └── usecase/
    │                               │       └── AuthUseCase.java
    │                               ├── board/
    │                               │   └── usecase/
    │                               │       ├── BannerUseCase.java
    │                               │       ├── PopupUseCase.java
    │                               │       ├── PromotionUseCase.java
    │                               │       └── ThemeUseCase.java
    │                               ├── braze/
    │                               │   └── usecase/
    │                               │       └── BrazeUseCase.java
    │                               ├── browser/
    │                               │   └── usecase/
    │                               │       └── BrowserUseCase.java
    │                               ├── callback/
    │                               │   └── usecase/
    │                               │       ├── IamPortUseCase.java
    │                               │       ├── KakaoUseCase.java
    │                               │       └── NhnUseCase.java
    │                               ├── cart/
    │                               │   └── usecase/
    │                               │       └── CartUseCase.java
    │                               ├── code/
    │                               │   └── usecase/
    │                               │       └── CodeUseCase.java
    │                               ├── common/
    │                               │   ├── component/
    │                               │   │   ├── GlobalCacheTemplate.java
    │                               │   │   ├── LocalCacheTemplate.java
    │                               │   │   ├── QueryTemplate.java
    │                               │   │   └── TransactionTemplate.java
    │                               │   ├── model/
    │                               │   │   └── api/
    │                               │   │       ├── payload/
    │                               │   │       │   ├── BoolPayload.java
    │                               │   │       │   ├── ListPayload.java
    │                               │   │       │   └── TemplatePayload.java
    │                               │   │       └── template/
    │                               │   │           ├── PaymentBenefitTemplate.java
    │                               │   │           ├── ReservationHospitalConfigTemplate.java
    │                               │   │           └── Template.java
    │                               │   └── stereotype/
    │                               │       └── UseCase.java
    │                               ├── config/
    │                               │   ├── messages/
    │                               │   │   └── LocaleMessageSourceTemplate.java
    │                               │   ├── security/
    │                               │   │   └── oauth/
    │                               │   │       └── registration/
    │                               │   │           └── OAuthClientRegistrationRepository.java
    │                               │   └── webclient/
    │                               │       └── WebClientTemplate.java
    │                               ├── coupon/
    │                               │   └── usecase/
    │                               │       └── CouponUseCase.java
    │                               ├── domain/
    │                               │   └── usecase/
    │                               │       └── DomainUseCase.java
    │                               ├── explorer/
    │                               │   └── usecase/
    │                               │       └── ExplorerUseCase.java
    │                               ├── face/
    │                               │   ├── component/
    │                               │   │   └── model/
    │                               │   │       ├── assistant/
    │                               │   │       │   └── AssistantThreadPayload.java
    │                               │   │       ├── message/
    │                               │   │       │   ├── MessagePayload.java
    │                               │   │       │   └── MessagesPayload.java
    │                               │   │       └── run/
    │                               │   │           └── RunPayload.java
    │                               │   └── usecase/
    │                               │       └── FaceAnalysisUseCase.java
    │                               ├── hospital/
    │                               │   └── usecase/
    │                               │       └── HospitalUseCase.java
    │                               ├── iamport/
    │                               │   └── component/
    │                               │       └── retrofit/
    │                               │           └── model/
    │                               │               ├── BillingKeyPayload.java
    │                               │               ├── CardPayload.java
    │                               │               ├── IdentificationPayload.java
    │                               │               ├── PaymentPayload.java
    │                               │               └── tosspayments/
    │                               │                   └── TossPaymentsPaymentPayload.java
    │                               ├── insurance/
    │                               │   └── usecase/
    │                               │       └── InsuranceUseCase.java
    │                               ├── interesting/
    │                               │   └── usecase/
    │                               │       └── InterestingUseCase.java
    │                               ├── like/
    │                               │   └── usecase/
    │                               │       └── LikeUseCase.java
    │                               ├── log/
    │                               │   └── usecase/
    │                               │       └── LogUseCase.java
    │                               ├── map/
    │                               │   └── usecase/
    │                               │       └── MapUseCase.java
    │                               ├── media/
    │                               │   ├── component/
    │                               │   │   ├── cdn/
    │                               │   │   │   └── CdnTemplate.java
    │                               │   │   └── template/
    │                               │   │       ├── MediaTemplate.java
    │                               │   │       └── S3Template.java
    │                               │   └── usecase/
    │                               │       └── MediaUseCase.java
    │                               ├── member/
    │                               │   └── usecase/
    │                               │       └── MemberUseCase.java
    │                               ├── meta/
    │                               │   └── usecase/
    │                               │       └── MetaUseCase.java
    │                               ├── notification/
    │                               │   ├── component/
    │                               │   │   ├── mapper/
    │                               │   │   │   ├── NotificationMailTemplate.java
    │                               │   │   │   ├── NotificationTemplate.java
    │                               │   │   │   └── model/
    │                               │   │   │       ├── MailAuthDormantAtTemplate.java
    │                               │   │   │       ├── MailOrderCompleteTemplate.java
    │                               │   │   │       ├── MailOrderTemplate.java
    │                               │   │   │       ├── MailProductTemplate.java
    │                               │   │   │       └── SmsTemplate.java
    │                               │   │   └── model/
    │                               │   │       ├── SlackBlockPayload.java
    │                               │   │       └── SmsTemplate.java
    │                               │   └── usecase/
    │                               │       └── NotificationUseCase.java
    │                               ├── order/
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── OrderCheckoutIamPortPayload.java
    │                               │   │       ├── OrderCheckoutMileagePayload.java
    │                               │   │       ├── OrderCheckoutSystemCashPayload.java
    │                               │   │       └── OrderSystemCheckoutPayload.java
    │                               │   └── usecase/
    │                               │       └── OrderUseCase.java
    │                               ├── payload/
    │                               │   ├── BanksPayload.java
    │                               │   ├── BannersPayload.java
    │                               │   ├── BrowserTemplatesPayload.java
    │                               │   ├── CartProductPayload.java
    │                               │   ├── CartProductsPayload.java
    │                               │   ├── ConsultationPageablePayload.java
    │                               │   ├── ConsultationPayload.java
    │                               │   ├── ConsultationsPayload.java
    │                               │   ├── CouponPayload.java
    │                               │   ├── CouponsPayload.java
    │                               │   ├── DomainStatusPayload.java
    │                               │   ├── DormantPayload.java
    │                               │   ├── EventQuestionAndAnswerShortsPayload.java
    │                               │   ├── ExplorerRankingTreatmentsPageablePayload.java
    │                               │   ├── ExplorerSearchableRadiusPayload.java
    │                               │   ├── ExplorerSearchableRankingCategoriesPayload.java
    │                               │   ├── FaceAnalysisReportPageablePayload.java
    │                               │   ├── FaceAnalysisReportPayload.java
    │                               │   ├── FaceAnalysisSalesEventsPayload.java
    │                               │   ├── FaceAnalysisStatusPayload.java
    │                               │   ├── FaqsPayload.java
    │                               │   ├── HospitalAdditionAnesthesiaPayload.java
    │                               │   ├── HospitalDateSchedulesPayload.java
    │                               │   ├── HospitalDateTimeSchedulesPayload.java
    │                               │   ├── HospitalDoctorPayload.java
    │                               │   ├── HospitalDoctorsPayload.java
    │                               │   ├── HospitalImagesPayload.java
    │                               │   ├── HospitalPageablePayload.java
    │                               │   ├── HospitalPayload.java
    │                               │   ├── HospitalReservationConfigPayload.java
    │                               │   ├── HospitalShortPayload.java
    │                               │   ├── HospitalShortsPageablePayload.java
    │                               │   ├── HospitalShortsPayload.java
    │                               │   ├── HospitalTreatmentGuidesPayload.java
    │                               │   ├── HospitalTvsPayload.java
    │                               │   ├── IamportPaymentStatusPayload.java
    │                               │   ├── InitializationPayload.java
    │                               │   ├── InsuranceTreatmentPayload.java
    │                               │   ├── InterestingPayload.java
    │                               │   ├── InterestingPropertyPayload.java
    │                               │   ├── MapHospitalClusterPayload.java
    │                               │   ├── MapPlacesPayload.java
    │                               │   ├── MapSearchableHospitalClusterPayload.java
    │                               │   ├── MediaEndpointPayload.java
    │                               │   ├── MediaImageUploadPayload.java
    │                               │   ├── MediaJobStatusPayload.java
    │                               │   ├── MediaJobTaskPayload.java
    │                               │   ├── MediaSignaturesPayload.java
    │                               │   ├── MemberAccountPayload.java
    │                               │   ├── MemberAccountsPayload.java
    │                               │   ├── MemberLevelPayload.java
    │                               │   ├── MemberLevelStatPayload.java
    │                               │   ├── MemberReportPageablePayload.java
    │                               │   ├── MemberServiceStatPayload.java
    │                               │   ├── MemberServiceSummaryPayload.java
    │                               │   ├── MetaPayload.java
    │                               │   ├── NotificationConfigsPayload.java
    │                               │   ├── NotificationPayload.java
    │                               │   ├── NotificationsPayload.java
    │                               │   ├── OAuthRegistrationPayload.java
    │                               │   ├── OrderPurchasePayload.java
    │                               │   ├── OrderReceiptCancelPayload.java
    │                               │   ├── OrderReceiptPayload.java
    │                               │   ├── OrderReceiptsPageablePayload.java
    │                               │   ├── OrderSheetConfigPayload.java
    │                               │   ├── OrderStatusPayload.java
    │                               │   ├── PaymentCardPayload.java
    │                               │   ├── PaymentCardSecretPayload.java
    │                               │   ├── PlacePropertiesPayload.java
    │                               │   ├── PlacesPayload.java
    │                               │   ├── PointCompositionPageablePayload.java
    │                               │   ├── PointPageablePayload.java
    │                               │   ├── PointPayload.java
    │                               │   ├── PointsPayload.java
    │                               │   ├── PopupsPayload.java
    │                               │   ├── PreliminaryQuestionnairesPayload.java
    │                               │   ├── ProfilePayload.java
    │                               │   ├── PromotionApplyPayload.java
    │                               │   ├── PromotionApplyableRewardGroupPayload.java
    │                               │   ├── PromotionParticipationsPayload.java
    │                               │   ├── PromotionPayload.java
    │                               │   ├── PromotionReplyPageablePayload.java
    │                               │   ├── PromotionReplyPayload.java
    │                               │   ├── PromotionReplyableRewardGroupPayload.java
    │                               │   ├── PromotionRewardPayload.java
    │                               │   ├── PromotionsPayload.java
    │                               │   ├── QuestAttendancePayload.java
    │                               │   ├── QuestAttendancesPayload.java
    │                               │   ├── QuestKingOfInvitationPayload.java
    │                               │   ├── QuestsPayload.java
    │                               │   ├── RecommendBySolutionTagsPayload.java
    │                               │   ├── RecommendThemesPayload.java
    │                               │   ├── RecommendTreatmentCounselingsPayload.java
    │                               │   ├── RecommendTreatmentReviewsPayload.java
    │                               │   ├── ReservationPageablePayload.java
    │                               │   ├── ReservationPayload.java
    │                               │   ├── ReservationsPayload.java
    │                               │   ├── SalesEventPageablePayload.java
    │                               │   ├── SalesEventPayload.java
    │                               │   ├── SalesEventQuestionAndAnswerPageablePayload.java
    │                               │   ├── SalesEventSearchablePayload.java
    │                               │   ├── SalesEventUsagePageablePayload.java
    │                               │   ├── SalesEventViewPayload.java
    │                               │   ├── SalesEventsPageablePayload.java
    │                               │   ├── SalesEventsPayload.java
    │                               │   ├── SalesEventsRelatedTvPayload.java
    │                               │   ├── SalesProductPayload.java
    │                               │   ├── ScrapCountsPayload.java
    │                               │   ├── SearchKeywordsPayload.java
    │                               │   ├── SearchKeywordsRankingPayload.java
    │                               │   ├── ShareCodePayload.java
    │                               │   ├── ShareUrlPayload.java
    │                               │   ├── SignInPayload.java
    │                               │   ├── SignInTempPayload.java
    │                               │   ├── SignUpPayload.java
    │                               │   ├── SkinTagPayload.java
    │                               │   ├── SkinTagsPayload.java
    │                               │   ├── SystemCashBankAccountsPayload.java
    │                               │   ├── SystemCashPageablePayload.java
    │                               │   ├── SystemCashPayload.java
    │                               │   ├── SystemCashRefundStatusPayload.java
    │                               │   ├── SystemCashRefundStatusesPayload.java
    │                               │   ├── SystemCashRefundablePayload.java
    │                               │   ├── SystemCashResultPayload.java
    │                               │   ├── TermsAgreementsPayload.java
    │                               │   ├── TermsPayload.java
    │                               │   ├── ThemePayload.java
    │                               │   ├── ThemeShortPageablePayload.java
    │                               │   ├── TicketCountPayload.java
    │                               │   ├── TicketPayload.java
    │                               │   ├── TicketsGroupHospitalViewPayload.java
    │                               │   ├── TicketsPageablePayload.java
    │                               │   ├── TicketsPayload.java
    │                               │   ├── TokenCreatePayload.java
    │                               │   ├── TokenPayload.java
    │                               │   ├── TreatmentFocusTvsPayload.java
    │                               │   ├── TreatmentLibrariesPayload.java
    │                               │   ├── TreatmentReviewPayload.java
    │                               │   ├── TreatmentReviewSearchableCategoriesPayload.java
    │                               │   ├── TreatmentReviewShortsPayload.java
    │                               │   ├── TreatmentReviewSourcePayload.java
    │                               │   ├── TreatmentReviewSummaryPayload.java
    │                               │   ├── TreatmentReviewsByMePageablePayload.java
    │                               │   ├── TreatmentReviewsPageablePayload.java
    │                               │   ├── TreatmentReviewsPayload.java
    │                               │   ├── TreatmentReviewsWritableCountPayload.java
    │                               │   ├── TreatmentReviewsWritablePayload.java
    │                               │   ├── TreatmentsPayload.java
    │                               │   ├── TroubleCategoryTagPayload.java
    │                               │   ├── TroubleCategoryTagsPayload.java
    │                               │   ├── TvCategoriesPayload.java
    │                               │   ├── TvPageablePayload.java
    │                               │   ├── TvPayload.java
    │                               │   ├── TvRepliesPageablePayload.java
    │                               │   ├── TvReplyPayload.java
    │                               │   ├── TvsPayload.java
    │                               │   ├── VerificationDanalIdentitySecretPayload.java
    │                               │   ├── VerificationNiceIdentityPayload.java
    │                               │   ├── VerificationNiceIdentitySecretPayload.java
    │                               │   ├── WeatherPayload.java
    │                               │   └── template/
    │                               │       ├── AppConfigTemplate.java
    │                               │       ├── AppVersionTemplate.java
    │                               │       ├── BankAccountTemplate.java
    │                               │       ├── BankTemplate.java
    │                               │       ├── BannerTemplate.java
    │                               │       ├── BrowserTemplate.java
    │                               │       ├── CardGroupTemplate.java
    │                               │       ├── CardTemplate.java
    │                               │       ├── CartProductTemplate.java
    │                               │       ├── CodeTemplate.java
    │                               │       ├── ContentConcealTemplate.java
    │                               │       ├── CountTemplate.java
    │                               │       ├── CouponIssueConditionTemplate.java
    │                               │       ├── CouponTemplate.java
    │                               │       ├── DateTimeRangeTemplate.java
    │                               │       ├── DomainTemplate.java
    │                               │       ├── ExplorerSearchCategoryTemplate.java
    │                               │       ├── FaceAnalysisReportTemplate.java
    │                               │       ├── HospitalAdditionAnesthesiaTemplate.java
    │                               │       ├── HospitalBadgeTemplate.java
    │                               │       ├── HospitalDoctorTemplate.java
    │                               │       ├── HospitalLocationTemplate.java
    │                               │       ├── HospitalMessengerTemplate.java
    │                               │       ├── HospitalOnboardTemplate.java
    │                               │       ├── HospitalOperationTimeTemplate.java
    │                               │       ├── HospitalPartnershipTemplate.java
    │                               │       ├── HospitalScrapTemplate.java
    │                               │       ├── HospitalStatTemplate.java
    │                               │       ├── HospitalSubjectTemplate.java
    │                               │       ├── HospitalTemplate.java
    │                               │       ├── HospitalTreatmentGuideTemplate.java
    │                               │       ├── HtmlTemplate.java
    │                               │       ├── IamportPaymentStatusTemplate.java
    │                               │       ├── ImageTemplate.java
    │                               │       ├── LevelTemplate.java
    │                               │       ├── MapClusterTemplate.java
    │                               │       ├── MapPlaceTemplate.java
    │                               │       ├── MemberAccountTemplate.java
    │                               │       ├── MemberLevelRewardTemplate.java
    │                               │       ├── MemberLevelTemplate.java
    │                               │       ├── MemberProfileTemplate.java
    │                               │       ├── MemberReportTemplate.java
    │                               │       ├── MemberServiceStatTemplate.java
    │                               │       ├── MemberServiceStatTicketLogTemplate.java
    │                               │       ├── MemberServiceSummaryTemplate.java
    │                               │       ├── MemberSkinTypeTemplate.java
    │                               │       ├── MemberTemplate.java
    │                               │       ├── MileageCouponDiscountableTemplate.java
    │                               │       ├── MileageDiscountableTemplate.java
    │                               │       ├── NotificationTemplate.java
    │                               │       ├── NumberTemplate.java
    │                               │       ├── OperationTimeTemplate.java
    │                               │       ├── OrderCancelTemplate.java
    │                               │       ├── OrderDiscountableTemplate.java
    │                               │       ├── OrderMoneyReceiptTemplate.java
    │                               │       ├── OrderPaymentTemplate.java
    │                               │       ├── OrderProductTemplate.java
    │                               │       ├── OrderPurchaseTemplate.java
    │                               │       ├── OrderReceiptTemplate.java
    │                               │       ├── OrderTemplate.java
    │                               │       ├── PageableTemplate.java
    │                               │       ├── PaymentCardTemplate.java
    │                               │       ├── PlaceTemplate.java
    │                               │       ├── PointCompositionTemplate.java
    │                               │       ├── PointTemplate.java
    │                               │       ├── PopupTemplate.java
    │                               │       ├── PromotionParticipationTemplate.java
    │                               │       ├── PromotionReplyTemplate.java
    │                               │       ├── PromotionRewardGroupTemplate.java
    │                               │       ├── PromotionRewardTemplate.java
    │                               │       ├── PromotionTemplate.java
    │                               │       ├── PropertyTemplate.java
    │                               │       ├── QuestAttendanceTemplate.java
    │                               │       ├── QuestKingOfInvitationRankTemplate.java
    │                               │       ├── QuestRewardTemplate.java
    │                               │       ├── QuestTemplate.java
    │                               │       ├── QuestionReplyTemplate.java
    │                               │       ├── QuestionTemplate.java
    │                               │       ├── RangeTemplate.java
    │                               │       ├── RankingTemplate.java
    │                               │       ├── RecommendBySolutionTagTemplate.java
    │                               │       ├── ReservationShortTemplate.java
    │                               │       ├── ReservationTemplate.java
    │                               │       ├── SalesEventBadgeTemplate.java
    │                               │       ├── SalesEventConsultationTemplate.java
    │                               │       ├── SalesEventLibraryTemplate.java
    │                               │       ├── SalesEventScrapTemplate.java
    │                               │       ├── SalesEventSearchFallbackTemplate.java
    │                               │       ├── SalesEventStatTemplate.java
    │                               │       ├── SalesEventTemplate.java
    │                               │       ├── SalesEventUsageTemplate.java
    │                               │       ├── SalesProductTemplate.java
    │                               │       ├── SplashTemplate.java
    │                               │       ├── SystemCashRefundStatusTemplate.java
    │                               │       ├── SystemCashRefundTemplate.java
    │                               │       ├── SystemCashTemplate.java
    │                               │       ├── TermsAgreementTemplate.java
    │                               │       ├── TermsTemplate.java
    │                               │       ├── TextIconTemplate.java
    │                               │       ├── TextTemplate.java
    │                               │       ├── ThemeShortTemplate.java
    │                               │       ├── ThemeTemplate.java
    │                               │       ├── ThemeTreatmentsTemplate.java
    │                               │       ├── TicketGroupHospitalViewTemplate.java
    │                               │       ├── TicketTemplate.java
    │                               │       ├── TimeRangeTemplate.java
    │                               │       ├── TreatmentFocusTvTemplate.java
    │                               │       ├── TreatmentLibraryTemplate.java
    │                               │       ├── TreatmentReviewAttributeTemplate.java
    │                               │       ├── TreatmentReviewConfirmTemplate.java
    │                               │       ├── TreatmentReviewHospitalCommentTemplate.java
    │                               │       ├── TreatmentReviewLikeTemplate.java
    │                               │       ├── TreatmentReviewRewardTemplate.java
    │                               │       ├── TreatmentReviewScrapTemplate.java
    │                               │       ├── TreatmentReviewShortTemplate.java
    │                               │       ├── TreatmentReviewStatTemplate.java
    │                               │       ├── TreatmentReviewTemplate.java
    │                               │       ├── TreatmentReviewsWritableTemplate.java
    │                               │       ├── TreatmentStatTemplate.java
    │                               │       ├── TroubleCategoryTemplate.java
    │                               │       ├── TvLikeTemplate.java
    │                               │       ├── TvReplyTemplate.java
    │                               │       ├── TvScrapTemplate.java
    │                               │       ├── TvStatTemplate.java
    │                               │       ├── TvTemplate.java
    │                               │       ├── UrlTemplate.java
    │                               │       ├── WeatherConfigTemplate.java
    │                               │       └── WeatherTemplate.java
    │                               ├── payment/
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── PaymentRefundAccountPayload.java
    │                               │   │       ├── PaymentSystemCashHistoryPayload.java
    │                               │   │       ├── PaymentSystemCashPayload.java
    │                               │   │       ├── PaymentSystemCashRefundPayload.java
    │                               │   │       └── PaymentSystemEasyCheckoutsPayload.java
    │                               │   └── usecase/
    │                               │       ├── PaymentUseCase.java
    │                               │       └── model/
    │                               │           └── PaymentBenefitsPayload.java
    │                               ├── point/
    │                               │   └── usecase/
    │                               │       └── MemberPointUseCase.java
    │                               ├── quest/
    │                               │   └── usecase/
    │                               │       └── QuestUseCase.java
    │                               ├── queue/
    │                               │   ├── component/
    │                               │   │   └── publisher/
    │                               │   │       ├── MessagePublisherTemplate.java
    │                               │   │       └── QueueMessagePublisherTemplate.java
    │                               │   ├── model/
    │                               │   │   ├── accesslog/
    │                               │   │   │   └── AccessLogPayload.java
    │                               │   │   ├── bilog/
    │                               │   │   │   └── BiLogPayload.java
    │                               │   │   ├── cpm/
    │                               │   │   │   └── CpmPayload.java
    │                               │   │   ├── domainevent/
    │                               │   │   │   └── DomainEventPayload.java
    │                               │   │   ├── domainlog/
    │                               │   │   │   ├── DomainLogPayload.java
    │                               │   │   │   ├── MonitoringReservationStatusLogPayload.java
    │                               │   │   │   └── ReservationCrmLogPayload.java
    │                               │   │   ├── notification/
    │                               │   │   │   └── NotificationPayload.java
    │                               │   │   ├── restriction/
    │                               │   │   │   ├── RestrictionPayload.java
    │                               │   │   │   └── model/
    │                               │   │   │       └── RestrictionGeoPositionUsagePayload.java
    │                               │   │   └── thirdparty/
    │                               │   │       └── ThirdPartyServicePayload.java
    │                               │   └── sender/
    │                               │       └── BigQuerySenderTemplate.java
    │                               ├── ratelimit/
    │                               │   └── model/
    │                               │       └── RateLimitRedisTemplate.java
    │                               ├── recommend/
    │                               │   └── usecase/
    │                               │       └── RecommendUseCase.java
    │                               ├── report/
    │                               │   └── usecase/
    │                               │       └── ReportUseCase.java
    │                               ├── reservation/
    │                               │   ├── component/
    │                               │   │   └── retrofit/
    │                               │   │       └── model/
    │                               │   │           ├── CrmIdPayload.java
    │                               │   │           ├── DoctorPayload.java
    │                               │   │           ├── HolidayPayload.java
    │                               │   │           ├── HospitalInformationPayload.java
    │                               │   │           ├── OperationTimePayload.java
    │                               │   │           └── ReservationPayload.java
    │                               │   └── usecase/
    │                               │       └── ReservationUseCase.java
    │                               ├── review/
    │                               │   └── usecase/
    │                               │       └── TreatmentReviewUseCase.java
    │                               ├── salesevent/
    │                               │   └── usecase/
    │                               │       └── SalesEventUseCase.java
    │                               ├── salesproduct/
    │                               │   └── usecase/
    │                               │       └── SalesProductUseCase.java
    │                               ├── scrap/
    │                               │   └── usecase/
    │                               │       └── ScrapUseCase.java
    │                               ├── search/
    │                               │   ├── component/
    │                               │   │   └── template/
    │                               │   │       ├── ElasticsearchLogSenderTemplate.java
    │                               │   │       ├── ElasticsearchSearchTemplate.java
    │                               │   │       └── SearchLogSenderTemplate.java
    │                               │   ├── repository/
    │                               │   │   └── SearchRepository.java
    │                               │   └── usecase/
    │                               │       └── SearchUseCase.java
    │                               ├── setting/
    │                               │   └── component/
    │                               │       └── SettingTemplate.java
    │                               ├── setup/
    │                               │   └── usecase/
    │                               │       └── SetupUseCase.java
    │                               ├── share/
    │                               │   └── usecase/
    │                               │       └── ShareUseCase.java
    │                               ├── systemcash/
    │                               │   └── usecase/
    │                               │       └── SystemCashUseCase.java
    │                               ├── terms/
    │                               │   └── usecase/
    │                               │       └── TermsUseCase.java
    │                               ├── thirdparty/
    │                               │   ├── fray/
    │                               │   │   ├── component/
    │                               │   │   │   └── model/
    │                               │   │   │       ├── FrayImageApiPayload.java
    │                               │   │   │       └── FrayImageApiRequestPayload.java
    │                               │   │   ├── controller/
    │                               │   │   │   └── model/
    │                               │   │   │       ├── CouponsPayload.java
    │                               │   │   │       ├── FrayHighDefinitionImagesRequestPayload.java
    │                               │   │   │       ├── FrayImagePageablePayload.java
    │                               │   │   │       ├── FrayImagePageableRequestPayload.java
    │                               │   │   │       ├── FrayMemberMappingResultPayload.java
    │                               │   │   │       ├── FrayRequestPayload.java
    │                               │   │   │       ├── MemberFrayAccountImageRequestPayload.java
    │                               │   │   │       └── MemberFrayImageRequestPayload.java
    │                               │   │   ├── model/
    │                               │   │   │   ├── FrayImageTemplate.java
    │                               │   │   │   └── FrayMemberTemplate.java
    │                               │   │   ├── service/
    │                               │   │   │   └── model/
    │                               │   │   │       ├── FrayGuestMemberPayload.java
    │                               │   │   │       └── FrayImagePayload.java
    │                               │   │   └── usecase/
    │                               │   │       ├── FrayUseCase.java
    │                               │   │       └── model/
    │                               │   │           ├── FrayGuestImagePayload.java
    │                               │   │           ├── FrayGuestImageRequestPayload.java
    │                               │   │           ├── FrayImagePayload.java
    │                               │   │           ├── FrayMemberAccountsPayload.java
    │                               │   │           ├── FrayMemberImagesPayload.java
    │                               │   │           └── MemberFrayAccountRequestPayload.java
    │                               │   ├── model/
    │                               │   │   └── ThirdPartyRequestPayload.java
    │                               │   └── usecase/
    │                               │       └── ThirdPartyUseCase.java
    │                               ├── ticket/
    │                               │   └── usecase/
    │                               │       └── TicketUseCase.java
    │                               ├── treatment/
    │                               │   └── usecase/
    │                               │       └── TreatmentUseCase.java
    │                               ├── tv/
    │                               │   └── usecase/
    │                               │       └── TvUseCase.java
    │                               ├── validator/
    │                               │   └── usecase/
    │                               │       └── ValidatorUseCase.java
    │                               ├── verify/
    │                               │   ├── controller/
    │                               │   │   └── model/
    │                               │   │       ├── EmailVerificationSendPayload.java
    │                               │   │       ├── SmsVerificationSendPayload.java
    │                               │   │       └── SmsVerificationSendTemplate.java
    │                               │   ├── service/
    │                               │   │   └── model/
    │                               │   │       └── VerificationProcessorTemplate.java
    │                               │   └── usecase/
    │                               │       └── VerificationUseCase.java
    │                               ├── weather/
    │                               │   ├── component/
    │                               │   │   └── model/
    │                               │   │       ├── accuweather/
    │                               │   │       │   └── GeoPositionSearchPayload.java
    │                               │   │       └── openweather/
    │                               │   │           ├── AirPollutionPayload.java
    │                               │   │           └── WeatherPayload.java
    │                               │   └── usecase/
    │                               │       └── WeatherUseCase.java
    │                               └── zendesk/
    │                                   └── usecase/
    │                                       └── ZenDeskUseCase.java
    └── common/
        └── src/
            └── main/
                └── java/
                    └── kr/
                        └── co/
                            └── yeoshin/
                                └── common/
                                    ├── administrator/
                                    │   └── repository/
                                    │       ├── AdminAccountRepository.java
                                    │       ├── AdminChiefDirectorRepository.java
                                    │       ├── AdminGroupAsAdminRepository.java
                                    │       ├── AdminGroupRepository.java
                                    │       ├── AdminRepository.java
                                    │       ├── AdminResignRepository.java
                                    │       ├── CustomAdminAccountRepository.java
                                    │       ├── CustomAdminGroupAsAdminRepository.java
                                    │       └── CustomAdminRepository.java
                                    ├── audit/
                                    │   └── repository/
                                    │       ├── AdminAuditRepository.java
                                    │       ├── CustomAdminAuditRepository.java
                                    │       ├── CustomJaversRepository.java
                                    │       └── InstantLogRepository.java
                                    ├── banner/
                                    │   └── repository/
                                    │       ├── BannerRepository.java
                                    │       └── CustomBannerRepository.java
                                    ├── board/
                                    │   └── repository/
                                    │       ├── AdminBoardCommentRepository.java
                                    │       ├── AdminBoardImageRepository.java
                                    │       ├── AdminBoardInfoBulletRepository.java
                                    │       ├── AdminBoardInfoRepository.java
                                    │       ├── AdminBoardRepository.java
                                    │       ├── AdminBoardViewLogRepository.java
                                    │       ├── AdminMemoAsJvCommitRepository.java
                                    │       ├── AdminMemoRepository.java
                                    │       ├── CustomAdminMemoRepository.java
                                    │       ├── CustomExplorerRankingCategoryRepository.java
                                    │       ├── CustomExplorerThemeAsTreatmentRepository.java
                                    │       ├── CustomExplorerThemeRepository.java
                                    │       ├── CustomExplorerThemeTreatmentAsTvRepository.java
                                    │       ├── CustomPromotionKakaoShareRepository.java
                                    │       ├── CustomPromotionParticipationConfigRepository.java
                                    │       ├── CustomPromotionParticipationRepository.java
                                    │       ├── CustomPromotionReplyRepository.java
                                    │       ├── CustomPromotionRepository.java
                                    │       ├── CustomPromotionRewardRepository.java
                                    │       ├── CustomTreatmentCounselingRepository.java
                                    │       ├── CustomTreatmentFocusRepository.java
                                    │       ├── ExplorerRankingCategoryRepository.java
                                    │       ├── ExplorerThemeAsTreatmentRepository.java
                                    │       ├── ExplorerThemeRepository.java
                                    │       ├── ExplorerThemeTreatmentAsTvRepository.java
                                    │       ├── FrontBoardCommentRepository.java
                                    │       ├── FrontBoardEventRepository.java
                                    │       ├── FrontBoardImageRepository.java
                                    │       ├── FrontBoardInfoRepository.java
                                    │       ├── FrontBoardRepository.java
                                    │       ├── MemberQuestionRepository.java
                                    │       ├── PartnershipQuestionRepository.java
                                    │       ├── PromotionAsSalesEventRepository.java
                                    │       ├── PromotionKakaoShareRepository.java
                                    │       ├── PromotionParticipationConfigRepository.java
                                    │       ├── PromotionParticipationQuestRepository.java
                                    │       ├── PromotionParticipationRepository.java
                                    │       ├── PromotionReplyRepository.java
                                    │       ├── PromotionRepository.java
                                    │       ├── PromotionRewardGroupRepository.java
                                    │       ├── PromotionRewardRepository.java
                                    │       ├── TreatmentCounselingFaqRepository.java
                                    │       ├── TreatmentCounselingRepository.java
                                    │       └── TreatmentFocusRepository.java
                                    ├── browser/
                                    │   ├── model/
                                    │   │   ├── BrowserCollectionTemplate.java
                                    │   │   ├── BrowserLibraryTemplate.java
                                    │   │   └── BrowserSegmentTemplate.java
                                    │   └── repository/
                                    │       ├── BrowserCollectionAsLibraryRepository.java
                                    │       ├── BrowserCollectionAsSegmentRepository.java
                                    │       ├── BrowserCollectionPublishLogRepository.java
                                    │       ├── BrowserCollectionPublishRepository.java
                                    │       ├── BrowserCollectionRepository.java
                                    │       ├── BrowserLibraryRepository.java
                                    │       ├── BrowserSegmentRepository.java
                                    │       ├── CustomBrowserCollectionAsLibraryRepository.java
                                    │       ├── CustomBrowserCollectionAsSegmentRepository.java
                                    │       ├── CustomBrowserCollectionPublishLogRepository.java
                                    │       ├── CustomBrowserCollectionPublishRepository.java
                                    │       ├── CustomBrowserCollectionRepository.java
                                    │       ├── CustomBrowserLibraryRepository.java
                                    │       └── CustomBrowserSegmentRepository.java
                                    ├── coupon/
                                    │   └── repository/
                                    │       ├── CouponIssueConditionRepository.java
                                    │       ├── CouponRepository.java
                                    │       ├── CustomMemberCouponRepository.java
                                    │       ├── CustomerCouponIssueConditionRepository.java
                                    │       ├── CustomerCouponRepository.java
                                    │       └── MemberCouponRepository.java
                                    ├── cpm/
                                    │   └── repository/
                                    │       ├── CpaAdReportHourlyRepository.java
                                    │       ├── CpmAdConfigRepository.java
                                    │       ├── CpmAdGuidanceReportRepository.java
                                    │       ├── CpmAdHospitalReportDailyRepository.java
                                    │       ├── CpmAdReportDailyRepository.java
                                    │       ├── CpmAdReportHourlyRepository.java
                                    │       ├── CpmAdStatusLogRepository.java
                                    │       ├── CpmPaidAdPointStatusRepository.java
                                    │       ├── CpmSearchExperimentRepository.java
                                    │       ├── CpmSearchPriceRepository.java
                                    │       ├── CustomCpaAdReportHourlyRepository.java
                                    │       ├── CustomCpmAdConfigRepository.java
                                    │       ├── CustomCpmAdGuidanceReportRepository.java
                                    │       ├── CustomCpmAdHospitalReportDailyRepository.java
                                    │       ├── CustomCpmAdReportDailyRepository.java
                                    │       ├── CustomCpmAdReportHourlyRepository.java
                                    │       ├── CustomCpmAdStatusLogRepository.java
                                    │       ├── CustomCpmPaidAdPointStatusRepository.java
                                    │       └── CustomCpmSearchExperimentRepository.java
                                    ├── dictionary/
                                    │   └── repository/
                                    │       ├── CustomRecommendRankingKeywordRepository.java
                                    │       ├── CustomSearchDictionaryRepository.java
                                    │       ├── CustomTabooDictionaryRepository.java
                                    │       ├── RecommendRankingKeywordRepository.java
                                    │       ├── SearchDictionaryRepository.java
                                    │       └── TabooDictionaryRepository.java
                                    ├── face/
                                    │   └── repository/
                                    │       ├── CustomFaceAnalysisReportRepository.java
                                    │       ├── FaceAnalysisReportAsSolutionTagRepository.java
                                    │       └── FaceAnalysisReportRepository.java
                                    ├── fray/
                                    │   └── repository/
                                    │       ├── CustomFrayImageRepository.java
                                    │       ├── CustomFrayMemberRepository.java
                                    │       ├── FrayImageRepository.java
                                    │       └── FrayMemberRepository.java
                                    ├── health/
                                    │   └── repository/
                                    │       └── HealthRepository.java
                                    ├── hospital/
                                    │   └── repository/
                                    │       ├── BadgeRepository.java
                                    │       ├── CustomBadgeRepository.java
                                    │       ├── CustomHospitalAsBadgeRepository.java
                                    │       ├── CustomHospitalAsHospitalDepartmentRepository.java
                                    │       ├── CustomHospitalAsHospitalDoctorRepository.java
                                    │       ├── CustomHospitalAsHospitalTreatmentRepository.java
                                    │       ├── CustomHospitalAsTreatmentPrincipleRepository.java
                                    │       ├── CustomHospitalDepartmentAsHospitalTreatmentRepository.java
                                    │       ├── CustomHospitalDepartmentAsTreatmentRepository.java
                                    │       ├── CustomHospitalDepartmentRepository.java
                                    │       ├── CustomHospitalDoctorApprovalRepository.java
                                    │       ├── CustomHospitalDoctorAsHospitalDepartmentRepository.java
                                    │       ├── CustomHospitalDoctorAsHospitalTreatmentRepository.java
                                    │       ├── CustomHospitalDoctorRepository.java
                                    │       ├── CustomHospitalManagementContactRepository.java
                                    │       ├── CustomHospitalOfflineUpsellRepository.java
                                    │       ├── CustomHospitalOnboardMemberRepository.java
                                    │       ├── CustomHospitalOnboardRepository.java
                                    │       ├── CustomHospitalRepository.java
                                    │       ├── CustomHospitalScrapRepository.java
                                    │       ├── CustomHospitalStatRepository.java
                                    │       ├── CustomHospitalSuggestRepository.java
                                    │       ├── CustomHospitalTreatmentGuideRepository.java
                                    │       ├── CustomHospitalTreatmentRepository.java
                                    │       ├── HospitalAdditionalInfoRepository.java
                                    │       ├── HospitalAsBadgeRepository.java
                                    │       ├── HospitalAsHospitalDepartmentRepository.java
                                    │       ├── HospitalAsHospitalDoctorRepository.java
                                    │       ├── HospitalAsHospitalTreatmentRepository.java
                                    │       ├── HospitalAsTreatmentPrincipleRepository.java
                                    │       ├── HospitalConfigRepository.java
                                    │       ├── HospitalDepartmentAsHospitalTreatmentRepository.java
                                    │       ├── HospitalDepartmentAsTreatmentRepository.java
                                    │       ├── HospitalDepartmentRepository.java
                                    │       ├── HospitalDepartmentStatRepository.java
                                    │       ├── HospitalDoctorApprovalRepository.java
                                    │       ├── HospitalDoctorAsHospitalDepartmentRepository.java
                                    │       ├── HospitalDoctorAsHospitalTreatmentRepository.java
                                    │       ├── HospitalDoctorRepository.java
                                    │       ├── HospitalImageRepository.java
                                    │       ├── HospitalKahfRepository.java
                                    │       ├── HospitalManagementContactRepository.java
                                    │       ├── HospitalMessengerRepository.java
                                    │       ├── HospitalOfflineUpsellRepository.java
                                    │       ├── HospitalOnboardMemberRepository.java
                                    │       ├── HospitalOnboardRepository.java
                                    │       ├── HospitalOnboardVersionRepository.java
                                    │       ├── HospitalPartnershipRepository.java
                                    │       ├── HospitalRepository.java
                                    │       ├── HospitalScrapRepository.java
                                    │       ├── HospitalStatRepository.java
                                    │       ├── HospitalSuggestRepository.java
                                    │       ├── HospitalTreatmentGuideRepository.java
                                    │       ├── HospitalTreatmentRepository.java
                                    │       └── HospitalTreatmentStatRepository.java
                                    ├── inquiry/
                                    │   └── repository/
                                    │       └── InquiryHospitalEntryRepository.java
                                    ├── insurance/
                                    │   └── repository/
                                    │       ├── CustomInsuranceRelationRepository.java
                                    │       ├── InsuranceClaimRepository.java
                                    │       └── InsuranceRelationRepository.java
                                    ├── interesting/
                                    │   └── repository/
                                    │       └── InterestingRepository.java
                                    ├── ip/
                                    │   └── repository/
                                    │       ├── CountryIpRepository.java
                                    │       └── CustomCountryIpRepository.java
                                    ├── media/
                                    │   └── repository/
                                    │       ├── CustomMediaStatusRepository.java
                                    │       └── MediaStatusRepository.java
                                    ├── member/
                                    │   └── repository/
                                    │       ├── BlacklistMemberRepository.java
                                    │       ├── CustomBlacklistMemberRepository.java
                                    │       ├── CustomDormantMemberRepository.java
                                    │       ├── CustomMemberAccountRepository.java
                                    │       ├── CustomMemberLevelRepository.java
                                    │       ├── CustomMemberLevelRewardRepository.java
                                    │       ├── CustomMemberMigrationMappingLogRepository.java
                                    │       ├── CustomMemberRepository.java
                                    │       ├── CustomMemberResignRepository.java
                                    │       ├── CustomMemberSearchKeywordRepository.java
                                    │       ├── CustomMemberServiceStatRepository.java
                                    │       ├── CustomMemberServiceStatTicketLogRepository.java
                                    │       ├── CustomMemberServiceSummaryRepository.java
                                    │       ├── CustomMemberTermsAgreeLogRepository.java
                                    │       ├── DormantMemberRepository.java
                                    │       ├── MemberAccountRepository.java
                                    │       ├── MemberDomainLatestStatusRepository.java
                                    │       ├── MemberLevelRepository.java
                                    │       ├── MemberLevelRewardRepository.java
                                    │       ├── MemberMigrationMappingLogRepository.java
                                    │       ├── MemberRepository.java
                                    │       ├── MemberResignLogRepository.java
                                    │       ├── MemberResignRepository.java
                                    │       ├── MemberSalesEventViewRepository.java
                                    │       ├── MemberSearchKeywordRepository.java
                                    │       ├── MemberServiceStatRepository.java
                                    │       ├── MemberServiceStatTicketLogRepository.java
                                    │       ├── MemberServiceSummaryRepository.java
                                    │       ├── MemberSignInLogRepository.java
                                    │       └── MemberTermsAgreeLogRepository.java
                                    ├── monitoring/
                                    │   └── repository/
                                    │       └── MonitoringSalesEventViewRepository.java
                                    ├── notification/
                                    │   └── repository/
                                    │       ├── CustomNotificationRepository.java
                                    │       ├── CustomNotificationSalesEventConsultationRepository.java
                                    │       ├── HospitalPeriodicalNotificationRepository.java
                                    │       ├── NotificationBoxRepository.java
                                    │       ├── NotificationConfigRepository.java
                                    │       ├── NotificationFallbackRepository.java
                                    │       ├── NotificationHospitalOnboardCompleteRepository.java
                                    │       ├── NotificationMemberStatusRepository.java
                                    │       ├── NotificationPrivateInfoUsageRepository.java
                                    │       ├── NotificationRepository.java
                                    │       ├── NotificationSalesEventConsultationRepository.java
                                    │       ├── NotificationWhitelistRepository.java
                                    │       └── SlackIdManagementRepository.java
                                    ├── openai/
                                    │   └── repository/
                                    │       ├── CustomOpenAiAssistantStatusRepository.java
                                    │       ├── OpenAiAssistantConfigRepository.java
                                    │       └── OpenAiAssistantStatusRepository.java
                                    ├── payment/
                                    │   └── repository/
                                    │       ├── CartRepository.java
                                    │       ├── CustomCartRepository.java
                                    │       ├── CustomOrderRepository.java
                                    │       ├── CustomOrderSalesProductRepository.java
                                    │       ├── CustomPaymentAllatRepository.java
                                    │       ├── CustomPaymentBenefitRepository.java
                                    │       ├── CustomPaymentCouponRepository.java
                                    │       ├── CustomPaymentIamportRepository.java
                                    │       ├── CustomPaymentKcpRepository.java
                                    │       ├── CustomPaymentNicepayRepository.java
                                    │       ├── CustomSystemCashRefundStatusRepository.java
                                    │       ├── CustomSystemCashRepository.java
                                    │       ├── CustomSystemCashSummaryRepository.java
                                    │       ├── CustomSystemCashVoucherConfigRepository.java
                                    │       ├── CustomSystemCashVoucherQueryRepository.java
                                    │       ├── CustomSystemCashVoucherRepository.java
                                    │       ├── CustomTicketRestorationInquiryRepository.java
                                    │       ├── CustomTicketTrashRepository.java
                                    │       ├── CustomerPaymentCardRepository.java
                                    │       ├── CustomerPaymentSystemCashCheckoutRepository.java
                                    │       ├── CustomerPaymentSystemEasyCheckoutRepository.java
                                    │       ├── CustomerRefundAccountRepository.java
                                    │       ├── CustomerTicketRepository.java
                                    │       ├── GiftOrderRepository.java
                                    │       ├── MoneyReceiptLogRepository.java
                                    │       ├── OrderPartCancelRepository.java
                                    │       ├── OrderPartCancelTicketRepository.java
                                    │       ├── OrderRefundBankAccountRepository.java
                                    │       ├── OrderRepository.java
                                    │       ├── OrderSalesProductRepository.java
                                    │       ├── OrderSheetConfigRepository.java
                                    │       ├── PaymentAllatRepository.java
                                    │       ├── PaymentBenefitRepository.java
                                    │       ├── PaymentCardRepository.java
                                    │       ├── PaymentCouponRepository.java
                                    │       ├── PaymentFailureRepository.java
                                    │       ├── PaymentIamportRepository.java
                                    │       ├── PaymentKcpRepository.java
                                    │       ├── PaymentLogRepository.java
                                    │       ├── PaymentNicepayConfigRepository.java
                                    │       ├── PaymentNicepayRemittanceRepository.java
                                    │       ├── PaymentNicepayRepository.java
                                    │       ├── PaymentPgRepository.java
                                    │       ├── PaymentRepository.java
                                    │       ├── PaymentSystemCashCheckoutRepository.java
                                    │       ├── PaymentSystemEasyCheckoutRepository.java
                                    │       ├── PaymentVirtualBankRepository.java
                                    │       ├── RefundAccountRepository.java
                                    │       ├── SystemCashDailyReportRepository.java
                                    │       ├── SystemCashRefundAccountRepository.java
                                    │       ├── SystemCashRefundStatusRepository.java
                                    │       ├── SystemCashRepository.java
                                    │       ├── SystemCashSummaryRepository.java
                                    │       ├── SystemCashVoucherConfigRepository.java
                                    │       ├── SystemCashVoucherExtraBenefitRepository.java
                                    │       ├── SystemCashVoucherPartnershipRepository.java
                                    │       ├── SystemCashVoucherRepository.java
                                    │       ├── TicketRepository.java
                                    │       ├── TicketRestorationInquiryRepository.java
                                    │       ├── TicketTrashRepository.java
                                    │       └── VerificationCheckoutSecretRepository.java
                                    ├── permission/
                                    │   ├── hospital/
                                    │   │   └── repository/
                                    │   │       ├── CustomHospitalRolePermissionRepository.java
                                    │   │       └── HospitalRolePermissionRepository.java
                                    │   ├── resource/
                                    │   │   └── repository/
                                    │   │       ├── CustomResourceRepository.java
                                    │   │       ├── ResourceAsRoleRepository.java
                                    │   │       └── ResourceRepository.java
                                    │   └── role/
                                    │       └── repository/
                                    │           ├── CustomRoleRepository.java
                                    │           ├── RoleHierarchyRepository.java
                                    │           └── RoleRepository.java
                                    ├── point/
                                    │   └── repository/
                                    │       ├── AdPointProductRepository.java
                                    │       ├── AdPointRepository.java
                                    │       ├── AdPointSummaryRepository.java
                                    │       ├── CustomAdPointProductRepository.java
                                    │       ├── CustomAdPointRepository.java
                                    │       ├── CustomAdPointSummaryRepository.java
                                    │       ├── CustomMemberPointCompositionRepository.java
                                    │       ├── CustomMemberPointRepository.java
                                    │       ├── CustomMemberPointSummaryRepository.java
                                    │       ├── CustomOrderAdPointProductRepository.java
                                    │       ├── MemberPointCompositionRepository.java
                                    │       ├── MemberPointRepository.java
                                    │       ├── MemberPointSpecRepository.java
                                    │       ├── MemberPointSummaryRepository.java
                                    │       └── OrderAdPointProductRepository.java
                                    ├── popup/
                                    │   └── repository/
                                    │       ├── CustomPopupRepository.java
                                    │       └── PopupRepository.java
                                    ├── product/
                                    │   ├── model/
                                    │   │   ├── AttributeTypeDescriptionPayload.java
                                    │   │   └── InjectableMedicinePayload.java
                                    │   └── repository/
                                    │       ├── CustomSalesEventConsultationAsHospitalDoctorRepository.java
                                    │       ├── CustomSalesEventConsultationAsSalesProductVersionRepository.java
                                    │       ├── CustomSalesEventConsultationPaidStatusLogRepository.java
                                    │       ├── CustomSalesEventConsultationRepository.java
                                    │       ├── CustomSalesEventCpmRepository.java
                                    │       ├── CustomSalesEventImageRepository.java
                                    │       ├── CustomSalesEventRepository.java
                                    │       ├── CustomSalesEventRequestRepository.java
                                    │       ├── CustomSalesEventScrapRepository.java
                                    │       ├── CustomSalesEventStatRepository.java
                                    │       ├── CustomSalesEventUsageApprovalRepository.java
                                    │       ├── CustomSalesEventUsageAsTreatmentMethodTagRepository.java
                                    │       ├── CustomSalesEventUsageRepository.java
                                    │       ├── CustomSalesProductAsTreatmentRepository.java
                                    │       ├── CustomSalesProductRepository.java
                                    │       ├── CustomSalesProductVersionRepository.java
                                    │       ├── CustomTreatmentLibraryRepository.java
                                    │       ├── CustomTreatmentPrincipleDetailRepository.java
                                    │       ├── CustomTreatmentPrincipleRepository.java
                                    │       ├── CustomTreatmentPrincipleUsageRepository.java
                                    │       ├── CustomTreatmentRepository.java
                                    │       ├── SalesEventBulkCommissionRepository.java
                                    │       ├── SalesEventCommissionRepository.java
                                    │       ├── SalesEventCommissionTempSaveRepository.java
                                    │       ├── SalesEventConsultationAsHospitalDoctorRepository.java
                                    │       ├── SalesEventConsultationAsSalesProductVersionRepository.java
                                    │       ├── SalesEventConsultationConfigRepository.java
                                    │       ├── SalesEventConsultationPaidStatusLogRepository.java
                                    │       ├── SalesEventConsultationPriceTagRepository.java
                                    │       ├── SalesEventConsultationRepository.java
                                    │       ├── SalesEventConsultationStatusLogRepository.java
                                    │       ├── SalesEventCpmRepository.java
                                    │       ├── SalesEventDetailCommissionRepository.java
                                    │       ├── SalesEventHospitalCommissionRepository.java
                                    │       ├── SalesEventImageRepository.java
                                    │       ├── SalesEventRepository.java
                                    │       ├── SalesEventScrapRepository.java
                                    │       ├── SalesEventStatRepository.java
                                    │       ├── SalesEventSystemCommissionRepository.java
                                    │       ├── SalesEventTreatmentLibraryRepository.java
                                    │       ├── SalesEventUsageApprovalRepository.java
                                    │       ├── SalesEventUsageAsTreatmentMethodTagRepository.java
                                    │       ├── SalesEventUsageImageRepository.java
                                    │       ├── SalesEventUsageRepository.java
                                    │       ├── SalesProductAsTreatmentRepository.java
                                    │       ├── SalesProductRepository.java
                                    │       ├── SalesProductTagRepository.java
                                    │       ├── SalesProductVersionRepository.java
                                    │       ├── SolutionTagRepository.java
                                    │       ├── TreatmentAsSolutionTagRepository.java
                                    │       ├── TreatmentAsTreatmentMethodTagRepository.java
                                    │       ├── TreatmentLibraryFaqRepository.java
                                    │       ├── TreatmentLibraryRepository.java
                                    │       ├── TreatmentMethodTagRepository.java
                                    │       ├── TreatmentPrincipleDetailRepository.java
                                    │       ├── TreatmentPrincipleRepository.java
                                    │       ├── TreatmentPrincipleUsageRepository.java
                                    │       ├── TreatmentRepository.java
                                    │       ├── TreatmentStatRepository.java
                                    │       ├── TroubleCategoryAsSolutionTagRepository.java
                                    │       └── TroubleCategoryRepository.java
                                    ├── quest/
                                    │   └── repository/
                                    │       ├── CustomQuestAttendanceRepository.java
                                    │       ├── CustomQuestKingOfInvitationRankRepository.java
                                    │       ├── CustomQuestKingOfInvitationRepository.java
                                    │       ├── CustomQuestTreatmentReviewLikeRepository.java
                                    │       ├── QuestAttendanceRepository.java
                                    │       ├── QuestBlacklistRepository.java
                                    │       ├── QuestFaceAnalysisRepository.java
                                    │       ├── QuestHospitalOnboardRepository.java
                                    │       ├── QuestInterestingRepository.java
                                    │       ├── QuestKingOfInvitationRankRepository.java
                                    │       ├── QuestKingOfInvitationRepository.java
                                    │       ├── QuestNotificationMarketingAgreeRepository.java
                                    │       ├── QuestNotificationMarketingDisturbTimeAgreeRepository.java
                                    │       ├── QuestPaymentSystemEasyCardRepository.java
                                    │       ├── QuestSalesEventQuestionRepository.java
                                    │       ├── QuestSummaryRepository.java
                                    │       ├── QuestTreatmentReviewLikeRepository.java
                                    │       └── QuestTvReplyRepository.java
                                    ├── ratelimit/
                                    │   └── repository/
                                    │       ├── CustomDomainActionAttemptRepository.java
                                    │       └── DomainActionAttemptRepository.java
                                    ├── recommend/
                                    │   └── repository/
                                    │       ├── CustomRecommendExplorerTreatmentAsSalesEventRepository.java
                                    │       ├── CustomRecommendExplorerTreatmentRepository.java
                                    │       ├── CustomRecommendKeepRepository.java
                                    │       ├── CustomRecommendSalesEventRepository.java
                                    │       ├── CustomRecommendSearchKeywordRepository.java
                                    │       ├── CustomRecommendTreatmentReviewAtHomeBestRepository.java
                                    │       ├── CustomRecommendTreatmentReviewAtHomeTroubleRepository.java
                                    │       ├── RecommendExplorerTreatmentAsSalesEventRepository.java
                                    │       ├── RecommendExplorerTreatmentRepository.java
                                    │       ├── RecommendExplorerVersionRepository.java
                                    │       ├── RecommendKeepRepository.java
                                    │       ├── RecommendSalesEventRepository.java
                                    │       ├── RecommendSalesEventVersionRepository.java
                                    │       ├── RecommendSearchKeywordRepository.java
                                    │       ├── RecommendSearchKeywordVersionRepository.java
                                    │       ├── RecommendTreatmentReviewAtHomeBestRepository.java
                                    │       └── RecommendTreatmentReviewAtHomeTroubleRepository.java
                                    ├── report/
                                    │   └── repository/
                                    │       ├── ContentReportRepository.java
                                    │       ├── CustomContentReportRepository.java
                                    │       ├── CustomMemberReportRepository.java
                                    │       └── MemberReportRepository.java
                                    ├── repository/
                                    │   └── ScrapCountRepository.java
                                    ├── reservation/
                                    │   └── repository/
                                    │       ├── CrmAsHospitalRepository.java
                                    │       ├── CrmDrPaletteConfigRepository.java
                                    │       ├── CrmLatestAccessRepository.java
                                    │       ├── CrmReservationActionLogRepository.java
                                    │       ├── CrmReservationCountRepository.java
                                    │       ├── CrmReservationRepository.java
                                    │       ├── CrmSmartDoctorCrmSalesProductRepository.java
                                    │       ├── CustomCrmAsHospitalRepository.java
                                    │       ├── CustomCrmReservationCountRepository.java
                                    │       ├── CustomCrmReservationRepository.java
                                    │       ├── CustomReservationAsWritableTreatmentReviewRepository.java
                                    │       ├── CustomReservationChangeLogRepository.java
                                    │       ├── CustomReservationCrmSyncHolidayRepository.java
                                    │       ├── CustomReservationDoctorRepository.java
                                    │       ├── CustomReservationLatestStatusRepository.java
                                    │       ├── CustomReservationRepository.java
                                    │       ├── CustomReservationStatusLogRepository.java
                                    │       ├── CustomReservationTemporaryOperationTimeRepository.java
                                    │       ├── CustomerReservationAsTicketRepository.java
                                    │       ├── HolidayRepository.java
                                    │       ├── MonitoringReservationStatusRepository.java
                                    │       ├── ReservationActionStatusRepository.java
                                    │       ├── ReservationAsTicketLogRepository.java
                                    │       ├── ReservationAsTicketRepository.java
                                    │       ├── ReservationAsWritableTreatmentReviewRepository.java
                                    │       ├── ReservationChangeLogRepository.java
                                    │       ├── ReservationCrmSyncHistoryRepository.java
                                    │       ├── ReservationCrmSyncHolidayRepository.java
                                    │       ├── ReservationDoctorRepository.java
                                    │       ├── ReservationHospitalConfigRepository.java
                                    │       ├── ReservationHospitalCrmInfoRepository.java
                                    │       ├── ReservationHospitalOperationInfoRepository.java
                                    │       ├── ReservationHospitalOperationTimeRepository.java
                                    │       ├── ReservationLatestStatusRepository.java
                                    │       ├── ReservationRepository.java
                                    │       ├── ReservationStatusLogRepository.java
                                    │       └── ReservationTemporaryOperationTimeRepository.java
                                    ├── restriction/
                                    │   └── repository/
                                    │       ├── CustomRestrictionGeoPositionUsageRepository.java
                                    │       └── RestrictionGeoPositionUsageRepository.java
                                    ├── review/
                                    │   └── repository/
                                    │       ├── ContentConcealReasonRepository.java
                                    │       ├── CustomContentConcealReasonRepository.java
                                    │       ├── CustomSalesEventAsFirstTreatmentReviewRepository.java
                                    │       ├── CustomSalesEventQuestionReplyRepository.java
                                    │       ├── CustomSalesEventQuestionRepository.java
                                    │       ├── CustomTreatmentReceiptReviewRepository.java
                                    │       ├── CustomTreatmentReviewAsSalesEventProductRepository.java
                                    │       ├── CustomTreatmentReviewConfirmImageRepository.java
                                    │       ├── CustomTreatmentReviewConfirmRepository.java
                                    │       ├── CustomTreatmentReviewHospitalCommentRepository.java
                                    │       ├── CustomTreatmentReviewLikeRepository.java
                                    │       ├── CustomTreatmentReviewRepository.java
                                    │       ├── CustomTreatmentReviewScrapRepository.java
                                    │       ├── CustomTreatmentReviewStatRepository.java
                                    │       ├── CustomerTreatmentReviewTranslationRepository.java
                                    │       ├── SalesEventAsFirstTreatmentReviewRepository.java
                                    │       ├── SalesEventQuestionReplyRepository.java
                                    │       ├── SalesEventQuestionRepository.java
                                    │       ├── TreatmentReceiptReviewRepository.java
                                    │       ├── TreatmentReviewAsSalesEventProductRepository.java
                                    │       ├── TreatmentReviewConfirmImageRepository.java
                                    │       ├── TreatmentReviewConfirmRepository.java
                                    │       ├── TreatmentReviewHospitalCommentRepository.java
                                    │       ├── TreatmentReviewImageRepository.java
                                    │       ├── TreatmentReviewLikeRepository.java
                                    │       ├── TreatmentReviewRepository.java
                                    │       ├── TreatmentReviewScrapRepository.java
                                    │       ├── TreatmentReviewStatRepository.java
                                    │       └── TreatmentReviewTranslationRepository.java
                                    ├── setting/
                                    │   └── repository/
                                    │       └── SettingRepository.java
                                    ├── settlement/
                                    │   └── repository/
                                    │       ├── CustomDepositRefundRepository.java
                                    │       ├── CustomDepositRepository.java
                                    │       ├── CustomSettlementAdjustRepository.java
                                    │       ├── CustomSettlementPgReportRepository.java
                                    │       ├── CustomSettlementReportRepository.java
                                    │       ├── CustomSettlementScheduleRepository.java
                                    │       ├── CustomSettlementTicketRepository.java
                                    │       ├── CustomVatReportRepository.java
                                    │       ├── DepositAsAdPointRepository.java
                                    │       ├── DepositAsOrdersRepository.java
                                    │       ├── DepositAsTicketRepository.java
                                    │       ├── DepositRefundRepository.java
                                    │       ├── DepositRepository.java
                                    │       ├── SettlementAdjustAsTicketRepository.java
                                    │       ├── SettlementAdjustRepository.java
                                    │       ├── SettlementAsDepositRepository.java
                                    │       ├── SettlementDailyRepository.java
                                    │       ├── SettlementPgReportRepository.java
                                    │       ├── SettlementReportRepository.java
                                    │       ├── SettlementScheduleRepository.java
                                    │       ├── SettlementTicketRepository.java
                                    │       └── VatReportRepository.java
                                    ├── setup/
                                    │   └── repository/
                                    │       ├── AppInitNoticeRepository.java
                                    │       ├── AppVersionRepository.java
                                    │       ├── CustomAppInitNoticeRepository.java
                                    │       ├── CustomAppVersionRepository.java
                                    │       ├── CustomDeviceTokenRepository.java
                                    │       ├── CustomSplashRepository.java
                                    │       ├── DeviceExtPackageStatusRepository.java
                                    │       ├── DeviceTokenRepository.java
                                    │       └── SplashRepository.java
                                    ├── share/
                                    │   └── repository/
                                    │       ├── ShareContextRepository.java
                                    │       ├── ShareRepository.java
                                    │       └── ShareUrlWhitelistRepository.java
                                    ├── terms/
                                    │   └── repository/
                                    │       └── TermsRepository.java
                                    ├── thirdpaty/
                                    │   └── repository/
                                    │       ├── CrmConfigRepository.java
                                    │       ├── MemberThirdPartyAgreementTermsRepository.java
                                    │       ├── ThirdPartyConfigRepository.java
                                    │       └── ThirdPartyVerificationCodeRepository.java
                                    ├── translation/
                                    │   └── repository/
                                    │       ├── MultiLanguageKeywordRepository.java
                                    │       ├── TranslationRepository.java
                                    │       └── TranslationTextRepository.java
                                    ├── tv/
                                    │   └── respository/
                                    │       ├── CustomTvAsHospitalRepository.java
                                    │       ├── CustomTvAsSalesEventRepository.java
                                    │       ├── CustomTvAsTreatmentRepository.java
                                    │       ├── CustomTvCategoryRepository.java
                                    │       ├── CustomTvReplyRepository.java
                                    │       ├── CustomTvRepository.java
                                    │       ├── CustomTvScrapRepository.java
                                    │       ├── CustomTvStatRepository.java
                                    │       ├── CustomTvViewRepository.java
                                    │       ├── TvAsHospitalRepository.java
                                    │       ├── TvAsSalesEventRepository.java
                                    │       ├── TvAsTreatmentRepository.java
                                    │       ├── TvCategoryRepository.java
                                    │       ├── TvLikeRepository.java
                                    │       ├── TvReplyRepository.java
                                    │       ├── TvRepository.java
                                    │       ├── TvScrapRepository.java
                                    │       ├── TvStatRepository.java
                                    │       └── TvViewRepository.java
                                    ├── verify/
                                    │   └── repository/
                                    │       ├── CustomVerificationDanalIdentityRepository.java
                                    │       ├── CustomVerificationEmailRepository.java
                                    │       ├── CustomVerificationNiceIdentityRepository.java
                                    │       ├── CustomVerificationPasswordRepository.java
                                    │       ├── CustomVerificationSmsRepository.java
                                    │       ├── VerificationCaptchaRepository.java
                                    │       ├── VerificationDanalIdentityRepository.java
                                    │       ├── VerificationEmailRepository.java
                                    │       ├── VerificationNiceIdentityRepository.java
                                    │       ├── VerificationOtpRepository.java
                                    │       ├── VerificationPasswordRepository.java
                                    │       ├── VerificationSmsBlockRepository.java
                                    │       ├── VerificationSmsFailRepository.java
                                    │       └── VerificationSmsRepository.java
                                    └── weather/
                                        └── repository/
                                            ├── CustomWeatherRepository.java
                                            └── WeatherRepository.java
================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/controller/model/AdminGroupsPayload.java
================================================
package kr.co.yeoshin.admin.administrator.controller.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.AdminGroupTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdminGroupsPayload {

    private List<AdminGroupTemplate> adminGroups;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/controller/model/AdminPayload.java
================================================
package kr.co.yeoshin.admin.administrator.controller.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AdminPayload implements PlusAccessible {

    private AdminTemplate admin;
    private List<AdminAccountTemplate> adminAccounts;
    private AdminGroupTemplate adminGroup;
    private HospitalShortTemplate hospital;
    private ListTemplate<Long> rolePermissionHospitalIds;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/controller/model/AdminShortPayload.java
================================================
package kr.co.yeoshin.admin.administrator.controller.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.AdminAccountTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AdminShortPayload {

    private AdminShortTemplate admin;
    private List<AdminAccountTemplate> adminAccounts;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/controller/model/AdminsPayload.java
================================================
package kr.co.yeoshin.admin.administrator.controller.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminAccountTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdminsPayload {

    private List<AdminTemplate> admins;
    private Map<Long, AdminAccountTemplate> adminAccounts;
    private Map<Long, AdminShortTemplate> salesAdmins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/controller/model/PlusAdminPayload.java
================================================
package kr.co.yeoshin.admin.administrator.controller.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.PlusAdminTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PlusAdminPayload implements PlusAccessible {

    private PlusAdminTemplate plusAdmin;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/controller/model/PlusAdminsPayload.java
================================================
package kr.co.yeoshin.admin.administrator.controller.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.PlusAdminTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PlusAdminsPayload implements PlusAccessible {

    private List<PlusAdminTemplate> plusAdmins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/usecase/AdminMutationUseCase.java
================================================
package kr.co.yeoshin.admin.administrator.usecase;

import static kr.co.yeoshin.admin.common.Constant.Admin.AD_MANAGER_GROUP_ID;
import static kr.co.yeoshin.admin.common.Constant.Admin.SALES_ADMIN_GROUP_ID;

import java.util.List;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.admin.administrator.controller.model.AdminMutationRequest;
import kr.co.yeoshin.admin.administrator.controller.model.AdminPayload;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.auth.component.validator.ValidatorHandler;
import kr.co.yeoshin.admin.auth.service.AuthService;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AdminCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdminTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.AdminException;
import kr.co.yeoshin.admin.exception.AdministratorException;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.entity.AdminGroup;
import kr.co.yeoshin.common.administrator.entity.AdminGroupAsAdmin;
import kr.co.yeoshin.common.administrator.repository.AdminGroupAsAdminRepository;
import kr.co.yeoshin.common.administrator.repository.AdminGroupRepository;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class AdminMutationUseCase {

    private final AdminService adminService;
    private final AuthService authService;
    private final ValidatorService validatorService;
    private final TransactionTemplate transactionTemplate;
    private List<ValidatorHandler<AdminMutationRequest>> validatorHandlers;
    private final AdminGroupRepository adminGroupRepository;
    private final AdminGroupAsAdminRepository adminGroupAsAdminRepository;
    private final SqsQueueMessagePublisher messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;

    @PostConstruct
    public void initValidatorHandlers() {
        ValidatorHandler<AdminMutationRequest> adminMutationValidatorHandler =
                ValidatorHandler.<AdminMutationRequest>builder()
                        .support(it -> true)
                        .validators(List.of(
                                it -> validatorService.validate(Validator.NAME, it.getName()),
                                it -> validatorService.validate(Validator.EMAIL, it.getEmail())
                        ))
                        .build();
        ValidatorHandler<AdminMutationRequest> passwordValidatorHandler =
                ValidatorHandler.<AdminMutationRequest>builder()
                        .support(it -> StringUtils.isNotBlank(it.getSecretKey()))
                        .validators(List.of(it -> validatorService.validate(Validator.PASSWORD, it.getSecretKey())))
                        .build();

        this.validatorHandlers = List.of(adminMutationValidatorHandler, passwordValidatorHandler);
    }

    public AdminPayload modifyAdmin(long adminId, AdminMutationRequest request) {
        transactionTemplate.executeMainReadableTransaction(() -> {
            for (ValidatorHandler<AdminMutationRequest> validatorHandler : validatorHandlers) {
                if (!validatorHandler.validate(request)) {
                    throw new AdminException(AdminCode.ADMIN_MUTATION_INVALID_ERROR);
                }
            }

            return true;
        });

        return transactionTemplate.executeMainWritableTransaction(() -> {
            Admin admin = adminService.fetchByIdWithAccounts(adminId);

            if (admin == null) {
                throw new AdminException(AdminCode.ADMIN_NOT_EXIST);
            }

            if (LevelGroup.findGroup(admin.getLevelType()) != request.getLevelGroup()) {
                throw new AdminException(AdminCode.ADMIN_MUTATION_INVALID_ERROR);
            }

            AdminTemplate modifiedAdmin = adminService.modifyAdmin(adminId, request);

            // TODO 현재는 패스워드와 다른 정보를 같이 변경하는 형태이나, 와이어 프레임 픽스 이후 클라이언트와 협의 후 분리될 수 있음
            if (StringUtils.isNotBlank(request.getSecretKey())) {
                authService.modifyPassword(modifiedAdmin.getId(), request.getSecretKey());
            }

            // todo : m2 변경.
            long adminGroupId = LevelGroup.hasLevelGroup(LevelGroup.SYSTEM, admin.getLevelType()) ? SALES_ADMIN_GROUP_ID
                    : AD_MANAGER_GROUP_ID;

            boolean isAdd =
                    (adminGroupId == SALES_ADMIN_GROUP_ID && request.isSalesManager()) || (adminGroupId == AD_MANAGER_GROUP_ID
                            && request.getLevel() == Level.ROLE_HOSPITAL_MANAGER);

            setAdminGroupAsAdmin(adminGroupId, admin, isAdd);

            return AdminPayload.builder()
                    .admin(modifiedAdmin)
                    .build();
        });
    }

    private void setAdminGroupAsAdmin(long adminGroupId, Admin admin, boolean isAdd) {
        if (isAdd) {
            adminGroupAsAdminRepository.fetchByAdminGroupIdAndAdminId(
                    adminGroupId, admin.getId()).orElseGet(
                    () -> {
                        AdminGroup adminGroup = adminGroupRepository.findById(adminGroupId)
                                .orElseThrow(
                                        () -> new AdministratorException(AdminCode.ADMIN_GROUP_NOT_EXIST));
                        return adminGroupAsAdminRepository.save(AdminGroupAsAdmin.builder()
                                .adminGroup(adminGroup)
                                .admin(admin)
                                .leaderYn(YN.N)
                                .build());
                    });
        } else {
            adminGroupAsAdminRepository.fetchByAdminGroupIdAndAdminId(adminGroupId, admin.getId())
                    .ifPresent(adminGroupAsAdminRepository::delete);
        }
    }

    public BoolPayload resetPassword(long adminId) {
        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                    Admin admin = adminService.findById(adminId);
                    String password = adminService.resetPassword(adminId);
                    NotificationPayload payload = NotificationPayload.builder()
                            .alimTalk(alimTalkTemplateFactory.plusAccountReset(admin, password))
                            .build();
                    messagePublisher.publishNotification(NotificationMessage.of(payload));
                    return true;
                }))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/usecase/AdminUseCase.java
================================================
package kr.co.yeoshin.admin.administrator.usecase;

import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.controller.model.AdminFilterRequest;
import kr.co.yeoshin.admin.administrator.controller.model.AdminGroupsPayload;
import kr.co.yeoshin.admin.administrator.controller.model.AdminPayload;
import kr.co.yeoshin.admin.administrator.controller.model.AdminsPayload;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.administrator.service.model.AdminGroupWithAdmins;
import kr.co.yeoshin.admin.administrator.service.model.AdminPageWithAccounts;
import kr.co.yeoshin.admin.administrator.usecase.model.GroupAdminsPayload;
import kr.co.yeoshin.admin.auth.model.RegisteredAdmin;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AdminCode;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.template.AdminGroupTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AdminException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.permission.hospital.entity.HospitalRolePermission;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class AdminUseCase {

    private final AdminService adminService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final HospitalService hospitalService;

    public AdminsPayload listAdmins(LevelGroup groupName, AdminFilterRequest request) {
        List<Level> levels = LevelGroup.fetchAllLevel(groupName);
        AdminPageWithAccounts adminPageWithAccounts =
                transactionTemplate.executeMainReadableTransaction(
                        () -> adminService.retrieveAdmins(levels, request));

        return AdminsPayload.builder()
                .admins(adminPageWithAccounts.getAdmins())
                .adminAccounts(adminPageWithAccounts.getAdminAccounts())
                .salesAdmins(adminPageWithAccounts.getSalesAdmins())
                .pageable(adminPageWithAccounts.getPageable())
                .build();
    }

    public AdminsPayload listAdmins(Level level, AdminFilterRequest request) {
        AdminPageWithAccounts adminPageWithAccounts =
                transactionTemplate.executeMainReadableTransaction(
                        () -> adminService.retrieveAdmins(level, request));

        return AdminsPayload.builder()
                .admins(adminPageWithAccounts.getAdmins())
                .adminAccounts(adminPageWithAccounts.getAdminAccounts())
                .pageable(adminPageWithAccounts.getPageable())
                .build();
    }

    public AdminPayload admin(LevelGroup levelGroup, long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Admin admin = adminService.fetchByIdWithAccounts(id);

            if (admin == null) {
                throw new AdminException(AuthCode.AUTH_ADMIN_NOT_EXIST);
            }

            if (!LevelGroup.hasLevelGroup(levelGroup, admin.getLevelType())) {
                throw new AdminException(AdminCode.SYSTEM_ADMIN_VIEW_ROLE_NOT_EXIST);
            }

            AdminGroupWithAdmins adminGroupWithAdmins = adminService.retrieveGroupWithAdmins(Constant.Admin.SALES_ADMIN_GROUP_ID);
            boolean isExist = adminGroupWithAdmins.getAdmins().stream().anyMatch(x -> x.getId() == admin.getId());

            Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
            Hospital hospital = currentHospitalId != null ? hospitalService.findHospitalByHospitalId(currentHospitalId) : null;

            List<Long> rolePermissionHospitalIds = hospitalService.retrieveHospitalRolePermission(admin.getId()).stream()
                    .map(HospitalRolePermission::getHospitalId).collect(Collectors.toList());

            return AdminPayload.builder()
                    .admin(payloadFactory.adminTemplate(admin))
                    .adminAccounts(admin.getAccounts().stream()
                            .map(payloadFactory::adminAccountTemplate)
                            .collect(Collectors.toList()))
                    .adminGroup(isExist ? adminGroupWithAdmins.getAdminGroup() : null)
                    .hospital(payloadFactory.hospitalShortTemplate(hospital))
                    .rolePermissionHospitalIds(payloadFactory.listTemplate(rolePermissionHospitalIds))
                    .build();
        });

    }

    public AdminGroupsPayload retrieveAdminGroups() {
        List<AdminGroupTemplate> adminGroups =
                transactionTemplate.executeMainReadableTransaction(adminService::retrieveAdminGroups);

        return AdminGroupsPayload.builder()
                .adminGroups(adminGroups)
                .build();
    }

    public GroupAdminsPayload retrieveGroupAdmins(long groupId) {
        AdminGroupWithAdmins adminGroupWithAdmins = transactionTemplate.executeMainReadableTransaction(
                () -> adminService.retrieveGroupWithAdmins(groupId));

        return GroupAdminsPayload.builder()
                .adminGroup(adminGroupWithAdmins.getAdminGroup())
                .admins(adminGroupWithAdmins.getAdmins())
                .build();
    }

    public AdminPayload myAdmin() {
        RegisteredAdmin registeredAdmin = (RegisteredAdmin) DiagnosticContext.admin().orElseThrow(
                () -> new AdminException(AdminCode.ADMIN_NOT_EXIST)
        );

        long myAdminId = registeredAdmin.getId();
        LevelGroup myLevelGroup = LevelGroup.findGroup(registeredAdmin.getLevel());

        return admin(myLevelGroup, myAdminId);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/usecase/PlusUseCase.java
================================================
package kr.co.yeoshin.admin.administrator.usecase;

import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.administrator.controller.model.PlusAdminFilterRequest;
import kr.co.yeoshin.admin.administrator.controller.model.PlusAdminMutationRequest;
import kr.co.yeoshin.admin.administrator.controller.model.PlusAdminPayload;
import kr.co.yeoshin.admin.administrator.controller.model.PlusAdminsPayload;
import kr.co.yeoshin.admin.administrator.service.PlusService;
import kr.co.yeoshin.common.administrator.entity.Admin;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class PlusUseCase {

    private final PlusService plusService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public PlusAdminsPayload listPlusAdmin(PlusAdminFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    Page<Admin> admins = plusService.retrievePlusAdmins(request);
                    return PlusAdminsPayload.builder()
                            .plusAdmins(admins.stream().map(payloadFactory::plusAdminTemplate).collect(Collectors.toList()))
                            .pageable(payloadFactory.pageableTemplate(admins))
                            .build();
                });
    }

    public PlusAdminPayload plusAdmin(long adminId) {
        Admin admin = transactionTemplate.executeMainReadableTransaction(() -> plusService.retrievePlusAdmin(adminId));

        return PlusAdminPayload.builder()
                .plusAdmin(payloadFactory.plusAdminTemplate(admin))
                .build();
    }

    public PlusAdminPayload modifyPlusAdmin(long adminId, PlusAdminMutationRequest request) {
        Admin admin = transactionTemplate.executeMainWritableTransaction(() -> plusService.modifyPlusAdmin(adminId, request));

        return PlusAdminPayload.builder()
                .plusAdmin(payloadFactory.plusAdminTemplate(admin))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/administrator/usecase/model/GroupAdminsPayload.java
================================================
package kr.co.yeoshin.admin.administrator.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.AdminGroupTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class GroupAdminsPayload {

    private AdminGroupTemplate adminGroup;
    private List<AdminShortTemplate> admins;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/audit/usecase/AuditUseCase.java
================================================
package kr.co.yeoshin.admin.audit.usecase;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.audit.controller.model.AdminAuditFilterRequest;
import kr.co.yeoshin.admin.audit.service.AdminAuditService;
import kr.co.yeoshin.admin.audit.usecase.model.AdminAuditPageablePayload;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminAuditTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminGroupTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.common.audit.entity.AdminAudit;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;

@UseCase
@RequiredArgsConstructor
public class AuditUseCase {

    private final AdminAuditService adminAuditService;
    private final AdminService adminService;
    private final HospitalService hospitalService;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;

    public AdminAuditPageablePayload retrieveAdminAudits(AdminAuditFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<AdminAudit> page = adminAuditService.retrieveAdminAudits(request);

            if (page.getSize() == 0) {
                return AdminAuditPageablePayload.empty();
            }

            Map<Long, AdminGroupTemplate> adminGroupTemplateMap = adminService.retrieveAdminGroups()
                    .stream()
                    .collect(Collectors.toMap(AdminGroupTemplate::getId, Function.identity()));

            Set<Long> adminIds = new HashSet<>();
            Set<Long> hospitalIds = new HashSet<>();
            Map<Long, AdminGroupTemplate> adminGroups = new HashMap<>();
            List<AdminAuditTemplate> adminAudits = new ArrayList<>();
            for (var adminAudit : page) {
                adminIds.add(adminAudit.getAdmin().getId());
                Optional.ofNullable(adminGroupTemplateMap.get(adminAudit.getAdminGroup().getId()))
                        .ifPresent(x -> adminGroups.put(adminAudit.getAdminGroup().getId(), x));
                adminAudits.add(payloadFactory.adminAuditTemplate(adminAudit));
                Optional.ofNullable(adminAudit.getHospitalId()).ifPresent(hospitalIds::add);
            }

            Map<Long, AdminShortTemplate> admins = adminService.retrieveAdmins(adminIds)
                    .stream()
                    .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity()));

            Map<Long, HospitalShortTemplate> hospitals = hospitalService.findHospitalsByHospitalIds(hospitalIds)
                    .stream()
                    .map(payloadFactory::hospitalShortTemplate)
                    .collect(Collectors.toMap(HospitalShortTemplate::getId, Function.identity()));

            return AdminAuditPageablePayload.builder()
                    .adminActivityHistories(adminAudits)
                    .admins(admins)
                    .adminGroups(adminGroups)
                    .hospitals(hospitals)
                    .pageable(payloadFactory.pageableTemplate(page))
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/audit/usecase/model/AdminAuditPageablePayload.java
================================================
package kr.co.yeoshin.admin.audit.usecase.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdminAuditPageablePayload implements PlusAccessible {

    private List<AdminAuditTemplate> adminActivityHistories;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, AdminGroupTemplate> adminGroups;
    private Map<Long, HospitalShortTemplate> hospitals;
    private PageableTemplate pageable;

    public static AdminAuditPageablePayload empty() {
        return AdminAuditPageablePayload.builder()
                .adminActivityHistories(Collections.emptyList())
                .admins(Collections.emptyMap())
                .adminGroups(Collections.emptyMap())
                .hospitals(Collections.emptyMap())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/auth/usecase/AuthAdminUseCase.java
================================================
package kr.co.yeoshin.admin.auth.usecase;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.admin.config.props.component.PropertyProvider;
import kr.co.yeoshin.admin.auth.component.validator.ValidatorHandler;
import kr.co.yeoshin.admin.auth.controller.model.AdminSnsAccountRequest;
import kr.co.yeoshin.admin.auth.model.RegisteredAdmin;
import kr.co.yeoshin.admin.auth.model.SignUpResult;
import kr.co.yeoshin.admin.auth.model.Token;
import kr.co.yeoshin.admin.auth.service.AuthService;
import kr.co.yeoshin.admin.auth.service.TokenService;
import kr.co.yeoshin.admin.auth.service.model.AuthCredential;
import kr.co.yeoshin.admin.auth.service.model.AuthProfile;
import kr.co.yeoshin.admin.auth.service.model.AuthRegister;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.TokenProps;
import kr.co.yeoshin.admin.config.props.TokenProps.AdminTokenProps;
import kr.co.yeoshin.admin.exception.AdministratorException;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class AuthAdminUseCase {

    private final AuthService authService;
    private final TokenService tokenService;
    private final ValidatorService validatorService;
    private final TransactionTemplate transactionTemplate;
    private final PropertyProvider propertyProvider;
    private List<ValidatorHandler<AuthRegister>> validatorHandlers;

    @PostConstruct
    public void initValidatorHandlers() {
        ValidatorHandler<AuthRegister> adminSignUpValidatorHandler =
                ValidatorHandler.<AuthRegister>builder()
                        .support(it -> true)
                        .validators(List.of(
                                it -> it.getProvider() == AuthProvider.SYSTEM,  // 가입 가능한 타입을 SYSTEM으로 제한
                                it -> Set.of(Level.ROLE_SYSTEM_PERSON, Level.ROLE_SYSTEM_NORMAL, Level.ROLE_HOSPITAL_OWNER,
                                                Level.ROLE_HOSPITAL_MANAGER)
                                        .contains(it.getLevel()),
                                it -> validatorService.validate(Validator.NAME, it.getName()),
                                it -> validatorService.validate(Validator.EMAIL, it.getEmail())))
                        .build();

        ValidatorHandler<AuthRegister> systemSignUpValidatorHandler =
                ValidatorHandler.<AuthRegister>builder()
                        .support(it -> it.getProvider() == AuthProvider.SYSTEM)
                        .validators(List.of(
                                it -> validatorService.validate(Validator.ADMIN_ID, it.getAccessKey()),
                                it -> validatorService.validate(Validator.PASSWORD, it.getSecretKey()))
                        )
                        .build();

        this.validatorHandlers = List.of(adminSignUpValidatorHandler, systemSignUpValidatorHandler);
    }

    /*
        Milestone1에서는 본인 인증 없는 유사 가입 형태로 사용
        (병원 입점 시 패스트레인 직원분이 아이디 패스워드 임의로 생성하여 병원에 전달하는 형태)
    */
    public SignUpResult signUp(AuthRegister authRegister) {
        transactionTemplate.executeMainReadableTransaction(() -> {
            for (ValidatorHandler<AuthRegister> validatorHandler : validatorHandlers) {
                if (!validatorHandler.validate(authRegister)) {
                    throw new AdministratorException(AuthCode.AUTH_ADMIN_SIGN_UP_ERROR);
                }
            }

            return true;
        });

        AuthCredential credential = AuthCredential.of(authRegister);
        AuthProfile authProfile = authService.findProfile(credential);

        RegisteredAdmin registeredAdmin = transactionTemplate.executeMainWritableTransaction(
                () -> authService.registerAdmin(authRegister, authProfile));

        TokenProps tokenProps = propertyProvider.getTokenProps();
        AdminTokenProps adminTokenProps = LevelGroup.findGroup(registeredAdmin.getLevel()) == LevelGroup.SYSTEM
                ? tokenProps.getSystemAdmin()
                : tokenProps.getPlusAdmin();

        Token token = tokenService.createToken(registeredAdmin.getId(), authProfile.getProvider(),
                registeredAdmin.getSignature(), adminTokenProps);

        return SignUpResult.builder()
                .token(token)
                .build();
    }

    public BoolPayload registerAdminSnsAccount(AdminSnsAccountRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            AuthCredential authCredential =
                    AuthCredential.builder()
                            .provider(request.getProvider())
                            .accessKey(request.getAccessKey())
                            .secretKey(Optional.ofNullable(request.getSecretKey()).orElse(StringUtils.EMPTY))
                            .build();

            AuthProfile authProfile = authService.findProfile(authCredential);

            if (!authService.validateAdminSnsProfile(authProfile)) {
                throw new AuthenticationException(AuthCode.AUTH_ADMIN_ACCOUNT_REGISTER_ERROR);
            }

            authService.registerAdminAccount(authCredential, authProfile);

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public BoolPayload bye(long adminId) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> authService.bye(adminId));

        return BoolPayload.builder()
                .result(result)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/auth/usecase/AuthUseCase.java
================================================
package kr.co.yeoshin.admin.auth.usecase;

import java.util.*;
import java.util.function.Predicate;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.audit.service.AdminAuditService;
import kr.co.yeoshin.admin.audit.service.model.AdminSignInAuditContext;
import kr.co.yeoshin.admin.auth.controller.model.TokenCreateRequest;
import kr.co.yeoshin.admin.auth.controller.model.TokenCreateResult;
import kr.co.yeoshin.admin.auth.controller.model.TokenInvalidateRequest;
import kr.co.yeoshin.admin.auth.controller.model.TokenRevokeRequest;
import kr.co.yeoshin.admin.auth.model.*;
import kr.co.yeoshin.admin.auth.service.AuthService;
import kr.co.yeoshin.admin.auth.service.TokenService;
import kr.co.yeoshin.admin.auth.service.TokenService.TokenType;
import kr.co.yeoshin.admin.auth.service.model.AuthCredential;
import kr.co.yeoshin.admin.auth.service.model.AuthProfile;
import kr.co.yeoshin.admin.auth.service.model.AuthRegister;
import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.model.api.ApiSuccessResponse;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.config.props.TokenProps;
import kr.co.yeoshin.admin.config.props.TokenProps.AdminTokenProps;
import kr.co.yeoshin.admin.config.props.TokenProps.PlusAdminExchangeTokenProps;
import kr.co.yeoshin.admin.config.props.component.PropertyProvider;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.utils.FunctionalUtils.FakeFinal;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.entity.AdminAccount;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.audit.context.JaversContextHolder;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.permission.hospital.entity.HospitalRolePermission;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.HttpUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.UUIDUtils;
import kr.co.yeoshin.common.utils.UUIDUtils.Secured;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpHeaders;

@Slf4j
@AllArgsConstructor
@UseCase
public class AuthUseCase {

    private final AuthService authService;
    private final ValidatorService validatorService;
    private final TokenService tokenService;
    private final HospitalService hospitalService;
    private final AdminService adminService;
    private final TransactionTemplate transactionTemplate;
    private final AdminAuditService adminAuditService;
    private List<AuthValidatorHandler> validatorHandlers;
    private final ResponseFactory responseFactory;
    private final ApplicationProps applicationProps;
    private final PropertyProvider propertyProvider;

    @AllArgsConstructor
    @SuppressWarnings("InnerClassMayBeStatic")
    private class AuthValidatorHandler {

        private Predicate<AuthRegister> support;
        private List<Predicate<AuthRegister>> validators;

        public boolean validate(AuthRegister authRegister) {
            if (!support.test(authRegister)) {
                return true;
            }
            for (Predicate<AuthRegister> predicate : validators) {
                if (!predicate.test(authRegister)) {
                    return false;
                }
            }
            return true;
        }
    }

    @PostConstruct
    public void init() {
        this.validatorHandlers = new ArrayList<>();
        validatorHandlers.add(new AuthValidatorHandler(
                (a) -> true,
                List.of(
                        (a) -> validatorService.validate(Validator.EMAIL, a.getEmail())
                )
        ));
        validatorHandlers.add(new AuthValidatorHandler(
                (a) -> a.getProvider() == AuthProvider.SYSTEM,
                Arrays.asList(
                        (a) -> validatorService.validate(Validator.ADMIN_ID, a.getAccessKey()),
                        (a) -> validatorService.validate(Validator.PASSWORD, a.getSecretKey())
                )
        ));
    }

    public ApiResponse<SignUpResult> signIn(AuthCredential authCredential) {
        final AuthProfile authProfile = authService.findProfile(authCredential);
        final LevelGroup clientType = DiagnosticContext.header().clientType();
        final FakeFinal<Long> hospitalId = FakeFinal.init();

        RegisteredAdmin registeredAdmin = transactionTemplate.executeMainWritableTransaction(() -> {
            Optional<AdminAccount> adminAccountOptional = authService.fetchAdminAccount(authProfile);

            if (adminAccountOptional.isEmpty()) {
                return null;
            }

            AdminAccount adminAccount = adminAccountOptional.get();
            if (adminAccount.getAdmin() == null) {
                return null;
            }

            Admin admin = adminAccount.getAdmin();
            if (admin.getStatus().isLocked()) {
                throw new AuthenticationException(AuthCode.AUTH_LOCKED_ADMIN);
            }

            hospitalId.changeValue(Optional.of(DiagnosticContext.isPlusAdmin())
                    .filter(x -> x)
                    .flatMap(x -> hospitalService.findByAdminId(admin.getId()))
                    .map(Hospital::getId)
                    .orElse(null));

            if (clientType != LevelGroup.findGroup(admin.getLevelType())) {
                adminAuditService.writeAdminActivity(AdminSignInAuditContext.builder()
                        .adminId(admin.getId())
                        .successYn(YN.N)
                        .verbose(AdminSignInAuditContext.Verbose.FORBIDDEN_ACCESS)
                        .hospitalId(hospitalId.get())
                        .build());
                log.warn("admin id ({}) try to access forbidden admin channel.", admin.getId());
                return null;
            }

            if (!authService.isValidSecret(authCredential, adminAccount)) {
                adminAuditService.writeAdminActivity(AdminSignInAuditContext.builder()
                        .adminId(admin.getId())
                        .successYn(YN.N)
                        .verbose(AdminSignInAuditContext.Verbose.SECRET_NOT_MATCH)
                        .hospitalId(hospitalId.get())
                        .build());
                return null;
            }

            return RegisteredAdmin.of(admin, adminAccount);
        });

        if (registeredAdmin == null) {
            throw new AuthenticationException(
                    AuthCode.AUTH_ADMIN_NOT_EXIST,
                    MessageUtils.format("admin({}) not exist", authCredential));
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            authService.adjustAdminAccountSecret(authCredential, registeredAdmin);
            adminAuditService.writeAdminActivity(AdminSignInAuditContext.builder()
                    .adminId(registeredAdmin.getId())
                    .successYn(YN.Y)
                    .verbose(AdminSignInAuditContext.Verbose.SUCCESS)
                    .hospitalId(hospitalId.get())
                    .build());
            return true;
        });

        TokenProps tokenProps = propertyProvider.getTokenProps();
        AdminTokenProps adminTokenProps = LevelGroup.findGroup(registeredAdmin.getLevel()) == LevelGroup.SYSTEM
                ? tokenProps.getSystemAdmin()
                : tokenProps.getPlusAdmin();

        Token token = tokenService.createToken(registeredAdmin.getId(), authProfile.getProvider(),
                registeredAdmin.getSignature(), adminTokenProps);

        return ApiSuccessResponse.<SignUpResult>builder()
                .additionalHeaders(Collections.singletonMap(
                        HttpHeaders.AUTHORIZATION,
                        HttpUtils.bearerAuthorizationHeaderValue(token.getAccessToken())))
                .payload(SignUpResult.builder().token(token).build())
                .build();
    }


    public BoolPayload signInDryRun(AuthCredential authCredential) {
        AuthProfile authProfile = authService.findProfile(authCredential);

        return BoolPayload.builder()
                .result(authService.existRegisteredAdminAccountByProvider(authProfile.getProvider(), authProfile.getProviderId()))
                .build();
    }


    public BoolPayload signOut(RegisteredAdmin registeredAdmin) {
        // TODO admin_audit 로그아웃 로그 적재 필요시 주석 해제
//        transactionTemplate.executeMainWritableTransaction(
//                () -> adminAuditService.writeAdminActivity(AdminSignOutAuditContext.builder()
//                        .adminId(registeredAdmin.getId())
//                        .successYn(YN.Y)
//                        .verbose(AdminSignOutAuditContext.Verbose.USER_REQUEST)
//                        .build()));

        return BoolPayload.of(true);
    }


    public ApiResponse<SignUpResult> signUp(AuthRegister authRegister) {
        transactionTemplate.executeMainReadableTransaction(() -> {
            for (AuthValidatorHandler validatorHandler : validatorHandlers) {
                if (!validatorHandler.validate(authRegister)) {
                    return false;
                }
            }

            // TODO completed sms verification
            return true;
        });

        AuthCredential authCredential = AuthCredential.of(authRegister);
        AuthProfile authProfile = authService.findProfile(authCredential);

        RegisteredAdmin registeredAdmin = transactionTemplate.executeMainWritableTransaction(
                () -> authService.registerAdmin(authRegister, authProfile));

        if (registeredAdmin == null) {
            throw new AuthenticationException(
                    AuthCode.AUTH_ADMIN_SIGN_UP_ERROR,
                    MessageUtils.format("register admin({}) failed", authRegister));
        }

        JaversContextHolder.putAuthorIfAbsent(registeredAdmin.getAdmin().getId());

        TokenProps tokenProps = propertyProvider.getTokenProps();
        AdminTokenProps adminTokenProps = LevelGroup.findGroup(registeredAdmin.getLevel()) == LevelGroup.SYSTEM
                ? tokenProps.getSystemAdmin()
                : tokenProps.getPlusAdmin();

        Token token = tokenService.createToken(registeredAdmin.getId(), authProfile.getProvider(),
                registeredAdmin.getSignature(), adminTokenProps);

        return responseFactory.success(SignUpResult.builder().token(token).build());
    }

    public RegisteredAdmin retrieveRegisteredAdmin(TokenClaims tokenClaims) {
        if (tokenClaims == null) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_CLAIM_INVALID, "token is invalid");
        }

        Long decryptMemberID = Secured.decrypt(tokenClaims.getProviderId()).orElse(-1L);
        if (decryptMemberID < 0) {
            throw new AuthenticationException(AuthCode.AUTH_ADMIN_NOT_EXIST, "admin id is not valid");
        }

        RegisteredAdmin registeredMember = authService.findRegisteredAdminById(decryptMemberID, tokenClaims.getProvider());
        if (registeredMember == null) {
            throw new AuthenticationException(AuthCode.AUTH_ADMIN_NOT_EXIST, "admin is not exist");
        }

        return registeredMember;
    }

    public ApiResponse<TokenCreateResult> createToken(TokenCreateRequest request) {
        TokenProps tokenProps = propertyProvider.getTokenProps();
        AdminTokenProps adminTokenProps = LevelGroup.findGroup(request.getLevel()) == LevelGroup.SYSTEM
                ? tokenProps.getSystemAdmin()
                : tokenProps.getPlusAdmin();

        Token token = tokenService.createToken(request.getId(), request.getProvider(), request.getSignature(), adminTokenProps);

        return responseFactory.success(TokenCreateResult.builder()
                .token(token)
                .build());
    }

    public ApiResponse<Map<String, Object>> verifyToken() {
        return responseFactory.success(Collections.emptyMap());
    }

    public ApiResponse<Map<String, Object>> revokeToken(TokenRevokeRequest request) {
        boolean success = transactionTemplate.executeMainWritableTransaction(
                () -> authService.modifyAdminSignature(
                        request.getId(),
                        UUIDUtils.shortUUID()));
        if (success) {
            return responseFactory.unauthorized(AuthCode.AUTH_TOKEN_INVALIDATE_SUCCESS);
        } else {
            throw new AuthenticationException(
                    AuthCode.AUTH_ADMIN_NOT_EXIST,
                    MessageUtils.format("revoke admin signature failed. ({})", request));
        }
    }

    public ApiResponse<Map<String, Object>> invalidateToken(TokenInvalidateRequest request) {
        boolean success = transactionTemplate.executeMainWritableTransaction(
                () -> authService.modifyAdminSignature(
                        request.getId(),
                        UUIDUtils.shortUUID()));
        if (success) {
            return responseFactory.unauthorized(AuthCode.AUTH_TOKEN_INVALIDATE_SUCCESS);
        } else {
            throw new AuthenticationException(
                    AuthCode.AUTH_ADMIN_NOT_EXIST,
                    MessageUtils.format("revoke admin signature failed. ({})", request));
        }
    }

    public SignUpResult refreshToken(String token) {
        if (!tokenService.hasTypeValue(token, TokenType.REFRESH_TOKEN)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR);
        }

        TokenClaims tokenClaims = tokenService.getClaims(token);
        if (tokenClaims.getExpiration().before(new Date())) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_EXPIRED);
        }

        Token extendedToken = transactionTemplate.executeMainReadableTransaction(() -> {
            RegisteredAdmin registeredAdmin = this.retrieveRegisteredAdmin(tokenClaims);
            TokenProps tokenProps = propertyProvider.getTokenProps();
            AdminTokenProps adminTokenProps = LevelGroup.findGroup(registeredAdmin.getLevel()) == LevelGroup.SYSTEM
                    ? tokenProps.getSystemAdmin()
                    : tokenProps.getPlusAdmin();

            return tokenService.createToken(registeredAdmin.getId(), registeredAdmin.getAuthProvider(),
                            registeredAdmin.getSignature(), adminTokenProps)
                    .toBuilder()
                    .refreshToken(token)
                    .build();
        });

        return SignUpResult.builder()
                .token(extendedToken)
                .build();
    }

    public AdminHospitalRole fetchAdminHospitalRole(AuthorizedAdmin admin, long hospitalId) {
        if (hospitalId < 1) {
            return makeAdminHospitalRoleFromEmptyHospitalId(admin);
        }

        return transactionTemplate.executeMainReadableTransaction(
                () -> authService.findRoleByAdminIdAndHospitalId(admin, hospitalId)
                        .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID)));
    }

    public SignUpResult publishExchangeToken() {
        long adminId = DiagnosticContext.fetchAdminId();

        Token token = transactionTemplate.executeMainReadableTransaction(() -> {
            Admin admin = adminService.fetchByIdWithAccounts(adminId);
            AdminAccount adminAccount = admin.getAccounts()
                    .stream()
                    .findFirst()
                    .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_OAUTH_NOT_EXIST_PROVIDER));

            PlusAdminExchangeTokenProps props = applicationProps.getAuth().getToken().getPlusAdminExchangeToken();
            String signature = MessageUtils.format("{}{}", props.getSignaturePrefix(), admin.getSignature());
            long expires = props.getTokenExpiresSeconds();

            return tokenService.createToken(adminId, adminAccount.getProvider(), signature, expires, expires);
        });

        return SignUpResult.builder()
                .token(new Token(token.getRefreshToken(), token.getRefreshToken(), token.getExpiresIn()))
                .build();
    }

    public ApiResponse<SignUpResult> exchangeToPlusToken(String exchangeToken, Long hospitalId) {
        if (StringUtils.isBlank(exchangeToken)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_BLANK, "token is blank");
        }

        TokenProps tokenProps = propertyProvider.getTokenProps();
        String prefix = tokenProps.getPlusAdminExchangeToken().getSignaturePrefix();

        if (hospitalId == null) {
            try {
                hospitalId = DiagnosticContext.currentHospitalId().orElse(null);
            } catch (Exception e) {
                // ignore
            }
        }
        final Long hid = hospitalId;

        Optional<RegisteredAdmin> registeredAdminOptional = transactionTemplate.executeMainWritableTransaction(() -> {
            TokenClaims tokenClaims = tokenService.getClaims(exchangeToken);
            RegisteredAdmin registeredAdm = retrieveRegisteredAdmin(tokenClaims);

            if (!tokenService.verifyToken(exchangeToken, prefix + registeredAdm.getSignature())) {
                adminAuditService.writeAdminActivity(AdminSignInAuditContext.builder()
                        .adminId(registeredAdm.getId())
                        .successYn(YN.N)
                        .verbose(AdminSignInAuditContext.Verbose.INVALID_PLUS_TOKEN)
                        .hospitalId(hid)
                        .build());
                return Optional.empty();
            }

            adminAuditService.writeAdminActivity(AdminSignInAuditContext.builder()
                    .adminId(registeredAdm.getId())
                    .successYn(YN.Y)
                    .verbose(AdminSignInAuditContext.Verbose.PLUS_SUCCESS)
                    .hospitalId(hid)
                    .build());

            return Optional.of(registeredAdm);
        });

        RegisteredAdmin registeredAdmin = registeredAdminOptional
                .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token verify failed"));

        Token token = tokenService.createToken(registeredAdmin.getId(), registeredAdmin.getAuthProvider(),
                registeredAdmin.getSignature(), tokenProps.getPlusAdmin());

        return ApiSuccessResponse.<SignUpResult>builder()
                .additionalHeaders(Collections.singletonMap(
                        HttpHeaders.AUTHORIZATION,
                        HttpUtils.bearerAuthorizationHeaderValue(token.getAccessToken())))
                .payload(SignUpResult.builder().token(token).build())
                .build();
    }

    AdminHospitalRole makeAdminHospitalRoleFromEmptyHospitalId(AuthorizedAdmin admin) {
        // header에 병원 지정 정보가 없거나, 병원 ID가 유효하지 않은 경우
        AdminHospitalRole.AdminHospitalRoleBuilder base = AdminHospitalRole.builder()
                .adminId(admin.getId())
                .role(admin.getLevel());
        if (admin.getLevel() == Level.ROLE_HOSPITAL_OWNER) {
            // header에 지정된 병원 정보가 없더라도 OWNER 관리자의 경우 소유한 병원의 ID 정보를 사용
            Hospital hospital = hospitalService.findByAdminId(admin.getId())
                    .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_NOT_EXIST));
            return base.hospitalId(hospital.getId())
                    .build();
        } else if (LevelGroup.findGroup(admin.getLevel()) == LevelGroup.SYSTEM) {
            return base.build();
        } else {
            // todo : 코멘트 및 방법 정리..?
            // SYSTEM 이나 OWNER 관리자가 아닌 경우는 병원 지정을 해야 함, manager 허용(병원 롤 퍼미션 허용 중 리스트 첫번째 1개 기본)
            HospitalRolePermission hospitalRolePermission = hospitalService.retrieveHospitalRolePermission(admin.getId()).stream()
                    .findFirst().orElseThrow(
                            () -> new AuthenticationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_NOT_EXIST)
                    );
            return base.hospitalId(hospitalRolePermission.getHospitalId()).build();
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/banner/usecase/BannerUseCase.java
================================================
package kr.co.yeoshin.admin.banner.usecase;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.banner.controller.model.BannerFilterRequest;
import kr.co.yeoshin.admin.banner.controller.model.BannerMutationRequest;
import kr.co.yeoshin.admin.banner.controller.model.BannerPriorityMutationRequest;
import kr.co.yeoshin.admin.banner.service.BannerService;
import kr.co.yeoshin.admin.banner.service.model.BannerPageableTemplates;
import kr.co.yeoshin.admin.banner.usecase.model.BannerListPayload;
import kr.co.yeoshin.admin.banner.usecase.model.BannerPageablePayload;
import kr.co.yeoshin.admin.banner.usecase.model.BannerPayload;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.BannerTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.banner.entity.Banner;
import kr.co.yeoshin.common.banner.type.BannerLocation;
import kr.co.yeoshin.common.banner.type.BannerType;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;

@RequiredArgsConstructor
@UseCase
public class BannerUseCase {

    private final BannerService bannerService;
    private final MediaService mediaService;
    private final AdminService adminService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public BannerPageablePayload listBanners(BannerLocation location, BannerFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            BannerPageableTemplates bannerPageable = bannerService.retrieveBanners(location, request);

            List<BannerTemplate> banners = bannerPageable.getBanners();

            Set<Long> adminIds = new HashSet<>();
            for (BannerTemplate banner : banners) {
                adminIds.add(banner.getCreateAdminId());
                adminIds.add(banner.getUpdateAdminId());
            }

            List<AdminShortTemplate> admins = adminService.retrieveAdmins(adminIds);

            return BannerPageablePayload.builder()
                    .banners(banners)
                    .admins(admins.stream()
                            .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity())))
                    .pageable(bannerPageable.getPageable())
                    .build();
        });
    }

    public BannerPayload registerBanner(BannerMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            Banner banner = bannerService.registerBanner(request);

            if (request.hasBannerType(BannerType.IMAGE)) {
                mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                        .media(MediaType.IMAGE)
                        .accessible(MediaAccessibleType.PUBLIC)
                        .domain(MediaDomainType.BANNER)
                        .appliedMediaFileNames(Collections.emptySet())
                        .newMediaFileNames(ImmutableSet.<String>builder()
                                .add(FilenameUtils.getName(
                                        StringUtils.getIfBlank(banner.getImage(), () -> null)))
                                .add(FilenameUtils.getName(
                                        StringUtils.getIfBlank(banner.getImageKo(), () -> null)))
                                .add(FilenameUtils.getName(
                                        StringUtils.getIfBlank(banner.getImageEn(), () -> null)))
                                .add(FilenameUtils.getName(
                                        StringUtils.getIfBlank(banner.getImageZh(), () -> null)))
                                .add(FilenameUtils.getName(
                                        StringUtils.getIfBlank(banner.getImageJa(), () -> null)))
                                .build())
                        .build());
            }

            return BannerPayload.builder()
                    .banner(payloadFactory.bannerTemplate(banner))
                    .build();
        });
    }

    public BannerPayload modifyBanner(long id, BannerMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    BannerTemplate banner = bannerService.retrieveBanner(id);
                    Banner modifiedBanner = bannerService.modifyBanner(id, request);

                    if (request.hasBannerType(BannerType.IMAGE)) {
                        mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                                .media(MediaType.IMAGE)
                                .accessible(MediaAccessibleType.PUBLIC)
                                .domain(MediaDomainType.BANNER)
                                .appliedMediaFileNames(ImmutableSet.<String>builder()
                                        .add(FilenameUtils.getName(banner.getImage()))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(banner.getImage(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(banner.getImages().getKo(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(banner.getImages().getEn(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(banner.getImages().getZh(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(banner.getImages().getJa(), () -> null)))
                                        .build())
                                .newMediaFileNames(ImmutableSet.<String>builder()
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(modifiedBanner.getImage(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(modifiedBanner.getImageKo(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(modifiedBanner.getImageEn(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(modifiedBanner.getImageZh(), () -> null)))
                                        .add(FilenameUtils.getName(
                                                StringUtils.getIfBlank(modifiedBanner.getImageJa(), () -> null)))
                                        .build())
                                .build());
                    }

                    return BannerPayload.builder()
                            .banner(payloadFactory.bannerTemplate(modifiedBanner))
                            .build();
                }
        );
    }

    public BoolPayload removeBanner(long id) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            BannerTemplate banner = bannerService.retrieveBanner(id);

            if (banner.getType() == BannerType.IMAGE) {
                mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                        .media(MediaType.IMAGE)
                        .accessible(MediaAccessibleType.PUBLIC)
                        .domain(MediaDomainType.BANNER)
                        .appliedMediaFileNames(ImmutableSet.<String>builder()
                                .add(FilenameUtils.getName(banner.getImage()))
                                .add(FilenameUtils.getName(banner.getImages().getKo()))
                                .add(FilenameUtils.getName(banner.getImages().getEn()))
                                .add(FilenameUtils.getName(banner.getImages().getZh()))
                                .add(FilenameUtils.getName(banner.getImages().getJa()))
                                .build())
                        .newMediaFileNames(Collections.emptySet())
                        .build());
            }

            return bannerService.removeBanner(id);
        });

        return BoolPayload.builder()
                .result(result)
                .build();
    }

    public BannerListPayload listPriorities(BannerLocation location) {
        List<BannerTemplate> banners = transactionTemplate.executeMainReadableTransaction(
                () -> bannerService.retrieveBannersBy(location, List.of(ProgressStatus.WAIT, ProgressStatus.PROGRESS)));

        return BannerListPayload.builder()
                .banners(banners)
                .build();
    }

    public BannerListPayload modifyPriorities(BannerLocation location, BannerPriorityMutationRequest request) {
        List<BannerTemplate> banners = transactionTemplate.executeMainWritableTransaction(
                () -> bannerService.modifyPriorities(location, request));

        return BannerListPayload.builder()
                .banners(banners)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/banner/usecase/model/BannerListPayload.java
================================================
package kr.co.yeoshin.admin.banner.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.BannerTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BannerListPayload {

    private List<BannerTemplate> banners;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/banner/usecase/model/BannerPageablePayload.java
================================================
package kr.co.yeoshin.admin.banner.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.BannerTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BannerPageablePayload implements PlusAccessible {

    private List<BannerTemplate> banners;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/banner/usecase/model/BannerPayload.java
================================================
package kr.co.yeoshin.admin.banner.usecase.model;

import kr.co.yeoshin.admin.common.model.template.BannerTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BannerPayload {

    private BannerTemplate banner;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/component/extension/NavigationEventTemplate.java
================================================
package kr.co.yeoshin.admin.board.component.extension;

import java.util.List;
import lombok.*;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public class NavigationEventTemplate {

    private String type;
    private List<NavigationEventTopGroup> topGroups;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/AdminMemoPageablePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonView;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminMemoTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.common.administrator.type.View;
import lombok.Builder;
import lombok.Getter;
import org.springframework.data.domain.Pageable;

@Getter
@Builder
public class AdminMemoPageablePayload implements PlusAccessible {

    private List<AdminMemoTemplate> memos;
    @JsonView(View.SystemAdmin.class)
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, List<String>> commitChangesByMemoId;
    private PageableTemplate pageable;

    public static AdminMemoPageablePayload empty(Pageable pageable) {
        return AdminMemoPageablePayload.builder()
                .memos(Collections.emptyList())
                .admins(Collections.emptyMap())
                .commitChangesByMemoId(Collections.emptyMap())
                .pageable(PageableTemplate.builder()
                        .page(pageable.getPageNumber())
                        .size(pageable.getPageSize())
                        .totalCount(0)
                        .build())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/AdminMemoPayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminMemoTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdminMemoPayload implements PlusAccessible {

    private AdminMemoTemplate memo;
    private List<String> commitChanges;
    private AdminShortTemplate admin;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/ExplorerThemePageablePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeSalesEventListTemplate;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerThemePageablePayload implements SystemAccessible {

    private List<ExplorerThemeShortTemplate> explorerThemes;
    private Map<Long, List<ExplorerThemeSalesEventListTemplate>> explorerThemeSalesEventListTitleByExplorerThemeId;
    private Map<Long, TreatmentTemplate> treatments;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/ExplorerThemePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeSalesEventListTemplate;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import kr.co.yeoshin.admin.common.model.template.TvShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerThemePayload {

    private ExplorerThemeTemplate explorerTheme;
    private List<ExplorerThemeSalesEventListTemplate> explorerThemeSalesEventLists;
    private Map<Long, TreatmentTemplate> treatments;
    private Map<Long, List<TvShortTemplate>> tvsByTreatmentId;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/PromotionPageablePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionPageablePayload {

    private List<PromotionTemplate> promotions;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/PromotionPayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionPayload {

    private PromotionTemplate promotion;
    private AdminShortTemplate creator;
    private AdminShortTemplate updater;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/PromotionReplyPageablePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.PromotionReplyTemplate;
import kr.co.yeoshin.admin.common.model.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyPageablePayload {

    private List<PromotionReplyTemplate> promotionReplies;
    private Map<Long, PromotionTemplate> promotions;
    private Map<Long, MemberTemplate> members;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/PromotionReplyPayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.PromotionReplyTemplate;
import kr.co.yeoshin.admin.common.model.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyPayload {

    private PromotionTemplate promotion;
    private PromotionReplyTemplate promotionReply;
    private MemberTemplate member;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/TreatmentCounselingCheckPayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import com.fasterxml.jackson.annotation.JsonGetter;
import kr.co.yeoshin.admin.common.model.template.TreatmentCounselingTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentCounselingCheckPayload {

    private boolean isConflict;
    private TreatmentCounselingTemplate conflictTreatmentCounseling;

    @JsonGetter("isConflict")
    public boolean isConflict() {
        return isConflict;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/TreatmentCounselingPageablePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentCounselingPageablePayload {

    private List<TreatmentCounselingTemplate> treatmentCounselings;
    private Map<Long, TreatmentCounselingFaqTemplate> treatmentCounselingFaqs;
    private Map<Long, TreatmentTemplate> treatments;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/TreatmentCounselingPayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentCounselingFaqTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentCounselingTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentCounselingPayload {

    private TreatmentCounselingTemplate treatmentCounseling;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, TreatmentCounselingFaqTemplate> faqs;
    private Map<Long, TreatmentTemplate> treatmentTemplates;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/TreatmentFocusPageablePayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentFocusTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import kr.co.yeoshin.admin.common.model.template.TvShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentFocusPageablePayload {

    private List<TreatmentFocusTemplate> treatmentFocuses;
    private Map<Long, TreatmentTemplate> treatments;
    private Map<Long, TvShortTemplate> tvs;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/service/model/TreatmentFocusPayload.java
================================================
package kr.co.yeoshin.admin.board.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.TreatmentFocusTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import kr.co.yeoshin.admin.common.model.template.TvShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentFocusPayload {

    private TreatmentFocusTemplate treatmentFocus;
    private TreatmentTemplate treatment;
    private List<TvShortTemplate> tvs;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/AdminMemoUseCase.java
================================================
package kr.co.yeoshin.admin.board.usecase;

import java.util.List;
import kr.co.yeoshin.admin.board.controller.model.AdminMemoFilterRequest;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPageablePayload;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.BoardCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.BoardException;
import kr.co.yeoshin.common.board.model.AdminMemoWhereCondition;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;

@UseCase
@RequiredArgsConstructor
public class AdminMemoUseCase {

    private final AdminMemoService adminMemoService;
    private final TransactionTemplate transactionTemplate;

    public AdminMemoPageablePayload retrieveAdminMemo(AdminMemoType adminMemoType, AdminMemoFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> adminMemoService.retrieveAdminMemos(request.toWhereCondition(adminMemoType)));
    }

    public AdminMemoPayload retrieveAdminMemo(AdminMemoType adminMemoType, long adminMemoId) {
        return transactionTemplate.executeMainReadableTransaction(
                        () -> adminMemoService.retrieveAdminMemoByAdminMemoId(adminMemoType, adminMemoId))
                .orElseThrow(() -> new BoardException(BoardCode.BOARD_ADMIN_MEMO_NOT_EXIST));
    }

    public AdminMemoPayload registerAdminMemo(AdminMemoType adminMemoType, AdminMemoMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> adminMemoService.registerAdminMemo(adminMemoType, request));
    }

    public AdminMemoPayload updateAdminMemo(AdminMemoType adminMemoType, long adminMemoId, AdminMemoMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> adminMemoService.updateAdminMemo(adminMemoType, adminMemoId, request));
    }

    public BoolPayload deleteAdminMemo(AdminMemoType adminMemoType, long adminMemoId) {
        return transactionTemplate.executeMainWritableTransaction(() -> adminMemoService.deleteAdminMemo(adminMemoType, adminMemoId));
    }

    public AdminMemoPageablePayload retrieveAdminMemoChanges(AdminMemoType refType, long refId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
                    AdminMemoWhereCondition condition = AdminMemoWhereCondition.builder()
                            .refTypes(List.of(refType))
                            .refId(refId)
                            .pageable(PageRequest.of(0, Integer.MAX_VALUE, Sort.by(Order.desc("id"))))
                            .build();

                    return adminMemoService.retrieveAdminMemos(condition);
                }
        );
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/ExplorerThemeUseCase.java
================================================
package kr.co.yeoshin.admin.board.usecase;

import java.util.Collections;
import kr.co.yeoshin.admin.board.controller.model.ExplorerThemeFilterRequest;
import kr.co.yeoshin.admin.board.controller.model.ExplorerThemeMutationRequest;
import kr.co.yeoshin.admin.board.service.ExplorerThemeService;
import kr.co.yeoshin.admin.board.service.model.ExplorerThemePageablePayload;
import kr.co.yeoshin.admin.board.service.model.ExplorerThemePayload;
import kr.co.yeoshin.admin.board.usecase.model.ExplorerThemeListPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.api.request.PriorityMutationRequest;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.board.type.ExplorerThemeLocationType;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;

@UseCase
@RequiredArgsConstructor
public class ExplorerThemeUseCase {

    private final ExplorerThemeService explorerThemeService;
    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;

    public ExplorerThemePageablePayload retrieveExplorerThemes(ExplorerThemeFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> explorerThemeService.retrieveExplorerThemes(request.toWhereCondition()));
    }

    public ExplorerThemePayload retrieveExplorerTheme(long id) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> explorerThemeService.retrieveExplorerThemeByExplorerThemeId(id));
    }

    public ExplorerThemePayload registerExplorerTheme(ExplorerThemeMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ExplorerThemePayload explorerThemePayload = explorerThemeService.registerExplorerTheme(request);

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.THEME)
                    .appliedMediaFileNames(Collections.emptySet())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(request.getImage())
                            .add(request.getDetailImage())
                            .build())
                    .build());

            return explorerThemePayload;
        });
    }

    public ExplorerThemePayload updateExplorerTheme(long id, ExplorerThemeMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ExplorerThemePayload explorerThemePayload = explorerThemeService.retrieveExplorerThemeByExplorerThemeId(id);
            ExplorerThemeTemplate explorerTheme = explorerThemePayload.getExplorerTheme();

            ExplorerThemePayload modifiedExplorerThemePayload = explorerThemeService.updateExplorerTheme(id, request);
            ExplorerThemeTemplate modifiedExplorerTheme = modifiedExplorerThemePayload.getExplorerTheme();

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.THEME)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .add(FilenameUtils.getName(explorerTheme.getImage()))
                            .add(FilenameUtils.getName(explorerTheme.getDetailImage()))
                            .build())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(FilenameUtils.getName(modifiedExplorerTheme.getImage()))
                            .add(FilenameUtils.getName(modifiedExplorerTheme.getDetailImage()))
                            .build())
                    .build());

            return modifiedExplorerThemePayload;
        });
    }

    public BoolPayload deleteExplorerTheme(long id) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            ExplorerThemePayload explorerThemePayload = explorerThemeService.retrieveExplorerThemeByExplorerThemeId(id);
            ExplorerThemeTemplate explorerTheme = explorerThemePayload.getExplorerTheme();

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.THEME)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .add(FilenameUtils.getName(explorerTheme.getImage()))
                            .add(FilenameUtils.getName(explorerTheme.getDetailImage()))
                            .build())
                    .newMediaFileNames(Collections.emptySet())
                    .build());

            return explorerThemeService.removeExplorerTheme(id);
        });
        return BoolPayload.builder().result(result).build();
    }

    public ExplorerThemeListPayload retrievePriorityExplorerThemes(ExplorerThemeLocationType locationType) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> explorerThemeService.retrieveVisibleExplorerThemesByType(locationType)
        );
    }

    public ExplorerThemeListPayload updatePriorityExplorerTheme(ExplorerThemeLocationType locationType,
            PriorityMutationRequest request) {
        transactionTemplate.executeMainWritableTransaction(
                () -> explorerThemeService.updatePriorityExplorerThemes(locationType, request.getPriorities())
        );

        return retrievePriorityExplorerThemes(locationType);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/PromotionUseCase.java
================================================
package kr.co.yeoshin.admin.board.usecase;

import java.util.Collections;
import kr.co.yeoshin.admin.board.controller.model.PromotionFilterRequest;
import kr.co.yeoshin.admin.board.controller.model.PromotionMutationRequest;
import kr.co.yeoshin.admin.board.controller.model.PromotionReplyFilterRequest;
import kr.co.yeoshin.admin.board.controller.model.PromotionReplyMutationRequest;
import kr.co.yeoshin.admin.board.service.PromotionService;
import kr.co.yeoshin.admin.board.service.model.PromotionPageablePayload;
import kr.co.yeoshin.admin.board.service.model.PromotionPayload;
import kr.co.yeoshin.admin.board.service.model.PromotionReplyPageablePayload;
import kr.co.yeoshin.admin.board.service.model.PromotionReplyPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;

@UseCase
@RequiredArgsConstructor
public class PromotionUseCase {

    private final PromotionService promotionService;
    private final TransactionTemplate transactionTemplate;
    private final MediaService mediaService;

    public PromotionPageablePayload retrievePromotions(PromotionFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> promotionService.retrievePromotions(request.toWhereCondition())
        );
    }

    public PromotionPayload retrievePromotion(long id) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> promotionService.retrievePromotion(id)
        );
    }

    public PromotionPayload registerPromotion(PromotionMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
                    PromotionPayload payload = promotionService.registerPromotion(request);

                    mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PUBLIC)
                            .domain(MediaDomainType.PROMOTION)
                            .appliedMediaFileNames(Collections.emptySet())
                            .newMediaFileNames(ImmutableSet.<String>builder()
                                    .add(request.getThumbnail())
                                    .build())
                            .build());

                    return payload;
                }
        );
    }

    public PromotionPayload updatePromotion(long id, PromotionMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
                    PromotionPayload payload = promotionService.retrievePromotion(id);
                    PromotionPayload updatedPayload = promotionService.updatePromotion(id, request);

                    mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PUBLIC)
                            .domain(MediaDomainType.PROMOTION)
                            .appliedMediaFileNames(ImmutableSet.<String>builder()
                                    .add(FilenameUtils.getName(payload.getPromotion().getThumbnail()))
                                    .build())
                            .newMediaFileNames(ImmutableSet.<String>builder()
                                    .add(FilenameUtils.getName(updatedPayload.getPromotion().getThumbnail()))
                                    .build())
                            .build());

                    return updatedPayload;
                }
        );
    }

    public BoolPayload deletePromotion(long id) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    PromotionPayload payload = promotionService.retrievePromotion(id);

                    mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PUBLIC)
                            .domain(MediaDomainType.PROMOTION)
                            .appliedMediaFileNames(ImmutableSet.<String>builder()
                                    .add(FilenameUtils.getName(payload.getPromotion().getThumbnail()))
                                    .build())
                            .newMediaFileNames(Collections.emptySet())
                            .build());

                    return promotionService.deletePromotion(id);
                }
        );
    }

    public PromotionReplyPageablePayload retrievePromotionReplies(PromotionReplyFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> promotionService.retrievePromotionReplies(request.toWhereCondition())
        );
    }

    public PromotionReplyPayload retrievePromotionReply(long id) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> promotionService.retrievePromotionReply(id)
        );
    }

    public PromotionReplyPayload updatePromotionReply(long id, PromotionReplyMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> promotionService.updatePromotionReply(id, request)
        );
    }


    public BoolPayload deletePromotionReply(long id) {
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    promotionService.removePromotionReply(id);
                    return true;
                })
        ).build();
    }


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/TreatmentCounselingUseCase.java
================================================
package kr.co.yeoshin.admin.board.usecase;

import java.util.List;
import kr.co.yeoshin.admin.board.controller.model.TreatmentCounselingFaqMutationRequest;
import kr.co.yeoshin.admin.board.controller.model.TreatmentCounselingFilterRequest;
import kr.co.yeoshin.admin.board.controller.model.TreatmentCounselingMutationRequest;
import kr.co.yeoshin.admin.board.service.TreatmentCounselingService;
import kr.co.yeoshin.admin.board.service.model.TreatmentCounselingCheckPayload;
import kr.co.yeoshin.admin.board.service.model.TreatmentCounselingPageablePayload;
import kr.co.yeoshin.admin.board.service.model.TreatmentCounselingPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentCounselingFaqTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class TreatmentCounselingUseCase {

    private final TreatmentCounselingService treatmentCounselingService;
    private final TransactionTemplate transactionTemplate;

    public TreatmentCounselingPageablePayload retrieveTreatmentCounselings(TreatmentCounselingFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentCounselingService.retrieveTreatmentCounselings(request.toWhereCondition()));
    }

    public TreatmentCounselingPayload retrieveTreatmentCounseling(long treatmentCounselingId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentCounselingService.retrieveTreatmentCounseling(treatmentCounselingId));
    }

    public TreatmentCounselingPayload registerTreatmentCounseling(TreatmentCounselingMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentCounselingService.registerTreatmentCounseling(request));
    }

    public TreatmentCounselingPayload updateTreatmentCounseling(
            long treatmentCounselingId,
            TreatmentCounselingMutationRequest request
    ) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentCounselingService.updateTreatmentCounseling(treatmentCounselingId, request));
    }

    public List<TreatmentCounselingFaqTemplate> retrieveTreatmentCounselingFaqList(long treatmentCounselingId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentCounselingService.retrieveTreatmentCounselingFaqList(treatmentCounselingId));
    }

    public TreatmentCounselingPayload updateTreatmentCounselingFaqs(
            long treatmentCounselingId,
            TreatmentCounselingFaqMutationRequest request
    ) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentCounselingService.updateTreatmentCounselingFaqs(treatmentCounselingId, request));
    }

    public TreatmentCounselingCheckPayload checkVisibleConflictTreatmentCounseling(TreatmentCounselingMutationRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentCounselingService.checkVisibleConflictTreatmentCounseling(request)
        );
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/TreatmentFocusUseCase.java
================================================
package kr.co.yeoshin.admin.board.usecase;

import java.util.List;
import kr.co.yeoshin.admin.board.controller.model.TreatmentFocusFilterRequest;
import kr.co.yeoshin.admin.board.controller.model.TreatmentFocusMutationRequest;
import kr.co.yeoshin.admin.board.service.TreatmentFocusService;
import kr.co.yeoshin.admin.board.service.model.TreatmentFocusPageablePayload;
import kr.co.yeoshin.admin.board.service.model.TreatmentFocusPayload;
import kr.co.yeoshin.admin.board.usecase.model.TreatmentFocusListPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.api.request.PriorityMutationRequest;
import kr.co.yeoshin.admin.common.model.template.TreatmentFocusTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class TreatmentFocusUseCase {

    private final TreatmentFocusService treatmentFocusService;
    private final TransactionTemplate transactionTemplate;

    public TreatmentFocusPageablePayload retrieveTreatmentFocuses(TreatmentFocusFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentFocusService.retrieveTreatmentFocuses(request.toWhereCondition()));
    }

    public TreatmentFocusPayload retrieveTreatmentFocus(long treatmentFocusId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentFocusService.retrieveTreatmentFocus(treatmentFocusId));
    }

    public TreatmentFocusPayload registerTreatmentFocus(TreatmentFocusMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentFocusService.registerTreatmentFocus(request));
    }

    public TreatmentFocusPayload updateTreatmentFocus(long treatmentFocusId, TreatmentFocusMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentFocusService.updateTreatmentFocus(treatmentFocusId, request));
    }

    public BoolPayload deleteTreatmentFocus(long treatmentFocusId) {
        return BoolPayload.builder().result(
                        transactionTemplate.executeMainWritableTransaction(
                                () -> treatmentFocusService.deleteTreatmentFocus(treatmentFocusId)))
                .build();
    }

    public TreatmentFocusListPayload retrievePriorityTreatmentFocuses() {
        List<TreatmentFocusTemplate> treatmentFocuses = transactionTemplate.executeMainReadableTransaction(
                treatmentFocusService::retrieveVisibleTreatmentFocuses
        );

        return TreatmentFocusListPayload.builder()
                .treatmentFocuses(treatmentFocuses)
                .build();
    }

    public TreatmentFocusListPayload updatePriorityTreatmentFocuses(PriorityMutationRequest request) {
        List<TreatmentFocusTemplate> treatmentFocuses = transactionTemplate.executeMainWritableTransaction(
                () -> treatmentFocusService.updatePriorityTreatmentFocuses(request.getPriorities()));

        return TreatmentFocusListPayload.builder()
                .treatmentFocuses(treatmentFocuses)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/model/ExplorerThemeListPayload.java
================================================
package kr.co.yeoshin.admin.board.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeSalesEventListTemplate;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeShortTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerThemeListPayload implements SystemAccessible {

    private List<ExplorerThemeShortTemplate> explorerThemes;
    private Map<Long, List<ExplorerThemeSalesEventListTemplate>> explorerThemeByThemeId;
    private Map<Long, TreatmentTemplate> treatments;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/board/usecase/model/TreatmentFocusListPayload.java
================================================
package kr.co.yeoshin.admin.board.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.TreatmentFocusTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentFocusListPayload {

    private List<TreatmentFocusTemplate> treatmentFocuses;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/BrowserUseCase.java
================================================
package kr.co.yeoshin.admin.browser.usecase;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.admin.browser.controller.model.*;
import kr.co.yeoshin.admin.browser.service.BrowserService;
import kr.co.yeoshin.admin.browser.usecase.model.*;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;

@RequiredArgsConstructor
@UseCase
public class BrowserUseCase {

    private final BrowserService browserService;
    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;

    public BrowserLibraryPageablePayload listLibrary(BrowserLibraryFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> browserService.retrieveLibraries(request));
    }

    public BrowserLibraryPayload registerLibrary(BrowserLibraryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            Optional.ofNullable(request.getImage())
                    .ifPresent(x -> mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PUBLIC)
                            .domain(MediaDomainType.BROWSER)
                            .appliedMediaFileNames(Collections.emptySet())
                            .newMediaFileNames(ImmutableSet.<String>builder()
                                    .add(FilenameUtils.getName(request.getImage()))
                                    .build())
                            .build()));

            return browserService.registerLibrary(request);
        });
    }

    public BrowserLibraryPayload retrieveLibrary(long id) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.retrieveLibrary(id));
    }

    public BrowserLibraryPayload modifyLibrary(long id, BrowserLibraryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            BrowserLibraryPayload payload = browserService.retrieveLibrary(id);

            Collection<String> appliedMediaFileNames = StringUtils.isBlank(payload.getBrowserLibrary().getImage())
                    ? Collections.emptyList()
                    : Collections.singletonList(FilenameUtils.getName(payload.getBrowserLibrary().getImage()));

            Collection<String> newMediaFileNames = StringUtils.isBlank(request.getImage())
                    ? Collections.emptyList()
                    : Collections.singletonList(FilenameUtils.getName(request.getImage()));

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.BROWSER)
                    .appliedMediaFileNames(appliedMediaFileNames)
                    .newMediaFileNames(newMediaFileNames)
                    .build());

            return browserService.modifyLibrary(id, request);
        });
    }

    public BoolPayload removeLibrary(long id) {
        return BoolPayload.of(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    BrowserLibraryPayload payload = browserService.retrieveLibrary(id);
                    Optional.ofNullable(payload.getBrowserLibrary().getImage())
                            .ifPresent(x -> mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                                    .media(MediaType.IMAGE)
                                    .accessible(MediaAccessibleType.PUBLIC)
                                    .domain(MediaDomainType.BROWSER)
                                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                                            .add(FilenameUtils.getName(x))
                                            .build())
                                    .newMediaFileNames(Collections.emptySet())
                                    .build()));

                    return browserService.removeLibrary(id);
                }));
    }

    public BrowserSegmentPageablePayload listSegment(BrowserSegmentFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() ->
                browserService.retrieveSegments(request));
    }

    public BrowserSegmentPayload registerSegment(BrowserSegmentMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.registerSegment(request));
    }

    public BrowserSegmentPayload modifySegment(long id, BrowserSegmentMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.modifySegment(id, request));
    }

    public BoolPayload removeSegment(long id) {
        return BoolPayload.of(
                transactionTemplate.executeMainWritableTransaction(() ->
                        browserService.removeSegment(id)));
    }

    public BrowserCollectionPageablePayload listCollection(BrowserCollectionFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> browserService.retrieveCollections(request));
    }

    public BrowserCollectionPayload retrieveCollection(long id) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.retrieveCollection(id));
    }

    public BrowserCollectionPayload registerCollection(BrowserCollectionMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.registerCollection(request));
    }

    public BrowserCollectionPayload modifyCollection(long id, BrowserCollectionMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.modifyCollection(id, request));
    }

    public BoolPayload removeCollection(long id) {
        return BoolPayload.of(
                transactionTemplate.executeMainWritableTransaction(() -> browserService.removeCollection(id)));
    }

    public BrowserCollectionsPayload modifyCollectionPriorities(BrowserCollectionPriorityMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.modifyCollectionPriorities(request));
    }

    public BoolPayload activateCollection(long id, boolean activate) {
        return transactionTemplate.executeMainWritableTransaction(() -> browserService.modifyCollectionActivate(id, activate));
    }

    public BoolPayload publishCollection(long id, BrowserCollectionPublishRequest request, boolean dryRun) {
        return BoolPayload.of(
                transactionTemplate.executeMainWritableTransaction(() -> browserService.publishCollection(id, request, dryRun)));
    }

    public BrowserCollectionPublishPayload listPublishCollection(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> browserService.listPublishCollection(id));
    }

    public BrowserCollectionPublishLogPayload listPublishCollectionLogs(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> browserService.listPublishCollectionLogs(id));
    }

    public BrowserCollectionPublishLogPayload listPublishCollectionLatestLogs(List<Long> browserCollectionIds) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> browserService.listPublishCollectionLatestLogs(browserCollectionIds));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserCollectionPageablePayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.BrowserCollectionTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserLibraryTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserSegmentTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionPageablePayload {

    private List<BrowserCollectionTemplate> browserCollections;
    private Map<Long, BrowserSegmentTemplate> browserSegments;
    private Map<Long, BrowserLibraryTemplate> browserLibraries;
    private PageableTemplate pageable;

    public static BrowserCollectionPageablePayload empty() {
        return BrowserCollectionPageablePayload.builder()
                .browserCollections(Collections.emptyList())
                .browserSegments(Collections.emptyMap())
                .browserLibraries(Collections.emptyMap())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserCollectionPayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.BrowserCollectionTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserLibraryTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserSegmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionPayload {

    private BrowserCollectionTemplate browserCollection;
    private Map<Long, BrowserSegmentTemplate> browserSegments;
    private Map<Long, BrowserLibraryTemplate> browserLibraries;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserCollectionPublishLogPayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserCollectionPublishLogTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionPublishLogPayload {

    private List<BrowserCollectionPublishLogTemplate> browserCollectionPublishLogs;
    private Map<Long, AdminShortTemplate> admins;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserCollectionPublishPayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.BrowserCollectionPublishTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionPublishPayload {

    private List<BrowserCollectionPublishTemplate> browserCollectionPublishes;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserCollectionsPayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.BrowserCollectionTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserLibraryTemplate;
import kr.co.yeoshin.admin.common.model.template.BrowserSegmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionsPayload {

    private List<BrowserCollectionTemplate> browserCollections;
    private Map<Long, BrowserSegmentTemplate> browserSegments;
    private Map<Long, BrowserLibraryTemplate> browserLibraries;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserLibraryPageablePayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserLibraryPageablePayload {

    private List<BrowserLibraryTemplate> browserLibraries;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, TvShortTemplate> tvs;
    private Map<Long, SalesEventShortTemplate> salesEvents;
    private Map<Long, TreatmentTemplate> treatments;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserLibraryPayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserLibraryPayload {

    private BrowserLibraryTemplate browserLibrary;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, TvShortTemplate> tvs;
    private Map<Long, SalesEventShortTemplate> salesEvents;
    private Map<Long, TreatmentTemplate> treatments;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserSegmentPageablePayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.BrowserSegmentTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserSegmentPageablePayload {

    private List<BrowserSegmentTemplate> browserSegments;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/browser/usecase/model/BrowserSegmentPayload.java
================================================
package kr.co.yeoshin.admin.browser.usecase.model;

import kr.co.yeoshin.admin.common.model.template.BrowserSegmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserSegmentPayload {

    private BrowserSegmentTemplate browserSegment;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/code/usecase/CodeUseCase.java
================================================
package kr.co.yeoshin.admin.code.usecase;

import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.admin.code.service.CodeService;
import kr.co.yeoshin.admin.code.service.model.SelectCode;
import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.common.hospital.type.DoctorSubject;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoType;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoValue;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@UseCase
public class CodeUseCase {

    private final ResponseFactory responseFactory;

    private final CodeService codeService;

    // TODO : CodeDescriptor, findCode(), findCodes()..

    @PostConstruct
    public void init() {
        codeService.putCode("doctor-subject", DoctorSubject.class);
        codeService.putCode("hospital-additional-info-type", HospitalAdditionalInfoType.class);
        codeService.putCode("hospital-additional-info-value", HospitalAdditionalInfoValue.class);
    }

    public ApiResponse<Map<String, List<SelectCode>>> findSelectCodes() {
        return responseFactory.success(
                codeService.findSelectCodes()
        );
    }

    public ApiResponse<Map<String, List<SelectCode>>> findSelectCodesByEnumNames(
            List<String> enumName) {
        return responseFactory.success(
                codeService.findSelectCode(enumName)
        );
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/component/CacheTemplate.java
================================================
package kr.co.yeoshin.admin.common.component;

import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import kr.co.yeoshin.admin.common.component.type.CacheCallback;
import kr.co.yeoshin.admin.common.component.type.CacheKey;
import kr.co.yeoshin.admin.common.stereotype.Memoize;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.common.utils.JsonUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Component;

@AllArgsConstructor
@Component
public class CacheTemplate {

    private final ApplicationProps applicationProps;
    private final StringRedisTemplate redisTemplate;

    @Memoize
    public <T> T local(CacheKey cacheKey, CacheCallback<T> callback) {
        return callback.execute();
    }

    public <T> T global(CacheKey cacheKey, CacheCallback<T> callback, Class<T> clazz) {
        return global(cacheKey, callback, (v) -> JsonUtils.toObject(v, clazz));
    }

    public <T> T global(CacheKey cacheKey, CacheCallback<T> callback, TypeReference<T> typeReference) {
        return global(cacheKey, callback, (v) -> JsonUtils.toObject(v, typeReference));
    }

    private <T> T global(CacheKey cacheKey, CacheCallback<T> callback, Function<String, T> deserializeProcessor) {
        String key = cacheKey.toString();
        String value = redisTemplate.opsForValue().get(key);
        if (StringUtils.isNotBlank(value)) {
            T deserialized = deserializeProcessor.apply(value);
            if (deserialized != null) {
                return deserialized;
            }
        }

        T result = callback.execute();
        if (result == null) {
            return null;
        }

        redisTemplate.opsForValue().set(key,
                JsonUtils.toJsonString(result),
                applicationProps.getMemoization().getPeriodSeconds(),
                TimeUnit.SECONDS);

        return result;
    }

    public long increaseValue(CacheKey cacheKey, long timeout, TimeUnit timeUnit) {
        String key = cacheKey.toString();
        long result = Optional.ofNullable(redisTemplate.opsForValue().increment(key))
                .orElse(0L);
        if (result == 1) {
            redisTemplate.expire(key, timeout, timeUnit);
        }

        return result;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/component/TransactionTemplate.java
================================================
package kr.co.yeoshin.admin.common.component;

import kr.co.yeoshin.admin.common.stereotype.MainReadableTransactional;
import kr.co.yeoshin.admin.common.stereotype.MainWritableTransactional;
import org.springframework.stereotype.Component;

@Component("kr.co.yeoshin.admin.common.transactionTemplate")
public class TransactionTemplate {

    @MainWritableTransactional
    public <T> T executeMainWritableTransaction(TransactionCallback<T> callback) {
        return callback.execute();
    }

    @MainReadableTransactional
    public <T> T executeMainReadableTransaction(TransactionCallback<T> callback) {
        return callback.execute();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/ApiValidationErrorResponsePayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ApiValidationErrorResponsePayload {

    private final List<FieldError> errors;

    @Getter
    @Builder
    public static class FieldError {

        private String fieldName;
        private String message;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/BoolPayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import kr.co.yeoshin.admin.common.model.api.payload.level.PublicAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BoolPayload implements PublicAccessible {

    private boolean result;

    public static BoolPayload of(boolean result) {
        return BoolPayload.builder().result(result).build();
    }

    public static BoolPayload success() {
        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public static BoolPayload fail() {
        return BoolPayload.builder()
                .result(false)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/HierarchyPayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import java.util.List;

public interface HierarchyPayload<K, C> {

    K getId();

    C getContent();

    List<? extends HierarchyPayload<K, C>> getChildren();

    boolean hasChildren();

    List<? extends HierarchyPayload<K, C>> flatten();

    enum Direction {
        UPWARD, DOWNWARD
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/ListPayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ListPayload<T> {

    private List<T> items;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/MultipleResultPayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MultipleResultPayload<T, R> implements PlusAccessible {

    private List<ResultItem<T, R>> results;

    @Getter
    @Builder
    public static class ResultItem<T, R> implements PlusAccessible {
        private T request;
        private R result;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/OrderedHierarchyPayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import org.springframework.util.CollectionUtils;

@Getter
@Builder(toBuilder = true)
@EqualsAndHashCode(of = "id")
public class OrderedHierarchyPayload<K, C> implements HierarchyPayload<K, C> {

    private K id;
    private C content;
    private int order;
    private List<OrderedHierarchyPayload<K, C>> children;

    @JsonProperty("hasChildren")
    @Override
    public boolean hasChildren() {
        return !CollectionUtils.isEmpty(children);
    }

    @Override
    public List<OrderedHierarchyPayload<K, C>> flatten() {
        List<OrderedHierarchyPayload<K, C>> list = new ArrayList<>();
        list.add(this);
        if (hasChildren()) {
            list.addAll(
                    children.stream()
                            .sorted(Comparator.comparingInt(OrderedHierarchyPayload::getOrder))
                            .flatMap(it -> it.flatten().stream())
                            .collect(Collectors.toList())
            );
        }
        return List.copyOf(list);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/PagePayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PagePayload<T> {

    private List<T> items;
    private int page;
    private int size;
    private long totalCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/api/payload/SimpleHierarchyPayload.java
================================================
package kr.co.yeoshin.admin.common.model.api.payload;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import org.springframework.util.CollectionUtils;

@Getter
@Builder(toBuilder = true)
@EqualsAndHashCode(of = "id")
public class SimpleHierarchyPayload<K, C> implements HierarchyPayload<K, C> {

    private K id;
    private C content;
    private List<SimpleHierarchyPayload<K, C>> children;

    @JsonProperty("hasChildren")
    @Override
    public boolean hasChildren() {
        return !CollectionUtils.isEmpty(children);
    }

    public List<SimpleHierarchyPayload<K, C>> flatten() {
        List<SimpleHierarchyPayload<K, C>> list = new ArrayList<>();
        list.add(this);
        if (hasChildren()) {
            list.addAll(children.stream().flatMap(it -> it.flatten().stream()).collect(Collectors.toList()));
        }
        return List.copyOf(list);
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdPointConversionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointConversionTemplate implements SystemAccessible {

    private long id;

    // todo : item add
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdPointPaymentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.type.PayMethod;
import kr.co.yeoshin.common.payment.type.PgType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointPaymentTemplate implements PlusAccessible {

    private long id;
    private long orderId;
    private String merchantUid;
    private PgType pgType;
    private PayMethod payMethod;
    private int amount;
    private String buyerTel;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdPointProductTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointProductTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private long id;
    private int priority;
    @JsonView(PlusAdmin.class)
    private OrderProductType orderProductType;
    @JsonView(PlusAdmin.class)
    private String name;
    @JsonView(PlusAdmin.class)
    private int price;
    @JsonView(PlusAdmin.class)
    private int point;
    private int paidPoint;
    private int freePoint;
    private boolean isVisible;
    private boolean isAlways;
    @JsonView(PlusAdmin.class)
    private ProgressStatus saleStatus;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdPointTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.point.model.AdPointExpiry;
import kr.co.yeoshin.common.point.type.AdPointAction;
import kr.co.yeoshin.common.point.type.AdPointType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointTemplate implements PlusAccessible {

    private long id;

    private long hospitalId;

    private String title;

    private int point;

    @JsonView(SystemAdmin.class)
    private int paidPoint;

    @JsonView(SystemAdmin.class)
    private int freePoint;

    @JsonView(SystemAdmin.class)
    private int transPoint;

    private int remainPoint;

    @JsonView(SystemAdmin.class)
    private int remainPaidPoint;

    @JsonView(SystemAdmin.class)
    private int remainFreePoint;

    @JsonView(SystemAdmin.class)
    private int remainTransPoint;

    private OrderProductType orderProductType;

    private AdPointAction action;

    private AdPointType type;

    private String memo;

    @JsonView(SystemAdmin.class)
    private String adminMemo;

    private List<AdPointExpiry> expires;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdminAccountTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AdminAccountTemplate implements PlusAccessible {

    private long id;
    private long adminId;
    private AuthProvider provider;
    private String providerId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}




================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdminAuditTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.Map;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.audit.type.AdminActionType;
import kr.co.yeoshin.common.type.HttpMethod;
import lombok.Builder;
import lombok.Getter;
import net.minidev.json.annotate.JsonIgnore;
import org.springframework.format.annotation.DateTimeFormat;

@Getter
@Builder
public class AdminAuditTemplate implements PlusAccessible {

    private long id;

    private long adminId;

    private long adminGroupId;

    @JsonIgnore
    private boolean isExternal;

    private String sourceIp;

    private LevelGroup accessDomain;

    private AdminActionType adminActionType;

    private String verbose;

    @JsonIgnore
    private boolean isSuccess;

    private String userAgent;

    private String requestUri;

    private String requestParams;

    private HttpMethod httpMethod;

    private Integer responseCode;

    private Long hospitalId;

    private Map<String, Object> meta;

    @DateTimeFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @DateTimeFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isExternal")
    public boolean isExternal() {
        return isExternal;
    }

    @JsonGetter("isSuccess")
    public boolean isSuccess() {
        return isSuccess;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdminGroupTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdminGroupTemplate implements PlusAccessible {

    private long id;
    private String name;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdminMemoTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder(toBuilder = true)
public class AdminMemoTemplate implements PlusAccessible {

    private long id;
    private String content;
    private String subContent;
    private AdminMemoType refType;
    private long refId;
    private long adminId;
    private String writer;
    @JsonView(SystemAdmin.class)
    private boolean isSecret;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isSecret")
    public boolean isSecret() {
        return isSecret;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdminShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import static kr.co.yeoshin.admin.common.Constant.Admin.SYSTEM_ADMIN_NAME_IN_PLUS;
import static kr.co.yeoshin.admin.common.Constant.Admin.VIRTUAL_HOSPITAL_OWNER_ID;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.Objects;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.type.AdminStatus;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AdminShortTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private long id;
    @Mask(type = MaskingType.NAME)
    @JsonView(PlusAdmin.class)
    private String name;
    @Mask(type = MaskingType.EMAIL)
    private String email;
    @Mask(type = MaskingType.CELL_PHONE)
    private String phone;
    private AuthProvider provider;
    @JsonView(PlusAdmin.class)
    private String providerId;
    @JsonView(PlusAdmin.class)
    private Level level;
    private AdminStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    public static AdminShortTemplate of(Admin admin, boolean isPlusAdmin) {
        if (admin == null || Objects.equals(admin.getId(), VIRTUAL_HOSPITAL_OWNER_ID)) {
            return null;
        }

        return AdminShortTemplate.builder()
                .id(admin.getId())
                .name(isPlusAdmin && LevelGroup.findGroup(admin.getLevelType()) == LevelGroup.SYSTEM
                        ? SYSTEM_ADMIN_NAME_IN_PLUS : admin.getName())
                .email(admin.getEmail())
                .phone(admin.getCellPhone())
                .level(admin.getLevelType())
                .status(admin.getStatus())
                .createdAt(InvokeSupporters.getOrNullIfNull(
                        () -> DateUtil.convertFrom(admin.getCreated())))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AdminTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.administrator.type.AdminStatus;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AdminTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private long id;
    @JsonView(PlusAdmin.class)
    @Mask(type = MaskingType.NAME)
    private String name;
    @Mask(type = MaskingType.EMAIL)
    private String email;
    @Mask(type = MaskingType.CELL_PHONE)
    private String phone;
    @Mask(type = MaskingType.IMAGE)
    private String profileImage;
    @JsonView(PlusAdmin.class)
    private Level level;
    private int infoRetentionPeriod;
    private AdminStatus status;
    private List<Long> adminAccountIds;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/AppVersionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.type.DeviceType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AppVersionTemplate {

    private long id;
    private DeviceType deviceType;
    private String version;
    private String content;
    private String forceVersion;
    private boolean isForceVersion;
    private String minimumOsVersion;
    private String webviewUrl;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BadgeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BadgeTemplate implements PlusAccessible {

    private long id;
    private BadgeType type;
    private String name;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BankAccountTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.type.Bank;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BankAccountTemplate {

    private long id;
    private CodeTemplate bank;
    private String accountHolder;
    private String accountNumber;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BannerTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.banner.type.*;
import kr.co.yeoshin.common.type.LinkType;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BannerTemplate implements PlusAccessible {

    private long id;
    private String name;
    private String contents;
    @Deprecated
    private MultiLanguage localeContents;
    private MultiLanguage localeContent;
    private MultiLanguage localeSubContent;
    private MultiLanguage localeContentColorCode;
    private String image;
    private MultiLanguage images;
    private BannerType type;
    private MultiLanguageType<BannerType> types;
    private BannerLocation location;
    private LinkType linkType;
    private MultiLanguageType<LinkType> linkTypes;
    private String linkUrl;
    private MultiLanguage linkUrls;
    private BannerPosition position;
    private boolean isVisible;
    private int priority;
    private MultiLanguageType<Integer> priorities;
    private ProgressStatus status;
    private List<BannerExposureCondition> exposureConditions;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    @JsonView(SystemAdmin.class)
    private long createAdminId;
    @JsonView(SystemAdmin.class)
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter(value = "isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BlacklistMemberTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.member.type.BlacklistReasonType;
import kr.co.yeoshin.common.member.type.BlacklistType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BlacklistMemberTemplate {

    private long id;
    private BlacklistType type;
    private long adminId;
    private long memberId;
    private BlacklistReasonType reasonType;
    private String reason;
    @JsonInclude(Include.NON_NULL)
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime releasedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BrowserCollectionPublishLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionPublishLogTemplate implements SystemAccessible {

    private long id;
    private long browserCollectionId;
    private String version;
    @JsonProperty("isDryRun")
    private boolean isDryRun;
    @JsonProperty("isActivate")
    private boolean isActivate;
    private String adminMemo;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isDryRun")
    public boolean isDryRun() {
        return isDryRun;
    }

    @JsonGetter("isActivate")
    public boolean isActivate() {
        return isActivate;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BrowserCollectionPublishTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionPublishTemplate implements SystemAccessible {

    private long id;
    private String version;
    @JsonProperty("isDryRun")
    private boolean isDryRun;
    @JsonProperty("isActivate")
    private boolean isActivate;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isDryRun")
    public boolean isDryRun() {
        return isDryRun;
    }

    @JsonGetter("isActivate")
    public boolean isActivate() {
        return isActivate;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BrowserCollectionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.browser.type.BrowserLocationType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserCollectionTemplate implements SystemAccessible {

    private long id;
    private String version;
    private BrowserLocationType location;
    private String title;
    private String description;
    private List<Long> browserLibraryIds;
    private List<Long> browserSegmentIds;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    @JsonProperty("isActivate")
    private boolean isActivate;
    private int priority;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isActivate")
    public boolean isActivate() {
        return isActivate;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BrowserLibraryPageableTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserLibraryPageableTemplate {

    private List<BrowserLibraryTemplate> browserLibraries;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BrowserLibraryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.Map;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.browser.type.BrowserLibraryTemplateType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserLibraryTemplate implements SystemAccessible {

    private long id;
    private BrowserLibraryTemplateType type;
    private MultiLanguage titles;
    private MultiLanguage subtitles;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private Map<String, Object> parameter;
    private String image;
    private String campaign;
    private String memo;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/BrowserSegmentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.Map;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.browser.type.BrowserSegmentType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BrowserSegmentTemplate implements SystemAccessible {

    private long id;
    private BrowserSegmentType type;
    private String title;
    private String description;
    private Map<String, Object> parameter;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CategoryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class CategoryTemplate {

    @JsonInclude(Include.NON_NULL)
    private Long id;
    private String name;
    private String value;

    public static CategoryTemplate empty() {
        return CategoryTemplate.builder()
                .name(StringUtils.EMPTY)
                .value(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CodeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class CodeTemplate implements PlusAccessible {

    @JsonInclude(Include.NON_NULL)
    private Long id;
    private String code;
    private String value;

    public static CodeTemplate empty() {
        return CodeTemplate.builder()
                .code(StringUtils.EMPTY)
                .value(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CommitInfoTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.type.UserType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CommitInfoTemplate implements PlusAccessible {

    private String changes;
    private Long authorId;
    private UserType userType;
    private String author;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime commitAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ContentConcealReasonTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.review.type.ConcealReason;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ContentConcealReasonTemplate implements PlusAccessible {

    private long id;
    private ContentType refType;
    private long refId;
    private ConcealReason concealReason;
    private String concealReasonDescription;
    private String verbose;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ContentReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.report.model.ReportReason;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ContentReportTemplate implements SystemAccessible {

    private long reporterId; // member.id
    private long reportedMemberId; // member.id
    private ReportReason reason;
    private String verbose;
    private ContentType contentType;
    private long contentId;
    private String content;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CouponIssueConditionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponIssueConditionTemplate {

    private long couponId;
    private CouponIssueConditionType type;
    private String value;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CouponShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.coupon.type.CouponBenefitType;
import kr.co.yeoshin.common.coupon.type.CouponIssueStatus;
import kr.co.yeoshin.common.coupon.type.PublishType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponShortTemplate {

    private long id;
    private String code;
    private String name;
    private int issueValidDayCount;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime publishStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime publishEndAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usableStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usableEndAt;
    private PublishType publishType;
    private CouponBenefitType benefitType;
    private int value;
    private int useValidDayCount;
    private CouponIssueStatus issueStatus;
    private long issuedMemberCouponCount;
    private long usedMemberCouponCount;
    private int minimumPaymentPrice;
    private int maximumDiscountPrice;
    private boolean isDuplicateApplyable;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonGetter("isDuplicateApplyable")
    public boolean isDuplicateApplyable() {
        return isDuplicateApplyable;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CouponTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.coupon.type.CouponBenefitType;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.CouponIssueStatus;
import kr.co.yeoshin.common.coupon.type.PublishType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponTemplate {

    private long id;
    private String code;
    private String name;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime publishStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime publishEndAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usableStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usableEndAt;
    private CouponBenefitType benefitType;
    private int maximumUseCount;
    private int issueValidDayCount;
    private PublishType publishType;
    private int value;
    private int useValidDayCount;
    private int minimumPaymentPrice;
    private int maximumDiscountPrice;
    private boolean isDuplicateApplyable;
    private boolean isBaitable;
    private CouponIssueStatus issueStatus;
    private int duplicateUseCount;
    private CouponIssueConditionType issueConditionType;
    private String issueConditionValue;
    private String memo;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isDuplicateApplyable")
    public boolean isDuplicateApplyable() {
        return isDuplicateApplyable;
    }

    @JsonGetter("isBaitable")
    public boolean isBaitable() {
        return isBaitable;
    }


    public static CouponTemplate empty() {
        return CouponTemplate.builder().build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdClickPriceTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdClickPriceTemplate {

    private int price;
    private String description;
    private String boostStatus;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import kr.co.yeoshin.common.cpm.type.CpmAdBoostStatus;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.cpm.type.CpmPlan;
import kr.co.yeoshin.common.cpm.type.FreeAdTrialStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdConfigTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    @JsonView(PlusAdmin.class)
    private int dayBudgetPrice;
    private int estimatedDayBudgetPrice;
    @JsonView(PlusAdmin.class)
    private CpmAdStatus status;
    @JsonView(PlusAdmin.class)
    private CpmAdStatus keptStatus;
    private CpmAdBoostStatus boostStatus;
    @JsonView(PlusAdmin.class)
    private int minimumAdUseEventCount;
    private int estimatedMinimumAdUseEventCount;
    private boolean isNotificationPaused;
    @JsonView(PlusAdmin.class)
    private CpmPlan cpmPlan;
    @JsonView(PlusAdmin.class)
    private FreeAdTrialStatus freeAdTrialStatus;
    private int clickPrice;
    @JsonView(PlusAdmin.class)
    private CpmPlan estimatedCpmPlan;
    @JsonView(PlusAdmin.class)
    private FreeAdTrialStatus estimatedFreeAdTrialStatus;
    private int estimatedClickPrice;
    private int finalClickPrice;
    private int dayBudgetFixPrice;
    private boolean isDayBudgetFixUsable;
    private int examineRoas;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime freeAdTrialStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime freeAdTrialEndAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isNotificationPaused")
    public boolean isNotificationPaused() {
        return isNotificationPaused;
    }

    @JsonGetter("isDayBudgetFixUsable")
    public boolean isDayBudgetFixUsable() {
        return isDayBudgetFixUsable;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdDayBudgetFixPriceTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdDayBudgetFixPriceTemplate {

    private boolean isDayBudgetFixUsable;
    private int dayBudgetFixPrice;
    private int examineRoas;

    @JsonGetter("isDayBudgetFixUsable")
    public boolean isDayBudgetFixUsable() {
        return isDayBudgetFixUsable;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdGuidanceReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.time.LocalDate;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdGuidanceReportTemplate implements SystemAccessible {

    private long hospitalId;
    private LocalDate reportAt;
    private int reportHour;
    private long salesEventViewCount7Day;
    private long salesEventHideCount7Day;
    private long clickCount;
    private long paymentPrice;
    private long paidAdPrice;
    private int roas;
    private long guidancePrice;
    private int guidanceRoas;
    private long salesEventViewPaymentPrice4Week;
    private long salesEventViewPaymentPrice2Week;
    private long salesEventAllPaymentPrice4Week;
    private long salesEventAllPaymentPrice2Week;
    private int examineDayBudgetPrice;
    private int expectRoas;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdHospitalReportDailyShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.time.LocalDate;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdHospitalReportDailyShortTemplate implements PlusAccessible {

    private long hospitalId;
    private LocalDate reportAt;
    private int remainAdPoint;
    private int salesEventViewCount;
    private int salesEventHideCount;
    private CpmAdStatus status;
    private int hospitalScrapCount;
    private int salesEventScrapCount;
    private int salesEventQuestionCount;
    private int treatmentReviewCount;
    private int salesEventConsultationViewCount;
    // todo : more field add
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdHospitalReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.cpm.type.CpmPlan;
import kr.co.yeoshin.common.cpm.type.FreeAdTrialStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdHospitalReportTemplate implements PlusAccessible {

    private long hospitalId;
    private CpmAdStatus cpmAdStatus;
    private CpmPlan cpmPlan;
    private FreeAdTrialStatus freeAdTrialStatus;
    @Deprecated
    private int monthBudgetPrice;
    @Deprecated
    private int monthBudgetBoostPrice;
    @Deprecated
    private long adPoint;
    private int salesEventViewCount;
    private int salesEventHideCount;
    private int salesEventConsultationCount;
    private int salesEventConsultationApplyCount;
    private double expectAdPointRunOutDay;
    private double expectConsultationPointRunOutDay;
    private int salesEventConsultationViewCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdReportFigureTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdReportFigureTemplate implements PlusAccessible {

    private long paidAdOriginalPrice;
    private long paidAdPrice;
    private long freeAdPrice;
    private long paidToFreeAdPrice;
    private long totalFreeAdPrice;
    private long adPrice;
    private long paidViewCount;
    private long freeViewCount;
    private long paidToFreeAdViewCount;
    private long totalFreeAdViewCount;
    private long adViewCount;
    private long clickCount;
    private long paymentPrice;
    @JsonView(SystemAdmin.class)
    private long cancelPrice;
    @JsonView(SystemAdmin.class)
    private long cancelTicketPrice;
    private long usedTicketPrice;
    private long paymentCount;
    private long offlineUpsellPrice;
    private long paymentTotalSubsidy;
    private long salesEventConsultationApplyCount;
    private long salesEventConsultationPrice;
    private long salesEventConsultationVisitCount;
    private long salesEventConsultationProductPrice;
    private long salesEventConsultationPaidViewCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdReportRatioTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdReportRatioTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private double unitOriginalPrice;
    @JsonView(PlusAdmin.class)
    private double unitPrice;
    private double qualityPoint;
    @JsonView(PlusAdmin.class)
    private int pricePerPayment;
    private double clickThroughRate;
    private double viewConversionRate;
    private double clickConversionRate;
    private int cpmRoas;
    private int cpaRoas;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdReportStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdReportStatTemplate implements PlusAccessible {

    private long scrapCount;
    private long questionCount;
    private long reviewCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdRuleTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdRuleTemplate {

    private int cpmUnitPrice;
    private int cpmGuidanceClickPrice;
    private int cpmChargedSalesEventCount;
    private int cpmPremiumAdQualityDayCount;
    private int cpmStandardAdQualityDayCount;
    private int cpmIpCheckMinute;
    private float cpmPremiumAdWeight;
    private float cpmBasicAdWeight;
    private int cpmGuidanceDayCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdSalesEventDetailReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdSalesEventDetailReportTemplate implements PlusAccessible {

    private String reportAt;
    private long salesProductVersionId;
    private int quantity;
    private long totalSalesPrice;
    private long paymentCount;
    private long pricePerPayment;
    private long paymentPrice;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmAdStatusLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.cpm.type.CpmAdStatusLogType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdStatusLogTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    private List<CpmAdStatusLogType> types;
    private String contents;
    private CpmAdStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CpmPaidAdPointStatusTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmPaidAdPointStatusTemplate implements PlusAccessible {

    private long hospitalId;
    private String reportAt;
    private long cpmPaidAdPoint;
    private long cpmFreeAdPoint;
    private long paidConsultationPoint;
    private long freeConsultationPoint;
    private Boolean isPaid;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CrmDeviceTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmDeviceTemplate implements PlusAccessible {

    private long id;
    private CrmDevice type;
    private long hospitalId;
    private String crmHospitalId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public static CrmDeviceTemplate empty() {
        return CrmDeviceTemplate.builder().build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CrmReservationCountTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationCountTemplate implements PlusAccessible {

    private long id;
    private String crmAccessId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reservationAt;
    private CrmDevice crmDeviceType;
    private int count;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CrmReservationHolidayTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;
import org.springframework.format.annotation.DateTimeFormat;

@Getter
@Builder
public class CrmReservationHolidayTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    @DateTimeFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private boolean isUsed;
    @DateTimeFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @DateTimeFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isUsed")
    public boolean isUsed() {
        return isUsed;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/CrmReservationTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationTemplate implements PlusAccessible {

    private long id;
    private Long reservationId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reservationAt;
    private CrmDevice type;
    private String crmAccessId;
    private Long crmDoctorId;
    private long crmReservationId;
    private Long crmMemberId;
    private boolean isConfirmed;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isConfirmed")
    public boolean isConfirmed() {
        return isConfirmed;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/DateTimeRangeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class DateTimeRangeTemplate implements PlusAccessible {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;

    public static DateTimeRangeTemplate empty() {
        return DateTimeRangeTemplate.builder()
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/DateTimeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class DateTimeTemplate implements PlusAccessible {

    private long id;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;

    public static DateTimeTemplate empty() {
        return DateTimeTemplate.builder()
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/DepositRefundTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.settlement.type.DepositRefundStatus;
import kr.co.yeoshin.common.settlement.type.DepositRefundType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositRefundTemplate implements PlusAccessible {

    private long id;
    private long adminId;
    private long hospitalId;
    private DepositRefundType type;
    private DepositRefundStatus status;
    private int price;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime refundAt;
    private boolean isIssueTaxInvoice;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime issueTaxInvoiceAt;
    private int supplyPrice;
    private int vat;
    private String memo;
    @JsonView(SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/DepositTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.settlement.type.DepositAdjustType;
import kr.co.yeoshin.common.settlement.type.DepositType;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositTemplate implements PlusAccessible {

    private long id;
    private Long depositRefundId;
    private long hospitalId;
    private DepositType type;
    private DepositAdjustType adjustType;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private int price;
    private int remainPrice;
    private String title;
    private Long pairedAdjustId;
    private long createAdminId;
    private long updateAdminId;
    private Integer settlementYear;
    private Integer settlementMonth;
    private SettlementRound settlementRound;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/DetailTextTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;
import lombok.experimental.SuperBuilder;
import org.apache.commons.lang3.StringUtils;

@SuperBuilder
@Getter
public class DetailTextTemplate extends TextTemplate {

    @Builder.Default
    private String description = StringUtils.EMPTY;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ExplorerThemeSalesEventListTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerThemeSalesEventListTemplate {

    private long id;
    private long explorerThemeId;
    private String salesEventListTitle;
    private String salesEventListTitleKo;
    private String salesEventListTitleEn;
    private String salesEventListTitleZh;
    private String salesEventListTitleJa;
    private long treatmentId;
    private int priority;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ExplorerThemeShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.board.type.ExplorerThemeLocationType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerThemeShortTemplate implements SystemAccessible {

    private long id;
    private String title;
    private MultiLanguage titles;
    private boolean isVisible;
    private ExplorerThemeLocationType locationType;
    private int priority;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ExplorerThemeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.board.type.ExplorerThemeLocationType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerThemeTemplate {

    private long id;
    @Deprecated
    private String title;
    private MultiLanguage titles;
    private String image;
    private String detailImage;
    @Deprecated
    private String contents;
    private MultiLanguage localeContents;
    @Deprecated
    private String phrase;
    private MultiLanguage phrases;
    @Deprecated
    private String subPhrase;
    private MultiLanguage subPhrases;
    private boolean isVisible;
    private ExplorerThemeLocationType locationType;
    private int priority;
    private long createdAdminId;
    private long updatedAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/FaceAnalysisReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FaceAnalysisReportTemplate implements SystemAccessible {

    private long id;
    private String faceImage;
    private int memberAge;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportAt;

    private int reportAge;
    private boolean isAnalysisPossible;

    private int reportWrinklesScore;
    private String reportWrinklesDescription;

    private int reportElasticityScore;
    private String reportElasticityDescription;

    private int reportSkinTextureScore;
    private String reportSkinTextureDescription;

    private int reportSkinToneScore;
    private String reportSkinToneDescription;

    private int reportPoresScore;
    private String reportPoresDescription;

    private int reportFrecklesScore;
    private String reportFrecklesDescription;

    private int reportComprehensiveScore;
    private String reportComprehensiveDescription;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonGetter(value = "isAnalysisPossible")
    public boolean isAnalysisPossible() {
        return isAnalysisPossible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/FigureTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FigureTemplate implements PlusAccessible {

    private Number figure;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/FileTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class FileTemplate implements PlusAccessible {

    private long id;
    private String url;
    private String fileName;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/FrayMemberTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import lombok.Builder;
import lombok.Getter;
import org.javers.core.metamodel.annotation.DiffIgnore;

@Getter
@Builder
public class FrayMemberTemplate {

    private long id;

    private String frayMemberKey;

    @Mask(type = MaskingType.NAME)
    private String name;

    private String countryCode;

    private String countryCallingCode;

    @Mask(type = MaskingType.CELL_PHONE)
    private String cellPhone;

    @Mask(type = MaskingType.BIRTHDATE)
    private String birthdate;

    private long hospitalId;

    private String hospitalName;

    private String orgCode;

    private String organizationType;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime latestInviteAt;

    private boolean isSystemSignedUp;

    private boolean isActivated;

    private long memberId;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime skinLogLinkAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime registerAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @DiffIgnore
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isSystemSignedUp")
    public boolean isSystemSignedUp() {
        return isSystemSignedUp;
    }

    @JsonGetter("isActivated")
    public boolean isActivated() {
        return isActivated;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/GiftOrderTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.payment.type.SendType;
import kr.co.yeoshin.common.utils.MaskingUtils;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class GiftOrderTemplate implements PlusAccessible {

    private long id;
    private String giftMessage;
    private SendType sendType;
    private long senderId;
//    @Mask(type = MaskingType.NAME)
    private String senderName;
//    @Mask(type = MaskingType.CELL_PHONE)
    private String senderCellPhone;
//    @Mask(type = MaskingType.NAME)
    private String receiverName;
//    @Mask(type = MaskingType.CELL_PHONE)
    private String receiverCellPhone;
    private long orderId;
    private boolean isAgreed;
    private boolean isAccepted;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime acceptAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @Deprecated
    public GiftOrderTemplate mask() {
        maskSender();
        maskReceiver();

        return this;
    }

    @Deprecated
    public GiftOrderTemplate maskSender() {
        this.senderName = MaskingUtils.maskMemberName(senderName);
        this.senderCellPhone = MaskingUtils.maskMemberCellPhone(senderCellPhone);
        return this;
    }

    @Deprecated
    public GiftOrderTemplate maskReceiver() {
        this.receiverName = MaskingUtils.maskMemberName(receiverName);
        this.receiverCellPhone = MaskingUtils.maskMemberCellPhone(receiverCellPhone);
        return this;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HolidayTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HolidayTemplate implements PlusAccessible {

    private String countryCode;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private String name;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalAdditionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoType;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoValue;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalAdditionTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private HospitalAdditionalInfoType type;
    private HospitalAdditionalInfoValue value;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import kr.co.yeoshin.common.hospital.type.HospitalConfigType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalConfigTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private long id;
    private long hospitalId;
    @JsonView(PlusAdmin.class)
    private HospitalConfigType type;
    @JsonView(PlusAdmin.class)
    private String value;
    private String reason;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalDepartmentStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDepartmentStatTemplate implements SystemAccessible {

    private long id;
    private long hospitalDepartmentId;
    private int hospitalCount;
    private int hospitalDoctorCount;
    private int hospitalTreatmentCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalDepartmentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDepartmentTemplate implements PlusAccessible {

    private long id;
    private String nameKo;
    private String nameEn;
    private String nameZh;
    private String nameJa;
    private boolean isVisible;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    public static HospitalDepartmentTemplate of(HospitalDepartment hospitalDepartment) {
        return HospitalDepartmentTemplate.builder()
                .id(hospitalDepartment.getId())
                .nameKo(hospitalDepartment.getNameKo())
                .nameEn(hospitalDepartment.getNameEn())
                .nameJa(hospitalDepartment.getNameJa())
                .nameZh(hospitalDepartment.getNameZh())
                .isVisible(hospitalDepartment.getViewYn().toBoolean())
                .createdAt(DateUtil.convertFrom(hospitalDepartment.getCreated()))
                .updatedAt(DateUtil.convertFrom(hospitalDepartment.getUpdated()))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalDoctorApprovalTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalRejectReasonCode;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalStatus;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDoctorApprovalTemplate implements PlusAccessible {

    private long id;
    private long hospitalDoctorId;
    private HospitalDoctorApprovalStatus status;
    private HospitalDoctorApprovalType type;
    private HospitalDoctorApprovalRejectReasonCode rejectReasonCode;
    private String rejectReason;
    private long hospitalId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime latestApproveAt;
    @JsonView(SystemAdmin.class)
    private long creatorId;
    @JsonView(SystemAdmin.class)
    private long updaterId;
    private ZonedDateTime createdAt;
    private ZonedDateTime updatedAt;
}




================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalDoctorTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageCollection;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.common.hospital.type.DoctorSubject;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalStatus;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.io.FilenameUtils;

@Getter
@Builder
public class HospitalDoctorTemplate implements PlusAccessible {

    private long id;
    @Deprecated
    private long hospitalId;
    private HospitalDoctorApprovalStatus approvalStatus;
    @Mask(type = MaskingType.IMAGE)
    private String profileImage;
    @Mask(type = MaskingType.LICENSE_NUMBER)
    private String licenseNumber;
    @Mask(type = MaskingType.IMAGE)
    private String licenseImage;
    @Mask(type = MaskingType.IMAGE)
    private List<String> specialistCertificateImages;
    @Mask(type = MaskingType.IMAGE)
    private MultiLanguageType<List<String>> localeCareerImages;
    private int priority;
    private boolean isRepresentative;
    @Mask(type = MaskingType.NAME)
    private String name;
    private MultiLanguage names;    // TODO masking
    private List<DoctorSubject> doctorSubjects;
    private List<String> descriptions;
    private MultiLanguageCollection<String> localeDescriptions;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isRepresentative")
    public boolean isRepresentative() {
        return isRepresentative;
    }

    public String getProfileImageFileName() {
        return FilenameUtils.getName(this.profileImage);
    }

    private String convertToFileName(String imageUrl) {
        return FilenameUtils.getName(imageUrl);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalImageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalImageType;
import kr.co.yeoshin.common.type.Language;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.io.FilenameUtils;

@Getter
@Builder
public class HospitalImageTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private String image;
    private HospitalImageType type;
    private Language language;

    public String getImageFileName() {
        return FilenameUtils.getName(this.image);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalKahfTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.io.FilenameUtils;

@Getter
@Builder
public class HospitalKahfTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private String certificateImage;
    private LocalDate expireAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public String getCertificateImageFileName() {
        return FilenameUtils.getName(this.certificateImage);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalManagementContactTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalManagementContactTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private String name;
    private String email;
    private String cellPhone;
    private List<HospitalManagementContactType> contactTypes;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalMessengerTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalMessengerType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalMessengerTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private HospitalMessengerType type;
    private String messengerId;
    private String image;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalOfflineUpsellTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOfflineUpsellTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    @Deprecated
    private long reservationId;
    private DomainType refType;
    private long refId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private String counselorName;
    private String treatmentCounselingContent;
    private int paymentPrice;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalOnboardMemberTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardMemberTemplate implements SystemAccessible {

    private long id;
    private long hospitalOnboardId;
    private long memberId;
    private boolean isNotificationAllowed;
    private boolean isCompleted;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;

    @JsonGetter("isNotificationAllowed")
    public boolean isNotificationAllowed() {
        return isNotificationAllowed;
    }

    @JsonGetter("isCompleted")
    public boolean isCompleted() {
        return isCompleted;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalOnboardPageableTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardPageableTemplate implements SystemAccessible {

    private List<HospitalOnboardTemplate> hospitalOnboards;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalOnboardTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalOnboardType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    private boolean isCompleted;
    private HospitalOnboardType onboardType;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    private int memberCount;
    private int notificationCount;
    private long completeAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isCompleted")
    public boolean isCompleted() {
        return isCompleted;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalPartnershipSettlementTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalPartnershipSettlementTemplate implements PlusAccessible {

    private Long hospitalId;
    private String subMerchantId;
    private String hospitalName;
    private String businessRegistrationName;
    private String businessRegistrationNumber;
    private String representativeName;
    private String accountNumber;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalPartnershipTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.type.DepositAutoTransType;
import kr.co.yeoshin.common.hospital.type.HospitalBusinessType;
import kr.co.yeoshin.common.type.Bank;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.io.FilenameUtils;

@Getter
@Builder
public class HospitalPartnershipTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private HospitalBusinessType businessType;
    private String businessLicenseImage;
    private String businessRegistrationNumber;
    private String businessRegistrationName;
    private String businessCategory;
    private String businessSubCategory;
    private String address;
    private String representativeName;
    private String representativePhoneNumber;
    private Bank bankType;
    private String accountNumber;
    private String depositorName;
    private String bankBookImage;
    private String notificationEmail;
    private List<String> taxCalculationEmails;
    private List<String> paymentAgentEmails;
    private String paymentAgentPhoneNumber;
    private String hiraId;
    private DepositAutoTransType depositAutoTransType;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public String getBusinessLicenseImageFileName() {
        return FilenameUtils.getName(this.businessLicenseImage);
    }

    public String getBankBookImageFileName() {
        return FilenameUtils.getName(this.bankBookImage);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.hospital.type.PartnershipStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalShortTemplate implements PlusAccessible {

    private long id;
    private String code;
    private PartnershipStatus partnershipStatus;
    private boolean isPartnership;
    private long adminId;
    private Long salesAdminId;
    private Long advertisingManagerId;
    private String name;
    private MultiLanguage names;
    private String phoneNumber;
    private String callMixNumber;
    private long adPoint;
    private long consultationPoint;
    private int depositPrice;
    private boolean hiraConnect;
    private boolean isKahf;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter(value = "isPartnership")
    public boolean isPartnership() {
        return isPartnership;
    }

    @JsonGetter(value = "isKahf")
    public boolean isKahf() {
        return isKahf;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalStatTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    private long salesEventCount;
    private long salesCount;
    private long reviewCount;
    @JsonView(PlusAdmin.class)
    private long scrapCount;
    @JsonView(PlusAdmin.class)
    private float startPointAverage;
    @JsonView(PlusAdmin.class)
    private long replyTimeInMinutesAverage;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalSuggestTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalSuggestProcessStatus;
import kr.co.yeoshin.common.hospital.type.HospitalSuggestSubType;
import kr.co.yeoshin.common.hospital.type.HospitalSuggestType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalSuggestTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    private long memberId;
    private HospitalSuggestType suggestType;
    private String description;
    private String image;
    private List<HospitalSuggestSubType> subTypes;
    private HospitalSuggestProcessStatus processStatus;
    private long checkedAdminId;
    private ZonedDateTime createdAt;
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import kr.co.yeoshin.common.hospital.type.PartnershipStatus;
import kr.co.yeoshin.common.place.type.PlaceType;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.io.FilenameUtils;

@Getter
@Builder
public class HospitalTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private long id;
    @JsonView(PlusAdmin.class)
    private String code;
    @JsonView(PlusAdmin.class)
    private long adminId;
    @JsonView(PlusAdmin.class)
    private Long salesAdminId;
    @JsonView(PlusAdmin.class)
    private Long advertisingManagerId;
    @JsonView(PlusAdmin.class)
    private PartnershipStatus partnershipStatus;
    @JsonView(PlusAdmin.class)
    private String name;
    @JsonView(PlusAdmin.class)
    private MultiLanguage names;
    @JsonView(PlusAdmin.class)
    private String introduction;
    @JsonView(PlusAdmin.class)
    private MultiLanguage introductions;
    @JsonView(PlusAdmin.class)
    private String briefIntroduction;
    @JsonView(PlusAdmin.class)
    private MultiLanguage briefIntroductions;
    @JsonView(PlusAdmin.class)
    private String logo;
    @JsonView(PlusAdmin.class)
    private String thumbnail;
    @JsonView(PlusAdmin.class)
    private boolean premium;
    @JsonView(PlusAdmin.class)
    private String premiumThumbnail;
    @JsonView(PlusAdmin.class)
    private String address;
    @JsonView(PlusAdmin.class)
    private MultiLanguage addresses;
    @JsonView(PlusAdmin.class)
    private String addressDetail;
    @JsonView(PlusAdmin.class)
    private MultiLanguage addressDetails;
    @JsonView(PlusAdmin.class)
    private PlaceType placeType;   // TODO 여러개 설정 가능한지 확인
    @JsonView(PlusAdmin.class)
    private String landmark;
    @JsonView(PlusAdmin.class)
    private MultiLanguage landmarks;
    @JsonView(PlusAdmin.class)
    private double latitude;
    @JsonView(PlusAdmin.class)
    private double longitude;
    @JsonView(PlusAdmin.class)
    private String directions;
    @JsonView(PlusAdmin.class)
    private MultiLanguage localeDirections;
    @JsonView(PlusAdmin.class)
    private MultiLanguage localeDirectionsGuide;
    @JsonView(PlusAdmin.class)
    private List<OperationTime> operationTimes;
    @JsonView(PlusAdmin.class)
    private String operationTimesNotice;
    @JsonView(PlusAdmin.class)
    private MultiLanguage operationTimesNotices;
    @JsonView(PlusAdmin.class)
    private long adPoint;
    @JsonView(PlusAdmin.class)
    private long consultationPoint;
    @JsonView(PlusAdmin.class)
    private boolean adPointAutoChange;
    @JsonView(PlusAdmin.class)
    private int depositPrice;
    @JsonView(PlusAdmin.class)
    private String phoneNumber;
    @JsonView(PlusAdmin.class)
    private String fax;
    @JsonView(PlusAdmin.class)
    private String callMixNumber;
    private boolean isVisible;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime operationPolicyAgreeAt;
    @JsonView(PlusAdmin.class)
    private boolean isPartnership;
    @JsonView(PlusAdmin.class)
    private boolean isExclusive;
    @JsonView(PlusAdmin.class)
    private boolean isKahf;
    private Integer monthBudgetPrice;
    private boolean isPublishable;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    @JsonView(PlusAdmin.class)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    @JsonView(PlusAdmin.class)
    private ZonedDateTime updatedAt;

    @JsonGetter(value = "isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter(value = "isPartnership")
    public boolean isPartnership() {
        return isPartnership;
    }

    @JsonGetter(value = "isExclusive")
    public boolean isExclusive() {
        return isExclusive;
    }

    @JsonGetter(value = "isKahf")
    public boolean isKahf() {
        return isKahf;
    }

    @JsonGetter(value = "isPublishable")
    public boolean isPublishable() {
        return isPublishable;
    }

    public String getLogoFileName() {
        return FilenameUtils.getName(this.logo);
    }

    public String getThumbnailFileName() {
        return FilenameUtils.getName(this.thumbnail);
    }

    public String getPremiumThumbnailFileName() {
        return FilenameUtils.getName(this.premiumThumbnail);
    }

    public HospitalShortTemplate toShortTemplate() {
        return HospitalShortTemplate.builder()
                .id(id)
                .code(code)
                .partnershipStatus(partnershipStatus)
                .isPartnership(isPartnership)
                .adminId(adminId)
                .salesAdminId(salesAdminId)
                .advertisingManagerId(advertisingManagerId)
                .name(name)
                .phoneNumber(phoneNumber)
                .callMixNumber(callMixNumber)
                .adPoint(adPoint)
                .consultationPoint(consultationPoint)
                .depositPrice(depositPrice)
                .createdAt(createdAt)
                .updatedAt(updatedAt)
                .build();
    }

    @Getter
    @Builder
    public static class OperationTime implements PlusAccessible {

        private DayOfWeek dayOfWeek;
        @JsonFormat(pattern = Api.TIME_FORMAT)
        private LocalTime startTime;
        @JsonFormat(pattern = Api.TIME_FORMAT)
        private LocalTime endTime;
        @JsonFormat(pattern = Api.TIME_FORMAT)
        private LocalTime lunchStartTime;
        @JsonFormat(pattern = Api.TIME_FORMAT)
        private LocalTime lunchEndTime;
        private boolean isHoliday;
        private boolean useLunchTime;

        @JsonGetter("isHoliday")
        public boolean isHoliday() {
            return isHoliday;
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalTreatmentGuideTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.hospital.type.HospitalTreatmentGuideType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalTreatmentGuideTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    private HospitalTreatmentGuideType type;
    private String name;
    private String description;
    private int price;
    private boolean isPriceVisible;

    @JsonGetter(value = "isPriceVisible")
    public boolean isPriceVisible() {
        return isPriceVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalTreatmentStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalTreatmentStatTemplate implements SystemAccessible {

    private long id;
    private long hospitalTreatmentId;
    private int hospitalCount;
    private int hospitalDoctorCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/HospitalTreatmentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.hospital.entity.HospitalTreatment;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalTreatmentTemplate implements PlusAccessible {

    private long id;
    private String nameKo;
    private String nameEn;
    private String nameZh;
    private String nameJa;
    private boolean isVisible;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    public static HospitalTreatmentTemplate of(HospitalTreatment hospitalTreatment) {
        return HospitalTreatmentTemplate.builder()
                .id(hospitalTreatment.getId())
                .nameKo(hospitalTreatment.getNameKo())
                .nameEn(hospitalTreatment.getNameEn())
                .nameJa(hospitalTreatment.getNameJa())
                .nameZh(hospitalTreatment.getNameZh())
                .isVisible(hospitalTreatment.getViewYn().toBoolean())
                .createdAt(DateUtil.convertFrom(hospitalTreatment.getCreated()))
                .updatedAt(DateUtil.convertFrom(hospitalTreatment.getUpdated()))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ImageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import java.util.Optional;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.utils.UrlUtils;
import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder(toBuilder = true)
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
@EqualsAndHashCode
public class ImageTemplate implements PlusAccessible {

    @JsonInclude(Include.NON_NULL)
    private Long id;

    private String type;

    private String image;

    @JsonIgnore
    private boolean isPrivate;

    public String fetchImage() {
        return Optional.ofNullable(image).map(UrlUtils::extractFilename).orElse(null);
    }

    public ImageTemplate changeImage(String image) {
        this.image = image;
        return this;
    }

    @JsonGetter("isPrivate")
    public boolean isPrivate() {
        return this.isPrivate;
    }
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/InquiryHospitalEntryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.inquiry.model.CurrentUseService;
import kr.co.yeoshin.common.inquiry.model.InflowRoute;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class InquiryHospitalEntryTemplate implements SystemAccessible {

    private long id;
    private String hospitalName;
    private String name;
    private String email;
    private String cellPhone;
    private List<InflowRoute> inflowRoutes;
    private List<CurrentUseService> currentUseServices;
    private String adminMemo;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/InstantLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.UserType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class InstantLogTemplate implements PlusAccessible {
    private Long id;

    private String message;

    private DomainType refType;

    private long refId;

    private UserType updaterType;

    private long updaterId;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/LevelTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.IntegerRange;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.member.type.Level;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class LevelTemplate implements SystemAccessible {

    private Level code;
    private int level;
    private IntegerRange ticketUsePriceRange;
    private IntegerRange ticketUseCountRange;
    private double rewardPointPercentage;
    private int rewardCouponPrice;

    public static LevelTemplate of(Level level) {
        return LevelTemplate.builder()
                .code(level)
                .level(level.getLevel())
                .ticketUsePriceRange(IntegerRange.builder()
                        .from(level.getTicketUsePrice().getMinimum())
                        .to(level.getTicketUsePrice().getMaximum())
                        .build())
                .ticketUseCountRange(IntegerRange.builder()
                        .from(level.getTicketUseCount().getMinimum())
                        .to(level.getTicketUseCount().getMaximum())
                        .build())
                .rewardPointPercentage(level.getBenefit().getRewardPointPercentage())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ListTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ListTemplate<T> implements PlusAccessible {

    private List<T> items;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberAccountTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberAccountTemplate implements PlusAccessible {

    private long id;
    private long memberId;
    private AuthProvider provider;
    private String providerId;
    private boolean isPrimary;

    @JsonGetter(value = "isPrimary")
    public boolean isPrimary() {
        return isPrimary;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberCouponTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.coupon.type.MemberCouponStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberCouponTemplate {

    private long id;
    private long memberId;
    private long couponId;
    private MemberCouponStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime useAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberLevelTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalDate;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.member.entity.MemberLevel;
import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelTemplate implements SystemAccessible {

    private long memberId;
    private Level level;
    @JsonFormat(pattern = Api.DATE_FORMAT)
    private LocalDate from;
    @JsonFormat(pattern = Api.DATE_FORMAT)
    private LocalDate to;

    public static MemberLevelTemplate of(MemberLevel memberLevel) {
        LocalDate start = memberLevel.getStartAt().toLocalDate();
        LocalDate end = DateUtil.lastDayOfMonth(start.plusMonths(1));

        return MemberLevelTemplate.builder()
                .memberId(memberLevel.getMemberId())
                .level(memberLevel.getLevel())
                .from(start)
                .to(end)
                .build();
    }

    public static MemberLevelTemplate of(kr.co.yeoshin.admin.member.service.model.MemberLevel memberLevel) {
        return MemberLevelTemplate.builder()
                .memberId(memberLevel.getMemberId())
                .level(memberLevel.getLevel())
                .from(memberLevel.getFrom())
                .to(memberLevel.getTo())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberPlaceTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.place.type.PlaceType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberPlaceTemplate {

    private long id;
    private long memberId;
    private String name;
    private PlaceType type;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberPointCompositionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.point.entity.MemberPointComposition;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberPointCompositionTemplate implements SystemAccessible {

    private long id;
    private long memberPointId;
    private int point;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;
    private DomainType domainType;
    private long domainId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public static MemberPointCompositionTemplate of(MemberPointComposition memberPointComposition) {
        return MemberPointCompositionTemplate.builder()
                .id(memberPointComposition.getId())
                .memberPointId(memberPointComposition.getMemberPoint().getId())
                .point(memberPointComposition.getPoint())
                .expireAt(DateUtil.convertFrom(memberPointComposition.getExpireAt()))
                .domainType(memberPointComposition.getRefType())
                .domainId(memberPointComposition.getRefId())
                .createdAt(DateUtil.convertFrom(memberPointComposition.getCreated()))
                .updatedAt(DateUtil.convertFrom(memberPointComposition.getUpdated()))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberPointTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberPointTemplate {

    private long id;
    private long memberId;
    private String memberName;
    private MemberPointType type;
    private Action action;
    private PublishType publishType;
    private String title;
    private int point;
    private int remainPoint;
    private Long adminId;
    private DomainType domainType;
    private long domainId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberProfileTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.utils.MaskingUtils;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberProfileTemplate implements PlusAccessible {

    private long id;
    @Mask(type = MaskingType.NAME)
    private String name;
    @Mask(type = MaskingType.PROFILE_ID)
    private String profileId;
    @Mask(type = MaskingType.IMAGE)
    private ImageTemplate profileImage;
    @Mask(type = MaskingType.SEX)
    private String sex;
    private String countryCallingCode;
//    @Mask(type = MaskingType.CELL_PHONE)
    private String cellPhone;

    public static MemberProfileTemplate empty() {
        return MemberProfileTemplate.builder().build();
    }

    @Deprecated
    public MemberProfileTemplate mask() {
        this.cellPhone = MaskingUtils.maskMemberCellPhone(this.cellPhone);
        return this;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.report.model.ReportReason;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberReportTemplate {

    private long reporterId; // member.id
    private long reportedMemberId; // member.id
    private List<ReportReason> reasons;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberServiceStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalDate;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.member.model.MemberServiceStatSummary;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberServiceStatTemplate implements SystemAccessible {

    private long memberId;
    @JsonFormat(pattern = Api.DATE_FORMAT)
    private LocalDate from;
    @JsonFormat(pattern = Api.DATE_FORMAT)
    private LocalDate to;
    private int orderCount;
    private int salePointPrice;
    private int saleCouponPrice;
    private int rewardPointPrice;
    private int paymentPrice;
    private int ticketUsePrice;
    private int ticketUseCount;
    private int cancelTicketUsePrice;
    private int cancelTicketUseCount;

    public static MemberServiceStatTemplate of(MemberServiceStatSummary stat) {
        return MemberServiceStatTemplate.builder()
                .memberId(stat.getMemberId())
                .from(stat.getFrom())
                .to(stat.getTo())
                .orderCount(stat.getOrderCount())
                .salePointPrice(stat.getSalePointPrice())
                .saleCouponPrice(stat.getSaleCouponPrice())
                .paymentPrice(stat.getPaymentPrice())
                .ticketUsePrice(stat.getTicketUsePrice())
                .ticketUseCount(stat.getTicketUseCount())
                .cancelTicketUsePrice(stat.getCancelTicketUsePrice())
                .cancelTicketUseCount(stat.getCancelTicketUseCount())
                .build();
    }
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberServiceStatTicketLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.code.type.CodeType;
import kr.co.yeoshin.common.member.entity.MemberServiceStatTicketLog;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberServiceStatTicketLogTemplate implements SystemAccessible {

    private long id;
    private long memberId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private long orderId;
    private String orderCode;
    private long ticketId;
    private String ticketCode;
    private int ticketPrice;
    private TicketStatus ticketStatus;

    public static MemberServiceStatTicketLogTemplate of(MemberServiceStatTicketLog log) {
        return MemberServiceStatTicketLogTemplate.builder()
                .id(log.getId())
                .memberId(log.getMemberId())
                .at(DateUtil.convertFrom(log.getAt()))
                .orderId(log.getOrderId())
                .orderCode(CodeType.ORDER_PURCHASE.createCode(log.getOrderId()))
                .ticketId(log.getTicketId())
                .ticketCode(CodeType.TICKET.createCode(log.getTicketId()))
                .ticketPrice(log.getTicketPrice())
                .ticketStatus(log.getTicketStatus())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.MemberStatusType;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.type.CountryCode;
import kr.co.yeoshin.common.utils.MaskingUtils;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;

@Getter
@Builder
public class MemberShortTemplate implements PlusAccessible {

    private long id;
    private String code;
    @JsonView(SystemAdmin.class)
    private String inviteCode;
    @JsonView(SystemAdmin.class)
    private String recommendCode;
//    @Mask(type = MaskingType.NAME)
    private String name;
    @Mask(type = MaskingType.EMAIL)
    private String email;
    private CountryCode homeCountryCode;
    private String countryCode;
    private String countryCallingCode;
//    @Mask(type = MaskingType.CELL_PHONE)
    private String cellPhone;
    private String preferLanguage;
    private MemberStatusType status;
    @JsonInclude(Include.NON_NULL)
    private List<AuthProvider> authProviders;
    @JsonInclude(Include.NON_NULL)
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime accessAt;
    @JsonInclude(Include.NON_NULL)
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime joinAt;

    @Deprecated
    public MemberShortTemplate mask() {
        this.name = MaskingUtils.maskMemberName(name);
        this.cellPhone = MaskingUtils.maskMemberCellPhone(cellPhone);
        return this;
    }

    public boolean hasCellPhone() {
        return StringUtils.isNotBlank(getCellPhone()) && NumberUtils.isDigits(getCellPhone());
    }

    public Optional<String> getInternationalCellPhone(String defaultCountryCallingCode) {
        if (hasCellPhone()) {
            return Optional.of(
                    Optional.ofNullable(countryCallingCode).orElse(defaultCountryCallingCode)
                            + Optional.ofNullable(cellPhone).orElse(StringUtils.EMPTY));
        } else {
            return Optional.empty();
        }
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberSkinTypeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.member.type.SkinType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberSkinTypeTemplate {

    private long id;
    private SkinType skinType;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.MemberStatusType;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.member.type.Sex;
import kr.co.yeoshin.common.type.CountryCode;
import kr.co.yeoshin.common.type.DeviceType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.MaskingUtils;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberTemplate implements PlusAccessible {

    private long id;
    private String code;
    @JsonView(SystemAdmin.class)
    private String inviteCode;
    @JsonView(SystemAdmin.class)
    private String recommendCode;
    @Mask(type = MaskingType.PROFILE_ID)
    private String profileId;
    @Mask(type = MaskingType.IMAGE)
    private String profileImage;
//    @Mask(type = MaskingType.NAME)
    private String name;
    @Mask(type = MaskingType.EMAIL)
    private String email;
    private CountryCode homeCountryCode;
    private String countryCode;
    private String countryCallingCode;
//    @Mask(type = MaskingType.CELL_PHONE)
    private String phone;
    @Mask(type = MaskingType.SEX)
    private String sex;
    private MemberStatusType status;
    private String preferLanguage;
    private DeviceType signUpDevicePlatform;
    @Mask(type = MaskingType.BIRTHDATE)
    private String birthDate;
    private boolean isIdentified;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime identificationAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public static MemberTemplate empty() {
        return MemberTemplate.builder().build();
    }

    @JsonGetter(value = "isIdentified")
    public boolean isIdentified() {
        return isIdentified;
    }

    public MemberShortTemplate toShortTemplate() {
        return MemberShortTemplate.builder()
                .id(id)
                .code(code)
                .inviteCode(inviteCode)
                .recommendCode(recommendCode)
                .name(name)
                .email(email)
                .homeCountryCode(homeCountryCode)
                .countryCallingCode(countryCallingCode)
                .cellPhone(phone)
                .preferLanguage(preferLanguage)
                .build();
    }

    @Deprecated
    public MemberTemplate mask() {
        this.name = MaskingUtils.maskMemberName(this.name);
        this.phone = MaskingUtils.maskMemberCellPhone(this.phone);

        return this;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MemberTermsAgreeLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.member.type.AgreementTermsType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberTermsAgreeLogTemplate<T extends Enum<T>> {

    private long id;
    private T termsType;
    private String termsUrl;
    private boolean agree;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime recentChangeAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/MoneyReceiptLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.type.MoneyReceiptIdentifier;
import kr.co.yeoshin.common.payment.type.MoneyReceiptStatusType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MoneyReceiptLogTemplate implements PlusAccessible {

    private long id;
    private long orderId;
    private long ticketId;
    private long settlementTicketId;
    private String name;
    private String cellPhone;
    private long amount;
    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifier;
    private MoneyReceiptStatusType issueStatus;
    private String receiptUrl;
    private String receiptKey;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/NamedImageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder(toBuilder = true)
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
@EqualsAndHashCode(callSuper = true)
public class NamedImageTemplate extends ImageTemplate implements PlusAccessible {

    private String fileName;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/NotificationConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class NotificationConfigTemplate implements PlusAccessible {

    private String code;
    private String value;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/NumberTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.NumberType;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class NumberTemplate implements PlusAccessible {

    private NumberType type;
    private Number value;

    public static NumberTemplate empty(NumberType type) {
        return NumberTemplate.builder()
                .type(type)
                .value(0)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/OrderAdPointProductTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.payment.type.AdPointOrderStatus;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.payment.type.PayMethod;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderAdPointProductTemplate implements PlusAccessible {

    private long id;
    private long orderId;
    private long adPointProductId;
    private long hospitalId;
    private long adminId;
    private int point;
    @JsonView(SystemAdmin.class)
    private int paidPoint;
    @JsonView(SystemAdmin.class)
    private int freePoint;
    private int quantity;
    private AdPointOrderStatus orderStatus;
    private PayMethod payMethod;
    private OrderStatus payStatus;
    @JsonView(SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/OrderPartCancelTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.SourceType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderPartCancelTemplate {

    private long id;

    private long orderId;

    private SourceType sourceType;

    private int price;

    private int couponPrice;

    private int pointPrice;

    private int pointExpirePrice;

    private String tid;

    private String reason;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/OrderSalesProductTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderSalesProductTemplate {

    private long orderId;
    private long salesEventId;
    private String salesEventCode;
    private String salesEventName;
    private long salesProductVersionId;
    private String salesProductName;
    private int salesPrice;
    private int oneTimeRegularPrice;
    private int treatmentCount;
    private int quantity;
    private int useCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/OrderSheetConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.payment.type.MoneyReceiptIdentifier;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderSheetConfigTemplate {

    private long id;
    private long memberId;
    private String moneyReceiptIdentifier;
    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifierTypeName;
    private String moneyReceiptIdentifierUsage;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/OrderTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.payment.type.*;
import kr.co.yeoshin.common.type.CountryCode;
import kr.co.yeoshin.common.type.UserType;
import kr.co.yeoshin.common.utils.MaskingUtils;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderTemplate implements PlusAccessible {

    private long id;
    private String code;
    private boolean isInsuranceAgreed;
    private int pointPrice;
    private int couponPrice;
    private List<PaymentCouponDiscount> useCouponDiscountPrices;
    private int systemCashPrice;
    private int paymentPrice;
    private int totalSalesPrice;
    private int cancelPointPrice;
    private int cancelSystemCashPrice;
    private boolean isCouponCanceled;
    private OrderStatus orderStatus;
    private OrderStatusSpecifier statusSpecifier;
    private boolean isCancelInProgress;
    private CancelRequestType cancelRequestType;
    private CancelReasonCode cancelReasonCode;
    private RefundMethod refundMethod;
    private String refundMethodVerbose;
    private Integer adminRefundPrice;
    private UserType ordererType;
    private long ordererId;
//    @Mask(type = MaskingType.NAME)
    private String ordererName;
    private String ordererCountryCallingCode;
//    @Mask(type = MaskingType.CELL_PHONE)
    private String ordererCellPhone;
    private CountryCode ordererHomeCountryCode;
    private OrderProductType productType;
    private PgType pgType;
    @JsonView(SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime cancelAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime cancelRequestAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifier;

    @Builder
    @Getter
    @JsonInclude(Include.NON_NULL)
    public static class PaymentCouponDiscount {

        private long memberCouponId;
        private int discountPrice;
    }

    @JsonProperty(value = "isInsuranceAgreed")
    public boolean isInsuranceAgreed() {
        return isInsuranceAgreed;
    }

    @JsonProperty(value = "isCancelInProgress")
    public boolean isCancelInProgress() {
        return isCancelInProgress;
    }

    @JsonProperty(value = "isCouponCanceled")
    public boolean isCouponCanceled() {
        return isCouponCanceled;
    }

    @Deprecated
    public OrderTemplate mask() {
        this.ordererName = MaskingUtils.maskMemberName(this.ordererName);
        this.ordererCellPhone = MaskingUtils.maskMemberCellPhone(this.ordererCellPhone);

        return this;
    }


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PageableTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.Constant.Paging.Request;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.request.PageableRequest;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PageableTemplate implements PlusAccessible {

    private int page;
    private int size;
    private long totalCount;

    public static PageableTemplate empty() {
        return PageableTemplate.builder()
                .page(Request.DEFAULT_PAGE)
                .size(Request.DEFAULT_SIZE)
                .totalCount(0L)
                .build();
    }

    public static PageableTemplate of(PageableRequest pageableRequest, long totalCount) {
        return PageableTemplate.builder()
                .page(pageableRequest.getPage())
                .size(pageableRequest.getSize())
                .totalCount(totalCount)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PaymentBenefitTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.payment.type.PayMethodFilterType;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PaymentBenefitTemplate implements SystemAccessible {

    private long id;
    private String name;
    private String title;
    private String content;
    private String subContent;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private PayMethodFilterType payMethodType;
    private boolean isVisible;
    private boolean useBadge;
    private ProgressStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PaymentNicepayConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PaymentNicepayConfigTemplate implements SystemAccessible {

    private long id;
    private long hospitalId;
    private boolean isUsed;
    private boolean isPreCancelAvailable;
    private String subMerchantId;
    private String merchantId;
    private String merchantKey;
    private String memo;

    @JsonGetter("isUsed")
    public boolean isUsed() {
        return this.isUsed;
    }

    @JsonGetter("isPreCancelAvailable")
    public boolean isPreCancelAvailable() {
        return this.isPreCancelAvailable;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PaymentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.order.usecase.model.PgType;
import kr.co.yeoshin.common.payment.model.PaymentContext;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PaymentTemplate implements PlusAccessible {

    private PgType pgType;
    private PaymentContext context;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PgFeeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PgFeeTemplate {

    // paymentPrice * pgFee
    private double supplyPrice;
    // supplyPrice * 10%
    private double taxPrice;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PlusAdminTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.common.administrator.type.AdminStatus;
import kr.co.yeoshin.common.administrator.type.Level;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PlusAdminTemplate implements PlusAccessible {

    private long id;
    @Mask(type = MaskingType.NAME)
    private String name;
    @Mask(type = MaskingType.EMAIL)
    private String email;
    @Mask(type = MaskingType.CELL_PHONE)
    private String phone;
    @Mask(type = MaskingType.IMAGE)
    private String profileImage;
    private Level level;
    private int infoRetentionPeriod;
    private AdminStatus status;
    private List<Long> adminAccountIds;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PopupTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.banner.type.BannerType;
import kr.co.yeoshin.common.popup.type.PopupExposureTarget;
import kr.co.yeoshin.common.popup.type.PopupLocation;
import kr.co.yeoshin.common.popup.type.PopupPosition;
import kr.co.yeoshin.common.popup.type.PopupType;
import kr.co.yeoshin.common.type.LinkType;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PopupTemplate implements PlusAccessible {

    private long id;
    private String name;
    private PopupType type;
    private String title;
    private String content;
    private List<Button> buttons;
    private PopupLocation location;
    private PopupPosition position;
    private boolean isVisible;
    private ProgressStatus status;
    private PopupExposureTarget exposureTarget;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter(value = "isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @Getter
    @Builder
    public static final class Button implements PlusAccessible {

        private String name;
        private LinkType linkType;
        private String linkUrl;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PriceTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PriceTemplate implements PlusAccessible {

    private int paymentPrice;
    private int discountPrice;
    private int systemCashPrice;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PromotionReplyTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyTemplate {

    private long id;
    private long promotionId;
    private long memberId;
    private long reportCount;
    private String content;
    private boolean isVisible;
    private boolean isSecret;
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter("isSecret")
    public boolean isSecret() {
        return isSecret;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/PromotionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.administrator.type.View.PlusAdmin;
import kr.co.yeoshin.common.board.type.PromotionExposureCondition;
import kr.co.yeoshin.common.board.type.PromotionReplyType;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionTemplate implements SystemAccessible {

    @JsonView(PlusAdmin.class)
    private long id;
    @JsonView(PlusAdmin.class)
    private String title;
    @JsonView(PlusAdmin.class)
    private String thumbnail;
    private String content;
    private String link;
    @JsonView(PlusAdmin.class)
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonView(PlusAdmin.class)
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private boolean isVisible;
    private boolean isReplyable;
    private PromotionReplyType replyType;
    @JsonView(PlusAdmin.class)
    private ProgressStatus status;
    private PromotionExposureCondition exposureLanguage;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter("isReplyable")
    public boolean isReplyable() {
        return isReplyable;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/RecommendKeywordTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.dictionary.entity.type.RankingIconType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RecommendKeywordTemplate {

    private long id;
    private long groupId;
    private int priority;
    @Deprecated
    private String keyword;
    private MultiLanguage keywords;
    private RankingIconType iconType;
    private boolean isAlways;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime created;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updated;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/RecommendSalesEventTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.recommend.type.CpmQualityGrade;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RecommendSalesEventTemplate implements PlusAccessible {

    private long id;
    private long recommendSalesEventVersionId;
    private long salesEventId;
    private long hospitalId;
    private double cpmQualityScore;
    private double cpmBudgetScore;
    private CpmQualityGrade cpmQualityGrade;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationAsTicketLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.type.TicketRestorationInquiryStatus;
import kr.co.yeoshin.common.reservation.model.ReservationAsTicketLogAction;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationAsTicketLogTemplate implements PlusAccessible {

    private long id;
    private long reservationId;
    private long salesEventId;
    private long ticketId;
    private ReservationAsTicketLogAction action;
    private TicketRestorationInquiryStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    private Long adminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationChangeLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.reservation.type.ReservationChangeStatus;
import kr.co.yeoshin.common.reservation.type.ReservationChangerType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationChangeLogTemplate {

    private long seq;
    private ReservationChangerType changerType;
    private ReservationChangeStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationCloseDateTimeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Deprecated
@Getter
@Builder
public class ReservationCloseDateTimeTemplate implements PlusAccessible {

    private long id;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private long hospitalId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationDoctorTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationDoctorTemplate implements PlusAccessible {

    private long id;
    private Long crmDoctorId;
    private String name;
    private String colorCode;
    private long hospitalId;
    private boolean isActivated;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime created;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updated;

    @JsonGetter("isActivated")
    public boolean isActivated() {
        return isActivated;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationHospitalConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.type.TimeInterval;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationHospitalConfigTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private boolean useMobileReservation;
    private boolean isCrmLinked;
    private String hospitalCode;
    private boolean isReservableOnToday;
    private boolean isReservableAtThirtyMinutesInAdvance;
    private boolean isReservableOnHoliday;
    private boolean isReservationAutoConfirm;
    private int slot;
    private TimeInterval slotTimeInterval;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isCrmLinked")
    public boolean isCrmLinked() {
        return isCrmLinked;
    }

    @JsonGetter("isReservableOnToday")
    public boolean isReservableOnToday() {
        return isReservableOnToday;
    }

    @JsonGetter("isReservableAtThirtyMinutesInAdvance")
    public boolean isReservableAtThirtyMinutesInAdvance() {
        return isReservableAtThirtyMinutesInAdvance;
    }

    @JsonGetter("isReservableOnHoliday")
    public boolean isReservableOnHoliday() {
        return isReservableOnHoliday;
    }

    @JsonGetter("isReservationAutoConfirm")
    public boolean isReservationAutoConfirm() {
        return isReservationAutoConfirm;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationOperationTimeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.HospitalOperationStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationOperationTimeTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;
    private LocalTime lunchStartTime;
    private LocalTime lunchEndTime;
    private boolean useLunchTime;
    private boolean isHoliday;
    private HospitalOperationStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime crmSyncAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isHoliday")
    public boolean isHoliday() {
        return isHoliday;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationRevisionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
public class ReservationRevisionTemplate extends RevisionTemplate implements PlusAccessible {

    private ReservationStatus status;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.reservation.type.ReservationType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationShortTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private long memberId;
    private String code;
    private ReservationType type;
    private ReservationStatus status;
    private Long reservationDoctorId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationStatusLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationStatusLogTemplate {

    private long id;
    private long hospitalId;
    private long reservationId;
    private ReservationStatus beforeStatus;
    private ReservationStatus afterStatus;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.mask.Mask;
import kr.co.yeoshin.admin.common.model.api.payload.mask.MaskingType;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationPreliminaryQuestionnaire;
import kr.co.yeoshin.common.administrator.type.View;
import kr.co.yeoshin.common.reservation.type.*;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationTemplate implements PlusAccessible {

    private long id;
    private String code;
    private ReservationStatus status;
    private ReservationType type;
    private ReservationSource source;
    private CrmDevice crmType;
    private ReservationCancelType cancelReason;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime cancelAt;
    private String memo;
    private ReservationPreliminaryQuestionnaire preliminaryQuestionnaire;
    private long hospitalId;
    private long memberId;
    @Mask(type = MaskingType.NAME)
    private String reserverName;
    private String reserverCountryCallingCode;
    @Mask(type = MaskingType.CELL_PHONE)
    private String reserverCellPhone;
    private CountryCode reserverHomeCountryCode;
    private String hospitalMemo;
    @JsonView(View.SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private Long reservationDoctorId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public ReservationShortTemplate toShortTemplate() {
        return ReservationShortTemplate.builder()
                .id(id)
                .code(code)
                .hospitalId(hospitalId)
                .memberId(memberId)
                .status(status)
                .reservationDoctorId(reservationDoctorId)
                .startAt(startAt)
                .endAt(endAt)
                .createdAt(createdAt)
                .updatedAt(updatedAt)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ReservationTemporaryOperationTimeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.reservation.type.HospitalOperationStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationTemporaryOperationTimeTemplate implements PlusAccessible {

    private long id;
    private HospitalOperationStatus type;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private long hospitalId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/RestrictionGeoPositionUsageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.restriction.type.UsageType;
import kr.co.yeoshin.common.type.DeviceType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RestrictionGeoPositionUsageTemplate implements SystemAccessible {

    private long id;
    private long memberId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private String appVersion;
    private DeviceType deviceType;
    private String appClientId;
    private UsageType usageType;
    private String usage;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/RevisionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.type.UserType;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
public class RevisionTemplate implements PlusAccessible {

    private BigDecimal commitId;
    private Long authorId;
    private UserType userType;
    private String author;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime commitAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventCommissionDetailTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.template.SalesEventImageTemplate.SalesEventNamedImageTemplate;
import kr.co.yeoshin.admin.product.util.SalesProductUtils;
import kr.co.yeoshin.admin.saleseventcommission.service.model.SalesEventCommissionContainer;
import kr.co.yeoshin.admin.saleseventcommission.util.SalesEventCommissionUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.entity.SalesEventCommission;
import kr.co.yeoshin.common.product.entity.SalesEventDetailCommission;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.product.type.SalesEventMakingType;
import kr.co.yeoshin.common.product.type.SalesProductExposureCondition;
import kr.co.yeoshin.common.type.Language;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class SalesEventCommissionDetailTemplate implements PlusAccessible {

    private SalesEventTemplate salesEvent;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private NamedImageTemplate mainImage;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private MultiLanguageType<NamedImageTemplate> localeMainImages;

    private SalesEventMakingType makingType;

    @Deprecated(since = "localeImages")
    private List<NamedImageTemplate> beforeAfterImages;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private MultiLanguageType<List<NamedImageTemplate>> localeBeforeAfterImages;

    private List<SalesProductObjectTemplate> salesProducts;

    private SalesEventTreatmentLibraryTemplate salesEventTreatmentLibrary;

    @Deprecated(since = "localeImages")
    private final List<NamedImageTemplate> treatmentIntroductionImages;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private final MultiLanguageType<List<NamedImageTemplate>> localeTreatmentIntroductionImages;

    @Deprecated(since = "localeImages")
    private final List<NamedImageTemplate> hospitalIntroductionImages;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private final MultiLanguageType<List<NamedImageTemplate>> localeHospitalIntroductionImages;

    private MultiLanguageType<List<SalesEventNamedImageTemplate>> localeImages;

    public MultiLanguage fetchMainImage() {
        return InvokeSupporters.getOrDefaultIfNull(() -> MultiLanguage.builder().ko(mainImage.fetchImage()).build(),
                Optional.ofNullable(localeMainImages)
                        .map(mi -> MultiLanguage.builder()
                                .ko(InvokeSupporters.getOrNullIfNull(() -> mi.getKo().fetchImage()))
                                .en(InvokeSupporters.getOrNullIfNull(() -> mi.getEn().fetchImage()))
                                .zh(InvokeSupporters.getOrNullIfNull(() -> mi.getZh().fetchImage()))
                                .ja(InvokeSupporters.getOrNullIfNull(() -> mi.getJa().fetchImage()))
                                .build())
                        .orElse(null));
    }

    public MultiLanguage fetchThumbnail() {
        return InvokeSupporters.getOrDefaultIfNull(
                () -> MultiLanguage.builder().ko(salesEvent.getThumbnailImage().fetchImage()).build(),
                Optional.ofNullable(salesEvent)
                        .map(SalesEventTemplate::getLocaleThumbnailImages)
                        .map(t -> MultiLanguage.builder()
                                .ko(InvokeSupporters.getOrNullIfNull(() -> t.getKo().fetchImage()))
                                .en(InvokeSupporters.getOrNullIfNull(() -> t.getEn().fetchImage()))
                                .zh(InvokeSupporters.getOrNullIfNull(() -> t.getZh().fetchImage()))
                                .ja(InvokeSupporters.getOrNullIfNull(() -> t.getJa().fetchImage()))
                                .build())
                        .orElse(null));
    }

    public MultiLanguageType<List<String>> fetchBeforeAfterImages() {
        return fetchImages(beforeAfterImages, localeBeforeAfterImages);
    }

    public MultiLanguageType<List<String>> fetchTreatmentIntroductionImages() {
        return fetchImages(treatmentIntroductionImages, localeTreatmentIntroductionImages);
    }

    public MultiLanguageType<List<String>> fetchHospitalIntroductionImages() {
        return fetchImages(hospitalIntroductionImages, localeHospitalIntroductionImages);
    }

    public MultiLanguageType<List<NamedImageTemplate>> fetchBeforeAfterImageTemplates() {
        Function<List<NamedImageTemplate>, List<NamedImageTemplate>> fn = list -> Optional.ofNullable(list)
                .map(l -> l.stream().peek(t -> t.changeImage(t.fetchImage())).collect(Collectors.toList()))
                .orElse(null);

        return Optional.ofNullable(beforeAfterImages)
                .filter(CollectionUtils::isNotEmpty)
                .map(it -> MultiLanguageType.<List<NamedImageTemplate>>builder()
                        .ko(fn.apply(it))
                        .build())
                .orElseGet(() -> Optional.ofNullable(localeBeforeAfterImages)
                        .filter(MultiLanguageType::isNotEmpty)
                        .map(lbai -> MultiLanguageType.<List<NamedImageTemplate>>builder()
                                .ko(InvokeSupporters.getOrNullIfNull(() -> fn.apply(lbai.getKo())))
                                .en(InvokeSupporters.getOrNullIfNull(() -> fn.apply(lbai.getEn())))
                                .zh(InvokeSupporters.getOrNullIfNull(() -> fn.apply(lbai.getZh())))
                                .ja(InvokeSupporters.getOrNullIfNull(() -> fn.apply(lbai.getJa())))
                                .build())
                        .orElse(null)
                );
    }

    private MultiLanguageType<List<String>> fetchImages(List<NamedImageTemplate> namedImageTemplates,
            MultiLanguageType<List<NamedImageTemplate>> multiLanguage) {
        Function<List<NamedImageTemplate>, List<String>> fn = list -> Optional.ofNullable(list)
                .map(l -> l.stream().map(NamedImageTemplate::fetchImage).collect(Collectors.toUnmodifiableList()))
                .orElse(null);

        return Optional.ofNullable(namedImageTemplates)
                .filter(CollectionUtils::isNotEmpty)
                .map(it -> MultiLanguageType.<List<String>>builder()
                        .ko(fn.apply(it))
                        .build())
                .orElseGet(() -> Optional.ofNullable(multiLanguage)
                        .map(ml -> MultiLanguageType.<List<String>>builder()
                                .ko(fn.apply(ml.getKo()))
                                .en(fn.apply(ml.getEn()))
                                .zh(fn.apply(ml.getZh()))
                                .ja(fn.apply(ml.getJa()))
                                .build())
                        .orElse(null)
                );
    }

    public static SalesEventCommissionDetailTemplate from(SalesEventDetailTemplate detailTemplate) {
        Map<String, Map<Language, SalesProductTemplate>> salesProductsByAssociatedId = detailTemplate.getLocaleSalesProducts()
                .toMap()
                .values()
                .stream()
                .flatMap(List::stream)
                .filter(it -> StringUtils.isNotBlank(it.getAssociatedSalesProductId()))
                .collect(Collectors.groupingBy(
                        SalesProductTemplate::getAssociatedSalesProductId,
                        Collectors.toMap(it -> InvokeSupporters.getOrDefaultIfNull(
                                () -> it.getExposureConditions()
                                        .stream()
                                        .filter(SalesProductExposureCondition::isLanguageCondition)
                                        .findFirst()
                                        .map(SalesProductUtils::convertToLanguage)
                                        .orElse(Language.KOREAN),
                                Language.KOREAN), Function.identity())
                ));

        List<SalesProductObjectTemplate> salesProducts = new ArrayList<>();
        for (var sp : detailTemplate.getLocaleSalesProducts().getKo()) {
            Map<Language, SalesProductTemplate> salesProductsByLang = Optional
                    .ofNullable(salesProductsByAssociatedId.get(sp.getAssociatedSalesProductId()))
                    .orElse(Collections.emptyMap());

            salesProducts.add(SalesProductObjectTemplate.builder()
                    .id(sp.getId())
                    .type(sp.getType())
                    .treatmentIds(sp.getTreatmentIds())
                    .displayNameKo(sp.getDisplayNameKo())
                    .displayNameEn(sp.getDisplayNameEn())
                    .displayNameZh(sp.getDisplayNameZh())
                    .displayNameJa(sp.getDisplayNameJa())
                    .displayName(sp.getDisplayName())
                    .descriptionKo(sp.getDescriptionKo())
                    .descriptionEn(sp.getDescriptionEn())
                    .descriptionZh(sp.getDescriptionZh())
                    .descriptionJa(sp.getDescriptionJa())
                    .description(sp.getDescription())
                    .treatmentCount(sp.getTreatmentCount())
                    .salesPrice(sp.getSalesPrice())
                    .salesPriceKo(sp.getSalesPrice())
                    .salesPriceEn(
                            InvokeSupporters.getOrNullIfNull(() -> salesProductsByLang.get(Language.ENGLISH).getSalesPrice()))
                    .salesPriceZh(
                            InvokeSupporters.getOrNullIfNull(() -> salesProductsByLang.get(Language.CHINESE).getSalesPrice()))
                    .salesPriceJa(
                            InvokeSupporters.getOrNullIfNull(() -> salesProductsByLang.get(Language.JAPANESE).getSalesPrice()))
                    .oneTimeRegularPrice(sp.getOneTimeRegularPrice())
                    .oneTimeRegularPriceKo(sp.getOneTimeRegularPrice())
                    .oneTimeRegularPriceEn(InvokeSupporters.getOrNullIfNull(
                            () -> salesProductsByLang.get(Language.ENGLISH).getOneTimeRegularPrice()))
                    .oneTimeRegularPriceZh(InvokeSupporters.getOrNullIfNull(
                            () -> salesProductsByLang.get(Language.CHINESE).getOneTimeRegularPrice()))
                    .oneTimeRegularPriceJa(InvokeSupporters.getOrNullIfNull(
                            () -> salesProductsByLang.get(Language.JAPANESE).getOneTimeRegularPrice()))
                    .associatedSalesProductId(sp.getAssociatedSalesProductId())
                    .build());
        }

        return SalesEventCommissionDetailTemplate.builder()
                .salesEvent(detailTemplate.getSalesEvent())
                .mainImage(detailTemplate.getMainImage())
                .localeMainImages(detailTemplate.getLocaleMainImages())
                .makingType(detailTemplate.getMakingType())
                .beforeAfterImages(detailTemplate.getBeforeAfterImages())
                .localeBeforeAfterImages(detailTemplate.getLocaleBeforeAfterImages())
                .salesProducts(salesProducts)
                .salesEventTreatmentLibrary(detailTemplate.getSalesEventTreatmentLibrary())
                .treatmentIntroductionImages(detailTemplate.getTreatmentIntroductionImages())
                .localeTreatmentIntroductionImages(detailTemplate.getLocaleTreatmentIntroductionImages())
                .hospitalIntroductionImages(detailTemplate.getHospitalIntroductionImages())
                .localeHospitalIntroductionImages(detailTemplate.getLocaleHospitalIntroductionImages())
                .build();
    }

    public static SalesEventCommissionDetailTemplate of(
            SalesEventCommissionContainer salesEventCommissionContainer,
            List<SalesEventNamedImageTemplate> imageTemplates
    ) {
        if (salesEventCommissionContainer == null || !salesEventCommissionContainer.isValid()) {
            return null;
        }

        SalesEventCommission salesEventCommission = salesEventCommissionContainer.getSalesEventCommission();

        Map<SalesEventImageType, List<SalesEventNamedImageTemplate>> imageMap = imageTemplates.stream()
                .collect(Collectors.groupingBy(SalesEventNamedImageTemplate::getType));

        Optional<SalesEventDetailCommission> detailCommission = Optional.ofNullable(
                salesEventCommission.getSalesEventDetailCommission());

        SalesEventTemplate salesEventTemplate = detailCommission
                .map(x -> SalesEventTemplate.of(x, imageTemplates))
                .orElse(null);
        SalesEventTreatmentLibraryTemplate salesEventTreatmentLibrary = detailCommission
                .map(x -> SalesEventTreatmentLibraryTemplate.of(x.getSalesEventSystemCommission()))
                .orElse(null);

        List<NamedImageTemplate> treatmentIntroductionImages = Optional.ofNullable(
                imageMap.get(SalesEventImageType.TREATMENT_INTRODUCTION))
                .map(l -> l.stream()
                        .map(SalesEventCommissionUtils::convertNamedImageTemplate)
                        .collect(Collectors.toList()))
                .orElse(Collections.emptyList());

        List<NamedImageTemplate> hospitalIntroductionImages = Optional.ofNullable(
                imageMap.get(SalesEventImageType.HOSPITAL_INTRODUCTION))
                .map(l -> l.stream()
                        .map(SalesEventCommissionUtils::convertNamedImageTemplate)
                        .collect(Collectors.toList()))
                .orElse(Collections.emptyList());

        List<NamedImageTemplate> beforeAfterImages = Optional.ofNullable(imageMap.get(SalesEventImageType.BEFORE_AFTER))
                .map(l -> l.stream()
                        .map(SalesEventCommissionUtils::convertNamedImageTemplate)
                        .collect(Collectors.toList()))
                .orElse(Collections.emptyList());

        List<SalesProductObjectTemplate> salesProducts = detailCommission
                .map(x -> SalesProductObjectTemplate.of(x.getSalesProducts()))
                .orElse(null);

        return SalesEventCommissionDetailTemplate.builder()
                .salesEvent(salesEventTemplate)
                .salesEventTreatmentLibrary(salesEventTreatmentLibrary)
                .mainImage(Optional.ofNullable(imageMap.get(SalesEventImageType.MAIN))
                        .flatMap(l -> l.stream().findFirst())
                        .map(SalesEventCommissionUtils::convertNamedImageTemplate)
                        .orElse(null))
                .makingType(salesEventCommission.getMakingType())
                .beforeAfterImages(beforeAfterImages)
                .salesProducts(salesProducts)
                .treatmentIntroductionImages(treatmentIntroductionImages)
                .hospitalIntroductionImages(hospitalIntroductionImages)
                .localeImages(MultiLanguageType.of(imageTemplates, SalesEventImageTemplate::getLanguage))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventCommissionShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.model.CommissionType;
import kr.co.yeoshin.common.product.type.SalesEventCommissionStatus;
import kr.co.yeoshin.common.product.type.SalesEventMakingType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventCommissionShortTemplate implements PlusAccessible {

    private long id;
    private CommissionType commissionType;
    private SalesEventMakingType makingType;
    private long hospitalId;
    private SalesEventCommissionStatus status;
    private String title;
    private Long salesEventId;
    private Long salesManagerId;
    private Long representativeTreatmentId;
    private Long writerId;
    private boolean isSecret;
    private int numberOfComment;
    private boolean hasNewComment;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime statusUpdatedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter(value = "isSecret")
    @JsonView(SystemAdmin.class)
    public boolean isSecret() {
        return isSecret;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventCommissionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import static java.util.function.Predicate.not;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import java.time.ZonedDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.SalesEventImageTemplate.SalesEventNamedImageTemplate;
import kr.co.yeoshin.admin.saleseventcommission.service.model.SalesEventCommissionContainer;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.entity.SalesEventBulkCommission;
import kr.co.yeoshin.common.product.entity.SalesEventCommission;
import kr.co.yeoshin.common.product.entity.SalesEventDetailCommission;
import kr.co.yeoshin.common.product.model.CommissionType;
import kr.co.yeoshin.common.product.type.SalesEventCommissionStatus;
import kr.co.yeoshin.common.product.type.SalesEventMakingType;
import kr.co.yeoshin.common.product.type.SalesEventStyleColorType;
import kr.co.yeoshin.common.product.type.ThumbnailType;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.UrlUtils;
import kr.co.yeoshin.common.utils.ValidationUtils;
import lombok.*;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public class SalesEventCommissionTemplate implements PlusAccessible {

    protected Long id;

    @JsonUnwrapped
    @JsonInclude(Include.NON_NULL)
    private SalesEventCommissionDetailTemplate salesEventDetail;

    protected CommissionType commissionType;

    protected SalesEventCommissionStatus status;

    protected String title;

    protected SalesEventStyleColorType styleColor;

    protected ThumbnailType thumbnailType;

    protected String thumbnailTitle;

    protected List<String> thumbnailSubTexts;

    private String salesProductsFileName;

    @JsonInclude(Include.NON_NULL)
    private SalesEventModificationObjectTemplate previousValues;

    @JsonUnwrapped
    @JsonInclude(Include.NON_NULL)
    private BulkCommissionTemplate bulkCommission;

    protected AdminShortTemplate writer;

    protected boolean isSecret;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    protected ZonedDateTime createdAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    protected ZonedDateTime updatedAt;

    protected boolean isApplicable;

    public List<String> fetchAllImages() {
        List<String> imageRequests = new ArrayList<>();

        InvokeSupporters.getOrNullIfNull(() -> imageRequests.addAll(salesEventDetail.fetchMainImage().toMap().values()));
        InvokeSupporters.getOrNullIfNull(() -> imageRequests.addAll(salesEventDetail.fetchThumbnail().toMap().values()));
        InvokeSupporters.getOrNullIfNull(() -> imageRequests.addAll(
                salesEventDetail.fetchBeforeAfterImages().toMap().values().stream().flatMap(List::stream)
                        .collect(Collectors.toList())));
        InvokeSupporters.getOrNullIfNull(() -> imageRequests.addAll(
                salesEventDetail.fetchTreatmentIntroductionImages().toMap().values().stream().flatMap(List::stream)
                        .collect(Collectors.toList())));
        InvokeSupporters.getOrNullIfNull(() -> imageRequests.addAll(
                salesEventDetail.fetchHospitalIntroductionImages().toMap().values().stream().flatMap(List::stream)
                        .collect(Collectors.toList())));
        InvokeSupporters.getOrNullIfNull(() -> imageRequests.addAll(
                salesEventDetail.getSalesEventTreatmentLibrary().fetchTreatmentParts().toMap().values().stream()
                        .flatMap(List::stream).collect(Collectors.toList())));

        return imageRequests;
    }

    @Getter
    @Builder
    public static final class BulkCommissionTemplate implements PlusAccessible {

        private final String additionalMemo;
        private final List<FileTemplate> bulkUploadThumbnails;
        private final List<FileTemplate> bulkUploadFiles;
        private final List<FileTemplate> bulkUploadImages;

        public List<String> fetchBulkUploadFiles() {
            return Optional.ofNullable(bulkUploadFiles)
                    .map(fns -> fns.stream()
                            .map(FileTemplate::getUrl)
                            .map(UrlUtils::extractFilename)
                            .collect(Collectors.toUnmodifiableList()))
                    .orElse(null);
        }

        public List<String> fetchBulkUploadImages() {
            return Optional.ofNullable(bulkUploadImages)
                    .map(fns -> fns.stream()
                            .map(FileTemplate::getUrl)
                            .map(UrlUtils::extractFilename)
                            .collect(Collectors.toUnmodifiableList()))
                    .orElse(null);
        }

        public List<String> fetchBulkImageFiles() {
            return fetchAllFiles()
                    .stream()
                    .filter(ValidationUtils::isValidImageExtension)
                    .collect(Collectors.toUnmodifiableList());
        }

        public List<String> fetchBulkNoneImageFiles() {
            return fetchAllFiles().stream()
                    .filter(not(ValidationUtils::isValidImageExtension))
                    .collect(Collectors.toUnmodifiableList());
        }

        public List<String> fetchAllFiles() {
            return Stream.of(Optional.ofNullable(bulkUploadThumbnails).orElse(Collections.emptyList()),
                            Optional.ofNullable(bulkUploadFiles).orElse(Collections.emptyList()),
                            Optional.ofNullable(bulkUploadImages).orElse(Collections.emptyList()))
                    .flatMap(List::stream)
                    .map(FileTemplate::getUrl)
                    .map(UrlUtils::extractFilename)
                    .collect(Collectors.toUnmodifiableList());
        }
    }

    @JsonView(SystemAdmin.class)
    @JsonGetter(value = "isSecret")
    public boolean isSecret() {
        return isSecret;
    }

    @JsonGetter(value = "isApplicable")
    public boolean isApplicable() {
        return isApplicable;
    }

    public static SalesEventCommissionTemplate of(
            SalesEventCommissionContainer salesEventCommissionContainer,
            boolean isApplicable,
            boolean isPlusAdmin,
            List<SalesEventNamedImageTemplate> imageTemplates,
            Map<String, FileTemplate> fileTemplates
    ) {

        if (salesEventCommissionContainer == null || !salesEventCommissionContainer.isValid()) {
            return null;
        }

        SalesEventCommission salesEventCommission = salesEventCommissionContainer.getSalesEventCommission();
        SalesEventMakingType makingType = salesEventCommission.getMakingType();

        SalesEventCommissionTemplate.SalesEventCommissionTemplateBuilder builder = SalesEventCommissionTemplate.builder()
                .id(salesEventCommission.getId())
                .commissionType(salesEventCommission.getCommissionType())
                .status(salesEventCommission.getStatus())
                .title(salesEventCommission.getTitle())
                .styleColor(salesEventCommission.getStyleColor())
                .thumbnailType(salesEventCommission.getThumbnailType())
                .thumbnailTitle(salesEventCommission.getThumbnailTitle())
                .thumbnailSubTexts(salesEventCommission.getThumbnailSubTexts())
                .salesProductsFileName(salesEventCommission.getSalesProductsFilename())
                .isApplicable(isApplicable)
                .writer(AdminShortTemplate.of(salesEventCommission.getWriter(), isPlusAdmin))
                .isSecret(salesEventCommission.getSecretYn().toBoolean())
                .createdAt(
                        InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(salesEventCommission.getCreated())))
                .updatedAt(
                        InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(salesEventCommission.getUpdated())));

        if (makingType == SalesEventMakingType.BULK) {
            SalesEventBulkCommission bulkRequest = Optional.ofNullable(
                            salesEventCommission.getSalesEventBulkCommission())
                    .orElse(SalesEventBulkCommission.builder().build());

            return builder.salesEventDetail(SalesEventCommissionDetailTemplate.builder()
                            .makingType(SalesEventMakingType.BULK)
                            .build())
                    .bulkCommission(BulkCommissionTemplate.builder()
                            .additionalMemo(bulkRequest.getAdditionalMemo())
                            .bulkUploadThumbnails(Optional.ofNullable(bulkRequest.getBulkUploadThumbnails())
                                    .map(thumbnails -> thumbnails.stream()
                                            .map(fileTemplates::get)
                                            .filter(Objects::nonNull)
                                            .collect(Collectors.toUnmodifiableList()))
                                    .orElse(Collections.emptyList()))
                            .bulkUploadFiles(Optional.ofNullable(bulkRequest.getBulkUploadFiles())
                                    .map(files -> files.stream()
                                            .map(fileTemplates::get)
                                            .collect(Collectors.toUnmodifiableList()))
                                    .orElse(Collections.emptyList()))
                            .bulkUploadImages(Optional.ofNullable(bulkRequest.getBulkUploadImages())
                                    .map(images -> images.stream()
                                            .map(fileTemplates::get)
                                            .collect(Collectors.toUnmodifiableList()))
                                    .orElse(Collections.emptyList()))
                            .build())
                    .build();
        }

        SalesEventDetailCommission detailRequest = Optional.ofNullable(salesEventCommission.getSalesEventDetailCommission())
                .orElse(SalesEventDetailCommission.builder().build());

        return builder.salesEventDetail(SalesEventCommissionDetailTemplate.of(salesEventCommissionContainer, imageTemplates))
                .previousValues(SalesEventModificationObjectTemplate.of(detailRequest.getPreviousValues()))
                .createdAt(
                        InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(salesEventCommission.getCreated())))
                .updatedAt(
                        InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(salesEventCommission.getUpdated())))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventConsultationConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationConfigTemplate {

    private long id;
    private long salesEventId;
    private long hospitalId;
    private MultiLanguageType<Integer> localeConsultationPrices;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventConsultationPaidStatusLogTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.product.type.SalesEventConsultationPaidStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationPaidStatusLogTemplate implements PlusAccessible {

    private long id;
    private long salesEventConsultationId;
    private SalesEventConsultationPaidStatus beforePaidStatus;
    private SalesEventConsultationPaidStatus afterPaidStatus;
    private int price;
    private int paidPrice;
    private String adminMemo;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventConsultationPriceTagTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationPriceTagTemplate implements SystemAccessible {

    private int salesProductPriceRangeMinKo;
    private int salesProductPriceRangeMaxKo;
    private int salesProductPriceRangeMinEn;
    private int salesProductPriceRangeMaxEn;
    private int salesProductPriceRangeMinZh;
    private int salesProductPriceRangeMaxZh;
    private int salesProductPriceRangeMinJa;
    private int salesProductPriceRangeMaxJa;
    private int priceKo;
    private int priceEn;
    private int priceZh;
    private int priceJa;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventConsultationTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.type.SalesEventConsultationMessengerType;
import kr.co.yeoshin.common.product.type.SalesEventConsultationStatus;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationTemplate implements PlusAccessible {

    private long id;
    private long memberId;
    private long salesEventId;
    private long hospitalId;
    private String content;
    private SalesEventConsultationMessengerType messengerType;
    private String messengerId;
    private SalesEventConsultationStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime visitAt;
    private String language;
    private CountryCode homeCountryCode;
    private String memo;
    @JsonView(SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventCpmTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventCpmTemplate implements PlusAccessible {

    private long id;
    private long salesEventId;
    @JsonView(SystemAdmin.class)
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime qualityStartAt;
    private int unitPrice;
    private int discountUnitPrice;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime hideAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventDetailTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.template.SalesEventImageTemplate.SalesEventNamedImageTemplate;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.admin.product.service.model.SalesEventContainer;
import kr.co.yeoshin.admin.product.util.SalesEventUtils;
import kr.co.yeoshin.admin.product.util.SalesProductUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.hospital.entity.HospitalTreatment;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.product.type.SalesEventMakingType;
import kr.co.yeoshin.common.type.Language;
import lombok.Builder;
import lombok.Getter;

@Builder(toBuilder = true)
@Getter
public class SalesEventDetailTemplate implements PlusAccessible {

    private SalesEventTemplate salesEvent;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private NamedImageTemplate mainImage;

    @Deprecated(since = "localeImages")
    @JsonView(SystemAdmin.class)
    private MultiLanguageType<NamedImageTemplate> localeMainImages;

    private SalesEventMakingType makingType;

    @Deprecated(since = "localeImages")
    private List<NamedImageTemplate> beforeAfterImages;

    @Deprecated(since = "localeImages")
    private MultiLanguageType<List<NamedImageTemplate>> localeBeforeAfterImages;

    private List<SalesProductTemplate> salesProducts;

    private MultiLanguageType<List<SalesProductTemplate>> localeSalesProducts;

    private SalesEventTreatmentLibraryTemplate salesEventTreatmentLibrary;

    @Deprecated(since = "localeImages")
    private final List<NamedImageTemplate> treatmentIntroductionImages;

    @Deprecated(since = "localeImages")
    private final MultiLanguageType<List<NamedImageTemplate>> localeTreatmentIntroductionImages;

    @Deprecated(since = "localeImages")
    private final List<NamedImageTemplate> hospitalIntroductionImages;

    @Deprecated(since = "localeImages")
    private final MultiLanguageType<List<NamedImageTemplate>> localeHospitalIntroductionImages;

    private final List<HospitalDepartmentTemplate> hospitalDepartments;

    private final List<HospitalTreatmentTemplate> hospitalTreatments;

    private List<SalesEventUsageTemplate> salesEventUsages;

    private Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImagesBySalesEventUsageId;

    private Map<Long, List<TagTemplate>> treatmentMethodTagsBySalesEventUsageId;

    private MultiLanguageType<List<SalesEventNamedImageTemplate>> localeImages;

    public static SalesEventDetailTemplate of(
            SalesEventContainer salesEventContainer,
            List<HospitalDepartment> hospitalDepartments,
            List<HospitalTreatment> hospitalTreatments,
            List<SalesEventUsage> salesEventUsages,
            List<SalesEventUsageImage> salesEventUsageImages,
            List<SalesEventUsageAsTreatmentMethodTag> salesEventUsageAsTreatmentMethodTags,
            Map<String, MediaContainer> mediaContainerMap
    ) {
        if (salesEventContainer == null || !salesEventContainer.isValid()) {
            return null;
        }

        SalesEvent salesEvent = salesEventContainer.getSalesEvent();
        List<SalesEventImage> salesEventImages = salesEventContainer.getSalesEventImages();
        List<SalesProduct> salesProducts = salesEventContainer.getSalesProducts();
        List<SalesProductAsTreatment> salesProductAsTreatments = salesEventContainer.getSalesProductAsTreatments();

        boolean isTreatmentLibrary = salesEvent.getTreatmentLibraryYn().toBoolean();

        Map<Long, List<Long>> treatmentIdsByProductId = salesProductAsTreatments.stream()
                .collect(Collectors.groupingBy(
                        it -> it.getSalesProduct().getId(),
                        Collectors.mapping(it -> it.getTreatment().getId(), Collectors.toUnmodifiableList())
                ));
        Map<Language, List<SalesProductTemplate>> salesProductTemplates = SalesProductUtils.sortSalesProducts(salesProducts)
                .entrySet()
                .stream()
                .collect(Collectors.toMap(Entry::getKey, it -> it.getValue().stream()
                        .map(sp -> SalesProductTemplate.of(sp, treatmentIdsByProductId.get(sp.getId())))
                        .collect(Collectors.toList())));

        List<SalesEventNamedImageTemplate> imageTemplates = salesEventImages.stream()
                .map(si -> SalesEventNamedImageTemplate.of(si, mediaContainerMap))
                .collect(Collectors.toList());

        Map<SalesEventImageType, MultiLanguageType<List<NamedImageTemplate>>> namedImageTemplates = imageTemplates.stream()
                .collect(Collectors.groupingBy(SalesEventNamedImageTemplate::getType))
                .entrySet()
                .stream()
                .collect(Collectors.toMap(Entry::getKey,
                        e -> MultiLanguageType.<List<NamedImageTemplate>>builder()
                                .ko(e.getValue().stream()
                                        .filter(x -> x.getLanguage() == Language.KOREAN)
                                        .map(SalesEventUtils::convert)
                                        .collect(Collectors.toList()))
                                .en(e.getValue().stream()
                                        .filter(x -> x.getLanguage() == Language.ENGLISH)
                                        .map(SalesEventUtils::convert)
                                        .collect(Collectors.toList()))
                                .zh(e.getValue().stream()
                                        .filter(x -> x.getLanguage() == Language.CHINESE)
                                        .map(SalesEventUtils::convert)
                                        .collect(Collectors.toList()))
                                .ja(e.getValue().stream()
                                        .filter(x -> x.getLanguage() == Language.JAPANESE)
                                        .map(SalesEventUtils::convert)
                                        .collect(Collectors.toList()))
                                .build()));

        MultiLanguageType<NamedImageTemplate> mainImage = MultiLanguageType.convertWithFirstItem(
                namedImageTemplates.get(SalesEventImageType.MAIN));

        return SalesEventDetailTemplate.builder()
                .salesEvent(SalesEventTemplate.of(salesEvent, imageTemplates))
                .mainImage(mainImage.getKo())
                .localeMainImages(mainImage)
                .makingType(isTreatmentLibrary ? SalesEventMakingType.SYSTEM : SalesEventMakingType.HOSPITAL)
                .beforeAfterImages(InvokeSupporters.getOrNullIfNull(
                        () -> namedImageTemplates.get(SalesEventImageType.BEFORE_AFTER).getKo()))
                .localeBeforeAfterImages(namedImageTemplates.get(SalesEventImageType.BEFORE_AFTER))
                .salesProducts(salesProductTemplates.get(Language.KOREAN))
                .localeSalesProducts(MultiLanguageType.<List<SalesProductTemplate>>builder()
                        .ko(salesProductTemplates.get(Language.KOREAN))
                        .en(salesProductTemplates.get(Language.ENGLISH))
                        .zh(salesProductTemplates.get(Language.CHINESE))
                        .ja(salesProductTemplates.get(Language.JAPANESE))
                        .build())
                .salesEventTreatmentLibrary(salesEventContainer.getSalesEventTreatmentLibrary()
                        .map(x -> SalesEventTreatmentLibraryTemplate.of(
                                x,
                                imageTemplates.stream()
                                        .filter(y -> y.getType() == SalesEventImageType.TREATMENT_PART)
                                        .collect(Collectors.toList()),
                                salesEventContainer.getTreatmentPrincipleUsages()
                        ))
                        .orElse(null)
                )
                .treatmentIntroductionImages(InvokeSupporters.getOrNullIfNull(
                        () -> namedImageTemplates.get(SalesEventImageType.TREATMENT_INTRODUCTION).getKo()))
                .localeTreatmentIntroductionImages(namedImageTemplates.get(SalesEventImageType.TREATMENT_INTRODUCTION))
                .hospitalIntroductionImages(InvokeSupporters.getOrNullIfNull(
                        () -> namedImageTemplates.get(SalesEventImageType.HOSPITAL_INTRODUCTION).getKo()))
                .localeHospitalIntroductionImages(namedImageTemplates.get(SalesEventImageType.HOSPITAL_INTRODUCTION))
                .hospitalDepartments(hospitalDepartments.stream()
                        .map(HospitalDepartmentTemplate::of)
                        .collect(Collectors.toList()))
                .hospitalTreatments(hospitalTreatments.stream()
                        .map(HospitalTreatmentTemplate::of)
                        .collect(Collectors.toList()))
                .salesEventUsages(salesEventUsages.stream()
                        .map(SalesEventUsageTemplate::of)
                        .collect(Collectors.toList()))
                .salesEventUsageImagesBySalesEventUsageId(salesEventUsageImages.stream()
                        .collect(Collectors.groupingBy(it -> it.getSalesEventUsage().getId(),
                                Collectors.mapping(x -> SalesEventUsageImageTemplate.of(x, mediaContainerMap),
                                        Collectors.toList()))))
                .treatmentMethodTagsBySalesEventUsageId(salesEventUsageAsTreatmentMethodTags.stream()
                        .collect(Collectors.groupingBy(it -> it.getSalesEventUsage().getId(),
                                Collectors.mapping(it -> TagTemplate.builder()
                                                .id(it.getTreatmentMethodTag().getId())
                                                .tag(it.getTreatmentMethodTag().getTagKo())
                                                .build(),
                                        Collectors.toList()))))
                .localeImages(SalesEventUtils.collectImages(salesEventContainer, mediaContainerMap))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventImageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.admin.common.Constant.Entity;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.admin.product.controller.model.SalesEventImageRequest;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.product.entity.SalesEventImage;
import kr.co.yeoshin.common.product.type.DirectionType;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.utils.UrlUtils;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder(toBuilder = true)
public class SalesEventImageTemplate implements PlusAccessible {

    private long id;

    private String image;

    private SalesEventImageType type;

    private Language language;

    private DirectionType directionType;

    @JsonIgnore
    private boolean isPrivate;

    @JsonGetter("isPrivate")
    public boolean isPrivate() {
        return this.isPrivate;
    }

    public SalesEventImageTemplate changeImage(String image) {
        this.image = image;
        return this;
    }

    public static SalesEventImageTemplate of(SalesEventImage salesEventImage, Map<String, MediaContainer> mediaContainerMap) {
        Optional<MediaContainer> mediaContainer = Optional.ofNullable(mediaContainerMap)
                .map(m -> m.get(salesEventImage.getImage()));

        return SalesEventImageTemplate.builder()
                .id(salesEventImage.getId())
                .image(mediaContainer.flatMap(MediaContainer::getEndpoint).orElse(salesEventImage.getImage()))
                .type(salesEventImage.getType())
                .language(salesEventImage.getLanguage())
                .directionType(salesEventImage.getDirectionType())
                .isPrivate(salesEventImage.getPrivateYn().toBoolean())
                .build();
    }


    @Getter
    @SuperBuilder(toBuilder = true)
    public static class SalesEventNamedImageTemplate extends SalesEventImageTemplate {
        private String fileName;

        public SalesEventNamedImageTemplate changeImage(String image) {
            super.changeImage(image);
            return this;
        }

        public static SalesEventNamedImageTemplate of(
                SalesEventImage salesEventImage,
                Map<String, MediaContainer> mediaContainerMap
        ) {
            Optional<MediaContainer> mediaContainer = Optional.ofNullable(mediaContainerMap.get(salesEventImage.getImage()));
            return SalesEventNamedImageTemplate.builder()
                    .id(salesEventImage.getId())
                    .image(mediaContainer.flatMap(MediaContainer::getEndpoint)
                            .orElse(salesEventImage.getImage()))
                    .type(salesEventImage.getType())
                    .language(salesEventImage.getLanguage())
                    .directionType(salesEventImage.getDirectionType())
                    .isPrivate(salesEventImage.getPrivateYn().toBoolean())
                    .fileName(mediaContainer.flatMap(MediaContainer::getMediaStatus)
                            .map(MediaStatus::getOriginalFileName)
                            .orElse(salesEventImage.getImage()))
                    .build();
        }

        public static SalesEventNamedImageTemplate of(String image, SalesEventImageType type, Language language) {
            return SalesEventNamedImageTemplate.builder()
                    .id(Entity.NOT_EXIST_ID)
                    .image(image)
                    .type(type)
                    .language(language)
                    .directionType(DirectionType.NONE)
                    .isPrivate(false)
                    .fileName(UrlUtils.extractFilename(image))
                    .build();
        }

        public static SalesEventNamedImageTemplate of(SalesEventImageRequest request, Map<String, MediaContainer> mediaContainerMap) {
            String image = UrlUtils.extractFilename(request.getImage());
            Optional<MediaContainer> mediaContainer = Optional.ofNullable(mediaContainerMap.get(image));
            return SalesEventNamedImageTemplate.builder()
                    .id(Optional.ofNullable(request.getId()).orElse(Entity.NOT_EXIST_ID))
                    .image(mediaContainer.flatMap(MediaContainer::getEndpoint)
                            .orElse(request.getImage()))
                    .type(request.getType())
                    .language(request.getLanguage())
                    .directionType(request.getDirectionType())
                    .isPrivate(request.isPrivate())
                    .fileName(mediaContainer.flatMap(MediaContainer::getMediaStatus)
                            .map(MediaStatus::getOriginalFileName)
                            .orElse(image))
                    .build();
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventModificationObjectTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.product.model.SalesEventModificationObject;
import lombok.*;

@Builder
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public class SalesEventModificationObjectTemplate implements PlusAccessible {

    private String nameKo;
    private String nameEn;
    private String nameZh;
    private String nameJa;
    private String subNameKo;
    private String subNameEn;
    private String subNameZh;
    private String subNameJa;

    public static SalesEventModificationObjectTemplate of(SalesEventModificationObject salesEventModificationObject) {
        if (salesEventModificationObject == null) {
            return null;
        }

        return SalesEventModificationObjectTemplate.builder()
                .nameKo(salesEventModificationObject.getNameKo())
                .nameEn(salesEventModificationObject.getNameEn())
                .nameZh(salesEventModificationObject.getNameZh())
                .nameJa(salesEventModificationObject.getNameJa())
                .subNameKo(salesEventModificationObject.getSubNameKo())
                .subNameEn(salesEventModificationObject.getSubNameEn())
                .subNameZh(salesEventModificationObject.getSubNameZh())
                .subNameJa(salesEventModificationObject.getSubNameJa())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventQuestionReplyTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventQuestionReplyTemplate implements PlusAccessible {

    private long id;
    private long salesEventQuestionId;
    private String contents;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventQuestionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventQuestionTemplate implements PlusAccessible {

    private long id;
    private String contents;
    private long memberId;
    private long salesEventId;
    private long hospitalId;
    private boolean isVisible;
    private boolean isSecret;
    @JsonView(SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter("isSecret")
    public boolean isSecret() {
        return isSecret;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.common.product.type.SalesEventMakingType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventShortTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private String code;
    private String nameKo;
    private String nameEn;
    private String nameZh;
    private String nameJa;
    private String subNameKo;
    private String subNameEn;
    private String subNameZh;
    private String subNameJa;
    private String thumbnail;
    private boolean isVisible;
    private boolean isPublishable;
    private boolean isUsable;
    @Deprecated
    private boolean isConsultation;
    @Deprecated
    private boolean isConsultationKo;
    @Deprecated
    private boolean isConsultationEn;
    @Deprecated
    private boolean isConsultationZh;
    @Deprecated
    private boolean isConsultationJa;

    private MultiLanguageType<Boolean> localeConsultations;
    private MultiLanguageType<Boolean> localeOrders;

    private SalesEventMakingType makingType;
    private long representativeTreatmentId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updateAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter("isPublishable")
    public boolean isPublishable() {
        return isPublishable;
    }

    @JsonGetter("isUsable")
    public boolean isUsable() {
        return isUsable;
    }

    @JsonGetter("isConsultation")
    public boolean isConsultation() {
        return isConsultation;
    }

    @JsonGetter("isConsultationKo")
    public boolean isConsultationKo() {
        return isConsultationKo;
    }

    @JsonGetter("isConsultationEn")
    public boolean isConsultationEn() {
        return isConsultationEn;
    }

    @JsonGetter("isConsultationZh")
    public boolean isConsultationZh() {
        return isConsultationZh;
    }

    @JsonGetter("isConsultationJa")
    public boolean isConsultationJa() {
        return isConsultationJa;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.review.model.TreatmentReviewEvaluationCount;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventStatTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private long salesEventId;
    private long totalReviewCount;
    private float starPointAverage;
    private int representativeSalesProductPrice;
    private long scrapCount;
    private long scrapCountIn1Week;
    private long scrapCountIn6Month;
    private long orderCountIn1Week;
    private long orderCountIn1Month;
    private List<TreatmentReviewEvaluationCount> treatmentReviewEvaluationsIn365day;
    private float starPointAverageIn365day;
    private long reviewCountIn365day;
    private long usageCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.Constant.Entity;
import kr.co.yeoshin.admin.common.component.LocaleTextResponseFactory;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.localetext.SalesEventMultiLanguage;
import kr.co.yeoshin.admin.common.model.template.SalesEventImageTemplate.SalesEventNamedImageTemplate;
import kr.co.yeoshin.admin.saleseventcommission.util.SalesEventCommissionUtils;
import kr.co.yeoshin.admin.utils.EntityUtils;
import kr.co.yeoshin.admin.utils.FunctionalUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.SalesEventDetailCommission;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.product.type.SalesEventStyleColorType;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder(toBuilder = true)
public class SalesEventTemplate implements PlusAccessible {

    private Long id;

    private String code;

    private SalesEventStyleColorType styleColor;

    @Deprecated
    private String nameKo;

    private MultiLanguage localeName;

    @Deprecated
    private String subNameKo;

    private MultiLanguage localeSubName;

    private String geoCell;

    @Deprecated
    private String descriptionKo;

    @Deprecated
    private String descriptionEn;

    @Deprecated
    private String descriptionZh;

    @Deprecated
    private String descriptionJa;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;

    private boolean isVisible;

    private boolean isOrder;

    private boolean isConsultation;

    private boolean isUsable;

    private MultiLanguageType<Boolean> localeConsultations;

    private MultiLanguageType<Boolean> localeOrders;

    private boolean isTreatmentLibrary;

    private int salesCount;

    @Deprecated(since = "localeImages of outer class")
    private NamedImageTemplate thumbnailImage;

    @Deprecated(since = "localeImages of outer class")
    @JsonView(SystemAdmin.class)
    private MultiLanguageType<NamedImageTemplate> localeThumbnailImages;

    @JsonView(SystemAdmin.class)
    private List<Long> representativeSolutionTagIds;

    private long representativeTreatmentId;

    @Deprecated
    private String requireTimeKo;

    private MultiLanguage localeRequireTime;

    @Deprecated
    private String anesthesiaKo;

    private MultiLanguage localeAnesthesia;

    @Deprecated
    private String downtimeKo;

    private MultiLanguage localeDowntime;

    @Deprecated
    private String treatmentEffectAppearsTimeKo;

    private MultiLanguage localeTreatmentEffectAppearsTime;

    @Deprecated
    @JsonView(SystemAdmin.class)
    private List<String> categoryTags;

    private MultiLanguageType<List<String>> localeCategoryTags;

    private long hospitalId;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter(value = "isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter(value = "isTreatmentLibrary")
    public boolean isTreatmentLibrary() {
        return isTreatmentLibrary;
    }

    @JsonGetter(value = "isConsultation")
    public boolean isConsultation() {
        return isConsultation;
    }

    @JsonGetter(value = "isOrder")
    public boolean isOrder() {
        return isOrder;
    }

    @JsonGetter(value = "isUsable")
    public boolean isUsable() {
        return isUsable;
    }

    public static SalesEventTemplate of(
            SalesEvent salesEvent,
            List<SalesEventNamedImageTemplate> imageTemplates) {
        if (EntityUtils.isNotExists(salesEvent, SalesEvent::getId)) {
            return null;
        }
        Map<Language, NamedImageTemplate> thumbnailTemplates = imageTemplates.stream()
                .filter(x -> x.getType() == SalesEventImageType.THUMBNAIL)
                .map(x -> Map.entry(x.getLanguage(), NamedImageTemplate.builder()
                        .id(x.getId())
                        .image(x.getImage())
                        .fileName(x.getFileName())
                        .type(x.getDirectionType().name())
                        .isPrivate(x.isPrivate())
                        .build()))
                .collect(Collectors.toMap(Entry::getKey, Entry::getValue, FunctionalUtils.selectFirst()));

        SalesEventMultiLanguage multiLanguage = LocaleTextResponseFactory.salesEventMultiLanguage(salesEvent);

        return SalesEventTemplate.builder()
                .id(salesEvent.getId())
                .hospitalId(salesEvent.getHospital().getId())
                .code(salesEvent.getEventCode())
                .styleColor(salesEvent.getStyleColor())
                .nameKo(salesEvent.getNameKo())
                .localeName(multiLanguage.getNames())
                .subNameKo(salesEvent.getSubNameKo())
                .localeSubName(multiLanguage.getSubNames())
                .descriptionKo(salesEvent.getDescriptionKo())
                .descriptionEn(salesEvent.getDescriptionEn())
                .descriptionZh(salesEvent.getDescriptionZh())
                .descriptionJa(salesEvent.getDescriptionJa())
                .thumbnailImage(thumbnailTemplates.get(Language.KOREAN))
                .localeThumbnailImages(MultiLanguageType.<NamedImageTemplate>builder()
                        .ko(thumbnailTemplates.get(Language.KOREAN))
                        .en(thumbnailTemplates.get(Language.ENGLISH))
                        .zh(thumbnailTemplates.get(Language.CHINESE))
                        .ja(thumbnailTemplates.get(Language.JAPANESE))
                        .build())
                .representativeSolutionTagIds(salesEvent.getRepresentativeSolutionTagIds())
                .representativeTreatmentId(salesEvent.getTreatment().getId())
                .requireTimeKo(salesEvent.getRequireTimeKo())
                .localeRequireTime(multiLanguage.getRequireTimes())
                .anesthesiaKo(salesEvent.getAnesthesiaKo())
                .localeAnesthesia(multiLanguage.getAnesthesias())
                .downtimeKo(salesEvent.getDowntimeKo())
                .localeDowntime(multiLanguage.getDowntimes())
                .treatmentEffectAppearsTimeKo(salesEvent.getTreatmentEffectAppearsTimeKo())
                .localeTreatmentEffectAppearsTime(multiLanguage.getTreatmentEffectAppearsTimes())
                .geoCell(salesEvent.getGeoCell())
                .startAt(InvokeSupporters.getOrNullIfNull(
                        () -> salesEvent.getStartAt().atZone(ZoneId.systemDefault())))
                .endAt(InvokeSupporters.getOrNullIfNull(
                        () -> salesEvent.getEndAt().atZone(ZoneId.systemDefault())))
                .salesCount(InvokeSupporters.getOrDefaultIfNull(() -> salesEvent.getSalesCount(), 0))
                .isVisible(
                        InvokeSupporters.getOrFalseIfNull(() -> salesEvent.getViewYn().toBoolean()))
                .isTreatmentLibrary(InvokeSupporters.getOrFalseIfNull(
                        () -> salesEvent.getTreatmentLibraryYn().toBoolean()))
                .isOrder(InvokeSupporters.getOrFalseIfNull(() -> salesEvent.getOrderYn().toBoolean()))
                .isConsultation(
                        InvokeSupporters.getOrFalseIfNull(() -> salesEvent.getConsultationYn().toBoolean()))
                .isUsable(InvokeSupporters.getOrFalseIfNull(() -> salesEvent.getUseYn().toBoolean()))
                .localeConsultations(multiLanguage.getConsultations())
                .localeOrders(multiLanguage.getOrders())
                .hospitalId(salesEvent.getHospital().getId())
                .categoryTags(salesEvent.getCategoryTags())
                .localeCategoryTags(MultiLanguageType.<List<String>>builder()
                        .ko(salesEvent.getCategoryTags())
                        .en(salesEvent.getCategoryTagsEn())
                        .zh(salesEvent.getCategoryTagsZh())
                        .ja(salesEvent.getCategoryTagsJa())
                        .build())
                .createdAt(InvokeSupporters.getOrNullIfNull(
                        () -> salesEvent.getCreated().atZone(ZoneId.systemDefault())))
                .updatedAt(InvokeSupporters.getOrNullIfNull(
                        () -> salesEvent.getUpdated().atZone(ZoneId.systemDefault())))
                .build();
    }

    public static SalesEventTemplate of(
            SalesEventDetailCommission detailCommission,
            List<SalesEventNamedImageTemplate> imageTemplates
    ) {

        if (detailCommission == null) {
            return null;
        }

        NamedImageTemplate thumbnail = imageTemplates.stream()
                .filter(x -> x.getType() == SalesEventImageType.THUMBNAIL)
                .findFirst()
                .map(SalesEventCommissionUtils::convertNamedImageTemplate)
                .orElse(null);

        SalesEventMultiLanguage multiLanguage = LocaleTextResponseFactory.salesEventMultiLanguage(detailCommission);

        return SalesEventTemplate.builder()
                .id(InvokeSupporters.getOrNullIfNull(() -> detailCommission.getSalesEvent().getId()))
                .code(InvokeSupporters.getOrNullIfNull(() -> detailCommission.getSalesEvent().getEventCode()))
                .styleColor(InvokeSupporters.getOrNullIfNull(
                        () -> detailCommission.getSalesEventCommission().getStyleColor()))
                .nameKo(detailCommission.getEventNameKo())
                .localeName(multiLanguage.getNames())
                .subNameKo(detailCommission.getEventSubNameKo())
                .localeSubName(multiLanguage.getSubNames())
                .isTreatmentLibrary(detailCommission.getSalesEventSystemCommission() != null)
                .thumbnailImage(thumbnail)
                .representativeSolutionTagIds(detailCommission.getSolutionTagIds())
                .representativeTreatmentId(detailCommission.getRepresentativeTreatment().getId())
                .requireTimeKo(detailCommission.getRequireTimeKo())
                .localeRequireTime(multiLanguage.getRequireTimes())
                .anesthesiaKo(detailCommission.getAnesthesiaKo())
                .localeAnesthesia(multiLanguage.getAnesthesias())
                .downtimeKo(detailCommission.getDowntimeKo())
                .localeDowntime(multiLanguage.getDowntimes())
                .treatmentEffectAppearsTimeKo(detailCommission.getTreatmentEffectAppearsTimeKo())
                .localeTreatmentEffectAppearsTime(multiLanguage.getTreatmentEffectAppearsTimes())
                .hospitalId(InvokeSupporters.getOrDefaultIfNull(
                        () -> detailCommission.getSalesEventCommission().getHospital().getId(), Entity.NOT_EXIST_ID))
                .categoryTags(detailCommission.getCategoryTags())
                .localeCategoryTags(MultiLanguageType.<List<String>>builder()
                        .ko(detailCommission.getCategoryTags())
                        .build())
                .createdAt(InvokeSupporters.getOrNullIfNull(
                        () -> DateUtil.convertFrom(detailCommission.getSalesEventCommission().getCreated())))
                .updatedAt(InvokeSupporters.getOrNullIfNull(
                        () -> DateUtil.convertFrom(detailCommission.getSalesEventCommission().getUpdated())))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventTreatmentLibraryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.component.LocaleTextResponseFactory;
import kr.co.yeoshin.admin.common.model.SuggestionCycleTimesObject;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.localetext.SalesEventTreatmentLibraryResponseMultiLanguage;
import kr.co.yeoshin.admin.common.model.template.SalesEventImageTemplate.SalesEventNamedImageTemplate;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.entity.SalesEventSystemCommission;
import kr.co.yeoshin.common.product.entity.SalesEventTreatmentLibrary;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleUsage;
import kr.co.yeoshin.common.product.type.SuggestionTargetType;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.UrlUtils;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import org.apache.commons.collections4.CollectionUtils;

@Builder(toBuilder = true)
@Getter
@EqualsAndHashCode
public class SalesEventTreatmentLibraryTemplate implements PlusAccessible {

    @JsonView(SystemAdmin.class)
    private Long id;

    private Long salesEventId;

    @Deprecated
    private List<TitleContentObjectTemplate> introductionKo;

    private MultiLanguageType<List<TitleContentObjectTemplate>> localeIntroduction;

    private SuggestionCycleTimesObject suggestionCycleKo;

    private SuggestionCycleTimesObject suggestionTimesKo;

    // 타이틀, 내용
    @Deprecated
    private List<TitleContentObjectTemplate> meritsKo;

    private MultiLanguageType<List<TitleContentObjectTemplate>> localeMerits;

    // 질문, 답변
    @Deprecated
    private List<TitleContentObjectTemplate> faqsKo;

    private MultiLanguageType<List<TitleContentObjectTemplate>> localeFaqs;

    @Deprecated
    private List<String> precautionsKo;

    private MultiLanguageType<List<String>> localePrecautions;

    @Deprecated
    private List<String> treatmentProcessKo;

    private MultiLanguageType<List<String>> localeTreatmentProcess;

    @Deprecated(since = "localeImages of outer class")
    private List<String> treatmentParts;

    @Deprecated(since = "localeImages of outer class")
    private MultiLanguageType<List<String>> localeTreatmentParts;

    private List<Long> treatmentPrincipleIds;

    private List<SuggestionTargetType> suggestionTargets;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public MultiLanguageType<List<String>> fetchTreatmentParts() {
        return Optional.ofNullable(treatmentParts)
                .filter(CollectionUtils::isNotEmpty)
                .map(fns -> MultiLanguageType.<List<String>>builder()
                        .ko(fns.stream().map(UrlUtils::extractFilename).collect(Collectors.toUnmodifiableList()))
                        .build())
                .orElse(InvokeSupporters.getOrNullIfNull(() -> MultiLanguageType.<List<String>>builder()
                        .ko(InvokeSupporters.getOrNullIfNull(
                                () -> localeTreatmentParts.getKo().stream().map(UrlUtils::extractFilename)
                                        .collect(Collectors.toList())))
                        .en(InvokeSupporters.getOrNullIfNull(
                                () -> localeTreatmentParts.getEn().stream().map(UrlUtils::extractFilename)
                                        .collect(Collectors.toList())))
                        .zh(InvokeSupporters.getOrNullIfNull(
                                () -> localeTreatmentParts.getZh().stream().map(UrlUtils::extractFilename)
                                        .collect(Collectors.toList())))
                        .ja(InvokeSupporters.getOrNullIfNull(
                                () -> localeTreatmentParts.getJa().stream().map(UrlUtils::extractFilename)
                                        .collect(Collectors.toList())))
                        .build()));
    }

    public static SalesEventTreatmentLibraryTemplate of(
            SalesEventTreatmentLibrary salesEventTreatmentLibrary,
            @Nullable List<SalesEventNamedImageTemplate> treatmentParts,
            @Nullable List<TreatmentPrincipleUsage> treatmentPrincipleUsages
    ) {
        if (salesEventTreatmentLibrary == null) {
            return null;
        }

        SalesEventTreatmentLibraryResponseMultiLanguage multiLanguage = LocaleTextResponseFactory.salesEventTreatmentLibraryMultiLanguage(
                salesEventTreatmentLibrary);
        Collection<SalesEventNamedImageTemplate> localeTreatmentParts = CollectionUtils.emptyIfNull(treatmentParts);
        List<Long> treatmentPrincipleIds = CollectionUtils.emptyIfNull(treatmentPrincipleUsages).stream()
                .map(x -> x.getTreatmentPrinciple().getId())
                .collect(Collectors.toList());

        return SalesEventTreatmentLibraryTemplate.builder()
                .id(salesEventTreatmentLibrary.getId())
                .salesEventId(salesEventTreatmentLibrary.getSalesEvent().getId())
                .introductionKo(TitleContentObjectTemplate.of(salesEventTreatmentLibrary.getIntroductionKo()))
                .localeIntroduction(multiLanguage.getIntroductions())
                .suggestionCycleKo(SuggestionCycleTimesObject.from(salesEventTreatmentLibrary.getSuggestionCycleKo()))
                .suggestionTimesKo(SuggestionCycleTimesObject.from(salesEventTreatmentLibrary.getSuggestionTimesKo()))
                .meritsKo(TitleContentObjectTemplate.of(salesEventTreatmentLibrary.getMeritsKo()))
                .localeMerits(multiLanguage.getMerits())
                .faqsKo(TitleContentObjectTemplate.of(salesEventTreatmentLibrary.getFaqsKo()))
                .localeFaqs(multiLanguage.getFaqs())
                .precautionsKo(salesEventTreatmentLibrary.getPrecautionsKo())
                .localePrecautions(multiLanguage.getPrecautions())
                .treatmentProcessKo(salesEventTreatmentLibrary.getProcessKo())
                .localeTreatmentProcess(multiLanguage.getTreatmentProcesses())
                .treatmentParts(InvokeSupporters.getOrNullIfNull(
                        () -> treatmentParts.stream()
                                .filter(x -> x.getLanguage() == Language.KOREAN)
                                .map(SalesEventNamedImageTemplate::getImage)
                                .collect(Collectors.toUnmodifiableList())))
                .localeTreatmentParts(MultiLanguageType.<List<String>>builder()
                        .ko(localeTreatmentParts.stream()
                                .filter(it -> it.getLanguage() == Language.KOREAN)
                                .map(SalesEventNamedImageTemplate::getImage)
                                .collect(Collectors.toList()))
                        .en(localeTreatmentParts.stream()
                                .filter(it -> it.getLanguage() == Language.ENGLISH)
                                .map(SalesEventNamedImageTemplate::getImage)
                                .collect(Collectors.toList()))
                        .zh(localeTreatmentParts.stream()
                                .filter(it -> it.getLanguage() == Language.CHINESE)
                                .map(SalesEventNamedImageTemplate::getImage)
                                .collect(Collectors.toList()))
                        .ja(localeTreatmentParts.stream()
                                .filter(it -> it.getLanguage() == Language.JAPANESE)
                                .map(SalesEventNamedImageTemplate::getImage)
                                .collect(Collectors.toList()))
                        .build())
                .treatmentPrincipleIds(treatmentPrincipleIds)
                .suggestionTargets(salesEventTreatmentLibrary.getSuggestionTargets())
                .createdAt(InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(salesEventTreatmentLibrary.getCreated())))
                .updatedAt(InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(salesEventTreatmentLibrary.getUpdated())))
                .build();
    }

    public static SalesEventTreatmentLibraryTemplate of(SalesEventSystemCommission salesEventSystemCommission) {

        if (salesEventSystemCommission == null) {
            return null;
        }

        SalesEventTreatmentLibraryResponseMultiLanguage multiLanguage = LocaleTextResponseFactory
                .salesEventTreatmentLibraryMultiLanguage(salesEventSystemCommission);

        return SalesEventTreatmentLibraryTemplate.builder()
                .salesEventId(InvokeSupporters.getOrNullIfNull(
                        () -> salesEventSystemCommission.getSalesEventDetailCommission().getSalesEvent().getId()))
                .introductionKo(TitleContentObjectTemplate.of(salesEventSystemCommission.getTreatmentIntroductionKo()))
                .localeIntroduction(multiLanguage.getIntroductions())
                .suggestionCycleKo(SuggestionCycleTimesObject.from(salesEventSystemCommission.getSuggestionCycleKo()))
                .suggestionTimesKo(SuggestionCycleTimesObject.from(salesEventSystemCommission.getSuggestionTimesKo()))
                .meritsKo(TitleContentObjectTemplate.of(salesEventSystemCommission.getMeritsKo()))
                .localeMerits(multiLanguage.getMerits())
                .faqsKo(TitleContentObjectTemplate.of(salesEventSystemCommission.getFaqsKo()))
                .localeFaqs(multiLanguage.getFaqs())
                .precautionsKo(salesEventSystemCommission.getPrecautionsKo())
                .localePrecautions(multiLanguage.getPrecautions())
                .treatmentProcessKo(salesEventSystemCommission.getTreatmentProcessKo())
                .localeTreatmentProcess(multiLanguage.getTreatmentProcesses())
                .treatmentParts(salesEventSystemCommission.getTreatmentParts())
                .treatmentPrincipleIds(salesEventSystemCommission.getTreatmentPrincipleIds())
                .suggestionTargets(salesEventSystemCommission.getSuggestionTargets())
                .createdAt(InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(
                        salesEventSystemCommission.getSalesEventDetailCommission().getSalesEventCommission().getCreated())))
                .updatedAt(InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(
                        salesEventSystemCommission.getSalesEventDetailCommission().getSalesEventCommission().getUpdated())))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventUsageApprovalTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.type.SalesEventUsageApprovalRejectReasonCode;
import kr.co.yeoshin.common.product.type.SalesEventUsageApprovalType;
import kr.co.yeoshin.common.type.ApprovalStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventUsageApprovalTemplate implements PlusAccessible {

    private long id;
    private long salesEventUsageId;
    private ApprovalStatus status;
    private SalesEventUsageApprovalType type;
    private SalesEventUsageApprovalRejectReasonCode rejectReasonCode;
    private String rejectReason;
    private long hospitalId;
    @JsonView(SystemAdmin.class)
    private long creatorId;
    @JsonView(SystemAdmin.class)
    private long updaterId;
    private ZonedDateTime createdAt;
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventUsageImageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.common.product.entity.SalesEventUsageImage;
import kr.co.yeoshin.common.product.type.DirectionType;
import kr.co.yeoshin.common.product.type.SalesEventUsageImageType;
import kr.co.yeoshin.common.type.Language;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventUsageImageTemplate implements PlusAccessible {

    private long id;
    private String image;
    private SalesEventUsageImageType type;
    private Language language;
    private DirectionType directionType;
    private int priority;
    private String imageUrl;

    public static SalesEventUsageImageTemplate of(
            SalesEventUsageImage salesEventUsageImage,
            Map<String, MediaContainer> mediaContainerMap
    ) {
        return SalesEventUsageImageTemplate.builder()
                .id(salesEventUsageImage.getId())
                .image(salesEventUsageImage.getImage())
                .type(salesEventUsageImage.getType())
                .language(salesEventUsageImage.getLanguage())
                .directionType(salesEventUsageImage.getDirectionType())
                .priority(salesEventUsageImage.getPriority())
                .imageUrl(Optional.ofNullable(mediaContainerMap)
                        .map(m -> m.get(salesEventUsageImage.getImage()))
                        .flatMap(MediaContainer::getEndpoint)
                        .orElseGet(salesEventUsageImage::getImage))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesEventUsageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.Constant.Entity;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.product.entity.SalesEventUsage;
import kr.co.yeoshin.common.type.ApprovalStatus;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventUsageTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private long salesEventId;
    private String code;
    private ApprovalStatus approvalStatus;
    private String title;
    private String description;
    private int priority;
    private int afterDayCount;
    private boolean isVisible;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    public static SalesEventUsageTemplate of(SalesEventUsage salesEventUsage) {
        return SalesEventUsageTemplate.builder()
                .id(salesEventUsage.getId())
                .hospitalId(InvokeSupporters.getOrDefaultIfNull(() -> salesEventUsage.getHospital().getId(),
                        Entity.NOT_EXIST_ID))
                .salesEventId(
                        InvokeSupporters.getOrDefaultIfNull(() -> salesEventUsage.getSalesEvent().getId(), Entity.NOT_EXIST_ID))
                .code(salesEventUsage.getCode())
                .approvalStatus(salesEventUsage.getApprovalStatus())
                .title(salesEventUsage.getTitle())
                .priority(salesEventUsage.getPriority())
                .description(salesEventUsage.getDescription())
                .afterDayCount(salesEventUsage.getAfterDayCount())
                .isVisible(InvokeSupporters.getOrFalseIfNull(() -> salesEventUsage.getViewYn().toBoolean()))
                .createdAt(DateUtil.convertFrom(salesEventUsage.getCreated()))
                .updatedAt(DateUtil.convertFrom(salesEventUsage.getUpdated()))

                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesProductObjectTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonView;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.model.SalesProductObject;
import kr.co.yeoshin.common.product.type.SalesProductType;
import lombok.*;

@Builder
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
@EqualsAndHashCode
public class SalesProductObjectTemplate implements PlusAccessible {

    private Long id;

    private SalesProductType type;

    @JsonView(SystemAdmin.class)
    private List<Long> treatmentIds;

    @Deprecated
    private String displayNameKo;
    @Deprecated
    private String displayNameEn;
    @Deprecated
    private String displayNameZh;
    @Deprecated
    private String displayNameJa;
    private String displayName;

    @Deprecated
    private String descriptionKo;
    @Deprecated
    private String descriptionEn;
    @Deprecated
    private String descriptionZh;
    @Deprecated
    private String descriptionJa;
    private String description;

    @Deprecated
    private Integer salesPrice;
    private Integer salesPriceKo;
    private Integer salesPriceEn;
    private Integer salesPriceZh;
    private Integer salesPriceJa;

    private int treatmentCount;

    @Deprecated
    private Integer oneTimeRegularPrice;
    private Integer oneTimeRegularPriceKo;
    private Integer oneTimeRegularPriceEn;
    private Integer oneTimeRegularPriceZh;
    private Integer oneTimeRegularPriceJa;

    private String associatedSalesProductId;

    public static List<SalesProductObjectTemplate> of(List<SalesProductObject> salesProductObjects) {
        if (salesProductObjects == null) {
            return null;
        }

        return salesProductObjects.stream()
                .sorted(Comparator.comparingInt(SalesProductObject::getPriority))
                .map(SalesProductObjectTemplate::of)
                .collect(Collectors.toUnmodifiableList());
    }

    public static SalesProductObjectTemplate of(SalesProductObject salesProductObject) {
        if (salesProductObject == null) {
            return null;
        }

        return SalesProductObjectTemplate.builder()
                .id(salesProductObject.getId())
                .type(salesProductObject.getType())
                .treatmentIds(salesProductObject.getTreatmentIds())
                .displayNameKo(salesProductObject.getDisplayNameKo())
                .displayNameEn(salesProductObject.getDisplayNameEn())
                .displayNameZh(salesProductObject.getDisplayNameZh())
                .displayNameJa(salesProductObject.getDisplayNameJa())
                .displayName(salesProductObject.getDisplayName())
                .descriptionKo(salesProductObject.getDescriptionKo())
                .descriptionEn(salesProductObject.getDescriptionEn())
                .descriptionZh(salesProductObject.getDescriptionZh())
                .descriptionJa(salesProductObject.getDescriptionJa())
                .description(salesProductObject.getDescription())
                .salesPrice(salesProductObject.getSalesPrice())
                .salesPriceKo(salesProductObject.getSalesPriceKo())
                .salesPriceEn(salesProductObject.getSalesPriceEn())
                .salesPriceZh(salesProductObject.getSalesPriceZh())
                .salesPriceJa(salesProductObject.getSalesPriceJa())
                .treatmentCount(salesProductObject.getTreatmentCount())
                .oneTimeRegularPrice(salesProductObject.getOneTimeRegularPrice())
                .oneTimeRegularPriceKo(salesProductObject.getOneTimeRegularPriceKo())
                .oneTimeRegularPriceEn(salesProductObject.getOneTimeRegularPriceEn())
                .oneTimeRegularPriceZh(salesProductObject.getOneTimeRegularPriceZh())
                .oneTimeRegularPriceJa(salesProductObject.getOneTimeRegularPriceJa())
                .associatedSalesProductId(salesProductObject.getAssociatedSalesProductId())
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesProductShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.product.entity.SalesProduct;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesProductShortTemplate {

    private long id;
    private String displayNameKo;
    private String displayNameEn;
    private String displayNameZh;
    private String displayNameJa;
    private int salesPrice;
    private int treatmentCount;

    public static SalesProductShortTemplate of(SalesProduct salesProduct) {
        if (salesProduct == null) {
            return null;
        }

        return SalesProductShortTemplate.builder()
                .id(salesProduct.getId())
                .displayNameKo(salesProduct.getDisplayNameKo())
                .displayNameEn(salesProduct.getDisplayNameEn())
                .displayNameZh(salesProduct.getDisplayNameZh())
                .displayNameJa(salesProduct.getDisplayNameJa())
                .salesPrice(salesProduct.getSalesPrice())
                .treatmentCount(salesProduct.getTreatmentCount())
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesProductTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonView;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.product.util.SalesProductUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.product.type.SalesProductCreateType;
import kr.co.yeoshin.common.product.type.SalesProductExposureCondition;
import kr.co.yeoshin.common.product.type.SalesProductType;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
@EqualsAndHashCode
public class SalesProductTemplate implements PlusAccessible {

    private long id;

    private long version;

    @Deprecated
    private String displayNameKo;
    @Deprecated
    private String displayNameEn;
    @Deprecated
    private String displayNameZh;
    @Deprecated
    private String displayNameJa;
    private String displayName;

    @Deprecated
    private String descriptionKo;
    @Deprecated
    private String descriptionEn;
    @Deprecated
    private String descriptionZh;
    @Deprecated
    private String descriptionJa;
    private String description;

    private int oneTimeRegularPrice;

    private int salesPrice;

    private int treatmentCount;

    private List<SalesProductExposureCondition> exposureConditions;

    private boolean isVisible;

    private int priority;

    private SalesProductType type;

    private List<String> categoryTags; // TODO remove

    private long salesEventId;

    private long hospitalId;

    private String associatedSalesProductId;

    @JsonView(SystemAdmin.class)
    private List<Long> treatmentIds;

    private List<String> attributeTypeDescriptions;

    private SalesProductCreateType createType;

    @JsonIgnore
    public int getSalesUnitPrice() {
        return salesPrice / treatmentCount;
    }

    public static SalesProductTemplate of(SalesProduct salesProduct, List<Long> treatmentIds) {
        return SalesProductTemplate.builder()
                .id(salesProduct.getId())
                .version(salesProduct.getVersion())
                .displayNameKo(salesProduct.getDisplayNameKo())
                .displayNameEn(salesProduct.getDisplayNameEn())
                .displayNameZh(salesProduct.getDisplayNameZh())
                .displayNameJa(salesProduct.getDisplayNameJa())
                .displayName(Optional.ofNullable(salesProduct.getDisplayName()).orElse(salesProduct.getDisplayNameKo()))
                .descriptionKo(salesProduct.getDescriptionKo())
                .descriptionEn(salesProduct.getDescriptionEn())
                .descriptionZh(salesProduct.getDescriptionZh())
                .descriptionJa(salesProduct.getDescriptionJa())
                .description(Optional.ofNullable(salesProduct.getDescription()).orElse(salesProduct.getDescriptionKo()))
                .hospitalId(salesProduct.getHospital().getId())
                .salesEventId(salesProduct.getSalesEvent().getId())
                .salesPrice(salesProduct.getSalesPrice())
                .oneTimeRegularPrice(salesProduct.getOneTimeRegularPrice())
                .treatmentCount(salesProduct.getTreatmentCount())
                .exposureConditions(salesProduct.getExposureConditions())
                .associatedSalesProductId(salesProduct.getAssociatedSalesProductId())
                .createType(salesProduct.getCreateType())
                .isVisible(InvokeSupporters.getOrFalseIfNull(
                        () -> salesProduct.getViewYn().toBoolean()))
                .priority(salesProduct.getPriority())
                .type(salesProduct.getType())
                .treatmentIds(treatmentIds)
                .attributeTypeDescriptions(SalesProductUtils.makeAttributeTypeDescriptions(
                        salesProduct.getAttributeTypeDescriptions(), salesProduct.getLanguage()))
                .build();
    }

    public static SalesProductTemplate of(SalesProductVersion salesProductVersion) {
        return SalesProductTemplate.builder()
                .id(salesProductVersion.getSalesProduct().getId())
                .version(salesProductVersion.getVersion())
                .displayNameKo(salesProductVersion.getDisplayNameKo())
                .displayNameEn(salesProductVersion.getDisplayNameEn())
                .displayNameZh(salesProductVersion.getDisplayNameZh())
                .displayNameJa(salesProductVersion.getDisplayNameJa())
                .displayName(
                        Optional.ofNullable(salesProductVersion.getDisplayName()).orElse(salesProductVersion.getDisplayNameKo()))
                .descriptionKo(salesProductVersion.getDescriptionKo())
                .descriptionEn(salesProductVersion.getDescriptionEn())
                .descriptionZh(salesProductVersion.getDescriptionZh())
                .descriptionJa(salesProductVersion.getDescriptionJa())
                .description(
                        Optional.ofNullable(salesProductVersion.getDescription()).orElse(salesProductVersion.getDescriptionKo()))
                .oneTimeRegularPrice(kr.co.yeoshin.common.utils.TicketUtils.oneTimeRegularPrice(salesProductVersion))
                .salesPrice(salesProductVersion.getSalesPrice())
                .treatmentCount(salesProductVersion.getTreatmentCount())
                .exposureConditions(salesProductVersion.getExposureConditions())
                .associatedSalesProductId(InvokeSupporters.getOrNullIfNull(
                        () -> salesProductVersion.getSalesProduct().getAssociatedSalesProductId()))
                .createType(salesProductVersion.getCreateType())
                .isVisible(InvokeSupporters.getOrFalseIfNull(
                        () -> salesProductVersion.getViewYn().toBoolean()))
                .priority(salesProductVersion.getPriority())
                .type(salesProductVersion.getType())
                .salesEventId(salesProductVersion.getSalesEventId())
                .hospitalId(salesProductVersion.getHospitalId())
                .treatmentIds(null)
                .attributeTypeDescriptions(SalesProductUtils.makeAttributeTypeDescriptions(
                        salesProductVersion.getAttributeTypeDescriptions(), salesProductVersion.getLanguage()))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SalesProductVersionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.Optional;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.product.util.SalesProductUtils;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
public class SalesProductVersionTemplate extends SalesProductTemplate implements PlusAccessible {

    private long salesProductId;

    public static SalesProductVersionTemplate of(SalesProductVersion salesProductVersion) {
        return SalesProductVersionTemplate.builder()
                .id(salesProductVersion.getId())
                .salesProductId(salesProductVersion.getSalesProduct().getId())
                .version(salesProductVersion.getVersion())
                .displayNameKo(salesProductVersion.getDisplayNameKo())
                .displayNameEn(salesProductVersion.getDisplayNameEn())
                .displayNameZh(salesProductVersion.getDisplayNameZh())
                .displayNameJa(salesProductVersion.getDisplayNameJa())
                .displayName(
                        Optional.ofNullable(salesProductVersion.getDisplayName()).orElse(salesProductVersion.getDisplayNameKo()))
                .descriptionKo(salesProductVersion.getDescriptionKo())
                .descriptionEn(salesProductVersion.getDescriptionEn())
                .descriptionZh(salesProductVersion.getDescriptionZh())
                .descriptionJa(salesProductVersion.getDescriptionJa())
                .description(
                        Optional.ofNullable(salesProductVersion.getDescription()).orElse(salesProductVersion.getDescriptionKo()))
                .oneTimeRegularPrice(kr.co.yeoshin.common.utils.TicketUtils.oneTimeRegularPrice(salesProductVersion))
                .salesPrice(salesProductVersion.getSalesPrice())
                .treatmentCount(salesProductVersion.getTreatmentCount())
                .exposureConditions(salesProductVersion.getExposureConditions())
                .createType(salesProductVersion.getCreateType())
                .isVisible(salesProductVersion.getViewYn().toBoolean())
                .priority(salesProductVersion.getPriority())
                .type(salesProductVersion.getType())
                .hospitalId(salesProductVersion.getHospitalId())
                .salesEventId(salesProductVersion.getSalesEventId())
                .attributeTypeDescriptions(SalesProductUtils.makeAttributeTypeDescriptions(
                        salesProductVersion.getAttributeTypeDescriptions(), salesProductVersion.getLanguage()))
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SearchDictionaryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.dictionary.entity.type.WordType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SearchDictionaryTemplate {

    private long id;
    private String word;
    private String token;
    private WordType wordType;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementAdjustContextTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementAdjustContextTemplate implements PlusAccessible {

    private int version;
    private SettlementAdjustOffsettingContextTemplate offsettingContext;
    private SettlementAdjustMultiTicketContextTemplate multiTicketContext;

    @Getter
    @Builder
    public static class SettlementAdjustOffsettingContextTemplate implements PlusAccessible {

        private int settlementYear;
        private int settlementMonth;
        private SettlementRound settlementRound;
        private int offsettingPrice;
        private int remainPrice;
    }

    @Getter
    @Builder
    public static class SettlementAdjustMultiTicketContextTemplate implements PlusAccessible {

        private int settlementYear;
        private int settlementMonth;
        private SettlementRound settlementRound;
        private int hospitalSettlementPrice;
        private int customerRefundPrice;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementAdjustTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.settlement.model.SettlementAdjustContext;
import kr.co.yeoshin.common.settlement.type.AdjustStatus;
import kr.co.yeoshin.common.settlement.type.AdjustType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementAdjustTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private int settlementYear;
    private int settlementMonth;
    private String settlementRound;
    @JsonView(SystemAdmin.class)
    private AdjustStatus status;
    private AdjustType type;
    private int amount;
    private Long pairedAdjustId;
    private String reason;
    private SettlementAdjustContextTemplate context;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime adjustAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementOrderTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.type.PgType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementOrderTemplate implements PlusAccessible {

    private PgType pgType;
    private int totalPaymentPrice;
    private int pgFee;
    private int pgFeeTaxPrice;
    private int paymentCouponPrice;
    private int paymentPointPrice;
    private int paymentSystemCashPrice;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementReportPeriodTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.time.LocalDate;
import kr.co.yeoshin.admin.common.model.ZonedDateTimeRange;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementReportPeriodTemplate implements PlusAccessible {

    private int settlementYear;
    private int settlementMonth;
    private long hospitalId;
    private String pgFeeGroupKey;
    private ZonedDateTimeRange usedAt;
    // 작성일자: 사용기간의 마지막 날
    private LocalDate createdAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.settlement.type.SettlementPauseReason;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import kr.co.yeoshin.common.settlement.type.SettlementStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SettlementReportTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private int settlementYear;
    private int settlementMonth;
    private SettlementRound settlementRound;
    @Deprecated
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime settleAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime paymentAt;
    private SettlementStatus status;
    private SettlementPauseReason pauseReason;
    private String verbose;
    private int settlePrice;
    private int paymentPrice;
    private int deductPrice;
    private int depositPrice;
    private int adjustPrice;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementSalesTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementSalesTemplate implements PlusAccessible {

    private SettlementOrderTemplate order;
    private List<SettlementTicketTemplate> tickets;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementScheduleTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.model.ZonedDateTimeRange;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementScheduleTemplate implements SystemAccessible {

    private long id;
    private int settlementYear;
    private int settlementMonth;
    private SettlementRound settlementRound;
    private ZonedDateTimeRange aggregateAt;
    private ZonedDateTimeRange ticketAt;
    private ZonedDateTimeRange adjustManualAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime adjustViewAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime depositDisplayAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime depositViewAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime settlementDisplayAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime settlementViewAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementStatTemplate implements SystemAccessible {

    private long hospitalId;
    private int pauseCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SettlementTicketTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementTicketTemplate implements PlusAccessible {

    private long id;
    private String code;
    private String nameKo;
    private String nameEn;
    private String nameZh;
    private String nameJa;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime usedAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime expiredAt;
    private TicketStatus status;
    private int salesPrice;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SplashTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.type.ProgressStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SplashTemplate {

    private long id;
    private ProgressStatus status;
    private String title;
    private String backgroundImage;
    private String foregroundImage;
    private int durationInMillisecond;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private boolean isVisible;
    private boolean isSkipUse;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    @JsonGetter("isSkipUse")
    public boolean isSkipUse() {
        return isSkipUse;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashRefundAccountTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashRefundAccountTemplate {

    private long id;
    private long memberId;
    private String accountHolder;
    private String account;
    private String bankName;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashRefundStatusTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.RefundStatus;
import kr.co.yeoshin.common.payment.type.RefundStatusReasonType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashRefundStatusTemplate {

    private long id;
    private long memberId;
    private long systemCashId;
    private String systemCashCode;
    private RefundStatus status;
    private RefundStatusReasonType reason;
    private String verbose;
    private int refundCash;
    private int refundFee;
    private String accountHolder;
    private String account;
    private String bankName;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.time.LocalDate;
import kr.co.yeoshin.common.payment.entity.SystemCashDailyReport;
import kr.co.yeoshin.common.payment.type.SystemCashType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashReportTemplate {
    private long id;

    private LocalDate at;

    private SystemCashType cashType;

    private int rewardCash;

    private int transCash;

    private int refundCash;

    private int useCash;

    private int moneyCash;

    private int perishCash;

    private long accumulateCash;

    public static SystemCashReportTemplate of(SystemCashDailyReport dailyReport) {
        return SystemCashReportTemplate.builder()
                .id(dailyReport.getId())
                .at(dailyReport.getAt())
                .cashType(dailyReport.getCashType())
                .rewardCash(dailyReport.getRewardCash())
                .transCash(dailyReport.getTransCash())
                .refundCash(dailyReport.getRefundCash())
                .useCash(dailyReport.getUseCash())
                .moneyCash(dailyReport.getMoneyCash())
                .perishCash(dailyReport.getPerishCash())
                .accumulateCash(dailyReport.getAccumulateCash())
                .build();
    }

    public static SystemCashReportTemplate empty(SystemCashType systemCashType) {
        return SystemCashReportTemplate.builder()
                .id(-1L)
                .at(LocalDate.now())
                .cashType(systemCashType)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.payment.type.SystemCashStatus;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashTemplate {

    private long id;
    private String code;
    private long memberId;
    private MultiLanguage titles;
    private int cash;
    private int remainCash;
    private SystemCashStatus type;
    private DomainType refType;
    private Long refId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expiredAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashVoucherConfigTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.payment.type.PublishStatus;
import kr.co.yeoshin.common.payment.type.SystemCashVoucherType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherConfigTemplate {

    private long id;
    private String code;
    private MultiLanguage titles;
    private PublishStatus publishStatus;
    private SystemCashVoucherType voucherType;
    private Long systemCashVoucherPartnershipId;
    private int cash;
    private int cashValidDayCount;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime cashExpireAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime voucherExpireAt;
    private String adminMemo;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashVoucherExtraBenefitTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.payment.type.SystemCashVoucherExtraBenefitType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherExtraBenefitTemplate {

    private long id;
    private long systemCashVoucherConfigId;
    private SystemCashVoucherExtraBenefitType type;
    private String value;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashVoucherPartnershipTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherPartnershipTemplate {

    private long id;
    private String name;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashVoucherStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherStatTemplate {

    private long systemCashVoucherConfigId;
    private long totalVoucherCount;
    private long unusedVoucherCount;
    private long usedVoucherCount;
    private long pauseVoucherCount;
    private long expiredVoucherCount;
    private long settlementExpectVoucherCount;
    private long settlementCompleteVoucherCount;
    private long settlementPauseVoucherCount;
    private long settlementNoneVoucherCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/SystemCashVoucherTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.systemcash.type.SystemCashVoucherStatus;
import kr.co.yeoshin.common.settlement.type.SettlementStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherTemplate {

    private long id;
    private String code;
    private long systemCashVoucherConfigId;
    private SystemCashVoucherStatus status;
    private SettlementStatus settlementStatus;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime settlementAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime publishAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime saleAt;
    private String adminMemo;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TabooDictionaryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TabooDictionaryTemplate {

    private long id;
    private String word;
    private String token;
    private DomainType domainType;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TagTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TagTemplate implements PlusAccessible {

    private long id;
    private String tag;
    private String description;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TextIconTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class TextIconTemplate extends DetailTextTemplate {

    private String image;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TextPropertyTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.ArrayList;
import java.util.List;
import lombok.Builder;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class TextPropertyTemplate extends DetailTextTemplate {

    @Builder.Default
    private List<DetailTextTemplate> properties = new ArrayList<>();
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TextTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.io.Serializable;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Getter;
import lombok.experimental.SuperBuilder;
import org.apache.commons.lang3.StringUtils;

@SuperBuilder
@Getter
public class TextTemplate implements PlusAccessible, Serializable {

    private long id;
    private String value;

    public static TextTemplate empty() {
        return TextTemplate.builder()
                .value(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ThumbnailCodeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.product.service.model.ThumbnailTypeDetail;
import lombok.Builder;
import lombok.Getter;

@Getter
public class ThumbnailCodeTemplate extends CodeTemplate implements PlusAccessible {

    private final ThumbnailTypeDetail.ThumbnailTypeDescription detail;

    @Builder(builderMethodName = "thumbnailCodeBuilder")
    public ThumbnailCodeTemplate(Long id, String code, String value,
                                 ThumbnailTypeDetail.ThumbnailTypeDescription detail) {
        super(id, code, value);
        this.detail = detail;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TicketGroupPriceTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketGroupPriceTemplate implements PlusAccessible {

    private long groupId;
    private long paymentPrice;
    private long discountPrice;
    private long systemCashPrice;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TicketPaymentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.common.payment.type.PayMethod;
import kr.co.yeoshin.common.payment.type.PgType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketPaymentTemplate {

    private long orderId;
    private long orderSalesProductId;
    private long salesProductVersionId;
    private long ticketId;
    private long ordererId;
    private int salesPrice;
    private int paymentPrice;
    private int pgFee;
    private int pgFeeTax;
    private int couponPrice;
    private int pointPrice;
    private int systemCashPrice;
    private PgType pgType;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TicketRestorationInquiryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.model.TicketRestorationInquiryType;
import kr.co.yeoshin.common.payment.type.TicketRestorationInquiryStatus;
import kr.co.yeoshin.common.type.UserType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketRestorationInquiryTemplate implements PlusAccessible {

    private long id;
    private long hospitalId;
    private long reservationId;
    private long reservationMemberId;
    private long writerId;
    private UserType type;
    private TicketRestorationInquiryType inquiryType;
    private String contents;
    private TicketRestorationInquiryStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TicketTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonView;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketTemplate implements PlusAccessible {

    private long id;
    private String code;
    private long memberId;
    private long groupId;
    private long orderId;
    private String ticketCode;
    private String nameKo;
    private String nameEn;
    private String nameZh;
    private String nameJa;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime usedAt;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime canceledAt;
    private int expireAtExtendCount;
    private int maxExpireAtExtendableCount;
    private boolean isExpireAtExtendable;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime expiredAt;
    private TicketStatus status;
    private boolean isTreatmentGrantApplied;
    private long salesEventId;
    private long salesProductVersionId;
    private long orderSalesProductId;
    private long hospitalId;
    private String hospitalMemo;
    @JsonView(SystemAdmin.class)
    private String adminMemo;
    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonProperty(value = "isTreatmentGrantApplied")
    public boolean isTreatmentGrantApplied() {
        return isTreatmentGrantApplied;
    }

    @JsonView(SystemAdmin.class)
    @JsonProperty(value = "isExpireAtExtendable")
    public boolean isExpireAtExtendable() {
        if (isExpireAtExtendable) {
            return true;
        }
        // if applicable : migration ticket, extend count force 1 time offer
        return expireAtExtendCount == -1;
    }

    public boolean isExpired() {
        return ZonedDateTime.now().isAfter(this.expiredAt);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TicketTrashTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketTrashTemplate {

    private long id;
    private long memberId;
    private long orderSalesProductId;
    private String ticketCode;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime canceledAt;
    private long salesEventId;
    private long salesProductId;
    private long hospitalId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TitleContentObjectTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.product.model.TitleContentObject;
import lombok.*;

@Getter
@Builder(toBuilder = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
@EqualsAndHashCode
public class TitleContentObjectTemplate implements PlusAccessible {

    private String title;
    private String content;

    public static List<TitleContentObjectTemplate> of(Collection<TitleContentObject> titleContentObjects) {
        if (titleContentObjects == null) {
            return null;
        }

        return titleContentObjects.stream()
                .map(TitleContentObjectTemplate::of)
                .collect(Collectors.toList());
    }

    public static TitleContentObjectTemplate of(TitleContentObject titleContentObject) {
        return Optional.ofNullable(titleContentObject)
                .map(it -> TitleContentObjectTemplate.builder().title(it.getTitle()).content(it.getContent()).build())
                .orElse(null);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TranslatorTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TranslatorTemplate implements SystemAccessible {

    private Long id;
    private String sourceText;
    private String translationLanguage;
    private String translationText;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentCounselingFaqTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentCounselingFaqTemplate {

    private long id;
    private long treatmentCounselingId;
    private String questionKo;
    private String questionEn;
    private String questionZh;
    private String questionJa;
    private String answerKo;
    private String answerEn;
    private String answerZh;
    private String answerJa;
    private String linkTextKo;
    private String linkTextEn;
    private String linkTextZh;
    private String linkTextJa;
    private String linkUrl;
    private long createAdminId;
    private long updateAdminId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentCounselingTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentCounselingTemplate {

    private long id;
    private String titleKo;
    private String titleEn;
    private String titleZh;
    private String titleJa;
    private String textKo;
    private String textEn;
    private String textZh;
    private String textJa;
    private String backgroundColorCode;
    private String shapeColorCode;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
    private long treatmentId;
    private List<Long> faqIds;
    private boolean isVisible;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentFocusTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.common.product.type.TreatmentLibraryType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentFocusTemplate {

    private long id;
    @Deprecated
    private String title;
    private MultiLanguage titles;
    private long treatmentId;
    private List<TreatmentLibraryType> treatmentLibraryTypes;
    private List<Long> tvIds;
    private boolean isVisible;
    private int priority;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentLibraryShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentLibraryShortTemplate implements SystemAccessible {

    private long id;
    private String libraryName;
    private boolean isVisible;
    private long treatmentId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentLibraryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import kr.co.yeoshin.admin.common.model.SuggestionCycleTimesObject;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.common.product.type.SuggestionTargetType;
import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Builder
@Getter
public class TreatmentLibraryTemplate implements PlusAccessible {

    private long id;

    private long treatmentId;

    private String title;
    @JsonProperty("isVisible")
    private boolean isVisible;

    @Deprecated
    private String requireTimeKo;
    @Deprecated
    private String requireTimeEn;
    @Deprecated
    private String requireTimeZh;
    @Deprecated
    private String requireTimeJa;
    private MultiLanguage localeRequireTime;

    @Deprecated
    private String anesthesiaKo;
    @Deprecated
    private String anesthesiaEn;
    @Deprecated
    private String anesthesiaZh;
    @Deprecated
    private String anesthesiaJa;
    private MultiLanguage localeAnesthesia;

    @Deprecated
    private String downtimeKo;
    @Deprecated
    private String downtimeEn;
    @Deprecated
    private String downtimeZh;
    @Deprecated
    private String downtimeJa;
    private MultiLanguage localeDowntime;

    @Deprecated
    private String effectAppearsTimeKo;
    @Deprecated
    private String effectAppearsTimeEn;
    @Deprecated
    private String effectAppearsTimeZh;
    @Deprecated
    private String effectAppearsTimeJa;
    private MultiLanguage localeEffectAppearsTime;

    @Deprecated
    private List<TitleContentObjectTemplate> descriptionsKo;
    @Deprecated
    private List<TitleContentObjectTemplate> descriptionsEn;
    @Deprecated
    private List<TitleContentObjectTemplate> descriptionsZh;
    @Deprecated
    private List<TitleContentObjectTemplate> descriptionsJa;
    private MultiLanguageType<List<TitleContentObjectTemplate>> localeDescriptions;

    private SuggestionCycleTimesObject suggestionCycleKo;

    private SuggestionCycleTimesObject suggestionTimesKo;

    @Deprecated
    private List<String> processKo;
    @Deprecated
    private List<String> processEn;
    @Deprecated
    private List<String> processZh;
    @Deprecated
    private List<String> processJa;
    private MultiLanguageType<List<String>> localeProcess;

    @Deprecated
    private List<TitleContentObjectTemplate> meritsKo;
    @Deprecated
    private List<TitleContentObjectTemplate> meritsEn;
    @Deprecated
    private List<TitleContentObjectTemplate> meritsZh;
    @Deprecated
    private List<TitleContentObjectTemplate> meritsJa;
    private MultiLanguageType<List<TitleContentObjectTemplate>> localeMerits;

    @Deprecated
    private List<TitleContentObjectTemplate> faqsKo;
    @Deprecated
    private List<TitleContentObjectTemplate> faqsEn;
    @Deprecated
    private List<TitleContentObjectTemplate> faqsZh;
    @Deprecated
    private List<TitleContentObjectTemplate> faqsJa;
    private MultiLanguageType<List<TitleContentObjectTemplate>> localeFaqs;

    @Deprecated
    private List<String> precautionsKo;
    @Deprecated
    private List<String> precautionsEn;
    @Deprecated
    private List<String> precautionsZh;
    @Deprecated
    private List<String> precautionsJa;
    private MultiLanguageType<List<String>> localePrecautions;

    private List<Long> treatmentPrincipleIds;

    private List<SuggestionTargetType> suggestionTargets;


    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentPrincipleDetailTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleDetail;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentPrincipleDetailTemplate implements PlusAccessible {

    private long id;

    @Deprecated
    private String image;
    private MultiLanguage localeImage;

    @Deprecated
    private String descriptionKo;
    @Deprecated
    private String descriptionEn;
    @Deprecated
    private String descriptionZh;
    @Deprecated
    private String descriptionJa;
    private MultiLanguage localeDescription;

    public static TreatmentPrincipleDetailTemplate of(
            TreatmentPrincipleDetail treatmentPrincipleDetail,
            Map<String, MediaContainer> mediaContainerMap
    ) {
        if (treatmentPrincipleDetail == null) {
            return null;
        }

        Function<String, String> getEndpoint = fileName -> Optional.ofNullable(fileName)
                .map(mediaContainerMap::get)
                .flatMap(MediaContainer::getEndpoint)
                .orElse(fileName);

        String imageKo = getEndpoint.apply(treatmentPrincipleDetail.getImageKo());
        String imageEn = getEndpoint.apply(treatmentPrincipleDetail.getImageEn());
        String imageZh = getEndpoint.apply(treatmentPrincipleDetail.getImageZh());
        String imageJa = getEndpoint.apply(treatmentPrincipleDetail.getImageJa());

        return TreatmentPrincipleDetailTemplate.builder()
                .id(treatmentPrincipleDetail.getId())
                .image(imageKo)
                .localeImage(MultiLanguage.builder()
                        .ko(imageKo)
                        .en(imageEn)
                        .zh(imageZh)
                        .ja(imageJa)
                        .build())
                .descriptionKo(treatmentPrincipleDetail.getDescriptionKo())
                .descriptionEn(treatmentPrincipleDetail.getDescriptionEn())
                .descriptionZh(treatmentPrincipleDetail.getDescriptionZh())
                .descriptionJa(treatmentPrincipleDetail.getDescriptionJa())
                .localeDescription(MultiLanguage.builder()
                        .ko(treatmentPrincipleDetail.getDescriptionKo())
                        .en(treatmentPrincipleDetail.getDescriptionEn())
                        .zh(treatmentPrincipleDetail.getDescriptionZh())
                        .ja(treatmentPrincipleDetail.getDescriptionJa())
                        .build())
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentPrincipleTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.admin.treatment.service.model.TreatmentPrincipleContainer;
import kr.co.yeoshin.common.product.entity.TreatmentPrinciple;
import kr.co.yeoshin.common.product.model.InjectableMedicinePayload.CountryOfOrigin;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleType;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentPrincipleTemplate implements PlusAccessible {

    private long id;

    private boolean isVisible;

    @Deprecated
    private String nameKo;
    @Deprecated
    private String nameEn;
    @Deprecated
    private String nameZh;
    @Deprecated
    private String nameJa;
    private MultiLanguage localeName;

    private MultiLanguage localeDescription;

    @Deprecated
    private String thumbnail;
    private MultiLanguage localeThumbnail;

    private CountryOfOrigin countryOfOrigin;

    private TreatmentPrincipleType type;

    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonFormat(pattern = Constant.Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    private List<TreatmentPrincipleDetailTemplate> principleDetails;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }

    public static TreatmentPrincipleTemplate of(
            TreatmentPrincipleContainer treatmentPrincipleContainer,
            Map<String, MediaContainer> mediaContainerMap
    ) {
        if (treatmentPrincipleContainer == null || treatmentPrincipleContainer.getTreatmentPrinciple() == null) {
            return null;
        }

        TreatmentPrinciple treatmentPrinciple = treatmentPrincipleContainer.getTreatmentPrinciple();
        List<TreatmentPrincipleDetailTemplate> detailTemplates = Optional
                .ofNullable(treatmentPrincipleContainer.getTreatmentPrincipleDetails())
                .map(l -> l.stream()
                        .map(x -> TreatmentPrincipleDetailTemplate.of(x, mediaContainerMap))
                        .collect(Collectors.toList()))
                .orElseGet(Collections::emptyList);

        Function<String, String> getEndpoint = fileName -> Optional.ofNullable(fileName)
                .map(mediaContainerMap::get)
                .flatMap(MediaContainer::getEndpoint)
                .orElse(fileName);
        String thumbnailKo = getEndpoint.apply(treatmentPrinciple.getThumbnailKo());
        String thumbnailEn = getEndpoint.apply(treatmentPrinciple.getThumbnailEn());
        String thumbnailZh = getEndpoint.apply(treatmentPrinciple.getThumbnailZh());
        String thumbnailJa = getEndpoint.apply(treatmentPrinciple.getThumbnailJa());

        return TreatmentPrincipleTemplate.builder()
                .id(treatmentPrinciple.getId())
                .isVisible(treatmentPrinciple.getViewYn().toBoolean())
                .nameKo(treatmentPrinciple.getNameKo())
                .nameEn(treatmentPrinciple.getNameEn())
                .nameZh(treatmentPrinciple.getNameZh())
                .nameJa(treatmentPrinciple.getNameJa())
                .localeName(MultiLanguage.builder()
                        .ko(treatmentPrinciple.getNameKo())
                        .en(treatmentPrinciple.getNameEn())
                        .zh(treatmentPrinciple.getNameZh())
                        .ja(treatmentPrinciple.getNameJa())
                        .build())
                .localeDescription(MultiLanguage.builder()
                        .ko(treatmentPrinciple.getDescriptionKo())
                        .en(treatmentPrinciple.getDescriptionEn())
                        .zh(treatmentPrinciple.getDescriptionZh())
                        .ja(treatmentPrinciple.getDescriptionJa())
                        .build())
                .thumbnail(thumbnailKo)
                .localeThumbnail(MultiLanguage.builder()
                        .ko(thumbnailKo)
                        .en(thumbnailEn)
                        .zh(thumbnailZh)
                        .ja(thumbnailJa)
                        .build())
                .countryOfOrigin(treatmentPrinciple.getCountryOfOrigin())
                .type(treatmentPrinciple.getType())
                .createdAt(DateUtil.convertFrom(treatmentPrinciple.getCreated()))
                .updatedAt(DateUtil.convertFrom(treatmentPrinciple.getUpdated()))
                .principleDetails(detailTemplates)
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReceiptReviewTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.review.type.ReceiptReviewType;
import kr.co.yeoshin.common.review.type.ReceiptReviewVisitPath;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReceiptReviewTemplate implements PlusAccessible {

    private long id;
    private long treatmentReviewId;
    @JsonFormat(pattern = Api.DATE_FORMAT)
    private ZonedDateTime paymentDateAt;
    private int paymentPrice;
    private String receiptNumber;
    private ReceiptReviewType type;
    private long salesEventId;
    private ReceiptReviewVisitPath visitPath;
    private ImageTemplate receiptImage;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewConfirmShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.review.type.ConcealReason;
import kr.co.yeoshin.common.review.type.Evaluation;
import kr.co.yeoshin.common.review.type.TreatmentReviewApproveStatus;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReviewConfirmShortTemplate implements PlusAccessible {

    private long id;
    private long treatmentReviewId;
    private long version;
    private TreatmentReviewApproveStatus status;
    private TreatmentReviewCreateType type;
    private List<Evaluation> evaluationContents;
    private CountryCode reviewerHomeCountryCode;
    private float starPoint;
    private String contents;
    private String contentsLanguage;
    private String tip;
    private ConcealReason concealReason;
    private String concealReasonDescription;
    private String verbose;
    private String adminMemo;
    private List<ImageTemplate> confirmImages;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime touchAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewConfirmTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.review.type.Evaluation;
import kr.co.yeoshin.common.review.type.TreatmentReviewApproveStatus;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewConfirmTemplate {

    private long id;
    private long treatmentReviewId;
    private long version;
    private long reservationId;
    private long hospitalId;
    private long memberId;
    private CountryCode reviewerHomeCountryCode;
    private float starPoint;
    private List<Evaluation> evaluationContents;
    private String contents;
    private String contentsLanguage;
    private String tip;
    private TreatmentReviewApproveStatus status;
    private String rejectReason;
    private TreatmentReviewCreateType createType;
    private long likeCount;
    private long scrapCount;
    private long replyCount;
    private long reportCount;
    private long pointByReview;
    private List<ImageTemplate> confirmImages;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usedAt;
    private String adminMemo;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime touchAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewHospitalCommentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewHospitalCommentTemplate implements PlusAccessible {

    private long id;
    private long treatmentReviewId;
    private String contents;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewRewardTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonGetter;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewRewardTemplate implements PlusAccessible {

    private long id;
    private long treatmentReviewId;
    private boolean isRewardable;
    private int rewardablePoint;

    @JsonGetter("isRewardable")
    public boolean isRewardable() {
        return isRewardable;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.review.type.TreatmentReviewApproveStatus;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewShortTemplate implements PlusAccessible {

    private long id;
    private long version;
    private long reservationId;
    private long memberId;
    private long salesEventId;
    private long hospitalId;
    private TreatmentReviewCreateType type;
    private float starPoint;
    private CountryCode reviewerHomeCountryCode;
    private boolean isVisible;
    private String treatmentContents;
    private String contents;
    private String contentsLanguage;
    private boolean isRecommend;
    private long likeCount;
    private long scrapCount;
    private long replyCount;
    private long reportCount;
    private TreatmentReviewApproveStatus status;
    private long hospitalCommentId;
    private List<ImageTemplate> images;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime touchAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReviewStatTemplate {

    private long id;
    private long treatmentReviewId;
    private int likeCount;
    private int scrapCount;
    private int replyCount;
    private int reportCount;

    private static TreatmentReviewStatTemplate empty() {
        return TreatmentReviewStatTemplate.builder().build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentReviewTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.member.type.Sex;
import kr.co.yeoshin.common.member.type.SkinType;
import kr.co.yeoshin.common.review.type.AgeRange;
import kr.co.yeoshin.common.review.type.Evaluation;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewTemplate implements PlusAccessible {

    private long id;
    private long version;
    private long reservationId;
    private long hospitalId;
    private long salesEventId;
    private List<Long> salesProductIds;
    private long memberId;
    private CountryCode reviewerHomeCountryCode;
    private int starPoint;
    private List<Evaluation> evaluationContents;
    private String contents;
    private String contentsLanguage;
    private String treatmentContents;
    private String tip;
    private boolean isVisible;
    private TreatmentReviewCreateType createType;
    private SkinType skinType;
    private AgeRange ageRange;
    private Sex sex;
    private boolean isRecommend;
    private long likeCount;
    private long scrapCount;
    private long replyCount;
    private long reportCount;
    private List<ImageTemplate> images;
    private List<Long> treatmentIds; //영수증후기 일때 전달
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime useAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime touchAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TreatmentTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.product.entity.Treatment;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleType;
import kr.co.yeoshin.common.product.type.TreatmentType;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentTemplate implements PlusAccessible {

    private long id;
    private TreatmentType type;
    @Deprecated
    private String nameKo;
    @Deprecated
    private String nameEn;
    @Deprecated
    private String nameZh;
    @Deprecated
    private String nameJa;
    private MultiLanguage localeName;
    @Deprecated
    private String shortDescriptionKo;
    @Deprecated
    private String shortDescriptionEn;
    @Deprecated
    private String shortDescriptionZh;
    @Deprecated
    private String shortDescriptionJa;
    private MultiLanguage localeShortDescription;
    private ZonedDateTime createdAt;
    private ZonedDateTime updatedAt;

    public static TreatmentTemplate of(Treatment treatment) {
        if (treatment == null || treatment.getId() < 0) {
            return null;
        }

        return TreatmentTemplate.builder()
                .id(treatment.getId())
                .type(treatment.getType())
                .nameKo(treatment.getNameKo())
                .nameEn(treatment.getNameEn())
                .nameZh(treatment.getNameZh())
                .nameJa(treatment.getNameJa())
                .localeName(MultiLanguage.builder()
                        .ko(treatment.getNameKo())
                        .en(treatment.getNameEn())
                        .zh(treatment.getNameZh())
                        .ja(treatment.getNameJa())
                        .build())
                .shortDescriptionKo(treatment.getShortDescriptionKo())
                .shortDescriptionEn(treatment.getShortDescriptionEn())
                .shortDescriptionZh(treatment.getShortDescriptionZh())
                .shortDescriptionJa(treatment.getShortDescriptionJa())
                .localeShortDescription(MultiLanguage.builder()
                        .ko(treatment.getShortDescriptionKo())
                        .en(treatment.getShortDescriptionEn())
                        .zh(treatment.getShortDescriptionZh())
                        .ja(treatment.getShortDescriptionJa())
                        .build())
                .createdAt(InvokeSupporters.getOrNullIfNull(
                        () -> DateUtil.convertFrom(treatment.getCreated())))
                .updatedAt(InvokeSupporters.getOrNullIfNull(
                        () -> DateUtil.convertFrom(treatment.getUpdated())))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TvCategoryTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.common.tv.type.TvCategoryType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvCategoryTemplate implements SystemAccessible {

    private long id;
    private String name;
    private TvCategoryType categoryType;
    private long categoryId;
    private long priority;
    private boolean isVisible;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TvReplyTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvReplyTemplate {

    private long id;
    private long memberId;
    private long tvId;
    private boolean isVisible;
    private String contents;
    private String adminMemo;
    private long reportCount;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TvShortTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvShortTemplate {

    private long id;
    private String code;
    private String subject;
    private String link;
    private String videoThumbnail;
    private boolean isVisible;
    private Long hospitalId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime viewAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TvStatTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvStatTemplate {

    private long viewCount;
    private long likeCount;
    private long scrapCount;
    private long replyCount;
    private long youtubeViewCount;


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/TvTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.type.PublicType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvTemplate {

    private long id;
    private String code;
    private String subject;
    private boolean isVisible;
    private String metaTagTitle;
    private String metaTagDescription;
    private String link;
    private String playTime;
    private String videoId;
    private String videoThumbnail;
    private String comment;
    private String displayTags;
    private String hiddenTags;
    private PublicType publicType;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime viewAt;
    private long createAdminId;
    private long updateAdminId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    @JsonGetter("isVisible")
    public boolean isVisible() {
        return isVisible;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/ValueTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ValueTemplate<T> implements PlusAccessible {

    private T value;

    public static <T> ValueTemplate<T> of(T value) {
        return ValueTemplate.<T>builder()
                .value(value)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/VatReportTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.settlement.type.VatRound;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class VatReportTemplate implements PlusAccessible {

    private long id;
    private int vatYear;
    private VatRound vatRound;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportEndAt;
    private int saleCardPrice;
    private int saleMoneyReceiptPrice;
    private int saleEtcPrice;
    private int supplyPrice;
    private int vatPrice;
    private int totalSupplyPrice;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/VirtualBankTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.common.payment.type.PgType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class VirtualBankTemplate implements PlusAccessible {

    private PgType pgType;
    private long refId;
    private String account;
    private String holder;
    private String bankName;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmHospitalDoctorTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmHospitalDoctorTemplate implements CrmAccessible {

    private String id;
    private String name;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmHospitalTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmHospitalTemplate implements CrmAccessible {

    private String id;
    private String name;
    private String hiraId;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmMemberTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.common.type.CountryCode;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmMemberTemplate implements CrmAccessible {

    private String id;
    private String name;
    private CountryCode homeCountryCode; // KR, JA....
    private String countryCallingCode; // 82, 81 ....
    private String cellPhone; // 01011112222

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmReservationCloseDateTimeTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationCloseDateTimeTemplate implements CrmAccessible {

    private String id;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmReservationTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.thirdparty.usecase.type.CrmReservationStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationTemplate implements CrmAccessible {

    private String id;
    private long version;
    private String memberId;
    private String hiraId;
    private String reservationDoctorId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private CrmReservationStatus status;
    private String memo;
    private String interestedTreatment;
    private String recentTreatment;
    private String hospitalMemo;
    private List<String> ticketIds;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmSalesEventQuestionReplyTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmSalesEventQuestionReplyTemplate implements CrmAccessible {

    private String id;
    private String salesEventQuestionId;
    private String content;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmSalesEventQuestionTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmSalesEventQuestionTemplate implements CrmAccessible {

    private String id;
    private String content;
    private String memberId;
    private String salesEventName;
    private String hospitalId;
    private boolean isVisible;
    private boolean isSecret;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmScrollablePageTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Getter
@Builder
public class CrmScrollablePageTemplate implements CrmAccessible {

    private long totalCount;
    private int pageElementCount;
    private String next;

    public static CrmScrollablePageTemplate empty() {
        return CrmScrollablePageTemplate.builder()
                .next(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/model/template/thirdparty/CrmTicketTemplate.java
================================================
package kr.co.yeoshin.admin.common.model.template.thirdparty;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmTicketTemplate implements CrmAccessible {

    private String id;
    private String name;
    private String salesEventName;
    private int price;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/stereotype/SearchRepository.java
================================================
package kr.co.yeoshin.admin.common.stereotype;

import java.lang.annotation.*;
import org.springframework.core.annotation.AliasFor;
import org.springframework.stereotype.Component;

@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface SearchRepository {

    @AliasFor(annotation = Component.class)
    String value() default "";
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/common/stereotype/UseCase.java
================================================
package kr.co.yeoshin.admin.common.stereotype;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import org.springframework.core.annotation.AliasFor;
import org.springframework.stereotype.Component;

@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface UseCase {

    @AliasFor(annotation = Component.class)
    String value() default "";
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/config/messages/LocaleMessageSourceTemplate.java
================================================
package kr.co.yeoshin.admin.config.messages;

import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant.Name;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.MDC;
import org.springframework.context.NoSuchMessageException;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class LocaleMessageSourceTemplate {

    private final Map<String, AbstractLocaleMessageSource> messageSources;
    private final LocaleLanguage localeLanguage;

    public LocaleMessageSourceTemplate(
            List<AbstractLocaleMessageSource> messageSources, LocaleLanguage localeLanguage) {
        this.messageSources = messageSources.stream()
                .collect(Collectors.toMap(x -> x.locale().getLanguage(), Function.identity()));
        this.localeLanguage = localeLanguage;
    }

    public String getMessage(String code, Object[] args) {
        String lang = MDC.get(Name.LANGUAGE);
        Locale locale = Locale.forLanguageTag(StringUtils.isBlank(lang)
                ? localeLanguage.getDefaultLocale().getLanguage() : lang);

        try {
            return messageSources.get(locale.getLanguage())
                    .getMessage(
                            code,
                            args,
                            locale);
        } catch (NoSuchMessageException e) {
            log.error("message locale({}) code({}) not defined", locale, code);
            return StringUtils.EMPTY;
        }
    }

    public String getMessage(String code) {
        return this.getMessage(code, new Object[]{});
    }

    public String getMessage(String code, String defaultValue) {
        return Optional.ofNullable(this.getMessage(code)).filter(StringUtils::isNotBlank).orElse(defaultValue);
    }
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/config/web/resttemplate/RestApiTemplate.java
================================================
package kr.co.yeoshin.admin.config.web.resttemplate;

import lombok.RequiredArgsConstructor;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

@Component
@RequiredArgsConstructor
public class RestApiTemplate {

    private final RestTemplate restTemplate;

    public <T> T get(String url, Class<T> responseClass) {
        return restTemplate.getForObject(url, responseClass);
    }

    public <T, V> T post(String url, V request, Class<T> responseClass) {
        return restTemplate.postForObject(url, request, responseClass);
    }

    public <T> T get(String url, ParameterizedTypeReference<T> responseClass) {
        ResponseEntity<T> response = restTemplate.exchange(url, HttpMethod.GET, null, responseClass);
        return response.getBody();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/coupon/service/model/CouponPageablePayload.java
================================================
package kr.co.yeoshin.admin.coupon.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.CouponIssueConditionTemplate;
import kr.co.yeoshin.admin.common.model.template.CouponShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponPageablePayload {

    private List<CouponShortTemplate> coupons;
    private List<CouponIssueConditionTemplate> couponIssueConditions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/coupon/service/model/CouponPayload.java
================================================
package kr.co.yeoshin.admin.coupon.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.CouponIssueConditionTemplate;
import kr.co.yeoshin.admin.common.model.template.CouponTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponPayload {

    // todo : coupon remove
    private CouponTemplate coupon;
    private List<CouponTemplate> coupons;
    private List<CouponIssueConditionTemplate> couponIssueConditions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, AdminShortTemplate> admins;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/coupon/service/model/MemberCouponPageablePayload.java
================================================
package kr.co.yeoshin.admin.coupon.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberCouponPageablePayload {

    private List<MemberCouponTemplate> memberCoupons;
    private Map<Long, MemberTemplate> members;
    private Map<Long, CouponShortTemplate> coupons;
    private Map<Long, List<CouponIssueConditionTemplate>> couponIssueConditions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/coupon/service/model/MemberCouponPayload.java
================================================
package kr.co.yeoshin.admin.coupon.service.model;

import kr.co.yeoshin.admin.common.model.template.CouponShortTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberCouponTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberCouponPayload {

    private MemberCouponTemplate memberCoupon;
    private MemberTemplate member;
    private CouponShortTemplate coupon;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/coupon/usecase/CouponUseCase.java
================================================
package kr.co.yeoshin.admin.coupon.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.api.payload.ListPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.coupon.controller.model.*;
import kr.co.yeoshin.admin.coupon.service.CouponService;
import kr.co.yeoshin.admin.coupon.service.model.CouponPageablePayload;
import kr.co.yeoshin.admin.coupon.service.model.CouponPayload;
import kr.co.yeoshin.admin.coupon.service.model.MemberCouponPageablePayload;
import kr.co.yeoshin.admin.coupon.service.model.MemberCouponPayload;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class CouponUseCase {

    private final CouponService couponService;
    private final TransactionTemplate transactionTemplate;

    public CouponPageablePayload retrieveCoupons(CouponFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> couponService.fetchAllCoupons(request.toWhereCondition()));
    }

    public CouponPayload retrieveCoupon(long id) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> couponService.findCouponByCouponId(id));
    }

    public CouponPayload registerCoupon(CouponMutationRequest couponMutationRequest) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> couponService.addCoupons(couponMutationRequest));
    }

    public CouponPayload updateCoupon(long id, CouponMutationRequest couponMutationRequest) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> couponService.updateCoupon(id, couponMutationRequest));
    }


    public CouponPayload patchCoupon(long id, CouponPatchAtRequest couponMutationRequest) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> couponService.patchCoupon(id, couponMutationRequest));
    }

    public MemberCouponPageablePayload retrieveMemberCoupons(MemberCouponFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> couponService.fetchMemberCoupons(request.toWhereCondition()));
    }

    public MemberCouponPayload retrieveMemberCoupon(long memberCouponId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> couponService.retrieveMemberCoupon(memberCouponId));
    }

    public ListPayload<MemberCouponPayload> registerMemberCoupon(MemberCouponMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> couponService.registerMemberCoupon(request));
    }

    public BoolPayload updateCouponStatus(long id, CouponStatusMutationRequest request) {
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    couponService.updateCouponStatus(id, request);
                    return true;
                })
        ).build();
    }

    public BoolPayload updateAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> couponService.updateAdminMemo(id, adminMemo));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdAnalysisReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdAnalysisReportPageablePayload implements PlusAccessible {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private DateTimeRangeTemplate filterDateRange;
    private HospitalShortTemplate hospital;
    private List<String> reportAts;
    private Map<String, CpmAdReportFigureTemplate> figuresByReportAt;
    private Map<String, CpmAdReportStatTemplate> statsByReportAt;
    private Map<String, CpmAdReportRatioTemplate> ratiosByReportAt;
    private Map<String, List<CpmAdSalesEventDetailReportTemplate>> cpmAdSalesEventDetailReport;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    private Map<String, CpmPaidAdPointStatusTemplate> cpmPaidAdPointStatusByReportAt;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdAnalysisReportSummaryPayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdAnalysisReportSummaryPayload implements PlusAccessible {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private DateTimeRangeTemplate filterDateRange;
    private HospitalShortTemplate hospital;
    private CpmAdReportFigureTemplate summaryFigure;
    private CpmAdReportStatTemplate summaryStat;
    private CpmAdReportRatioTemplate summaryRatio;
    private List<String> reportAts;
    private Map<String, CpmAdReportFigureTemplate> figuresByReportAt;
    private Map<String, CpmAdReportStatTemplate> statsByReportAt;
    private Map<String, CpmAdReportRatioTemplate> ratiosByReportAt;
    private CpmPaidAdPointStatusTemplate summaryCpmPaidAdPointStatus;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdConfigPayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.CpmAdConfigTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.NumberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdConfigPayload implements PlusAccessible {

    private HospitalShortTemplate hospital;
    private CpmAdConfigTemplate cpmAdConfig;
    private NumberTemplate realtimeBudget;
    private NumberTemplate adUnitPrice;
    private NumberTemplate treatmentSalesEventCount;
    private NumberTemplate freeTreatmentSalesEventCount;
    @Deprecated
    private NumberTemplate surgerySalesEventCount;
    private NumberTemplate consultationSalesEventCount;
    private NumberTemplate hideAdCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdGuidanceReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdGuidanceReportPageablePayload {

    private List<CpmAdGuidanceReportTemplate> cpmAdGuidanceReports;
    private Map<Long, HospitalShortTemplate> hospitalByHospitalId;
    private Map<Long, CpmAdConfigTemplate> cpmAdConfigByHospitalId;
    private Map<Long, NumberTemplate> salesEventViewCountByHospitalId;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdPageablePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdPageablePayload {

    private DateTimeRangeTemplate filterDate;
    private DateTimeRangeTemplate prevFilterDate;
    private List<CpmAdHospitalReportTemplate> cpmAdHospitalReports;
    private Map<Long, CpmAdReportFigureTemplate> figuresByHospitalId;
    private Map<Long, CpmAdReportRatioTemplate> ratiosByHospitalId;
    private Map<Long, HospitalTemplate> hospitals;
    private Map<Long, AdminShortTemplate> managerAdmins;
    private Map<Long, CpmAdReportFigureTemplate> prevFiguresByHospitalId;
    private Map<Long, CpmAdReportRatioTemplate> prevRatiosByHospitalId;
    private Map<Long, NumberTemplate> remainAdPointByHospitalId;
    private Map<Long, NumberTemplate> remainConsultationPointByHospitalId;
    @Deprecated
    private Map<Long, NumberTemplate> consultationPointByHospitalId;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdRulePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.CpmAdClickPriceTemplate;
import kr.co.yeoshin.admin.common.model.template.CpmAdRuleTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdRulePayload implements SystemAccessible {

    private CpmAdRuleTemplate cpmAdRule;
    private List<CpmAdClickPriceTemplate> cpmAdClickPrices;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdSalesEventReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpmAdSalesEventReportPageablePayload implements PlusAccessible {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private DateTimeRangeTemplate filterDateRange;
    private CpmAdReportFigureTemplate summaryFigure;
    private CpmAdReportStatTemplate summaryStat;
    private CpmAdReportRatioTemplate summaryRatio;
    private List<SalesEventTemplate> salesEvents;
    private Map<Long, SalesEventCpmTemplate> salesEventCpms;
    private Map<Long, CpmAdReportFigureTemplate> figures;
    private Map<Long, CpmAdReportStatTemplate> stats;
    private Map<Long, CpmAdReportRatioTemplate> ratios;
    private Map<Long, RecommendSalesEventTemplate> recommendSalesEvents;
    private CpmPaidAdPointStatusTemplate cpmPaidAdPointStatus;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdStatusLogPageablePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.CpmAdStatusLogTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdStatusLogPageablePayload {

    private List<CpmAdStatusLogTemplate> cpmAdStatusLogs;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, AdminShortTemplate> managerAdmins;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/CpmAdSummaryPayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CpmAdSummaryPayload {

    private DateTimeRangeTemplate filterDate;
    private DateTimeRangeTemplate prevFilterDate;
    private CpmAdHospitalReportTemplate summaryCpmAdHospitalReport;
    private CpmAdReportFigureTemplate summaryFiguresByHospitalId;
    private CpmAdReportRatioTemplate summaryRatiosByHospitalId;
    private CpmAdReportFigureTemplate summaryPrevFigures;
    private CpmAdReportRatioTemplate summaryPrevRatios;
    private NumberTemplate summaryRemainAdPoint;
    private NumberTemplate summaryRemainConsultationPoint;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/service/model/DayBudgetFixPricePayload.java
================================================
package kr.co.yeoshin.admin.cpm.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.CpmAdDayBudgetFixPriceTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class DayBudgetFixPricePayload implements SystemAccessible {

    private CpmAdDayBudgetFixPriceTemplate dayBudgetFixPrice;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/cpm/usecase/CpmAdUseCase.java
================================================
package kr.co.yeoshin.admin.cpm.usecase;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.Constant.Admin;
import kr.co.yeoshin.admin.common.Profile;
import kr.co.yeoshin.admin.common.component.LocaleTextResponseFactory;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.SuggestionCycleTimesObject;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.CpmCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.localetext.SalesEventMultiLanguage;
import kr.co.yeoshin.admin.common.model.template.AdminAccountTemplate;
import kr.co.yeoshin.admin.common.model.template.CpmAdConfigTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.cpm.controller.model.*;
import kr.co.yeoshin.admin.cpm.service.CpmAdService;
import kr.co.yeoshin.admin.cpm.service.model.*;
import kr.co.yeoshin.admin.exception.CpmException;
import kr.co.yeoshin.admin.exception.DomainValidationException;
import kr.co.yeoshin.admin.hospital.service.HospitalManagementContactService;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.service.model.HospitalManagementContactContext;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.admin.product.controller.model.*;
import kr.co.yeoshin.admin.product.controller.validator.SalesEventValidator;
import kr.co.yeoshin.admin.product.controller.validator.model.FieldMessagePair;
import kr.co.yeoshin.admin.product.service.SalesEventImageService;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.product.service.model.SalesEventContainer;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.revision.service.model.InstantLogContext;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.Constant.Slack;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.notification.type.SlackIdType;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.SalesEventImage;
import kr.co.yeoshin.common.product.model.TitleContentObject;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.product.type.SalesProductExposureCondition;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.springframework.core.env.Environment;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class CpmAdUseCase {

    private final CpmAdService cpmAdService;
    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final HospitalManagementContactService hospitalManagementContactService;
    private final AdminService adminService;
    private final RevisionService revisionService;
    private final MediaService mediaService;
    private final SalesEventImageService salesEventImageService;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SlackTemplateFactory slackTemplateFactory;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;
    private final Environment env;

    public CpmAdPageablePayload retrieveCpmAds(AdHospitalStatusFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveCpmAds(request.toWhereCondition())
        );
    }

    public CpmAdSummaryPayload summaryCpmAd(AdHospitalStatusFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveSummaryCpmAd(request.toWhereCondition())
        );
    }

    public CpmAdConfigPayload retrieveCpmAdConfig(long hospitalId) {
        Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        if (Objects.nonNull(currentHospitalId) && currentHospitalId != hospitalId) {
            throw new CpmException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_NOT_EXIST);
        }

        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveCompositeCpmAdConfigByHospitalId(hospitalId)
        );
    }

    public CpmAdSalesEventReportPageablePayload retrieveCpmAdSalesEventReports(long hospitalId,
            AdOperationStatusFilterRequest request) {
        Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        if (Objects.nonNull(currentHospitalId) && currentHospitalId != hospitalId) {
            throw new CpmException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_NOT_EXIST);
        }

        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveCpmAdSalesEventByHospitalId(request.toWhereCondition(hospitalId))
        );
    }

    public CpmAdStatusLogPageablePayload retrieveCpmAdStatusLogs(CpmAdStatusLogFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveCpmAdStatusLogs(request.toWhereCondition())
        );
    }

    public CpmAdAnalysisReportSummaryPayload summaryCpmAdAnalysisReport(AdPerformanceAnalysisFilterRequest request) {
        Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.summaryCpmAdAnalysisReports(request.toWhereCondition(currentHospitalId))
        );
    }

    public CpmAdAnalysisReportPageablePayload listCpmAdAnalysisReport(AdPerformanceAnalysisFilterRequest request) {
        Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveCpmAdAnalysisReports(request.toWhereCondition(currentHospitalId))
        );
    }

    public CpmAdConfigPayload modifyCpmAdConfig(long hospitalId, CpmAdMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            CpmAdConfigTemplate cpmAdConfig = cpmAdService.retrieveCpmAdConfigByHospitalId(hospitalId)
                    .orElseThrow(() -> new CpmException(CpmCode.CPM_AD_CONFIG_NOT_EXIST));
            CpmAdConfigPayload modifiedCpmAdConfigPayload = cpmAdService.updateCpmAdConfig(hospitalId, request);
            CpmAdConfigTemplate modifiedCpmAdConfig = modifiedCpmAdConfigPayload.getCpmAdConfig();

            if (cpmAdConfig.getCpmPlan() != modifiedCpmAdConfig.getCpmPlan()) {
                hospitalService.modifyPremiumYn(hospitalId);
            }

            return modifiedCpmAdConfigPayload;
        });
    }

    public List<String> modifySalesEventCpmHideYn(long hospitalId, SalesEventCpmMutationRequest request) {
        Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        if (Objects.nonNull(currentHospitalId) && currentHospitalId != hospitalId) {
            throw new CpmException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_NOT_EXIST);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            // 노출로 변경하는 경우 이벤트 데이터 유효성을 우선 검사.
            // 유효하지 않은 경우 노출로 변경할 수 없도록 함.

            List<SalesEventContainer> salesEvents = salesEventService.retrieveSalesEventDetails(request.getSalesEventIds());

            List<SalesEventContainer> exposedEvents;
            Map<String, List<String>> validationMessagesByEventCodes;
            if (!request.isHidable()) {
                validationMessagesByEventCodes = validationSalesEvents(salesEvents);
                exposedEvents = salesEvents.stream()
                        .filter(x -> !validationMessagesByEventCodes.containsKey(x.getSalesEvent().getEventCode()))
                        .collect(Collectors.toList());
            } else {
                validationMessagesByEventCodes = Collections.emptyMap();
                exposedEvents = salesEvents;
            }

            if (!validationMessagesByEventCodes.isEmpty()) {
                log.error(validationMessagesByEventCodes.entrySet()
                        .stream()
                        .map(e -> MessageUtils.format("{} / {}",
                                e.getKey(),
                                String.join(", ", e.getValue())))
                        .collect(Collectors.joining("\n")));
            }

            SalesEventCpmMutationRequest modifiedRequest;
            if (CollectionUtils.size(request.getSalesEventIds()) == CollectionUtils.size(validationMessagesByEventCodes)) {
                modifiedRequest = SalesEventCpmMutationRequest.builder()
                        .isHidable(request.isHidable())
                        .salesEventIds(Collections.emptyList())
                        .build();
            } else if (MapUtils.isNotEmpty(validationMessagesByEventCodes)) {
                List<Long> exposedEventIds = exposedEvents.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList());
                modifiedRequest = SalesEventCpmMutationRequest.builder()
                        .isHidable(request.isHidable())
                        .salesEventIds(exposedEventIds)
                        .build();
            } else {
                modifiedRequest = request;
            }

            if (CollectionUtils.isNotEmpty(modifiedRequest.getSalesEventIds())) {
                CpmAdConfigPayload payload = cpmAdService.modifySalesEventCpmHideYn(hospitalId, modifiedRequest);
                logExposureValue(modifiedRequest);

                notifySalesEventCpmHideYn(hospitalId, modifiedRequest, payload, exposedEvents);
            }

            if (MapUtils.isNotEmpty(validationMessagesByEventCodes)) {
                notifyExposureFailureToSlack(hospitalId, validationMessagesByEventCodes);
            }

            return new ArrayList<>(validationMessagesByEventCodes.keySet());
        });
    }

    public BoolPayload disable(CpmAdDisablingRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            CpmAdConfigPayload payload = cpmAdService.disableCpmAdConfig(request.getHospitalId());

            List<HospitalManagementContactContext> contactContexts = hospitalManagementContactService.fetchAllByHospitalIds(
                    HospitalManagementContactType.AD_POINT, Collections.singletonList(payload.getHospital().getId()));

            if (payload.getCpmAdConfig().getStatus() == CpmAdStatus.END) {
                messagePublisher.publishNotification(NotificationMessage.of(
                        NotificationPayload.builder()
                                .alimTalk(alimTalkTemplateFactory.cpmAdEnd(
                                        contactContexts, payload.getHospital()))
                                .build()));
            }
            if (payload.getCpmAdConfig().getStatus() == CpmAdStatus.STOP_REQUEST) {
                messagePublisher.publishNotification(NotificationMessage.of(
                        NotificationPayload.builder()
                                .alimTalk(alimTalkTemplateFactory.cpmAdStopRequest(
                                        contactContexts, payload.getHospital()))
                                .build()));
            }

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public CpmAdRulePayload rules() {
        return transactionTemplate.executeMainReadableTransaction(cpmAdService::retrieveCpmAdRules);
    }

    public DayBudgetFixPricePayload modifyBudgetFixPrice(long hospitalId, DayBudgetFixPriceMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> cpmAdService.updateCpmAdConfig(hospitalId, request));
    }

    public CpmAdGuidanceReportPageablePayload retrievesCpmAdGuidanceReport(CpmAdGuidanceReportFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> cpmAdService.retrieveCpmAdGuidanceReport(request.toWhereCondition()));
    }

    private void notifySalesEventCpmHideYn(long hospitalId, SalesEventCpmMutationRequest request, CpmAdConfigPayload payload,
            List<SalesEventContainer> exposedEvents) {

        if (request.isHidable()
                && payload.getCpmAdConfig().getStatus() == CpmAdStatus.STOP_REQUEST) {
            List<HospitalManagementContactContext> contactContexts = hospitalManagementContactService.fetchAllByHospitalIds(
                    HospitalManagementContactType.AD_POINT, Collections.singletonList(hospitalId));

            messagePublisher.publishNotification(NotificationMessage.of(
                    NotificationPayload.builder()
                            .alimTalk(alimTalkTemplateFactory.cpmAdStopRequest(contactContexts, payload.getHospital()))
                            .build()));
        }

        if (request.isHidable()
                && payload.getCpmAdConfig().getStatus() == CpmAdStatus.STOP_REQUEST
                && payload.getConsultationSalesEventCount().getValue().intValue() > 0
                && Set.of(Profile.PROD.getValue(), Profile.STAGE.getValue()).contains(Profile.getActiveProfile(env))) {
            long salesAdminId = InvokeSupporters.getOrDefaultIfNull(
                    () -> payload.getHospital().getSalesAdminId(),
                    Admin.ADMIN_NOT_EXIST_ID);

            List<String> slackIds = salesAdminId == Admin.ADMIN_NOT_EXIST_ID
                    ? Collections.emptyList() : adminService.findSlackIds(SlackIdType.USER, salesAdminId);

            String slackTag = slackIds.stream()
                    .map(x -> MessageUtils.format("<@{}>", x))
                    .findFirst()
                    .orElse(MessageUtils.format("<!subteam^{}>", Slack.DL_TEAM_SALES_ID));

            messagePublisher.publishNotification(NotificationMessage.of(
                    NotificationPayload.builder()
                            .slack(slackTemplateFactory.cpmAdStopRequest(
                                    payload.getHospital(), slackTag))
                            .build()));
        }

        if (Profile.PROD.getValue().equals(Profile.getActiveProfile(env))) {
            Set<Language> allLang = EnumSet.allOf(Language.class);

            hospitalService.fetchHospitalByHospitalId(hospitalId)
                    .filter(h -> h.getKahfYn() == YN.Y)
                    .ifPresent(h -> {
                        AdminAccountTemplate adminAccount = adminService.fetchAllAdminAccountByAdminIds(
                                        List.of(h.getAdmin().getId()))
                                .stream()
                                .findFirst()
                                .orElse(null);

                        List<SalesEventContainer> e = exposedEvents.stream()
                                .filter(it -> !it.fetchLocaleSalesEventImageMap()
                                        .getOrDefault(SalesEventImageType.THUMBNAIL, MultiLanguageType.empty())
                                        .hasAll(allLang))
                                .collect(Collectors.toList());

                        if (!e.isEmpty()) {
                            messagePublisher.publishNotification(NotificationMessage.of(NotificationPayload.builder()
                                    .slack(slackTemplateFactory.kahfSalesEventExposure(payload.getHospital(), adminAccount, e))
                                    .build()));
                        }
                    });
        }
    }

    private void notifyExposureFailureToSlack(long hospitalId, Map<String, List<String>> validationMessagesByEventCode) {
        if (!Profile.PROD.getValue().equals(Profile.getActiveProfile(env)) || MapUtils.isEmpty(validationMessagesByEventCode)) {
            return;
        }

        HospitalShortTemplate hospital = hospitalService.fetchHospitalByHospitalId(hospitalId)
                .map(payloadFactory::hospitalShortTemplate)
                .orElseGet(() -> HospitalShortTemplate.builder().id(hospitalId).build());

        messagePublisher.publishNotification(NotificationMessage.of(NotificationPayload.builder()
                .slack(slackTemplateFactory.salesEventExposureFailure(hospital, validationMessagesByEventCode))
                .build()));
    }

    private void logExposureValue(SalesEventCpmMutationRequest validRequest) {
        String message = validRequest.isHidable() ? "숨김" : "노출";
        List<InstantLogContext> logs = validRequest.getSalesEventIds()
                .stream()
                .map(eid -> InstantLogContext.builder()
                        .refType(DomainType.SALES_EVENT)
                        .refId(eid)
                        .message(MessageUtils.format("ko - {}", message))
                        .build())
                .collect(Collectors.toList());
        transactionTemplate.executeMainWritableTransaction(() -> revisionService.registerInstantLogs(logs));
    }

    private Map<String, List<String>> validationSalesEvents(List<SalesEventContainer> salesEventContainers) {
        Map<String, List<String>> validationMessagesByEventCodes = new TreeMap<>();

        for (SalesEventContainer container : salesEventContainers) {

            SalesEvent salesEvent = container.getSalesEvent();

            if (salesEvent.getTrashYn().toBoolean()
                    || salesEvent.getTreatment() == null || salesEvent.getTreatment().getId() == Constant.Entity.NOT_EXIST_ID) {
                validationMessagesByEventCodes.put(salesEvent.getEventCode(), List.of("대표시술 미지정"));
                continue;
            }

            if (!salesEvent.getUseYn().toBoolean()) {
                validationMessagesByEventCodes.put(salesEvent.getEventCode(), List.of("비활성화된 이벤트로 관리자에 문의해주세요"));
                continue;
            }

            try {
                SalesEventMutationRequest salesEventMutationRequest = makeSalesEventMutationRequest(container);
                List<FieldMessagePair> result = SalesEventValidator.validate(
                        salesEventMutationRequest, mediaService, salesEventImageService, true);
                if (CollectionUtils.isNotEmpty(result)) {
                    List<String> messages = result.stream().map(FieldMessagePair::getMessage).collect(Collectors.toList());
                    validationMessagesByEventCodes.put(salesEvent.getEventCode(), messages);
                    continue;
                }
            } catch (DomainValidationException e) {
                validationMessagesByEventCodes.put(salesEvent.getEventCode(), List.of("관리자에 문의해주세요."));
                continue;
            }
        }

        return validationMessagesByEventCodes;
    }

    private SalesEventMutationRequest makeSalesEventMutationRequest(SalesEventContainer salesEventContainer) {
        Map<SalesEventImageType, MultiLanguageType<List<SalesEventImage>>> images = salesEventContainer.fetchLocaleSalesEventImageMap();

        SalesEvent salesEvent = salesEventContainer.getSalesEvent();
        SalesEventMultiLanguage salesEventMultiLanguage = LocaleTextResponseFactory.salesEventMultiLanguage(salesEvent);
        SalesEventRequestItem salesEventRequestItem = SalesEventRequestItem.builder()
                .id(salesEvent.getId())
                .styleColor(salesEvent.getStyleColor())
                .localeName(salesEventMultiLanguage.getNames())
                .localeSubName(salesEventMultiLanguage.getSubNames())
                .representativeSolutionTagIds(salesEvent.getRepresentativeSolutionTagIds())
                .representativeTreatmentId(salesEvent.getTreatment().getId())
                .localeRequireTime(salesEventMultiLanguage.getRequireTimes())
                .localeAnesthesia(salesEventMultiLanguage.getAnesthesias())
                .localeDowntime(salesEventMultiLanguage.getDowntimes())
                .localeTreatmentEffectAppearsTime(salesEventMultiLanguage.getTreatmentEffectAppearsTimes())
                .localeCategoryTags(salesEventMultiLanguage.getCategoryTags())
                .build();

        Function<TitleContentObject, TitleContentObjectRequest> convertTitleContentObject = tco
                -> Optional.ofNullable(tco)
                .map(x -> TitleContentObjectRequest.builder()
                        .title(x.getTitle())
                        .content(x.getContent())
                        .build())
                .orElse(null);
        Function<List<TitleContentObject>, List<TitleContentObjectRequest>> convertTitleContentObjects = tcol -> {
            if (tcol == null) {
                return null;
            }
            return tcol.stream().map(convertTitleContentObject).collect(Collectors.toList());
        };

        SalesEventTreatmentLibraryRequestItem seTreatmentLibraryRequestItem = salesEventContainer.getSalesEventTreatmentLibrary()
                .map(setl -> SalesEventTreatmentLibraryRequestItem.builder()
                        .localeIntroduction(MultiLanguageType.<List<TitleContentObjectRequest>>builder()
                                .ko(convertTitleContentObjects.apply(setl.getIntroductionKo()))
                                .en(convertTitleContentObjects.apply(setl.getIntroductionEn()))
                                .zh(convertTitleContentObjects.apply(setl.getIntroductionZh()))
                                .ja(convertTitleContentObjects.apply(setl.getIntroductionJa()))
                                .build())
                        .suggestionCycleKo(SuggestionCycleTimesObject.from(setl.getSuggestionCycleKo()))
                        .suggestionTimesKo(SuggestionCycleTimesObject.from(setl.getSuggestionTimesKo()))
                        .localeMerits(MultiLanguageType.<List<TitleContentObjectRequest>>builder()
                                .ko(convertTitleContentObjects.apply(setl.getMeritsKo()))
                                .en(convertTitleContentObjects.apply(setl.getMeritsEn()))
                                .zh(convertTitleContentObjects.apply(setl.getMeritsZh()))
                                .ja(convertTitleContentObjects.apply(setl.getMeritsJa()))
                                .build())
                        .localeFaqs(MultiLanguageType.<List<TitleContentObjectRequest>>builder()
                                .ko(convertTitleContentObjects.apply(setl.getFaqsKo()))
                                .en(convertTitleContentObjects.apply(setl.getFaqsEn()))
                                .zh(convertTitleContentObjects.apply(setl.getFaqsZh()))
                                .ja(convertTitleContentObjects.apply(setl.getFaqsJa()))
                                .build())
                        .localePrecautions(MultiLanguageType.<List<String>>builder()
                                .ko(setl.getPrecautionsKo())
                                .en(setl.getPrecautionsEn())
                                .zh(setl.getPrecautionsZh())
                                .ja(setl.getPrecautionsJa())
                                .build())
                        .localeTreatmentProcess(MultiLanguageType.<List<String>>builder()
                                .ko(setl.getProcessKo())
                                .en(setl.getProcessEn())
                                .zh(setl.getProcessZh())
                                .ja(setl.getProcessJa())
                                .build())
                        .treatmentPrincipleIds(salesEventContainer.getTreatmentPrincipleUsages()
                                .stream()
                                .map(x -> x.getTreatmentPrinciple().getId())
                                .collect(Collectors.toList()))
                        .suggestionTargets(setl.getSuggestionTargets())
                        .build())
                .orElse(null);

        Map<Long, List<Long>> treatmentIdsBySalesProduct = salesEventContainer.getSalesProductAsTreatments()
                .stream()
                .collect(Collectors.groupingBy(x -> x.getSalesProduct().getId(),
                        Collectors.mapping(x -> x.getTreatment().getId(), Collectors.toList())));

        Map<Language, List<SalesProductRequestItem>> salesProducts = salesEventContainer.getSalesProducts()
                .stream()
                .map(sp -> SalesProductRequestItem.builder()
                        .id(sp.getId())
                        .type(sp.getType())
                        .treatmentIds(treatmentIdsBySalesProduct.get(sp.getId()))
                        .displayName(Optional.ofNullable(sp.getDisplayName()).orElse(sp.getDisplayNameKo()))
                        .description(Optional.ofNullable(sp.getDescription()).orElse(sp.getDescriptionKo()))
                        .salesPrice(sp.getSalesPrice())
                        .treatmentCount(sp.getTreatmentCount())
                        .exposureConditions(sp.getExposureConditions())
                        .oneTimeRegularPrice(sp.getOneTimeRegularPrice())
                        .associatedSalesProductId(sp.getAssociatedSalesProductId())
                        .createType(sp.getCreateType())
                        .build())
                .collect(Collectors.groupingBy(x -> x.getExposureConditions()
                        .stream()
                        .filter(SalesProductExposureCondition::isLanguageCondition)
                        .map(y -> Optional.ofNullable(y.toLanguage()).orElse(Language.KOREAN))
                        .findFirst()
                        .orElse(Language.KOREAN)));

        MultiLanguageType<List<SalesEventImage>> salesEventImageMultiLang = MultiLanguageType.of(
                images.values().stream().map(MultiLanguageType::toMap).map(Map::values).flatMap(Collection::stream)
                        .flatMap(List::stream).collect(Collectors.toList()), SalesEventImage::getLanguage);
        MultiLanguageType<List<SalesEventImageRequest>> salesEventImageRequestMultiLang = MultiLanguageType.convert(
                salesEventImageMultiLang,
                x -> SalesEventImageRequest.builder()
                        .id(x.getId())
                        .image(x.getImage())
                        .type(x.getType())
                        .directionType(x.getDirectionType())
                        .language(x.getLanguage())
                        .isPrivate(x.getPrivateYn().toBoolean())
                        .build());

        return SalesEventMutationRequest.builder()
                .salesEvent(salesEventRequestItem)
                .hospitalId(salesEvent.getHospital().getId())
                .salesEventTreatmentLibrary(seTreatmentLibraryRequestItem)
                .localeSalesProducts(MultiLanguageType.<List<SalesProductRequestItem>>builder()
                        .ko(salesProducts.get(Language.KOREAN))
                        .en(salesProducts.get(Language.ENGLISH))
                        .zh(salesProducts.get(Language.CHINESE))
                        .ja(salesProducts.get(Language.JAPANESE))
                        .build())
                .localeImages(salesEventImageRequestMultiLang)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dashboard/usecase/DashboardUseCase.java
================================================
package kr.co.yeoshin.admin.dashboard.usecase;

import java.time.LocalDate;
import java.util.List;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.NumberType;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.template.NumberTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.cpm.service.CpmAdService;
import kr.co.yeoshin.admin.cpm.service.model.CpmAdSummaryPayload;
import kr.co.yeoshin.admin.dashboard.service.DashboardService;
import kr.co.yeoshin.admin.dashboard.service.model.SalesEventStat;
import kr.co.yeoshin.admin.dashboard.usecase.model.CpmAdDashboardPayload;
import kr.co.yeoshin.admin.dashboard.usecase.model.SalesEventDashboardPayload;
import kr.co.yeoshin.admin.exception.DashboardException;
import kr.co.yeoshin.common.cpm.model.CpmAdWhereCondition;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class DashboardUseCase {

    private final DashboardService dashboardService;
    private final CpmAdService cpmAdService;
    private final TransactionTemplate transactionTemplate;

    public SalesEventDashboardPayload retrieveSalesEventDashboard() {
        long hospitalId = DiagnosticContext.currentHospitalId()
                .orElseThrow(() -> new DashboardException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID));

        SalesEventStat stats = transactionTemplate.executeMainReadableTransaction(
                () -> dashboardService.retrieveSalesEventStat(hospitalId));

        return SalesEventDashboardPayload.builder()
                .stats(stats)
                .build();
    }

    public CpmAdDashboardPayload retrieveCpmAdDashboard(int minusDay, int periodDayCount) {
        long hospitalId = DiagnosticContext.currentHospitalId()
                .orElseThrow(() -> new DashboardException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID));

        LocalDate reportAt = LocalDate.now().minusDays(minusDay);

        return transactionTemplate.executeMainReadableTransaction(() -> {
            CpmAdDashboardPayload cpmAdDashboardPayload = dashboardService.retrieveCpmAd(hospitalId, reportAt);

            CpmAdSummaryPayload cpmAdSummaryPayload = cpmAdService.retrieveSummaryCpmAd(CpmAdWhereCondition.builder()
                    .hospitalIds(List.of(hospitalId))
                    .fromReportAt(reportAt.minusDays(periodDayCount - 1))
                    .toReportAt(reportAt)
                    .build());

            cpmAdDashboardPayload = cpmAdDashboardPayload.toBuilder()
                    .periodCpmAdReportFigure(cpmAdSummaryPayload.getSummaryFiguresByHospitalId())
                    .periodDayCount(NumberTemplate.builder().type(NumberType.INTEGER).value(periodDayCount).build())
                    .build();

            return cpmAdDashboardPayload;
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dashboard/usecase/model/CpmAdDashboardPayload.java
================================================
package kr.co.yeoshin.admin.dashboard.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder(toBuilder = true)
public class CpmAdDashboardPayload implements PlusAccessible {

    private CpmAdConfigTemplate cpmAdConfig;
    private CpmAdReportFigureTemplate accumulateCpmAdReportFigure;
    private CpmAdHospitalReportDailyShortTemplate cpmAdHospitalReportDaily;
    private FigureTemplate lastYearSalesEventScrapCount;
    private CpmAdReportFigureTemplate periodCpmAdReportFigure;
    private NumberTemplate periodDayCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dashboard/usecase/model/SalesEventDashboardPayload.java
================================================
package kr.co.yeoshin.admin.dashboard.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.dashboard.service.model.SalesEventStat;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventDashboardPayload implements PlusAccessible {
    private SalesEventStat stats;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/SearchDictionaryUseCase.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase;

import java.util.List;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.dictionary.controller.model.*;
import kr.co.yeoshin.admin.dictionary.service.SearchDictionaryService;
import kr.co.yeoshin.admin.dictionary.usecase.model.*;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class SearchDictionaryUseCase {

    private final SearchDictionaryService searchDictionaryService;
    private final TransactionTemplate transactionTemplate;

    public SearchDictionaryPageablePayload getWords(SearchDictionaryFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> searchDictionaryService.retrieveWords(request));
    }

    public SearchDictionaryPayload insertWord(SearchDictionaryRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.registerWord(request));
    }

    public BoolPayload updateWord(long id, SearchDictionaryRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.updateWord(id, request));
    }

    public BoolPayload deleteWords(List<Long> ids) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.deleteWords(ids));
    }

    public RecommendRankingKeywordPageablePayload getKeywords(RecommendKeywordFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> searchDictionaryService.retrieveKeywords(request));
    }

    public RecommendRankingKeywordPayload insertKeyword(RecommendKeywordMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.insertKeyword(request));
    }

    public RecommendRankingKeywordsPayload insertKeywords(RecommendKeywordBulkMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.insertKeywords(request));
    }

    public BoolPayload updateKeyword(long keywordId, RecommendKeywordMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> searchDictionaryService.updateKeyword(keywordId, request));
    }

    public RecommendRankingKeywordsPayload updateKeywords(long groupId, RecommendKeywordBulkMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.updateKeywords(groupId, request));
    }

    public BoolPayload deleteKeyword(List<Long> keywordIds) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.deleteKeyword(keywordIds));
    }

    public TabooDictionaryPageablePayload retrieveTabooWords(TabooDictionaryFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> searchDictionaryService.retrieveTabooWords(request));
    }

    public TabooDictionaryPayload retrieveTabooWord(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> searchDictionaryService.retrieveTabooWord(id));
    }

    public TabooDictionaryPayload registerTabooWord(TabooDictionaryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.registerTabooWord(request));
    }

    public BoolPayload updateTabooWord(long id, TabooDictionaryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.updateWord(id, request));
    }

    public BoolPayload deleteTabooWord(long id) {
        return transactionTemplate.executeMainWritableTransaction(() -> searchDictionaryService.deleteTabooWord(id));
    }


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/RecommendRankingKeywordPageablePayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.RecommendKeywordTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RecommendRankingKeywordPageablePayload {

    private List<RecommendKeywordTemplate> recommendKeywords;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/RecommendRankingKeywordPayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import kr.co.yeoshin.admin.common.model.template.RecommendKeywordTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RecommendRankingKeywordPayload {

    private RecommendKeywordTemplate recommendKeyword;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/RecommendRankingKeywordsPayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.RecommendKeywordTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RecommendRankingKeywordsPayload {

    private List<RecommendKeywordTemplate> recommendKeywords;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/SearchDictionaryPageablePayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.SearchDictionaryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SearchDictionaryPageablePayload {

    private List<SearchDictionaryTemplate> dictionary;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/SearchDictionaryPayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import kr.co.yeoshin.admin.common.model.template.SearchDictionaryTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SearchDictionaryPayload {

    private SearchDictionaryTemplate dictionary;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/TabooDictionaryPageablePayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TabooDictionaryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TabooDictionaryPageablePayload {

    private List<TabooDictionaryTemplate> tabooDictionaries;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/dictionary/usecase/model/TabooDictionaryPayload.java
================================================
package kr.co.yeoshin.admin.dictionary.usecase.model;

import kr.co.yeoshin.admin.common.model.template.TabooDictionaryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TabooDictionaryPayload {

    private TabooDictionaryTemplate tabooDictionary;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/export/usecase/ExportUseCase.java
================================================
package kr.co.yeoshin.admin.export.usecase;

import java.util.Map;
import kr.co.yeoshin.admin.audit.service.AdminAuditService;
import kr.co.yeoshin.admin.audit.service.model.AdminAuditContext;
import kr.co.yeoshin.admin.audit.service.model.AdminExcelExportAuditContext;
import kr.co.yeoshin.admin.audit.service.model.meta.AdminExcelExportMeta;
import kr.co.yeoshin.admin.common.Constant.Header;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.config.props.ExportProps;
import kr.co.yeoshin.admin.config.props.SecurityProps.PrivacyMasking;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.ExportException;
import kr.co.yeoshin.admin.export.model.ExportResult;
import kr.co.yeoshin.admin.export.model.ExportType;
import kr.co.yeoshin.admin.export.service.ExportService;
import kr.co.yeoshin.admin.export.util.TokenUtils;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

@UseCase
@RequiredArgsConstructor
public class ExportUseCase {

    private final ExportService exportService;
    private final ExportProps exportProps;
    private final PrivacyMasking privacyMaskingProps;
    private final AdminAuditService adminAuditService;
    private final TransactionTemplate transactionTemplate;

    @Autowired
    public ExportUseCase(
            ExportService exportService,
            ApplicationProps applicationProps,
            AdminAuditService adminAuditService,
            TransactionTemplate transactionTemplate
    ) {
        this.exportService = exportService;
        this.exportProps = applicationProps.getExport();
        this.privacyMaskingProps = applicationProps.getSecurity().getPrivacyMasking();
        this.adminAuditService = adminAuditService;
        this.transactionTemplate = transactionTemplate;
    }

    public ExportResult export(String token) {
        Map<String, Object> jwtPayload;
        try {
            jwtPayload = TokenUtils.decode(token, exportProps.getToken().getSignature());
        } catch (Exception e) {
            throw new ExportException(CommonCode.BAD_REQUEST, "Invalid token");
        }

        @SuppressWarnings("unchecked")
        Map<String, Object> payload = (Map<String, Object>) MapUtils.getMap(jwtPayload, "payload");

        ExportType type = ExportType.find(MapUtils.getString(payload, "exportType"));

        if (type == null) {
            throw new ExportException(CommonCode.BAD_REQUEST, "Invalid export type");
        }

        String unmaskingReason = StringUtils.EMPTY;
        boolean isDataMasking = true;
        boolean isIncludePrivacyData = type.isIncludePrivacyData(payload);
        if (isIncludePrivacyData) {
            // TODO FE에서 x-ys-plus-data-masking 헤더 적용한 이후에 needToCheckReason 조건문 삭제
            boolean needToCheckReason = privacyMaskingProps.isEnabled()
                    || (privacyMaskingProps.isExperiment()
                    && "false".equals(DiagnosticContext.header().experiments().get(Header.EXPERIMENT_DATA_MASKING)));

            isDataMasking = !needToCheckReason || DiagnosticContext.header().isDataMasking();
            if (!isDataMasking) {
                unmaskingReason = MapUtils.getString(payload, "unmaskingReason");
                if (StringUtils.isBlank(unmaskingReason)) {
                    throw new ExportException(CommonCode.BAD_REQUEST, "unmasking_reason is empty");
                }
            }
        }

        ExportResult result = exportService.export(payload);

        if (isIncludePrivacyData) {
            AdminAuditContext auditContext = AdminExcelExportAuditContext.builder()
                    .adminId(DiagnosticContext.fetchAdminId())
                    .successYn(YN.of(result.isSucceed()))
                    .meta(AdminExcelExportMeta.builder()
                            .downloadMenu(type.getMenuName(payload))
                            .filename(result.getFileName())
                            .rowCount(result.getRowCount())
                            .isMasking(isDataMasking)
                            .unmaskingReason(unmaskingReason)
                            .build())
                    .build();

            transactionTemplate.executeMainWritableTransaction(() -> adminAuditService.writeAdminActivity(auditContext));
        }

        return result;
    }

    public String createToken(Map<String, Object> payload) {
        return TokenUtils.encode(payload,
                exportProps.getToken().getExpires().getSeconds(),
                exportProps.getToken().getSignature());
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/face/usecase/FaceAnalysisUseCase.java
================================================
package kr.co.yeoshin.admin.face.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.face.controller.model.FaceAnalysisFilterRequest;
import kr.co.yeoshin.admin.face.service.FaceAnalysisService;
import kr.co.yeoshin.admin.face.usecase.model.FaceAnalysisReportPageablePayload;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@UseCase
public class FaceAnalysisUseCase {

    private final FaceAnalysisService faceAnalysisService;
    private final TransactionTemplate transactionTemplate;

    public FaceAnalysisReportPageablePayload listReports(FaceAnalysisFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> faceAnalysisService.retrieveReports(request));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/face/usecase/model/FaceAnalysisReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.face.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.FaceAnalysisReportTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FaceAnalysisReportPageablePayload {

    private List<FaceAnalysisReportTemplate> faceAnalysisReports;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/service/model/HospitalPageableTemplate.java
================================================
package kr.co.yeoshin.admin.hospital.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalPageableTemplate {

    private List<HospitalTemplate> hospitals;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/service/model/HospitalSuggestPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalSuggestTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalSuggestPageablePayload {

    private List<HospitalSuggestTemplate> hospitalSuggest;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/HospitalDepartmentUseCase.java
================================================
package kr.co.yeoshin.admin.hospital.usecase;

import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalDepartmentsPayload;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartmentAsHospitalTreatment;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class HospitalDepartmentUseCase {

    private final HospitalService hospitalService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public HospitalDepartmentsPayload hospitalDepartments(boolean isVisible) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<HospitalDepartment> hospitalDepartments = hospitalService.retrieveHospitalDepartments(YN.of(isVisible));

            List<HospitalDepartmentAsHospitalTreatment> hospitalDepartmentAsHospitalTreatments =
                    hospitalService.fetchHospitalDepartmentAsHospitalTreatments(hospitalDepartments.stream()
                            .map(HospitalDepartment::getId)
                            .collect(Collectors.toSet()));

            return HospitalDepartmentsPayload.builder()
                    .hospitalDepartments(hospitalDepartments.stream()
                            .map(payloadFactory::hospitalDepartmentTemplate)
                            .collect(Collectors.toList()))
                    .hospitalTreatmentsByHospitalDepartmentIds(hospitalDepartmentAsHospitalTreatments.stream()
                            .collect(Collectors.groupingBy(it -> it.getHospitalDepartment().getId(),
                                    Collectors.mapping(it -> payloadFactory.hospitalTreatmentTemplate(it.getHospitalTreatment()),
                                            Collectors.toList()))))
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/HospitalDoctorUseCase.java
================================================
package kr.co.yeoshin.admin.hospital.usecase;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.validation.Valid;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.HospitalDoctorTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.hospital.component.model.HospitalDiff;
import kr.co.yeoshin.admin.hospital.component.model.HospitalDoctorState;
import kr.co.yeoshin.admin.hospital.component.model.HospitalDoctorStateDiff;
import kr.co.yeoshin.admin.hospital.controller.model.*;
import kr.co.yeoshin.admin.hospital.service.HospitalDoctorService;
import kr.co.yeoshin.admin.hospital.service.HospitalNotificationService;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.service.model.HospitalDoctorContainer;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalDoctorApprovalPageablePayload;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalDoctorPageablePayload;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalDoctorPayload;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.hospital.entity.*;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalStatus;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalType;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;

@UseCase
@RequiredArgsConstructor
public class HospitalDoctorUseCase {

    private final HospitalDoctorService hospitalDoctorService;
    private final HospitalService hospitalService;
    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final HospitalNotificationService hospitalNotificationService;

    public HospitalDoctorPageablePayload retrieveDoctors(@Valid HospitalDoctorFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<HospitalDoctor> page = hospitalDoctorService.retrieveHospitalDoctors(request.toWhereCondition());

            List<HospitalDoctor> hospitalDoctors = page.getContent();

            List<Long> hospitalDoctorIds = hospitalDoctors.stream()
                    .map(HospitalDoctor::getId)
                    .collect(Collectors.toList());

            List<HospitalDoctorAsHospitalDepartment> hospitalDoctorAsHospitalDepartments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalDepartmentsByHospitalDoctorIds(hospitalDoctorIds);

            List<HospitalDoctorAsHospitalTreatment> hospitalDoctorAsHospitalTreatments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalTreatmentsByHospitalDoctorIds(hospitalDoctorIds);

            List<HospitalDoctorApproval> hospitalDoctorApprovals =
                    hospitalDoctorService.retrieveHospitalDoctorApprovalsByHospitalDoctorIds(hospitalDoctorIds);

            List<HospitalAsHospitalDoctor> hospitalAsHospitalDoctors =
                    hospitalService.fetchHospitalAsHospitalDoctorsByHospitalDoctorIds(hospitalDoctorIds);

            return HospitalDoctorPageablePayload.builder()
                    .hospitalDoctors(hospitalDoctors.stream()
                            .map(payloadFactory::hospitalDoctorTemplate)
                            .collect(Collectors.toList()))
                    .hospitalDepartmentsByHospitalDoctorId(hospitalDoctorAsHospitalDepartments.stream()
                            .collect(Collectors.groupingBy(it -> it.getHospitalDoctor().getId(),
                                    Collectors.mapping(
                                            it -> payloadFactory.hospitalDepartmentTemplate(it.getHospitalDepartment()),
                                            Collectors.toList()))))
                    .hospitalTreatmentsByHospitalDoctorId(hospitalDoctorAsHospitalTreatments.stream()
                            .collect(Collectors.groupingBy(it -> it.getHospitalDoctor().getId(),
                                    Collectors.mapping(
                                            it -> payloadFactory.hospitalTreatmentTemplate(it.getHospitalTreatment()),
                                            Collectors.toList()))))
                    .hospitalDoctorApprovalsByHospitalDoctorId(hospitalDoctorApprovals.stream()
                            .filter(it -> it.getLatestYn().toBoolean())
                            .collect(Collectors.toMap(it -> it.getHospitalDoctor().getId(),
                                    payloadFactory::hospitalDoctorApprovalTemplate, (a, b) -> a)))
                    .hospitalRelationsByHospitalDoctorId(hospitalAsHospitalDoctors.stream()
                            .collect(Collectors.groupingBy(it -> it.getHospitalDoctor().getId(),
                                    Collectors.mapping(it ->
                                                    HospitalDoctorPageablePayload.HospitalAsHospitalDoctorRelation.builder()
                                                            .hospital(payloadFactory.hospitalShortTemplate(it.getHospital()))
                                                            .isVisible(it.getActivateYn().toBoolean())
                                                            .priority(it.getPriority())
                                                            .build(),
                                            Collectors.toList()))))
                    .pageable(payloadFactory.pageableTemplate(page))
                    .build();
        });
    }

    public HospitalDoctorPayload retrieveDoctor(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            HospitalDoctor hospitalDoctor = hospitalDoctorService.retrieveHospitalDoctor(id)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_DOCTOR_NOT_EXIST));

            List<HospitalDoctorAsHospitalDepartment> hospitalDoctorAsHospitalDepartments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalDepartmentsByHospitalDoctorIds(
                            Set.of(hospitalDoctor.getId()));

            List<HospitalDoctorAsHospitalTreatment> hospitalDoctorAsHospitalTreatments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalTreatmentsByHospitalDoctorIds(
                            Set.of(hospitalDoctor.getId()));

            List<HospitalAsHospitalDoctor> hospitalAsHospitalDoctors =
                    hospitalService.fetchHospitalAsHospitalDoctorsByHospitalDoctorIds(Set.of(hospitalDoctor.getId()));

            HospitalDoctorApproval approval =
                    hospitalDoctorService.retrieveHospitalDoctorApprovalsByHospitalDoctorIds(Set.of(
                                    hospitalDoctor.getId()))
                            .stream()
                            .filter(it -> it.getLatestYn().toBoolean())
                            .findFirst()
                            .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_DOCTOR_APPROVAL_NOT_EXIST));

            return HospitalDoctorPayload.builder()
                    .hospitalDoctor(payloadFactory.hospitalDoctorTemplate(hospitalDoctor))
                    .hospitalDoctorApproval(payloadFactory.hospitalDoctorApprovalTemplate(approval))
                    .hospitalDepartments(hospitalDoctorAsHospitalDepartments.stream()
                            .map(it -> payloadFactory.hospitalDepartmentTemplate(it.getHospitalDepartment()))
                            .collect(Collectors.toList()))
                    .hospitalTreatments(hospitalDoctorAsHospitalTreatments.stream()
                            .map(it -> payloadFactory.hospitalTreatmentTemplate(it.getHospitalTreatment()))
                            .collect(Collectors.toList()))
                    .hospitals(hospitalAsHospitalDoctors.stream()
                            .map(it -> payloadFactory.hospitalShortTemplate(it.getHospital()))
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public BoolPayload registerHospitalDoctor(HospitalDoctorMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalDoctor hospitalDoctor = hospitalDoctorService.registerHospitalDoctor(request);

            hospitalDoctorService.modifyHospitalAsHospitalDoctor(
                    hospitalDoctor.getId(), request.getHospitalIds());

            hospitalDoctorService.modifyHospitalDoctorAsHospitalDepartment(
                    hospitalDoctor.getId(),
                    request.getHospitalDepartmentIds(),
                    request.getHospitalTreatmentIds());

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(Collections.emptySet())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .addAll(hospitalDoctor.getAllImages())
                            .build())
                    .build());

            hospitalDoctorService.registerHospitalDoctorApproval(hospitalDoctor.getId(),
                    DiagnosticContext.currentHospitalId().orElse(null),
                    HospitalDoctorApprovalType.REGISTRATION);

            hospitalNotificationService.notify(List.of(HospitalDiff.DiffName.DOCTOR));

            return BoolPayload.of(true);
        });
    }

    public BoolPayload modifyHospitalDoctor(long id, HospitalDoctorMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalDoctor hospitalDoctor = hospitalDoctorService.retrieveHospitalDoctor(id)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_DOCTOR_NOT_EXIST));
            List<HospitalDepartment> hospitalDepartments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalDepartmentsByHospitalDoctorIds(
                                    List.of(hospitalDoctor.getId()))
                            .stream()
                            .map(HospitalDoctorAsHospitalDepartment::getHospitalDepartment)
                            .collect(Collectors.toList());
            List<HospitalTreatment> hospitalTreatments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalTreatmentsByHospitalDoctorIds(
                                    List.of(hospitalDoctor.getId()))
                            .stream()
                            .map(HospitalDoctorAsHospitalTreatment::getHospitalTreatment)
                            .collect(Collectors.toList());

            HospitalDoctorState beforeDoctor = HospitalDoctorState.of(hospitalDoctor, hospitalDepartments, hospitalTreatments);

            if (DiagnosticContext.isPlusAdmin()
                    && hospitalDoctor.getApprovalStatus() == HospitalDoctorApprovalStatus.PENDING) {
                throw new HospitalException(HospitalCode.HOSPITAL_DOCTOR_UNABLE_TO_MODIFICATION_STATUS);
            }

            hospitalDoctorService.modifyHospitalAsHospitalDoctor(hospitalDoctor.getId(), request.getHospitalIds());

            HospitalDoctor modified = hospitalDoctorService.modifyHospitalDoctor(hospitalDoctor.getId(), request);

            hospitalDoctorService.modifyHospitalDoctorActivation(hospitalDoctor.getId(),
                    modified.getApprovalStatus() == HospitalDoctorApprovalStatus.APPROVED);

            HospitalDoctorContainer hospitalDoctorDepartments = hospitalDoctorService.modifyHospitalDoctorAsHospitalDepartment(
                    hospitalDoctor.getId(),
                    request.getHospitalDepartmentIds(),
                    request.getHospitalTreatmentIds());

            HospitalDoctorState afterDoctor =
                    HospitalDoctorState.of(modified,
                            hospitalDoctorDepartments.getHospitalDepartments(),
                            hospitalDoctorDepartments.getHospitalTreatments());

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .addAll(hospitalDoctor.getAllImages())
                            .build())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .addAll(modified.getAllImages())
                            .build())
                    .build());

            hospitalDoctorService.registerHospitalDoctorApproval(hospitalDoctor.getId(),
                    DiagnosticContext.currentHospitalId().orElse(null),
                    HospitalDoctorApprovalType.MODIFICATION);

            hospitalNotificationService.notify(List.of(HospitalDoctorStateDiff.of(beforeDoctor, afterDoctor)));

            return BoolPayload.of(true);
        });
    }

    public HospitalDoctorApprovalPageablePayload retrieveHospitalDoctorApprovals(HospitalDoctorApprovalFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<HospitalDoctorApproval> page = hospitalDoctorService.retrieveHospitalDoctorApprovals(
                    request.toWhereCondition(DiagnosticContext.adminHospitalRole()));

            List<HospitalDoctor> hospitalDoctors = hospitalDoctorService.retrieveHospitalDoctors(page.getContent().stream()
                    .map(it -> it.getHospitalDoctor().getId())
                    .collect(Collectors.toSet()));

            List<HospitalDoctorAsHospitalDepartment> hospitalDoctorAsHospitalDepartments =
                    hospitalDoctorService.fetchHospitalDoctorAsHospitalDepartmentsByHospitalDoctorIds(page.getContent()
                            .stream()
                            .map(it -> it.getHospitalDoctor().getId())
                            .collect(Collectors.toSet()));

            List<HospitalTemplate> hospitals = hospitalService.retrieveHospitals(page.getContent().stream()
                    .filter(it -> Objects.nonNull(it.getHospital()))
                    .map(it -> it.getHospital().getId())
                    .collect(Collectors.toSet()));

            return HospitalDoctorApprovalPageablePayload.builder()
                    .hospitalDoctorApprovals(page.getContent().stream()
                            .map(payloadFactory::hospitalDoctorApprovalTemplate)
                            .collect(Collectors.toList()))
                    .hospitalDoctorsById(hospitalDoctors.stream()
                            .map(payloadFactory::hospitalDoctorTemplate)
                            .collect(Collectors.toMap(HospitalDoctorTemplate::getId, Function.identity(), (a, b) -> a)))
                    .hospitalDepartmentsByHospitalDoctorId(hospitalDoctorAsHospitalDepartments.stream()
                            .collect(Collectors.groupingBy(it -> it.getHospitalDoctor().getId(),
                                    Collectors.mapping(
                                            it -> payloadFactory.hospitalDepartmentTemplate(it.getHospitalDepartment()),
                                            Collectors.toList()))))
                    .hospitalsById(hospitals.stream()
                            .collect(Collectors.toMap(HospitalTemplate::getId, Function.identity(), (a, b) -> a)))
                    .pageable(payloadFactory.pageableTemplate(page))
                    .build();
        });
    }

    public BoolPayload modifyApprovalStatus(long hospitalDoctorId, HospitalDoctorApprovalStatusMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalDoctorApproval approval = hospitalDoctorService.modifyHospitalDoctorApproval(
                    hospitalDoctorId,
                    request.getApprovalStatus(),
                    request.getRejectReasonCode(),
                    request.getRejectReason());

            hospitalDoctorService.modifyHospitalDoctorActivation(hospitalDoctorId,
                    approval.getStatus() == HospitalDoctorApprovalStatus.APPROVED);

            return BoolPayload.of(true);
        });
    }

    public BoolPayload registerHospitalDoctorDryRun(HospitalDoctorDryRunRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            if (StringUtils.isBlank(request.getNames().getKo())) {
                throw new HospitalException(CommonCode.BAD_REQUEST);
            }

            List<HospitalAsHospitalDoctor> hospitalAsHospitalDoctors =
                    hospitalService.fetchHospitalAsHospitalDoctorsByHospitalId(request.getHospitalId());

            if (hospitalAsHospitalDoctors.isEmpty()) {
                return BoolPayload.of(true);
            }

            List<HospitalDoctor> hospitalDoctors =
                    hospitalAsHospitalDoctors.stream()
                            .map(HospitalAsHospitalDoctor::getHospitalDoctor)
                            .collect(Collectors.toList());

            return BoolPayload.builder()
                    .result(hospitalDoctors.stream()
                            .filter(it -> StringUtils.equals(
                                    StringUtils.trim(it.getNameKo()),
                                    StringUtils.trim(request.getNames().getKo())))
                            .noneMatch(it -> StringUtils.equals(it.getLicenseNumber(), request.getLicenseNumber())))
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/HospitalManagementContactUseCase.java
================================================
package kr.co.yeoshin.admin.hospital.usecase;

import java.util.List;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.HospitalManagementContactTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalManagementContactMutationRequest;
import kr.co.yeoshin.admin.hospital.service.HospitalManagementContactService;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalManagementContactPayload;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalManagementContactsPayload;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@UseCase
public class HospitalManagementContactUseCase {

    private final HospitalManagementContactService managementContactService;
    private final HospitalService hospitalService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public HospitalManagementContactsPayload retrieveManagementContacts(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Hospital hospital = hospitalService.fetchHospitalByHospitalId(hospitalId)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));
            List<HospitalManagementContactTemplate> managementContacts =
                    managementContactService.retrieveManagementContacts(hospitalId);

            return HospitalManagementContactsPayload.builder()
                    .admin(payloadFactory.adminShortTemplate(hospital.getAdmin()))
                    .managementContacts(managementContacts)
                    .build();
        });
    }

    public HospitalManagementContactPayload registerManagementContact(
            long hospitalId, HospitalManagementContactMutationRequest request) {
        HospitalManagementContactTemplate managementContact = transactionTemplate.executeMainWritableTransaction(
                () -> managementContactService.registerManagementContact(hospitalId, request));

        return HospitalManagementContactPayload.builder()
                .managementContact(managementContact)
                .build();
    }

    public HospitalManagementContactPayload retrieveManagementContact(long hospitalId, long contactId) {
        HospitalManagementContactTemplate managementContact = transactionTemplate.executeMainReadableTransaction(
                () -> managementContactService.retrieveManagementContact(contactId, hospitalId));

        return HospitalManagementContactPayload.builder()
                .managementContact(managementContact)
                .build();
    }

    public HospitalManagementContactPayload modifyManagementContact(
            long hospitalId, long contactId, HospitalManagementContactMutationRequest request) {
        HospitalManagementContactTemplate managementContact = transactionTemplate.executeMainWritableTransaction(
                () -> managementContactService.modifyManagementContact(hospitalId, contactId, request));

        return HospitalManagementContactPayload.builder()
                .managementContact(managementContact)
                .build();
    }

    public BoolPayload removeManagementContact(long contactId, long hospitalId) {
        boolean result = transactionTemplate.executeMainWritableTransaction(
                () -> managementContactService.removeManagementContact(contactId, hospitalId));

        return BoolPayload.builder()
                .result(result)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/HospitalOnboardUseCase.java
================================================
package kr.co.yeoshin.admin.hospital.usecase;

import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.common.Constant.Admin;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalOnboardPageableTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalOnboardTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalOnboardFilterRequest;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalOnboardMemberFilterRequest;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.service.model.HospitalOnboardCompleteContext;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalOnboardCompleteStatPayload;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalOnboardMemberPageablePayload;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalOnboardPageablePayload;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalOnboardsPayload;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class HospitalOnboardUseCase {

    private final HospitalService hospitalService;
    private final AdminService adminService;
    private final TransactionTemplate transactionTemplate;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final QueueMessagePublisherTemplate queueMessagePublisherTemplate;

    public HospitalOnboardPageablePayload listHospitalOnboards(HospitalOnboardFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    HospitalOnboardPageableTemplate hospitalOnboard = hospitalService.retrieveHospitalOnboards(
                            request.toWhereCondition());

                    List<HospitalTemplate> hospitals = hospitalService.retrieveHospitals(
                            hospitalOnboard.getHospitalOnboards().stream()
                                    .map(HospitalOnboardTemplate::getHospitalId)
                                    .collect(Collectors.toList()));

                    List<AdminShortTemplate> admins = adminService.retrieveAdmins(hospitals.stream()
                            .flatMap(hospital -> Stream.of(hospital.getAdminId(), hospital.getSalesAdminId()))
                            .filter(Objects::nonNull)
                            .collect(Collectors.toSet()));

                    return HospitalOnboardPageablePayload.builder()
                            .hospitalOnboards(hospitalOnboard.getHospitalOnboards())
                            .hospitals(hospitals.stream()
                                    .collect(Collectors.toMap(HospitalTemplate::getId, Function.identity(), (a, b) -> a)))
                            .admins(admins.stream()
                                    .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity(), (a, b) -> a)))
                            .pageable(hospitalOnboard.getPageable())
                            .build();
                });
    }

    public HospitalOnboardsPayload listHospitalOnboards(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    List<HospitalOnboardTemplate> hospitalOnboard = hospitalService.retrieveHospitalOnboards(hospitalId);

                    List<HospitalTemplate> hospitals = hospitalService.retrieveHospitals(
                            hospitalOnboard.stream()
                                    .map(HospitalOnboardTemplate::getHospitalId)
                                    .collect(Collectors.toList()));

                    List<Long> adminIds = Stream.concat(
                            hospitals.stream()
                                    .flatMap(hospital -> Stream.of(hospital.getAdminId(), hospital.getSalesAdminId()))
                                    .filter(Objects::nonNull),
                            hospitalOnboard.stream()
                                    .map(HospitalOnboardTemplate::getCompleteAdminId)
                                    .filter(adminId -> adminId != Admin.ADMIN_NOT_EXIST_ID)
                    ).collect(Collectors.toList());

                    List<AdminShortTemplate> admins = adminService.retrieveAdmins(adminIds);

                    return HospitalOnboardsPayload.builder()
                            .hospitalOnboards(hospitalOnboard)
                            .hospitals(hospitals.stream()
                                    .collect(Collectors.toMap(HospitalTemplate::getId, Function.identity(), (a, b) -> a)))
                            .admins(admins.stream()
                                    .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity(), (a, b) -> a)))
                            .build();
                });
    }

    public HospitalOnboardMemberPageablePayload listHospitalOnboardMembers(HospitalOnboardMemberFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> hospitalService.retrieveHospitalOnboardMembers(request.toWhereCondition()));
    }


    public HospitalOnboardCompleteStatPayload hospitalOnboardCompleteStat(long onboardId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> hospitalService.retrieveHospitalOnboardCompleteStat(onboardId));
    }


    public BoolPayload hospitalOnboardComplete(long onboardId) {
        List<HospitalOnboardCompleteContext> hospitalOnboardCompleteContexts = transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.completeHospitalOnboard(onboardId));

        List<NhnKakaoAlimTalkNotificationContext> notificationContexts = hospitalOnboardCompleteContexts.stream()
                .map(alimTalkTemplateFactory::hospitalOnboardComplete)
                .collect(Collectors.toList());

        queueMessagePublisherTemplate.publishNotification(NotificationMessage.of(
                NotificationPayload.builder()
                        .alimTalk(notificationContexts)
                        .build()
        ));

        return BoolPayload.success();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/HospitalPartnershipUseCase.java
================================================
package kr.co.yeoshin.admin.hospital.usecase;

import java.time.DayOfWeek;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.CpmCode;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.code.PaymentCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.CpmAdConfigTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalPartnershipTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.PaymentNicepayConfigTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.cpm.service.CpmAdService;
import kr.co.yeoshin.admin.exception.CpmException;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.exception.PaymentException;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalConfigMutationRequest;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalPartnershipMutationRequest;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalPartnershipMutationRequest.HospitalAdminIds;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.service.model.SubMerchantApiResult;
import kr.co.yeoshin.admin.hospital.usecase.model.HospitalPartnershipPayload;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationHospitalConfigMutationRequest.OperationTime;
import kr.co.yeoshin.admin.reservation.service.ReservationWritableService;
import kr.co.yeoshin.admin.reservation.service.model.ReservationHospitalConfigRegister;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.admin.utils.NicepayUtils;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.code.type.CodeType;
import kr.co.yeoshin.common.cpm.entity.CpmAdConfig;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalPartnership;
import kr.co.yeoshin.common.hospital.type.DepositAutoTransType;
import kr.co.yeoshin.common.hospital.type.PartnershipStatus;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.payment.entity.PaymentNicepayConfig;
import kr.co.yeoshin.common.type.TimeInterval;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;

@RequiredArgsConstructor
@UseCase
public class HospitalPartnershipUseCase {

    private final HospitalService hospitalService;
    private final AdminService adminService;
    private final CpmAdService cpmAdService;
    private final PaymentService paymentService;
    private final ReservationWritableService reservationWritableService;
    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public HospitalPartnershipPayload registerHospitalPartnership(long hospitalId, HospitalPartnershipMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalTemplate hospital = hospitalService.retrieveHospital(hospitalId)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));

            HospitalAdminIds adminIds = request.getAdminIds();
            if (Objects.nonNull(adminIds)) {
                hospitalService.modifyHospitalAdmins(hospital.getId(), adminIds);
                adminService.removeHospitalRolePermissions(hospital.getId(), ImmutableSet.<Long>builder()
                        .add(hospital.getAdminId())
                        .add(hospital.getAdvertisingManagerId())
                        .build());

                registerRolePermissions(hospital.getId(), adminIds.getHospitalOwnerId(), Level.ROLE_HOSPITAL_OWNER);
                registerRolePermissions(hospital.getId(), adminIds.getAdvertisingManagerId(), Level.ROLE_HOSPITAL_MANAGER);
            }

            HospitalPartnership hospitalPartnership = hospitalService.registerHospitalPartnership(hospitalId, request);

            PaymentNicepayConfig paymentNicepayConfig =
                    paymentService.registerNicepayConfig(hospitalId,
                            Optional.ofNullable(request.getSubMerchantId())
                                    .filter(StringUtils::isNotBlank)
                                    .orElse(NicepayUtils.subMerchantId(hospitalId)));

            CpmAdConfig cpmAdConfig = cpmAdService.registerCpmAdConfig(hospitalId);

            reservationWritableService.registerHospitalConfig(ReservationHospitalConfigRegister.builder()
                    .hospitalId(hospitalId)
                    .mobileReservationYn(YN.N)
                    .hospitalCode(CodeType.HOSPITAL.createCode(hospitalId))
                    .crmLinkYn(YN.N)
                    .slot(5)
                    .slotTimeInterval(TimeInterval.HALF_HOUR)
                    .todayReservationYn(YN.Y)
                    .immediateReservationYn(YN.Y)
                    .autoConfirmReservationYn(YN.N)
                    .holidayReservationYn(YN.Y)
                    .build());

            reservationWritableService.upsertOperationTimes(hospitalId,
                    Arrays.stream(DayOfWeek.values())
                            .map(dayOfWeek -> OperationTime.builder()
                                    .dayOfWeek(dayOfWeek)
                                    .startTime(LocalTime.of(8, 0))
                                    .endTime(LocalTime.of(21, 0))
                                    .lunchStartTime(LocalTime.MIN)
                                    .lunchEndTime(LocalTime.MIN)
                                    .isHoliday(false)
                                    .build())
                            .collect(Collectors.toList()));

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaDomainType.HOSPITAL.getAccessibleType())
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(Collections.emptySet())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(hospitalPartnership.getBusinessLicenseImage())
                            .add(hospitalPartnership.getBankBookImage())
                            .build())
                    .build());

            request.getConfigs()
                    .forEach(it -> {
                        if (!it.isActivated()) {
                            hospitalService.removeHospitalConfig(hospitalId, it.getConfigType());
                        } else {
                            hospitalService.upsertHospitalConfig(hospital.getId(), HospitalConfigMutationRequest.builder()
                                    .configType(it.getConfigType())
                                    .value(it.getValue())
                                    .reason(it.getReason())
                                    .isActivated(it.isActivated())
                                    .build());
                        }
                    });

            Hospital modified = hospitalService.activatePartnership(hospital.getId(), request);

            SubMerchantApiResult subMerchantApiResult =
                    hospitalService.registerSubMerchant(hospitalPartnership, paymentNicepayConfig.getSubMerchantId());

            return HospitalPartnershipPayload.builder()
                    .hospital(payloadFactory.hospitalTemplate(modified))
                    .hospitalPartnership(payloadFactory.hospitalPartnershipTemplate(hospitalPartnership))
                    .paymentNicepayConfig(payloadFactory.paymentNicepayConfigTemplate(paymentNicepayConfig))
                    .cpmAdConfig(payloadFactory.cpmAdConfigTemplate(cpmAdConfig))
                    .subMerchantApiErrorCodes(subMerchantApiResult.getErrorCodes().stream()
                            .map(payloadFactory::codeTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public HospitalPartnershipPayload modifyHospitalPartnership(long hospitalId, HospitalPartnershipMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalTemplate hospital = hospitalService.retrieveHospital(hospitalId)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));

            // https://fastlane.atlassian.net/browse/PM-5015
            // 클라이언트 수정 후 해당 null 체크 제거
            Optional.ofNullable(request.getAdminIds())
                    .ifPresent(adminIds -> {
                        if (Objects.isNull(adminIds.getHospitalOwnerId())) {
                            throw new HospitalException(CommonCode.BAD_REQUEST);
                        }

                        hospitalService.modifyHospitalAdmins(hospital.getId(), adminIds);

                        adminService.removeHospitalRolePermissions(hospital.getId(), ImmutableSet.<Long>builder()
                                .add(hospital.getAdminId())
                                .add(hospital.getAdvertisingManagerId())
                                .build());

                        Optional.ofNullable(adminIds.getHospitalOwnerId())
                                .ifPresent(hospitalOwnerId -> adminService.registerHospitalRolePermission(hospital.getId(),
                                        hospitalOwnerId, Level.ROLE_HOSPITAL_OWNER));

                        Optional.ofNullable(adminIds.getAdvertisingManagerId())
                                .ifPresent(hospitalOwnerId -> adminService.registerHospitalRolePermission(hospital.getId(),
                                        adminIds.getAdvertisingManagerId(), Level.ROLE_HOSPITAL_MANAGER));
                    });

            PartnershipStatus previousStatus = hospital.getPartnershipStatus();

            CpmAdConfigTemplate cpmAdConfig = cpmAdService.retrieveCpmAdConfigByHospitalId(hospital.getId())
                    .orElseThrow(() -> new CpmException(CpmCode.CPM_AD_CONFIG_NOT_EXIST));

            if (previousStatus != request.getPartnershipStatus() &&
                    !previousStatus.isModifiableTo(request.getPartnershipStatus(), cpmAdConfig.getStatus())) {
                throw new HospitalException(HospitalCode.HOSPITAL_PARTNERSHIP_MUTATION_INVALID);
            }

            HospitalPartnershipTemplate hospitalPartnership =
                    hospitalService.retrieveHospitalPartnership(hospital.getId())
                            .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_PARTNERSHIP_NOT_EXIST));

            HospitalPartnership modifiedHospitalPartnership =
                    hospitalService.modifyHospitalPartnership(hospital.getId(), request);

            Hospital modifiedHospital = hospitalService.modifyPartnershipStatus(hospitalId, request.getPartnershipStatus());
            // https://fastlane.atlassian.net/browse/PM-5015
            // 클라이언트 수정 후 해당 null 체크 제거
            modifiedHospital.changeViewYn(InvokeSupporters.getOrDefaultIfNull(() ->
                    YN.of(request.getIsVisible()), modifiedHospital.getViewYn()));

            PaymentNicepayConfigTemplate paymentNicepayConfig =
                    paymentService.retrieveNicepayConfig(hospitalId)
                            .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_NICEPAY_CONFIG_NOT_EXIST));

            PaymentNicepayConfig modifiedPaymentNicepayConfig =
                    paymentService.modifyNicepayConfig(hospitalId, request.getSubMerchantId(),
                            YN.of(paymentNicepayConfig.isPreCancelAvailable()));

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaDomainType.HOSPITAL.getAccessibleType())
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .add(hospitalPartnership.getBusinessLicenseImageFileName())
                            .add(hospitalPartnership.getBankBookImageFileName())
                            .build())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(modifiedHospitalPartnership.getBusinessLicenseImage())
                            .add(modifiedHospitalPartnership.getBankBookImage())
                            .build())
                    .build());

            request.getConfigs()
                    .forEach(it -> {
                        if (!it.isActivated()) {
                            hospitalService.removeHospitalConfig(hospitalId, it.getConfigType());
                        } else {
                            hospitalService.upsertHospitalConfig(hospital.getId(), HospitalConfigMutationRequest.builder()
                                    .configType(it.getConfigType())
                                    .value(it.getValue())
                                    .reason(it.getReason())
                                    .isActivated(it.isActivated())
                                    .build());
                        }
                    });

            return HospitalPartnershipPayload.builder()
                    .hospital(payloadFactory.hospitalTemplate(modifiedHospital))
                    .hospitalPartnership(payloadFactory.hospitalPartnershipTemplate(modifiedHospitalPartnership))
                    .paymentNicepayConfig(payloadFactory.paymentNicepayConfigTemplate(modifiedPaymentNicepayConfig))
                    .cpmAdConfig(cpmAdConfig)
                    .subMerchantApiErrorCodes(Collections.emptyList())
                    .build();
        });
    }

    private boolean registerRolePermissions(long hospitalId, Long adminId, Level level) {
        Optional.ofNullable(adminId)
                .ifPresent(id ->
                        adminService.registerHospitalRolePermission(hospitalId, id, level));
        return true;
    }

    public BoolPayload modifyDepositAutoTransType(long hospitalId, DepositAutoTransType depositAutoTransType) {
        if (!isDepositAutoTransTypeModifiable(LocalDateTime.now())) {
            throw new HospitalException(HospitalCode.HOSPITAL_CONFIG_DEPOSIT_TRANSFER_ERROR);
        }

        return transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.modifyDepositAutoTransType(hospitalId, depositAutoTransType));
    }

    boolean isDepositAutoTransTypeModifiable(LocalDateTime now) {
        int day = now.getDayOfMonth();

        if ((5 < day && day < 16) || 20 < day) {
            return true;
        }

        LocalDateTime secondRoundBlockStartAt = now.withDayOfMonth(1).with(LocalTime.MIN);
        LocalDateTime secondRoundBlockEndAt = now.withDayOfMonth(5).with(LocalTime.of(13, 0, 0, 0));
        LocalDateTime firstRoundBlockStartAt = now.withDayOfMonth(16).with(LocalTime.MIN);
        LocalDateTime firstRoundBlockEndAt = now.withDayOfMonth(20).with(LocalTime.of(13, 0, 0, 0));

        // 1일 0시 ~ 5일 13시, 16일 0시 ~ 20일 13시
        return !(DateUtil.isInRange(secondRoundBlockStartAt, now, secondRoundBlockEndAt)
                || DateUtil.isInRange(firstRoundBlockStartAt, now, firstRoundBlockEndAt));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/HospitalUseCase.java
================================================
package kr.co.yeoshin.admin.hospital.usecase;

import java.time.LocalDate;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest;
import kr.co.yeoshin.admin.common.Constant.Entity;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.api.request.PriorityMutationRequest;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageCollection;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.cpm.service.CpmAdService;
import kr.co.yeoshin.admin.exception.AuthorizationException;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.hospital.component.model.*;
import kr.co.yeoshin.admin.hospital.controller.model.*;
import kr.co.yeoshin.admin.hospital.controller.model.type.SearchPublishTargetType;
import kr.co.yeoshin.admin.hospital.service.*;
import kr.co.yeoshin.admin.hospital.service.model.HospitalAsDepartmentContainer;
import kr.co.yeoshin.admin.hospital.service.model.HospitalPageableTemplate;
import kr.co.yeoshin.admin.hospital.service.model.HospitalSuggestPageablePayload;
import kr.co.yeoshin.admin.hospital.service.model.HospitalTreatmentGuidePage;
import kr.co.yeoshin.admin.hospital.usecase.model.*;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.point.service.AdPointService;
import kr.co.yeoshin.admin.product.service.SalesEventImageService;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventMessage;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.admin.reservation.service.ReservationReadableService;
import kr.co.yeoshin.admin.settlement.service.SettlementService;
import kr.co.yeoshin.admin.treatment.service.TreatmentPrincipleService;
import kr.co.yeoshin.admin.utils.EntityUtils;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.hospital.entity.*;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import kr.co.yeoshin.common.hospital.type.HospitalConfigType;
import kr.co.yeoshin.common.hospital.type.HospitalDoctorApprovalType;
import kr.co.yeoshin.common.hospital.type.HospitalImageType;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleDetail;
import kr.co.yeoshin.common.settlement.entity.SettlementReport;
import kr.co.yeoshin.common.settlement.type.SettlementStatus;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.type.YN;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@UseCase
@AllArgsConstructor
public class HospitalUseCase {

    private final HospitalService hospitalService;
    private final HospitalImageService hospitalImageService;
    private final HospitalKahfService hospitalKahfService;
    private final HospitalDoctorService hospitalDoctorService;
    private final HospitalNotificationService hospitalNotificationService;
    private final PaymentService paymentService;
    private final CpmAdService cpmAdService;
    private final AdminService adminService;
    private final AdminMemoService adminMemoService;
    private final MediaService mediaService;
    private final ReservationReadableService reservationReadableService;
    private final SettlementService settlementService;
    private final SalesEventService salesEventService;
    private final SalesEventImageService salesEventImageService;
    private final AdPointService adPointService;
    private final TreatmentPrincipleService treatmentPrincipleService;
    private final SqsQueueMessagePublisher messagePublisher;
    private final TransactionTemplate transactionTemplate;
    private final ResponseFactory responseFactory;
    private final PayloadFactory payloadFactory;

    public ApiResponse<HospitalPageablePayload> listHospitals(HospitalFilterRequest request) {
        return responseFactory.success(transactionTemplate.executeMainReadableTransaction(() -> {
            HospitalPageableTemplate hospitalPage = hospitalService.fetchAllHospital(request.transform());
            List<HospitalTemplate> hospitals = hospitalPage.getHospitals();

            Set<Long> adminIds = new HashSet<>();
            for (HospitalTemplate hospital : hospitals) {
                CollectionUtils.addAll(adminIds,
                        hospital.getAdminId(), hospital.getSalesAdminId(), hospital.getAdvertisingManagerId());
            }

            List<AdminShortTemplate> admins = adminService.retrieveAdmins(adminIds);
            Map<Long, AdminShortTemplate> adminsById =
                    admins.stream()
                            .collect(Collectors.toMap(AdminShortTemplate::getId,
                                    Function.identity(), (a, b) -> a, LinkedHashMap::new));

            List<HospitalPartnershipTemplate> partnerships =
                    hospitalService.retrieveHospitalPartnerships(hospitals.stream()
                            .map(HospitalTemplate::getId).collect(Collectors.toSet()));

            return HospitalPageablePayload.builder()
                    .hospitals(hospitalPage.getHospitals())
                    .admins(adminsById)
                    .partnershipsByHospitalId(partnerships.stream()
                            .collect(Collectors.toMap(HospitalPartnershipTemplate::getHospitalId, Function.identity())))
                    .pageable(hospitalPage.getPageable())
                    .build();

        }));
    }

    public ApiResponse<BadgePayload> getHospitalBadges() {
        List<BadgeTemplate> badges = transactionTemplate.executeMainReadableTransaction(hospitalService::findBadges);

        return responseFactory.success(BadgePayload.builder()
                .badges(badges)
                .build());
    }

    public HospitalPayload hospital(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Hospital hospital = hospitalService.fetchHospitalByHospitalId(hospitalId)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));

            List<HospitalImageTemplate> images = hospitalImageService.retrieveHospitalImagesByHospitalId(hospitalId);
            List<HospitalDoctorTemplate> doctors = hospitalService.retrieveDoctorsByHospitalId(hospitalId);
            List<HospitalMessengerTemplate> messengers = hospitalService.retrieveMessengersByHospitalId(hospitalId);
            List<HospitalAdditionTemplate> additions = hospitalService.retrieveHospitalAdditionsByHospitalId(hospitalId);
            List<BadgeTemplate> badges = hospitalService.retrieveHospitalBadgesByHospitalId(hospitalId);
            List<HospitalTreatmentGuideTemplate> guides = hospitalService.retrieveHospitalTreatmentGuidesByHospitalId(hospitalId);
            HospitalPartnershipTemplate partnership = hospitalService.retrievePartnership(hospitalId).orElse(null);
            HospitalStatTemplate stat = hospitalService.retrieveHospitalStatByHospitalId(hospitalId);
            PaymentNicepayConfigTemplate paymentNicepayConfig = paymentService.retrieveNicepayConfig(hospitalId).orElse(null);
            CpmAdConfigTemplate cpmAdConfig = cpmAdService.retrieveCpmAdConfigByHospitalId(hospitalId).orElse(null);
            List<HospitalConfigTemplate> hospitalConfigs =
                    hospitalService.retrieveHospitalConfigs(hospital.getId(), EnumSet.allOf(HospitalConfigType.class));
            List<SettlementReport> settlementReports = settlementService.retrieveSettlementByHospitalIdAndStatus(hospitalId,
                    SettlementStatus.PAUSE);
            long sumAdPoint = adPointService.findTotalPointByHospitalId(hospitalId, OrderProductType.AD_POINT_PRODUCT);
            HospitalKahfTemplate hospitalKahf =
                    hospitalKahfService.retrieveHospitalKahfByHospitalId(hospital.getId()).orElse(null);

            List<HospitalAsHospitalDepartment> hospitalAsHospitalDepartments =
                    hospitalService.fetchHospitalAsHospitalDepartmentsByHospitalId(hospital.getId());

            List<HospitalAsHospitalTreatment> hospitalAsHospitalTreatments =
                    hospitalService.fetchHospitalAsHospitalTreatmentsByHospitalId(hospital.getId());

            List<HospitalAsTreatmentPrinciple> hospitalAsTreatmentPrinciples =
                    hospitalService.retrieveHospitalAsTreatmentPrinciplesByHospitalId(hospital.getId());

            Map<Long, List<TreatmentPrincipleDetail>> treatmentPrincipleDetailsByTreatmentPrincipleId =
                    treatmentPrincipleService.fetchTreatmentPrincipleDetailsByTreatmentPrincipleIds(
                                    hospitalAsTreatmentPrinciples.stream()
                                            .map(it -> it.getTreatmentPrinciple().getId())
                                            .collect(Collectors.toSet()))
                            .stream()
                            .collect(Collectors.groupingBy(it -> it.getTreatmentPrinciple().getId(),
                                    Collectors.mapping(Function.identity(),
                                            Collectors.collectingAndThen(
                                                    Collectors.toList(),
                                                    it -> it.stream()
                                                            .sorted(Comparator.comparingInt(TreatmentPrincipleDetail::getSortNo))
                                                            .collect(Collectors.toList())))));

            return HospitalPayload.builder()
                    .hospital(payloadFactory.hospitalTemplate(hospital, badges, sumAdPoint))
                    .admin(EntityUtils.isNotExists(hospital.getAdmin(), Admin::getId) ?
                            null : adminService.retrieveAdmin(hospital.getAdmin().getId()))
                    .images(images.stream()
                            .filter(image -> image.getLanguage() == Language.KOREAN)
                            .collect(Collectors.toList()))
                    .localeImages(MultiLanguageCollection.<HospitalImageTemplate>builder()
                            .ko(images.stream()
                                    .filter(image -> image.getLanguage() == Language.KOREAN)
                                    .collect(Collectors.toList()))
                            .en(images.stream()
                                    .filter(image -> image.getLanguage() == Language.ENGLISH)
                                    .collect(Collectors.toList()))
                            .zh(images.stream()
                                    .filter(image -> image.getLanguage() == Language.CHINESE)
                                    .collect(Collectors.toList()))
                            .ja(images.stream()
                                    .filter(image -> image.getLanguage() == Language.JAPANESE)
                                    .collect(Collectors.toList()))
                            .build())
                    .doctors(doctors)
                    .additions(additions)
                    .badges(badges)
                    .guides(guides)
                    .partnership(partnership)
                    .stat(stat)
                    .paymentNicepayConfig(paymentNicepayConfig)
                    .cpmAdConfig(cpmAdConfig)
                    .hospitalConfigs(hospitalConfigs)
                    .settlementStat(payloadFactory.settlementStatTemplate(hospitalId, settlementReports))
                    .hospitalKahf(hospitalKahf)
                    .hospitalDepartments(hospitalAsHospitalDepartments.stream()
                            .map(it -> payloadFactory.hospitalDepartmentTemplate(it.getHospitalDepartment()))
                            .collect(Collectors.toList()))
                    .hospitalTreatments(hospitalAsHospitalTreatments.stream()
                            .map(it -> payloadFactory.hospitalTreatmentTemplate(it.getHospitalTreatment()))
                            .collect(Collectors.toList()))
                    .hospitalMessengers(messengers)
                    .treatmentPrinciples(hospitalAsTreatmentPrinciples.stream()
                            .map(it -> payloadFactory.treatmentPrincipleTemplate(it.getTreatmentPrinciple(),
                                    treatmentPrincipleDetailsByTreatmentPrincipleId.get(it.getTreatmentPrinciple().getId())))
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public DoctorsPayload getHospitalDoctors(long hospitalId) {
        Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        boolean hasRole = Objects.isNull(currentHospitalId) || currentHospitalId == hospitalId;
        if (!hasRole) {
            throw new HospitalException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
        }

        List<HospitalDoctorTemplate> doctors =
                transactionTemplate.executeMainReadableTransaction(() -> hospitalService.retrieveDoctorsByHospitalId(hospitalId));

        return DoctorsPayload.builder()
                .doctors(doctors)
                .build();
    }

    public ApiResponse<HospitalImagePayload> getHospitalImages(long hospitalId, Set<HospitalImageType> types) {
        if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
            throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
        }

        List<HospitalImageTemplate> images =
                transactionTemplate.executeMainReadableTransaction(
                        () -> hospitalImageService.retrieveHospitalImagesByHospitalIdAndTypes(hospitalId, types));

        return responseFactory.success(HospitalImagePayload.builder()
                .images(images.stream()
                        .filter(image -> image.getLanguage() == Language.KOREAN)
                        .collect(Collectors.toList()))
                .localeImages(MultiLanguageCollection.<HospitalImageTemplate>builder()
                        .ko(images.stream()
                                .filter(image -> image.getLanguage() == Language.KOREAN)
                                .collect(Collectors.toList()))
                        .en(images.stream()
                                .filter(image -> image.getLanguage() == Language.ENGLISH)
                                .collect(Collectors.toList()))
                        .zh(images.stream()
                                .filter(image -> image.getLanguage() == Language.CHINESE)
                                .collect(Collectors.toList()))
                        .ja(images.stream()
                                .filter(image -> image.getLanguage() == Language.JAPANESE)
                                .collect(Collectors.toList()))
                        .build())
                .build());
    }

    public ApiResponse<HospitalAdditionPayload> getHospitalAdditions(long hospitalId) {
        List<HospitalAdditionTemplate> additions =
                transactionTemplate.executeMainReadableTransaction(
                        () -> hospitalService.retrieveHospitalAdditionsByHospitalId(hospitalId));

        return responseFactory.success(HospitalAdditionPayload.builder()
                .additions(additions)
                .build());
    }

    public ApiResponse<BadgePayload> getHospitalBadges(long hospitalId) {
        List<BadgeTemplate> badges =
                transactionTemplate.executeMainReadableTransaction(
                        () -> hospitalService.retrieveHospitalBadgesByHospitalId(hospitalId));

        return responseFactory.success(BadgePayload.builder()
                .badges(badges)
                .build());
    }

    public HospitalPayload registerHospital(HospitalMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            Hospital hospital = hospitalService.registerHospital(request);

            List<HospitalAdditionalInfo> additions =
                    hospitalService.registerAdditions(hospital.getId(), request.getAdditions());

            List<HospitalMessenger> hospitalMessengers = hospitalService.registerMessengers(
                    hospital.getId(), request.getHospitalMessengers());

            HospitalKahf hospitalKahf = hospitalKahfService.upsertHospitalKahf(hospital.getId(),
                    request.getKahfCertificateImage(), request.getKahfExpireAt());

            List<HospitalAsBadge> hospitalAsBadges =
                    hospitalService.modifyHospitalBadges(hospital.getId(),
                            Map.of(BadgeType.SYSTEM_EXCLUSIVE, request.isExclusive(),
                                    BadgeType.KAHF_CERTIFICATE, request.isKahf() && hospitalKahf.isValidAt(LocalDate.now())));

            hospitalService.modifyHospitalAsHospitalDepartment(hospital.getId(),
                    request.getHospitalDepartmentIds(),
                    request.getHospitalTreatmentIds());

            List<Badge> badges = hospitalAsBadges.stream().map(HospitalAsBadge::getBadge).collect(Collectors.toList());

            registerRolePermissions(hospital.getId(), request.getAdminId(), Level.ROLE_HOSPITAL_OWNER);
            registerRolePermissions(hospital.getId(), request.getAdvertisingManagerId(), Level.ROLE_HOSPITAL_MANAGER);

            List<MediaStatus> mediaStatuses =
                    mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PUBLIC)
                            .domain(MediaDomainType.HOSPITAL)
                            .appliedMediaFileNames(Collections.emptySet())
                            .newMediaFileNames(ImmutableSet.<String>builder()
                                    .add(hospital.getLogo())
                                    .add(hospital.getThumbnail())
                                    .add(hospital.getPremiumThumbnail())
                                    .add(hospitalKahf.getCertificateImage())
                                    .addAll(request.getHospitalLocaleImages().stream()
                                            .map(HospitalLocaleImage::getImage)
                                            .collect(Collectors.toSet()))
                                    .addAll(Optional.ofNullable(request.getHospitalMessengers())
                                            .orElse(Collections.emptyList()).stream()
                                            .map(HospitalMutationRequest.HospitalMessenger::getImage)
                                            .filter(StringUtils::isNotBlank)
                                            .collect(Collectors.toSet()))
                                    .build())
                            .build());

            List<HospitalImage> images =
                    hospitalImageService.registerHospitalImages(
                            hospital.getId(),
                            request.getHospitalLocaleImages(),
                            mediaStatuses);

            request.getHospitalConfigs()
                    .forEach(it -> {
                        if (!it.isActivated()) {
                            hospitalService.removeHospitalConfig(hospital.getId(), it.getConfigType());
                        } else {
                            hospitalService.upsertHospitalConfig(hospital.getId(), HospitalConfigMutationRequest.builder()
                                    .configType(it.getConfigType())
                                    .value(it.getValue())
                                    .reason(it.getReason())
                                    .isActivated(it.isActivated())
                                    .build());
                        }
                    });

            hospitalService.modifyHospitalAsTreatmentPrinciple(hospital.getId(), request.getTreatmentPrincipleIds());

            return HospitalPayload.builder()
                    .hospital(payloadFactory.hospitalTemplate(hospital))
                    .admin(payloadFactory.adminShortTemplate(hospital.getAdmin()))
                    .images(images.stream().sorted(Comparator.comparingInt(HospitalImage::getSortNo))
                            .map(payloadFactory::hospitalImageTemplate)
                            .collect(Collectors.toList()))
                    .doctors(Collections.emptyList())
                    .additions(additions.stream().map(payloadFactory::hospitalAdditionTemplate).collect(Collectors.toList()))
                    .badges(badges.stream().map(payloadFactory::badgeTemplate).collect(Collectors.toList()))
                    .hospitalMessengers(hospitalMessengers.stream()
                            .map(payloadFactory::hospitalMessengerTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public HospitalPayload modifyHospital(long hospitalId, HospitalMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalTemplate hospital = hospitalService.retrieveHospital(hospitalId)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));
            HospitalState beforeHospitalState = HospitalState.of(hospital);
            HospitalOperationTimeState beforeOperationTime = HospitalOperationTimeState.of(hospital);
            List<HospitalMessengerTemplate> beforeHospitalMessengers = hospitalService.retrieveMessengersByHospitalId(hospitalId);

            List<HospitalImageTemplate> hospitalImages = hospitalImageService.retrieveHospitalImagesByHospitalId(hospitalId);

            Set<String> previousImages =
                    ImmutableSet.<String>builder()
                            .add(hospital.getLogoFileName())
                            .add(hospital.getThumbnailFileName())
                            .add(hospital.getPremiumThumbnailFileName())
                            .add(hospitalKahfService.retrieveHospitalKahfByHospitalId(hospital.getId())
                                    .map(HospitalKahfTemplate::getCertificateImageFileName)
                                    .orElse(null))
                            .addAll(hospitalImages.stream()
                                    .map(HospitalImageTemplate::getImageFileName)
                                    .collect(Collectors.toSet()))
                            .addAll(beforeHospitalMessengers.stream()
                                    .map(HospitalMessengerTemplate::getImage)
                                    .filter(StringUtils::isNotBlank)
                                    .collect(Collectors.toSet()))
                            .build();

            Hospital modifiedHospital = hospitalService.modifyHospital(hospitalId, request);
            HospitalState afterHospitalState = HospitalState.of(modifiedHospital);
            HospitalOperationTimeState afterOperationTime = HospitalOperationTimeState.of(modifiedHospital);

            List<HospitalImage> modifiedImages =
                    hospitalImageService.modifyHospitalImages(hospitalId, request.getHospitalLocaleImages());

            List<HospitalAdditionTemplate> additions =
                    hospitalService.retrieveHospitalAdditionsByHospitalId(modifiedHospital.getId());
            HospitalAdditionState beforeAdditions = HospitalAdditionState.of(additions);

            List<HospitalAdditionalInfo> modifiedAdditions = hospitalService.modifyAdditions(hospitalId, request.getAdditions());
            HospitalAdditionState afterAdditions = HospitalAdditionState.of(modifiedAdditions.stream()
                    .map(payloadFactory::hospitalAdditionTemplate)
                    .collect(Collectors.toList()));

            List<HospitalMessenger> hospitalMessengers = hospitalService.modifyMessengers(
                    hospitalId, request.getHospitalMessengers());

            HospitalKahf hospitalKahf = hospitalKahfService.upsertHospitalKahf(hospital.getId(),
                    request.getKahfCertificateImage(), request.getKahfExpireAt());

            hospitalService.modifyHospitalBadges(hospitalId,
                    Map.of(BadgeType.SYSTEM_EXCLUSIVE, request.isExclusive(),
                            BadgeType.KAHF_CERTIFICATE, request.isKahf() && hospitalKahf.isValidAt(LocalDate.now())));

            List<HospitalDepartment> hospitalDepartments =
                    hospitalService.fetchHospitalAsHospitalDepartmentsByHospitalId(hospital.getId())
                            .stream()
                            .map(HospitalAsHospitalDepartment::getHospitalDepartment)
                            .collect(Collectors.toList());

            List<HospitalTreatment> hospitalTreatments =
                    hospitalService.fetchHospitalAsHospitalTreatmentsByHospitalId(hospital.getId())
                            .stream()
                            .map(HospitalAsHospitalTreatment::getHospitalTreatment)
                            .collect(Collectors.toList());

            HospitalDepartmentState beforeDepartments = HospitalDepartmentState.of(hospitalDepartments);
            HospitalTreatmentState beforeTreatments = HospitalTreatmentState.of(hospitalTreatments);

            HospitalAsDepartmentContainer modifiedHospitalDepartments =
                    hospitalService.modifyHospitalAsHospitalDepartment(hospital.getId(),
                            request.getHospitalDepartmentIds(),
                            request.getHospitalTreatmentIds());

            HospitalDepartmentState afterDepartments =
                    HospitalDepartmentState.of(modifiedHospitalDepartments.getHospitalDepartments());

            HospitalTreatmentState afterTreatments =
                    HospitalTreatmentState.of(modifiedHospitalDepartments.getHospitalTreatments());

            adminService.removeHospitalRolePermissions(hospital.getId(), ImmutableSet.<Long>builder()
                    .add(hospital.getAdminId())
                    .add(hospital.getAdvertisingManagerId())
                    .build());

            registerRolePermissions(hospital.getId(), request.getAdminId(), Level.ROLE_HOSPITAL_OWNER);
            registerRolePermissions(hospital.getId(), request.getAdvertisingManagerId(), Level.ROLE_HOSPITAL_MANAGER);

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(previousImages)
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(modifiedHospital.getLogo())
                            .add(modifiedHospital.getThumbnail())
                            .add(modifiedHospital.getPremiumThumbnail())
                            .add(hospitalKahf.getCertificateImage())
                            .addAll(modifiedImages.stream()     // 기존 media status 없는 상용 이미지는 배제
                                    .filter(image -> image.getMediaStatus().getId() != Entity.NOT_EXIST_ID)
                                    .map(HospitalImage::getImage)
                                    .collect(Collectors.toSet()))
                            .addAll(Optional.ofNullable(request.getHospitalMessengers())
                                    .orElse(Collections.emptyList()).stream()
                                    .map(HospitalMutationRequest.HospitalMessenger::getImage)
                                    .filter(StringUtils::isNotBlank)
                                    .collect(Collectors.toSet()))
                            .build())
                    .build());

            hospitalService.modifyPremiumYn(modifiedHospital.getId());

            hospitalNotificationService.notify(
                    List.of(HospitalStateDiff.of(beforeHospitalState, afterHospitalState),
                            HospitalOperationTimeDiff.of(beforeOperationTime, afterOperationTime),
                            HospitalAdditionStateDiff.of(beforeAdditions, afterAdditions),
                            HospitalDepartmentStateDiff.of(beforeDepartments, afterDepartments),
                            HospitalTreatmentStateDiff.of(beforeTreatments, afterTreatments)));

            request.getHospitalConfigs()
                    .forEach(it -> {
                        if (!it.isActivated()) {
                            hospitalService.removeHospitalConfig(hospital.getId(), it.getConfigType());
                        } else {
                            hospitalService.upsertHospitalConfig(hospital.getId(), HospitalConfigMutationRequest.builder()
                                    .configType(it.getConfigType())
                                    .value(it.getValue())
                                    .reason(it.getReason())
                                    .isActivated(it.isActivated())
                                    .build());
                        }
                    });

            hospitalService.modifyHospitalAsTreatmentPrinciple(hospital.getId(), request.getTreatmentPrincipleIds());

            messagePublisher.publishDomainEvent(DomainEventMessage.of(DomainEventType.HOSPITAL_UPDATE, hospitalId));
            modifiedHospital.shouldNotPublishDomainEvent();

            // TODO refactor 클라이언트에서 모든 API 요청 성공 시 페치 요청을 다시 한다고 함. 따라서 변경된 것을 리턴할 필요 X
            return HospitalPayload.builder()
                    .hospital(payloadFactory.hospitalTemplate(modifiedHospital))
                    .admin(payloadFactory.adminShortTemplate(modifiedHospital.getAdmin()))
                    .images(modifiedImages.stream().sorted(Comparator.comparingInt(HospitalImage::getSortNo))
                            .map(payloadFactory::hospitalImageTemplate)
                            .collect(Collectors.toList()))
                    .doctors(Collections.emptyList())
                    .additions(
                            modifiedAdditions.stream().map(payloadFactory::hospitalAdditionTemplate).collect(Collectors.toList()))
                    .hospitalMessengers(hospitalMessengers.stream()
                            .map(payloadFactory::hospitalMessengerTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public BoolPayload modifyHospitalDoctorPriorities(long hospitalId, PriorityMutationRequest request) {
        if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
            throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            hospitalService.modifyHospitalDoctorPriorities(hospitalId, request.getPriorities());

            return BoolPayload.of(true);
        });
    }

    public BoolPayload removeDoctor(long hospitalId, long doctorId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalDoctorTemplate doctor = hospitalService.retrieveDoctor(doctorId, hospitalId);
            HospitalDoctorState doctorState = HospitalDoctorState.of(doctor);

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .add(doctor.getProfileImageFileName())
                            .build())
                    .newMediaFileNames(Collections.emptySet())
                    .build());

            hospitalNotificationService.notify(List.of(HospitalDoctorStateDiff.of(doctorState, HospitalDoctorState.EMPTY)));

            return BoolPayload.builder()
                    .result(hospitalService.removeDoctor(hospitalId, doctorId))
                    .build();
        });
    }

    public HospitalTreatmentGuidesPayload retrieveTreatmentGuides(long hospitalId) {
        List<HospitalTreatmentGuideTemplate> treatmentGuides = transactionTemplate.executeMainReadableTransaction(
                () -> hospitalService.retrieveHospitalTreatmentGuidesByHospitalId(hospitalId));

        return HospitalTreatmentGuidesPayload.builder()
                .treatmentGuides(treatmentGuides)
                .build();
    }

    public HospitalTreatmentGuidePageablePayload retrieveTreatmentGuides(long hospitalId,
            HospitalTreatmentGuideFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            HospitalTreatmentGuidePage treatmentGuidePage = hospitalService.retrieveHospitalTreatmentGuides(hospitalId, request);

            return HospitalTreatmentGuidePageablePayload.builder()
                    .treatmentGuides(treatmentGuidePage.getTreatmentGuides())
                    .pageable(treatmentGuidePage.getPageable())
                    .build();
        });
    }

    public HospitalTreatmentGuidePayload registerTreatmentGuide(long hospitalId, HospitalTreatmentGuideMutationRequest request) {
        HospitalTreatmentGuide treatmentGuide = transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.registerTreatmentGuide(hospitalId, request));

        return HospitalTreatmentGuidePayload.builder()
                .treatmentGuide(payloadFactory.hospitalTreatmentGuideTemplate(treatmentGuide))
                .build();
    }

    public HospitalTreatmentGuidesPayload registerTreatmentGuides(long hospitalId,
            List<HospitalTreatmentGuideMutationRequest> request) {
        List<HospitalTreatmentGuide> treatmentGuides = transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.registerTreatmentGuides(hospitalId, request));

        return HospitalTreatmentGuidesPayload.builder()
                .treatmentGuides(payloadFactory.hospitalTreatmentGuideTemplates(treatmentGuides))
                .build();
    }

    public HospitalTreatmentGuidePayload modifyTreatmentGuide(long hospitalId, long treatmentGuideId,
            HospitalTreatmentGuideMutationRequest request) {
        HospitalTreatmentGuide treatmentGuide = transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.modifyTreatmentGuide(hospitalId, treatmentGuideId, request));

        return HospitalTreatmentGuidePayload.builder()
                .treatmentGuide(payloadFactory.hospitalTreatmentGuideTemplate(treatmentGuide))
                .build();
    }

    public BoolPayload removeTreatmentGuide(long hospitalId, List<Long> treatmentGuideIds) {
        boolean result = transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.removeTreatmentGuide(hospitalId, treatmentGuideIds));

        return BoolPayload.builder()
                .result(result)
                .build();
    }

    public BoolPayload removeTreatmentGuide(long hospitalId) {
        boolean result = transactionTemplate.executeMainWritableTransaction(
                () -> hospitalService.removeAllTreatmentGuides(hospitalId));

        return BoolPayload.builder()
                .result(result)
                .build();
    }

    public HospitalSuggestPageablePayload retrieveHospitalModifySuggest(HospitalSuggestFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> hospitalService.findHospitalSuggest(request.toWhereCondition()));
    }

    public BoolPayload removeHospitalSuggest(long suggestId) {
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> hospitalService.removeHospitalSuggest(suggestId))
        ).build();
    }

    public BoolPayload modifyHospitalConfig(long hospitalId, HospitalConfigMutationRequest request) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            if (!request.isActivated()) {
                return hospitalService.removeHospitalConfig(hospitalId, request.getConfigType());
            }

            return hospitalService.upsertHospitalConfig(hospitalId, request);
        });

        return BoolPayload.builder().result(result).build();
    }

    public BoolPayload removeHospital(long hospitalId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalTemplate hospital = hospitalService.retrieveHospital(hospitalId)
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));

            List<HospitalImageTemplate> hospitalImages =
                    hospitalImageService.retrieveHospitalImagesByHospitalId(hospital.getId());

            hospitalImageService.removeHospitalImages(hospital.getId(),
                    hospitalImages.stream().map(HospitalImageTemplate::getId).collect(
                            Collectors.toSet()));

            List<HospitalDoctorTemplate> hospitalDoctors =
                    hospitalService.retrieveDoctorsByHospitalId(hospital.getId());

            hospitalService.removeDoctors(hospital.getId(), hospitalDoctors.stream()
                    .map(HospitalDoctorTemplate::getId)
                    .collect(Collectors.toList()));

            List<HospitalTreatmentGuideTemplate> treatmentGuides =
                    hospitalService.retrieveHospitalTreatmentGuidesByHospitalId(hospital.getId());

            hospitalService.removeTreatmentGuides(hospital.getId(), treatmentGuides.stream()
                    .map(HospitalTreatmentGuideTemplate::getId)
                    .collect(Collectors.toList()));

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.HOSPITAL)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .addAll(hospitalImages.stream()
                                    .map(HospitalImageTemplate::getImageFileName)
                                    .filter(Objects::nonNull)
                                    .collect(Collectors.toSet()))
                            .addAll(hospitalDoctors.stream()
                                    .map(HospitalDoctorTemplate::getProfileImageFileName)
                                    .filter(Objects::nonNull)
                                    .collect(Collectors.toSet()))
                            .add(hospital.getLogoFileName())
                            .add(hospital.getThumbnailFileName())
                            .add(hospital.getPremiumThumbnailFileName())
                            .build())
                    .newMediaFileNames(Collections.emptySet())
                    .build());

            hospitalService.removeMessengers(hospital.getId());

            boolean removed = hospitalService.removeHospital(hospital.getId());

            return BoolPayload.builder()
                    .result(removed)
                    .build();
        });
    }

    public BoolPayload applyDefaultHospitalImageToAllEvent(long hospitalId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            boolean hasNoIntroImages = hospitalImageService.retrieveHospitalImagesByHospitalIdAndTypes(
                            hospitalId, EnumSet.of(HospitalImageType.INTRODUCTION))
                    .isEmpty();
            if (hasNoIntroImages) {
                throw new HospitalException(CommonCode.BAD_REQUEST, "The image of type INTRODUCTION must exists.");
            }

            boolean result = salesEventImageService
                    .removeAllHospitalIntroImagesByHospitalId(hospitalId);

            return BoolPayload.of(result);
        });
    }

    private boolean registerRolePermissions(long hospitalId, Long adminId, Level level) {
        Optional.ofNullable(adminId)
                .ifPresent(id ->
                        adminService.registerHospitalRolePermission(hospitalId, id, level));
        return true;
    }

    public HospitalOfflineUpsellPayload upsertOfflineUpsell(long hospitalId, HospitalOfflineUpsellMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalOfflineUpsell hospitalOfflineUpsell = hospitalService.upsertHospitalOfflineUpsell(hospitalId, request);

            return HospitalOfflineUpsellPayload.builder()
                    .hospitalOfflineUpsell(payloadFactory.hospitalOfflineUpsellTemplate(hospitalOfflineUpsell))
                    .build();
        });
    }

    public BoolPayload removeOfflineUpsell(long hospitalId, long offlineUpsellId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            hospitalService.removeHospitalOfflineUpsell(hospitalId, offlineUpsellId);

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public HospitalOfflineUpsellPageablePayload retrieveHospitalOfflineUpsells(HospitalOfflineUpsellFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> hospitalService.retrieveHospitalOfflineUpsells(request.toWhereCondition(hospitalId)));
    }


    public BoolPayload modifyHospitalDoctorActivation(long hospitalId, long hospitalDoctorId,
            HospitalDoctorActivationRequest request) {

        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            hospitalService.modifyHospitalDoctorActivation(hospitalId, hospitalDoctorId, request.isActivated());

            return BoolPayload.of(true);
        });
    }

    public BoolPayload registerHospitalAsHospitalDoctor(long hospitalId, HospitalAsHospitalDoctorRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            hospitalDoctorService.registerHospitalAsHospitalDoctors(request.getHospitalDoctorId(), Set.of(hospitalId));

            hospitalDoctorService.registerHospitalDoctorApproval(request.getHospitalDoctorId(),
                    hospitalId,
                    HospitalDoctorApprovalType.PATCH_HOSPITAL_ID);

            hospitalNotificationService.notify(List.of(HospitalDiff.DiffName.DOCTOR));

            return BoolPayload.of(true);
        });
    }

    public BoolPayload removeHospitalAsHospitalDoctor(long hospitalId, long hospitalDoctorId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            hospitalDoctorService.removeHospitalAsHospitalDoctors(hospitalDoctorId, Set.of(hospitalId));

            hospitalNotificationService.notify(List.of(HospitalDiff.DiffName.DOCTOR));

            return BoolPayload.of(true);
        });
    }

    public BoolPayload modifyHospitalPublish(long hospitalId, HospitalSearchPublishActivationRequest request, boolean isPublish) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            SearchPublishTargetType type = request.getSearchPublishTargetType();
            List<Long> salesEventIds = request.getSalesEventIds();
            List<String> subContents = new ArrayList<>();

            switch (type) {
                case SALES_EVENT_PICK:
                    List<String> names = salesEventService.updateSalesEventPublish(hospitalId, salesEventIds,
                            isPublish).stream().map(SalesEvent::getNameKo).collect(Collectors.toList());
                    subContents.addAll(names.isEmpty() ? List.of("-") : names);
                    break;
                case HOSPITAL:
                    hospitalService.updateHospitalPublish(hospitalId, isPublish);
                    subContents.add("-");
                    break;
                case SALES_EVENT_ALL:
                    salesEventService.updateSalesEventPublish(hospitalId, salesEventIds, isPublish);
                    subContents.add("-");
                    break;
                case ALL:
                    hospitalService.updateHospitalPublish(hospitalId, isPublish);
                    salesEventService.updateSalesEventPublish(hospitalId, salesEventIds, isPublish);
                    subContents.add("-");
                    break;
            }

            registerMemos(AdminMemoType.SEARCH_PUBLISH, hospitalId, type.getDescription(), subContents);

            return BoolPayload.of(true);
        });
    }

    private void registerMemos(AdminMemoType adminMemoType, long refId, String content, List<String> subContents) {
        subContents.forEach(subContent ->
                adminMemoService.registerAdminMemo(
                        adminMemoType,
                        AdminMemoMutationRequest.WithCommit.builder()
                                .content(content)
                                .subContent(subContent)
                                .refId(refId)
                                .secretYn(YN.N)
                                .build()));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/BadgePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.BadgeTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BadgePayload {

    private List<BadgeTemplate> badges;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/DoctorPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalDoctorTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DoctorPayload implements PlusAccessible {

    private HospitalDoctorTemplate doctor;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/DoctorsPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalDoctorTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DoctorsPayload implements PlusAccessible {

    private List<HospitalDoctorTemplate> doctors;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalAdditionPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.HospitalAdditionTemplate;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoType;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoValue;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalAdditionPayload {

    private List<HospitalAdditionTemplate> additions;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalDepartmentsPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalDepartmentTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalTreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDepartmentsPayload implements PlusAccessible {

    private List<HospitalDepartmentTemplate> hospitalDepartments;
    private Map<Long, List<HospitalTreatmentTemplate>> hospitalTreatmentsByHospitalDepartmentIds;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalDoctorApprovalPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDoctorApprovalPageablePayload implements PlusAccessible {

    private List<HospitalDoctorApprovalTemplate> hospitalDoctorApprovals;
    private Map<Long, HospitalDoctorTemplate> hospitalDoctorsById;
    private Map<Long, List<HospitalDepartmentTemplate>> hospitalDepartmentsByHospitalDoctorId;
    private Map<Long, HospitalTemplate> hospitalsById;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalDoctorPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDoctorPageablePayload implements PlusAccessible {

    private List<HospitalDoctorTemplate> hospitalDoctors;
    private Map<Long, List<HospitalDepartmentTemplate>> hospitalDepartmentsByHospitalDoctorId;
    private Map<Long, List<HospitalTreatmentTemplate>> hospitalTreatmentsByHospitalDoctorId;
    private Map<Long, HospitalDoctorApprovalTemplate> hospitalDoctorApprovalsByHospitalDoctorId;
    private Map<Long, List<HospitalAsHospitalDoctorRelation>> hospitalRelationsByHospitalDoctorId;
    private PageableTemplate pageable;

    @Getter
    @Builder
    public static class HospitalAsHospitalDoctorRelation implements PlusAccessible {

        private HospitalShortTemplate hospital;
        private boolean isVisible;
        private int priority;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalDoctorPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorApproval;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalDoctorPayload implements PlusAccessible {

    private HospitalDoctorTemplate hospitalDoctor;
    private HospitalDoctorApprovalTemplate hospitalDoctorApproval;
    private List<HospitalDepartmentTemplate> hospitalDepartments;
    private List<HospitalTreatmentTemplate> hospitalTreatments;
    private List<HospitalShortTemplate> hospitals;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalImagePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageCollection;
import kr.co.yeoshin.admin.common.model.template.HospitalImageTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalImagePayload implements PlusAccessible {

    @Deprecated
    private List<HospitalImageTemplate> images;
    private MultiLanguageCollection<HospitalImageTemplate> localeImages;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalManagementContactPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalManagementContactTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalManagementContactPayload implements PlusAccessible {

    private HospitalManagementContactTemplate managementContact;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalManagementContactsPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalManagementContactTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalManagementContactsPayload implements PlusAccessible {

    private AdminShortTemplate admin;
    private List<HospitalManagementContactTemplate> managementContacts;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalOfflineUpsellPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalOfflineUpsellTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesEventConsultationTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOfflineUpsellPageablePayload implements PlusAccessible {

    private List<HospitalOfflineUpsellTemplate> hospitalOfflineUpsells;
    private Map<Long, ReservationTemplate> reservations;
    private Map<Long, SalesEventConsultationTemplate> salesEventConsultations;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalOfflineUpsellPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import kr.co.yeoshin.admin.common.model.template.HospitalOfflineUpsellTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOfflineUpsellPayload {

    private HospitalOfflineUpsellTemplate hospitalOfflineUpsell;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalOnboardCompleteStatPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardCompleteStatPayload implements SystemAccessible {

    private int memberCount; // 요청자 수
    private int resignMemberCount; // 탈퇴자 수
    private int notificationAgreeCount; // 알림 안내 동의
    private int notificationCount; // 알림톡 발송 대상자 수
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalOnboardMemberPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalOnboardMemberTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalOnboardTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardMemberPageablePayload implements SystemAccessible {

    private List<HospitalOnboardMemberTemplate> hospitalOnboardMembers;
    private Map<Long, HospitalOnboardTemplate> hospitalOnboards;
    private Map<Long, MemberTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalOnboardPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalOnboardTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardPageablePayload implements SystemAccessible {

    private List<HospitalOnboardTemplate> hospitalOnboards;
    private Map<Long, HospitalTemplate> hospitals;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalOnboardsPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalOnboardTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalOnboardsPayload implements SystemAccessible {

    private List<HospitalOnboardTemplate> hospitalOnboards;
    private Map<Long, HospitalTemplate> hospitals;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalPageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalPageablePayload implements PlusAccessible {

    private List<HospitalTemplate> hospitals;
    private Map<Long, CpmAdConfigTemplate> cpmAdConfigs;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, HospitalPartnershipTemplate> partnershipsByHospitalId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalPartnershipPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.hospital.service.model.SubMerchantApiResult;
import kr.co.yeoshin.common.payment.entity.PaymentNicepayConfig;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalPartnershipPayload implements PlusAccessible {

    private HospitalTemplate hospital;
    private HospitalPartnershipTemplate hospitalPartnership;
    private PaymentNicepayConfigTemplate paymentNicepayConfig;
    private CpmAdConfigTemplate cpmAdConfig;
    private List<CodeTemplate> subMerchantApiErrorCodes;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageCollection;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalPayload implements PlusAccessible {

    private HospitalTemplate hospital;
    private AdminShortTemplate admin;
    @Deprecated
    private List<HospitalImageTemplate> images;
    private MultiLanguageCollection<HospitalImageTemplate> localeImages;
    private List<HospitalDoctorTemplate> doctors;
    private List<HospitalAdditionTemplate> additions;
    private List<BadgeTemplate> badges;
    private List<HospitalTreatmentGuideTemplate> guides;
    private HospitalPartnershipTemplate partnership;
    private HospitalStatTemplate stat;
    private PaymentNicepayConfigTemplate paymentNicepayConfig;
    private CpmAdConfigTemplate cpmAdConfig;
    private List<HospitalConfigTemplate> hospitalConfigs;
    private SettlementStatTemplate settlementStat;
    private HospitalKahfTemplate hospitalKahf;
    private List<HospitalDepartmentTemplate> hospitalDepartments;
    private List<HospitalTreatmentTemplate> hospitalTreatments;
    private List<HospitalMessengerTemplate> hospitalMessengers;
    private List<TreatmentPrincipleTemplate> treatmentPrinciples;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalTreatmentGuidePageablePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalTreatmentGuideTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalTreatmentGuidePageablePayload implements SystemAccessible {

    private List<HospitalTreatmentGuideTemplate> treatmentGuides;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalTreatmentGuidePayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalTreatmentGuideTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalTreatmentGuidePayload implements SystemAccessible {

    private HospitalTreatmentGuideTemplate treatmentGuide;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospital/usecase/model/HospitalTreatmentGuidesPayload.java
================================================
package kr.co.yeoshin.admin.hospital.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalTreatmentGuideTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalTreatmentGuidesPayload implements SystemAccessible {

    private List<HospitalTreatmentGuideTemplate> treatmentGuides;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/hospitalmanager/usecase/HospitalManagerUseCase.java
================================================
package kr.co.yeoshin.admin.hospitalmanager.usecase;


import static kr.co.yeoshin.admin.common.model.api.code.AdminCode.ADMIN_INVITATION_ERROR;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.function.Predicate;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.admin.auth.model.InvitationCode;
import kr.co.yeoshin.admin.auth.model.RegisteredAdmin;
import kr.co.yeoshin.admin.auth.model.SignUpResult;
import kr.co.yeoshin.admin.auth.model.Token;
import kr.co.yeoshin.admin.auth.service.AuthService;
import kr.co.yeoshin.admin.auth.service.TokenService;
import kr.co.yeoshin.admin.auth.service.model.AuthProfile;
import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.model.api.ApiSuccessResponse;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.component.PropertyProvider;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.exception.InvitationException;
import kr.co.yeoshin.admin.hospitalmanager.service.HospitalManagerService;
import kr.co.yeoshin.admin.hospitalmanager.service.model.HospitalManagerAuthCredential;
import kr.co.yeoshin.admin.hospitalmanager.service.model.HospitalManagerRegister;
import kr.co.yeoshin.admin.invitation.service.InvitationService;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;
import kr.co.yeoshin.common.utils.HttpUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class HospitalManagerUseCase {

    private final HospitalManagerService hospitalManagerService;
    private final AuthService authService;
    private final TokenService tokenService;
    private final InvitationService invitationService;
    private final ValidatorService validatorService;
    private final TransactionTemplate transactionTemplate;
    private final ResponseFactory responseFactory;
    private final PropertyProvider propertyProvider;
    private List<Predicate<HospitalManagerRegister>> signUpValidators;

    @PostConstruct
    public void signUpValidators() {
        this.signUpValidators =
                List.of(register -> validatorService.validate(Validator.ADMIN_ID, register.getAccessKey()),
                        register -> validatorService.validate(Validator.PASSWORD, register.getSecretKey()),
                        register -> validatorService.validate(Validator.NAME, register.getName()),
                        register -> validatorService.validate(Validator.EMAIL, register.getEmail()),
                        register -> validatorService.validate(Validator.ADMIN_CELL_PHONE, register.getCellPhone()),
                        register -> invitationService.verifyInvitationCode(register.getInvitationCode()));
    }

    @Deprecated
    public ApiResponse<SignUpResult> signUp(HospitalManagerRegister hospitalManagerRegister) {
        transactionTemplate.executeMainReadableTransaction(() -> {
            for (Predicate<HospitalManagerRegister> validator : signUpValidators) {
                if (!validator.test(hospitalManagerRegister)) {
                    throw new InvitationException(ADMIN_INVITATION_ERROR,
                            MessageUtils.format("manager invitation sign up parameter is invalid(email: {}, cell phone: {})",
                                    hospitalManagerRegister.getEmail(), hospitalManagerRegister.getCellPhone()));
                }
            }

            return true;
        });

        InvitationCode invitationCode = invitationService.parseInvitationCode(hospitalManagerRegister.getInvitationCode())
                .orElseThrow(() -> new InvitationException(ADMIN_INVITATION_ERROR,
                        MessageUtils.format("manager invitation sign up parameter is invalid(email: {}, cell phone: {})",
                                hospitalManagerRegister.getEmail(), hospitalManagerRegister.getCellPhone())));

        RegisteredAdmin registeredAdmin = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    RegisteredAdmin newAdmin = hospitalManagerService.registerManager(hospitalManagerRegister);
                    hospitalManagerService.allowHospitalRolePermission(
                            newAdmin.getId(), invitationCode.getHospitalOwnerId(), invitationCode.getRoleId());

                    return newAdmin;
                });

        Token token = tokenService.createToken(
                registeredAdmin.getId(), registeredAdmin.getAuthProvider(), registeredAdmin.getSignature(),
                propertyProvider.getTokenProps().getPlusAdmin());

        return responseFactory.success(SignUpResult.builder().token(token).build());
    }

    public ApiResponse<SignUpResult> signIn(HospitalManagerAuthCredential authCredential) {
        if (!invitationService.verifyInvitationCode(authCredential.getInvitationCode())) {
            throw new InvitationException(ADMIN_INVITATION_ERROR,
                    MessageUtils.format("manager invitation sign in is failed (provider id: {})", authCredential.getAccessKey()));
        }

        AuthProfile authProfile = authService.findProfile(authCredential);
        RegisteredAdmin registeredAdmin = transactionTemplate.executeMainReadableTransaction(
                () -> authService.findRegisteredAdmin(authCredential, authProfile));

        if (Objects.isNull(registeredAdmin)) {
            throw new AuthenticationException(AuthCode.AUTH_ADMIN_NOT_EXIST,
                    MessageUtils.format("admin(id: {}) is not exist", authCredential.getAccessKey()));
        }

        InvitationCode invitationCode = invitationService.parseInvitationCode(authCredential.getInvitationCode())
                .orElseThrow(() -> new InvitationException(ADMIN_INVITATION_ERROR,
                        MessageUtils.format("manager invitation code is invalid (provider id: {})",
                                authCredential.getAccessKey())));

        Token token = tokenService.createToken(registeredAdmin.getId(), registeredAdmin.getAuthProvider(),
                registeredAdmin.getSignature(), propertyProvider.getTokenProps().getPlusAdmin());

        return ApiSuccessResponse.<SignUpResult>builder()
                .additionalHeaders(Collections.singletonMap(
                        HttpHeaders.AUTHORIZATION,
                        HttpUtils.bearerAuthorizationHeaderValue(token.getAccessToken())))
                .payload(SignUpResult.builder().token(token).build())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/inquiry/usecase/InquiryHospitalEntryUseCase.java
================================================
package kr.co.yeoshin.admin.inquiry.usecase;

import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.model.api.code.ValidatorCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.InquiryHospitalEntryTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.ValidatorException;
import kr.co.yeoshin.admin.inquiry.controller.model.InquiryHospitalEntryMutationRequest;
import kr.co.yeoshin.admin.inquiry.controller.model.InquiryHospitalEntryRegisterRequest;
import kr.co.yeoshin.admin.inquiry.service.InquiryHospitalEntryService;
import kr.co.yeoshin.admin.inquiry.usecase.model.InquiryHospitalEntryPageablePayload;
import kr.co.yeoshin.admin.inquiry.usecase.model.InquiryHospitalEntryPayload;
import kr.co.yeoshin.admin.notification.component.handler.SlackNotificationHandler;
import kr.co.yeoshin.admin.notification.component.model.SlackNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.common.utils.ValidationUtils;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class InquiryHospitalEntryUseCase {

    private final InquiryHospitalEntryService inquiryHospitalEntryService;
    private final ResponseFactory responseFactory;
    private final SlackTemplateFactory slackTemplateFactory;
    private final SlackNotificationHandler slackNotificationHandler;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final TransactionTemplate transactionTemplate;

    public ApiResponse<BoolPayload> registerInquiry(InquiryHospitalEntryRegisterRequest request) {
        if (!ValidationUtils.isValidCellPhone(request.getCellPhone())) {
            throw new ValidatorException(ValidatorCode.VALIDATOR_CELL_PHONE_INVALID);
        }

        if (!ValidationUtils.isValidEmail(request.getEmail())) {
            throw new ValidatorException(ValidatorCode.VALIDATOR_EMAIL_INVALID);
        }

        InquiryHospitalEntryTemplate inquiryHospitalEntryTemplate = transactionTemplate.executeMainWritableTransaction(
                () -> inquiryHospitalEntryService.registerInquiry(request));

        SlackNotificationContext slackNotificationContext = slackTemplateFactory.inquiryHospitalEntry(
                inquiryHospitalEntryTemplate);

        messagePublisher.publishNotification(NotificationMessage.of(NotificationPayload.builder()
                .slack(slackNotificationContext)
                .build()));

        return responseFactory.success(BoolPayload.builder().result(true).build());

    }

    public ApiResponse<InquiryHospitalEntryPageablePayload> retrieveInquiries() {
        return responseFactory.success(
                transactionTemplate.executeMainReadableTransaction(() -> InquiryHospitalEntryPageablePayload.builder()
                        .inquiries(inquiryHospitalEntryService.retrieveInquiries())
                        .build()));
    }

    public ApiResponse<InquiryHospitalEntryPayload> retrieveInquiry(long inquiryId) {
        return responseFactory.success(
                transactionTemplate.executeMainReadableTransaction(() -> InquiryHospitalEntryPayload.builder()
                        .inquiry(inquiryHospitalEntryService.retrieveInquiry(inquiryId))
                ).build());
    }

    public ApiResponse<InquiryHospitalEntryPayload> modifyInquiry(long inquiryId, InquiryHospitalEntryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {

            return responseFactory.success(InquiryHospitalEntryPayload.builder()
                    .inquiry(inquiryHospitalEntryService.modifyInquiry(inquiryId, request)).build());
        });
    }

    public ApiResponse<BoolPayload> deleteInquiry(long inquiryId) {
        return responseFactory.success(
                transactionTemplate.executeMainWritableTransaction(() -> inquiryHospitalEntryService.deleteInquiry(inquiryId)));
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/inquiry/usecase/model/InquiryHospitalEntryPageablePayload.java
================================================
package kr.co.yeoshin.admin.inquiry.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.InquiryHospitalEntryTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class InquiryHospitalEntryPageablePayload {
    private List<InquiryHospitalEntryTemplate> inquiries;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/inquiry/usecase/model/InquiryHospitalEntryPayload.java
================================================
package kr.co.yeoshin.admin.inquiry.usecase.model;

import kr.co.yeoshin.admin.common.model.template.InquiryHospitalEntryTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class InquiryHospitalEntryPayload {
    private InquiryHospitalEntryTemplate inquiry;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/invitation/usecase/InvitationUseCase.java
================================================
package kr.co.yeoshin.admin.invitation.usecase;

import static kr.co.yeoshin.admin.common.model.api.code.AdminCode.ADMIN_INVITATION_ERROR;

import java.util.Collections;
import kr.co.yeoshin.admin.auth.model.AuthorizedAdmin;
import kr.co.yeoshin.admin.common.Constant.Admin.Invitation;
import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.ValidatorCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.exception.InvitationException;
import kr.co.yeoshin.admin.exception.ValidatorException;
import kr.co.yeoshin.admin.invitation.controller.model.InvitationRequest;
import kr.co.yeoshin.admin.invitation.controller.model.InvitationResult;
import kr.co.yeoshin.admin.invitation.service.InvitationService;
import kr.co.yeoshin.admin.notification.component.model.GmailNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.NotificationMailTemplateType;
import kr.co.yeoshin.admin.notification.component.model.NotificationResult;
import kr.co.yeoshin.admin.notification.service.NotificationService;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class InvitationUseCase {

    private final InvitationService invitationService;
    private final NotificationService notificationService;
    private final ValidatorService validatorService;
    private final TransactionTemplate transactionTemplate;
    private final ResponseFactory responseFactory;

    public ApiResponse<InvitationResult> inviteManager(InvitationRequest request) {
        if (!validatorService.validate(Validator.EMAIL, request.getEmail())) {
            log.error("invitation request email: {} is invalid", request.getEmail());
            throw new ValidatorException(ValidatorCode.VALIDATOR_EMAIL_INVALID);
        }

        AuthorizedAdmin admin = DiagnosticContext.admin()
                .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_LOGIN_REQUIRED));

        String invitationLinkUrl = invitationService.createInvitationLinkUrlWithCode(admin.getId(), Invitation.EXPIRES_IN_MINUTES)
                .orElseThrow(() -> new InvitationException(ADMIN_INVITATION_ERROR,
                        MessageUtils.format("send invitation email to: {} is failed", request.getEmail())));

        NotificationResult result = notificationService.sendToOne(
                GmailNotificationContext.builder(
                                request.getEmail(),
                                "test invitation",
                                NotificationMailTemplateType.HOSPITAL_MANAGER_INVITATION)
                        .templateParams(Collections.singletonMap("invitationLink", invitationLinkUrl))
                        .build());

        if (CollectionUtils.isEmpty(result.getSuccess())) {
            throw new InvitationException(ADMIN_INVITATION_ERROR,
                    MessageUtils.format("send invitation email to: {} is failed", request.getEmail()));
        }

        return responseFactory.success(
                InvitationResult.builder()
                        .result(true)
                        .build());
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/log/service/model/RestrictionGeoPositionUsagePageablePayload.java
================================================
package kr.co.yeoshin.admin.log.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.RestrictionGeoPositionUsageTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RestrictionGeoPositionUsagePageablePayload implements SystemAccessible {

    private List<RestrictionGeoPositionUsageTemplate> restrictionGeoPositions;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/log/usecase/LogUseCase.java
================================================
package kr.co.yeoshin.admin.log.usecase;

import java.time.Duration;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.LogCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.LogException;
import kr.co.yeoshin.admin.log.controller.model.RestrictionGeoPositionUsageFilterRequest;
import kr.co.yeoshin.admin.log.service.LogService;
import kr.co.yeoshin.admin.log.service.model.RestrictionGeoPositionUsagePageablePayload;
import kr.co.yeoshin.common.restriction.entity.RestrictionGeoPositionUsage;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.util.ObjectUtils;

@UseCase
@RequiredArgsConstructor
public class LogUseCase {

    private static final int MAX_GEO_POSITION_SEARCH_RANGE_SIZE = 3;

    private final LogService logService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public RestrictionGeoPositionUsagePageablePayload geoPositions(RestrictionGeoPositionUsageFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            validateSearchDuration(request);

            Page<RestrictionGeoPositionUsage> usage = logService.geoPositionUsages(request);

            return RestrictionGeoPositionUsagePageablePayload.builder()
                    .restrictionGeoPositions(payloadFactory.restrictionGeoPositionUsageTemplates(usage.getContent()))
                    .pageable(payloadFactory.pageableTemplate(usage))
                    .build();
        });
    }

    private void validateSearchDuration(RestrictionGeoPositionUsageFilterRequest request) {
        if (ObjectUtils.isEmpty(request.getAt().getFrom()) || ObjectUtils.isEmpty(request.getAt().getTo())) {
            throw new LogException(LogCode.LOG_RESTRICTION_GEO_POSITION_SEARCH_RANGE_EMPTY);
        }

        Duration between = Duration.between(request.getAt().getFrom(),
                request.getAt().getTo());

        if (between.toDays() > MAX_GEO_POSITION_SEARCH_RANGE_SIZE) {
            throw new LogException(LogCode.LOG_RESTRICTION_GEO_POSITION_SEARCH_RANGE_LIMIT);
        }

    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/component/cdn/CdnTemplate.java
================================================
package kr.co.yeoshin.admin.media.component.cdn;

import java.io.InputStream;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.security.Security;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.config.props.MediaCdnPrivateAccessibleProps;
import kr.co.yeoshin.admin.config.props.MediaCdnProps;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.jets3t.service.CloudFrontService;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.ResponseCookie;
import org.springframework.stereotype.Component;

@Slf4j
@AllArgsConstructor
@Component
public class CdnTemplate {

    private final ApplicationProps applicationProps;
    private byte[] privateKey;

    @PostConstruct
    public void init() throws Exception {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try (InputStream keyStream = new ClassPathResource(
                applicationProps.getMedia().getCdn().getPrivateAccessible().getKeyPath()).getInputStream()) {
            this.privateKey = org.jets3t.service.utils.ServiceUtils.readInputStreamToBytes(keyStream);
        }
    }

    public String createSignedUrl(String path, Supplier<String> fallbackUrl) {
        MediaCdnProps cdnProps = applicationProps.getMedia().getCdn();

        MediaCdnPrivateAccessibleProps privateAccessibleProps = cdnProps.getPrivateAccessible();
        LocalDateTime expireTime = LocalDateTime.now(ZoneOffset.UTC).plusSeconds(
                privateAccessibleProps.getExpireSeconds());

        try {
            return CloudFrontService.signUrlCanned(
                    MessageUtils.format("https://{}/{}", privateAccessibleProps.getDomain(), path),
                    privateAccessibleProps.getKeyPairId(),
                    privateKey,
                    Date.from(expireTime.toInstant(ZoneOffset.UTC))
            );
        } catch (Exception e) {
            log.error("cdn({}) create signed url error", path, e);
            return fallbackUrl.get();
        }
    }

    @Builder
    @Getter
    private static class Signature {

        private String name;
        private String value;
    }

    public Optional<CdnSignature> createSignedSignatures(String path) {
        MediaCdnProps cdnProps = applicationProps.getMedia().getCdn();
        MediaCdnPrivateAccessibleProps privateAccessibleProps = cdnProps.getPrivateAccessible();
        LocalDateTime expireTime = LocalDateTime.now(ZoneOffset.UTC).plusSeconds(privateAccessibleProps.getExpireSeconds());

        try {
            Date expireDate = Date.from(expireTime.toInstant(ZoneOffset.UTC));
            String resourceUrlOrPath =
                    MessageUtils.format("https://{}/{}", privateAccessibleProps.getDomain(), path);

            String policy = CloudFrontService.buildPolicyForSignedUrl(resourceUrlOrPath, expireDate, null, null);

            String signedUrl = CloudFrontService.signUrl(
                    resourceUrlOrPath,
                    privateAccessibleProps.getKeyPairId(),
                    privateKey,
                    policy);

            URI signedUri = new URI(signedUrl);

            Map<String, String> params = URLEncodedUtils.parse(signedUri, StandardCharsets.UTF_8).stream()
                    .collect(Collectors.toMap(
                            (NameValuePair x) -> StringUtils.lowerCase(x.getName()),
                            NameValuePair::getValue));
            String signedSignature = params.get("signature");
            String signedPolicy = params.get("policy");
            if (StringUtils.isAnyBlank(signedSignature, signedPolicy)) {
                log.error("cdn({}) create blank signature/policy", path);
                return Optional.empty();
            }

            return Optional.of(CdnSignature.builder()
                    .queryParams(URLEncodedUtils.format(
                            List.of(
                                    new BasicNameValuePair("Policy", signedPolicy),
                                    new BasicNameValuePair("Signature", signedSignature),
                                    new BasicNameValuePair("Key-Pair-Id", privateAccessibleProps.getKeyPairId())
                            ),
                            StandardCharsets.UTF_8.name()
                    ))
                    .cookies(Stream.of(
                                    Signature.builder().name("CloudFront-Policy").value(signedPolicy).build(),
                                    Signature.builder().name("CloudFront-Signature").value(signedSignature).build(),
                                    Signature.builder().name("CloudFront-Key-Pair-Id").value(privateAccessibleProps.getKeyPairId()).build()
                            ).map(x -> ResponseCookie.from(x.getName(), x.getValue())
                                    .domain(privateAccessibleProps.getDomain())
                                    .path("/" + path)
                                    .httpOnly(true)
                                    .secure(true)
                                    .build()
                                    .toString())
                            .collect(Collectors.toList()))
                    .build());
        } catch (Exception e) {
            log.error("cdn({}) create signed signatures error", path, e);
            return Optional.empty();
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/component/template/LocalMediaTemplate.java
================================================
package kr.co.yeoshin.admin.media.component.template;

import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@Profile({"local", "test"})
@Component
public class LocalMediaTemplate extends MediaTemplate {

    @Autowired
    public LocalMediaTemplate(S3Template s3Template) {
        super(s3Template);
    }

    @Override
    public boolean upload(S3Media media, MultipartFile file) {
        log.info(MessageUtils.format("media is uploaded virtually. (/{}/{}/{})",
                media.getBucketName(), media.getBucketPath(), media.getFileName()));
        return true;
    }

    @Override
    public boolean copy(S3Media source, S3Media destination) {
        log.info(MessageUtils.format("media is copied virtually. (/{}/{}/{} -> /{}/{}/{})",
                source.getBucketName(), source.getBucketPath(), source.getFileName(),
                destination.getBucketName(), destination.getBucketPath(), destination.getFileName()));
        return true;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/component/template/MediaTemplate.java
================================================
package kr.co.yeoshin.admin.media.component.template;

import java.io.InputStream;
import java.util.Optional;
import com.amazonaws.services.s3.model.ObjectMetadata;
import kr.co.yeoshin.admin.common.model.api.code.MediaCode;
import kr.co.yeoshin.admin.exception.MediaException;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@AllArgsConstructor
@Profile({"dev", "qa", "stage", "prod"})
@Component
public class MediaTemplate {

    private final S3Template s3Template;

    public boolean upload(S3Media media, MultipartFile file) {
        ObjectMetadata objectMetadata = Optional.ofNullable(media.getObjectMetadata())
                .orElseGet(() -> {
                    ObjectMetadata m = new ObjectMetadata();
                    m.setContentType(file.getContentType());
                    m.setContentLength(file.getSize());
                    m.setHeader("filename", media.getFileName());

                    return m;
                });
        try (InputStream inputStream = file.getInputStream()) {
            s3Template.upload(media.getBucketName(),
                    MessageUtils.format("{}/{}", media.getBucketPath(), media.getFileName()),
                    inputStream,
                    objectMetadata
            );

            return true;
        } catch (Exception e) {
            log.error("media s3 upload failed", e);
            throw new MediaException(MediaCode.MEDIA_UPLOAD_ERROR);
        }
    }

    public boolean copy(S3Media source, S3Media destination) {
        try {
            s3Template.copy(source.getBucketName(),
                    MessageUtils.format("{}/{}", source.getBucketPath(), source.getFileName()),
                    destination.getBucketName(),
                    MessageUtils.format("{}/{}", destination.getBucketPath(), destination.getFileName()));
            return true;
        } catch (Exception e) {
            log.error("media s3 copy failed", e);
            throw new MediaException(MediaCode.MEDIA_UPLOAD_ERROR);
        }
    }

    public boolean isExist(S3Media media) {
        try {
            return s3Template.isExist(
                    MessageUtils.format("{}/{}", media.getBucketName(), media.getBucketPath()),
                    media.getFileName());
        } catch (Exception e) {
            log.error("check media exist api call is failed", e);
            return false;
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/component/template/S3Template.java
================================================
package kr.co.yeoshin.admin.media.component.template;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StreamUtils;
import software.amazon.awssdk.core.sync.RequestBody;

@Slf4j
@AllArgsConstructor
public class S3Template {

    private final AmazonS3 s3;

    public PutObjectResult upload(String bucketName, String fileName, InputStream inputStream, ObjectMetadata objectMetadata) {
        PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, fileName, inputStream, objectMetadata)
                .withCannedAcl(CannedAccessControlList.Private);

        return s3.putObject(putObjectRequest);
    }

    public CopyObjectResult copy(
            String sourceBucketName,
            String sourceFileName,
            String destinationBucketName,
            String destinationFileName
    ) {
        CopyObjectRequest copyObjectRequest = new CopyObjectRequest(
                sourceBucketName, sourceFileName, destinationBucketName, destinationFileName)
                .withCannedAccessControlList(CannedAccessControlList.Private);

        return s3.copyObject(copyObjectRequest);
    }

    public boolean isExist(String bucketName, String fileName) {
        return s3.doesObjectExist(bucketName, fileName);
    }

    public Optional<File> download(String bucket, String file, String toFileName) {
        try {
            S3Object object = s3.getObject(bucket, file);
            try {
                S3ObjectInputStream objectContent = object.getObjectContent();
                FileCopyUtils.copy(objectContent, new FileOutputStream(toFileName));
                return Optional.of(new File(toFileName));
            } catch (IOException e) {
                log.error("download object({}/{}) failed", bucket, file, e);
                return Optional.empty();
            }
        } catch (AmazonS3Exception e) {
            if (e.getStatusCode() != HttpStatus.NOT_FOUND.value()) {
                log.error("s3 download failed", e);
            }
            return Optional.empty();
        }
    }

    public void upload(PutObjectRequest request) {
        try {
            s3.putObject(request);
        } catch (Exception e) {
            log.error("fail to excel file upload");
        }
    }


}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/controller/model/MediaEndpointPayload.java
================================================
package kr.co.yeoshin.admin.media.controller.model;

import kr.co.yeoshin.admin.media.component.provider.model.MediaEndpoint;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaEndpointPayload {
    private long id;
    private MediaEndpoint endpoint;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/controller/model/MediaFileUploadPayload.java
================================================
package kr.co.yeoshin.admin.media.controller.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.media.component.provider.model.MediaEndpoint;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaFileUploadPayload implements PlusAccessible {

    private long id;
    private long size;
    private String file;
    private MediaEndpoint endpoint;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/controller/model/MediaImageUploadPayload.java
================================================
package kr.co.yeoshin.admin.media.controller.model;

import kr.co.yeoshin.admin.media.component.provider.model.MediaEndpoint;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaImageUploadPayload {

    private long id;
    private long size;
    private String image;
    private MediaEndpoint endpoint;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/controller/model/MediaJobStatusPayload.java
================================================
package kr.co.yeoshin.admin.media.controller.model;

import kr.co.yeoshin.admin.media.component.transcoder.JobStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaJobStatusPayload {

    private long id;
    private String jobId;
    private JobStatus status;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/controller/model/MediaJobTaskPayload.java
================================================
package kr.co.yeoshin.admin.media.controller.model;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaJobTaskPayload {

    private long id;
    private long size;
    private String jobId;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/controller/model/MediaSignaturesPayload.java
================================================
package kr.co.yeoshin.admin.media.controller.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.media.component.cdn.CdnSignature;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaSignaturesPayload implements PlusAccessible {

    private CdnSignature signatures;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/media/usecase/MediaUseCase.java
================================================
package kr.co.yeoshin.admin.media.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.media.component.template.Media;
import kr.co.yeoshin.admin.media.component.transcoder.TranscoderJob;
import kr.co.yeoshin.admin.media.controller.model.*;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.usecase.model.FileUpload;
import kr.co.yeoshin.admin.media.usecase.model.ImageUpload;
import kr.co.yeoshin.admin.media.usecase.model.MediaUpload;
import kr.co.yeoshin.admin.media.usecase.model.VideoUpload;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@UseCase
public class MediaUseCase {

    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;

    public MediaFileUploadPayload uploadImage(ImageUpload image) {
        return upload(image);
    }

    public MediaJobTaskPayload uploadVideo(VideoUpload video) {
        long adminId = DiagnosticContext.fetchAdminId();

        Media media = mediaService.createMedia(video);
        long mediaId = transactionTemplate.executeMainWritableTransaction(
                () -> mediaService.registerStatus(adminId, video, media).getId());

        mediaService.uploadMedia(media, video.getMultipartFile());

        TranscoderJob transcodeJob = mediaService.createTranscodeJob(media);

        return MediaJobTaskPayload.builder()
                .id(mediaId)
                .size(video.getMultipartFile().getSize())
                .jobId(transcodeJob.getId())
                .build();
    }

    public MediaFileUploadPayload uploadFile(FileUpload file) {
        return upload(file);
    }

    public MediaJobStatusPayload retrieveVideoJobStatus(long mediaId, String jobId) {
        long adminId = DiagnosticContext.fetchAdminId();

        MediaStatus status = transactionTemplate.executeMainReadableTransaction(
                () -> mediaService.findStatus(adminId, mediaId));

        return MediaJobStatusPayload.builder()
                .id(mediaId)
                .jobId(jobId)
                .status(mediaService.retrieveTranscodeJobStatus(
                        status.getAccessibleType(),
                        status.getDomainType(),
                        status.getFileName(),
                        jobId))
                .build();
    }

    public MediaSignaturesPayload signatures(MediaSignaturesRequest request) {
        return MediaSignaturesPayload.builder()
                .signatures(mediaService.createCdnSignatures(request.getMedia(), request.getAccessible()))
                .build();
    }

    public MediaEndpointPayload getMediaEndpoint(long mediaId) {
        long adminId = DiagnosticContext.fetchAdminId();

        MediaStatus status = transactionTemplate.executeMainReadableTransaction(
                () -> mediaService.findStatus(adminId, mediaId));

        return MediaEndpointPayload.builder()
                .id(mediaId)
                .endpoint(mediaService.retrieveEndpoint(
                        status.getMediaType(),
                        status.getAccessibleType(),
                        status.getDomainType(),
                        status.getFileName()))
                .build();
    }

    private MediaFileUploadPayload upload(MediaUpload file) {
        long adminId = DiagnosticContext.fetchAdminId();

        Media media = mediaService.createMedia(file);
        long mediaId = transactionTemplate.executeMainWritableTransaction(
                () -> mediaService.registerStatus(adminId, file, media).getId());

        mediaService.uploadMedia(media, file.getMultipartFile());

        return MediaFileUploadPayload.builder()
                .id(mediaId)
                .file(media.getFileName())
                .size(file.getMultipartFile().getSize())
                .endpoint(mediaService.retrieveEndpoint(
                        media.getType(), file.getAccessibleType(), file.getDomainType(), media.getFileName()))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/service/model/BlacklistMemberPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.BlacklistMemberTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BlacklistMemberPageablePayload {

    private List<BlacklistMemberTemplate> blacklistMembers;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/service/model/DormantMemberPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.service.model;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DormantMemberPageablePayload {

    private List<MemberTemplate> members;
    private Map<Long, ZonedDateTime> recentAccessAtsByMemberId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/service/model/MemberLevelPayload.java
================================================
package kr.co.yeoshin.admin.member.service.model;

import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.LevelTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberLevelTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberServiceStatTemplate;
import kr.co.yeoshin.common.member.type.Level;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelPayload {

    private MemberLevelTemplate previousMemberLevel;
    private MemberServiceStatTemplate previousServiceStat;
    private MemberLevelTemplate memberLevel;
    private MemberServiceStatTemplate serviceStat;
    private MemberLevelTemplate expectMemberLevel;
    private MemberServiceStatTemplate expectServiceStat;
    private Map<Level, LevelTemplate> levels;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/service/model/MemberLevelsPayload.java
================================================
package kr.co.yeoshin.admin.member.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.MemberLevelTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelsPayload implements SystemAccessible {

    private List<MemberLevelTemplate> memberLevels;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/service/model/MemberOrderPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.order.service.model.OrderPageablePayload.OrderRelations;
import kr.co.yeoshin.common.payment.model.OrderSummary;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberOrderPageablePayload {

    private OrderSummary summary;
    private List<OrderTemplate> orders;
    private OrderRelations relations;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductTemplate> salesProducts;
    private Map<Long, HospitalTemplate> hospitals;
    private Map<Long, PaymentTemplate> payments;
    private Map<Long, OrderSalesProductTemplate> orderSalesProducts;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/service/model/ReportBlockMemberPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReportBlockMemberPageablePayload {

    private List<MemberShortTemplate> members;
    private Map<Long, Integer> reportCounts;
    private Map<Long, Integer> blockCounts;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/MemberUseCase.java
================================================
package kr.co.yeoshin.admin.member.usecase;

import static kr.co.yeoshin.admin.common.Constant.SystemCash.MAXIMUM_AMOUNT_PER_SESSION;

import com.mysema.commons.lang.Pair;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.NumberType;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.ValidatorCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.api.request.PageableRequest;
import kr.co.yeoshin.admin.common.model.api.request.PageableRequest.Order;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.coupon.controller.model.MemberCouponFilterRequest;
import kr.co.yeoshin.admin.coupon.service.CouponService;
import kr.co.yeoshin.admin.coupon.service.model.MemberCouponPageablePayload;
import kr.co.yeoshin.admin.exception.MemberException;
import kr.co.yeoshin.admin.exception.ValidatorException;
import kr.co.yeoshin.admin.member.controller.model.*;
import kr.co.yeoshin.admin.member.service.MemberMetaService;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.member.service.model.*;
import kr.co.yeoshin.admin.member.usecase.model.*;
import kr.co.yeoshin.admin.member.usecase.model.MemberCouponDetailPageablePayload.MemberCouponRelations;
import kr.co.yeoshin.admin.member.usecase.model.MemberPayload.HistoryList;
import kr.co.yeoshin.admin.notification.component.model.NotificationContext;
import kr.co.yeoshin.admin.notification.component.model.NotificationContextResult;
import kr.co.yeoshin.admin.notification.component.model.NotificationResult;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.GmailTemplateFactory;
import kr.co.yeoshin.admin.notification.service.NotificationService;
import kr.co.yeoshin.admin.notification.type.NotificationChannel;
import kr.co.yeoshin.admin.order.controller.model.OrderPageableRequest;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.order.service.model.OrderPageablePayload;
import kr.co.yeoshin.admin.order.service.model.OrderPageablePayload.OrderRelations;
import kr.co.yeoshin.admin.point.controller.model.MemberPointFilterRequest;
import kr.co.yeoshin.admin.point.service.MemberPointService;
import kr.co.yeoshin.admin.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.admin.point.service.model.MemberPointPageablePayload;
import kr.co.yeoshin.admin.point.service.model.MemberPointUsageReports;
import kr.co.yeoshin.admin.quest.service.QuestService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventMessage;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.report.controller.model.ReportBlockFilterRequest;
import kr.co.yeoshin.admin.report.service.ReportBlockService;
import kr.co.yeoshin.admin.report.service.model.ContentReportPageablePayload;
import kr.co.yeoshin.admin.systemcash.controller.model.SystemCashFilterRequest;
import kr.co.yeoshin.admin.systemcash.service.SystemCashService;
import kr.co.yeoshin.admin.systemcash.usecase.model.SystemCashPageablePayload;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;
import kr.co.yeoshin.common.Constant.At;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.coupon.model.MemberCouponSummary;
import kr.co.yeoshin.common.interesting.entity.Interesting;
import kr.co.yeoshin.common.member.entity.*;
import kr.co.yeoshin.common.member.entity.MemberLevel;
import kr.co.yeoshin.common.member.model.BlacklistMemberHistoryWhereCondition;
import kr.co.yeoshin.common.member.model.MemberServiceStatSummary;
import kr.co.yeoshin.common.member.type.AgreementTermsType;
import kr.co.yeoshin.common.member.type.BlacklistReasonType;
import kr.co.yeoshin.common.member.type.BlacklistType;
import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.notification.entity.NotificationConfig;
import kr.co.yeoshin.common.notification.type.NotificationConfigType;
import kr.co.yeoshin.common.payment.entity.PaymentCoupon;
import kr.co.yeoshin.common.payment.model.OrderSummary;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.point.entity.MemberPointSummary;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.setup.entity.DeviceToken;
import kr.co.yeoshin.common.type.DeviceType;
import kr.co.yeoshin.common.type.UserType;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import kr.co.yeoshin.common.utils.ValidationUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort.Direction;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class MemberUseCase {

    private final MemberService memberService;
    private final MemberMetaService memberMetaService;
    private final NotificationService notificationService;
    private final OrderService orderService;
    private final MemberPointService memberPointService;
    private final CouponService couponService;
    private final ReportBlockService reportBlockService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final SqsQueueMessagePublisher messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final GmailTemplateFactory gmailTemplateFactory;
    private final ValidatorService validatorService;
    private final SystemCashService systemCashService;
    private final QuestService questService;

    public MemberPageablePayload retrieveNormalMemberList(MemberFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<MemberServiceSummary> members = memberMetaService.fetchAllMemberServiceSummaryByWhereCondition(
                    request.toWhereCondition());
            List<MemberAccount> accounts = memberService.retrieveMemberAccountsByMemberIds(
                    members.stream().map(it -> it.getMember().getId()).collect(Collectors.toList()));
            Map<Long, List<AuthProvider>> providersByMemberId = accounts.stream()
                    .collect(Collectors.groupingBy(it -> it.getMember().getId(),
                            Collectors.mapping(MemberAccount::getProvider, Collectors.toList())));

            List<MemberShortTemplate> memberShortTemplates = members.get()
                    .map(it -> payloadFactory.memberShortTemplate(it, providersByMemberId.get(it.getMember().getId())))
                    .collect(Collectors.toUnmodifiableList());

            return MemberPageablePayload.builder()
                    .members(memberShortTemplates)
                    .pageable(payloadFactory.pageableTemplate(members))
                    .build();
        });
    }

    public ReportBlockMemberPageablePayload retrieveReportBlockMemberList(ReportBlockMemberFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> memberService.retrieveReportBlockMembers(request));
    }

    public DormantMemberPageablePayload retrieveDormantMembers(DormantMemberFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> memberService.retrieveDormantMembers(request));
    }

    public MemberPayload retrieveMemberDetail(long memberId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Member member = memberService.findMemberByMemberId(memberId)
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            List<AuthProvider> authProviders = new ArrayList<>();
            String providerId = null;
            List<MemberAccount> memberAccounts = memberService.retrieveMemberAccountsByMemberIds(List.of(member.getId()));
            for (var memberAccount : memberAccounts) {
                authProviders.add(memberAccount.getProvider());
                if (memberAccount.getProvider() == AuthProvider.SYSTEM) {
                    providerId = memberAccount.getProviderId();
                }
            }

            Interesting interesting = memberMetaService.findInterestingByMemberId(memberId).orElse(null);
            MemberShortTemplate recommender = retrieveRecommender(memberId);

            MemberServiceSummary summary = memberMetaService.fetchMemberServiceSummaryByMemberId(memberId)
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            BlacklistMemberPageablePayload abusingMember = retrieveAbusingMembers(memberId);
            BlacklistMemberPageablePayload attentionMember = retrieveAttentionMembers(memberId);

            List<MemberTermsAgreeLogTemplate<AgreementTermsType>> memberTermsAgrees = retrieveMemberTermsAgreeLogs(memberId);
            List<DeviceType> devices = retrieveMemberDevices(memberId);
            List<MemberPlaceTemplate> memberPlaces = retrieveMemberPlaces(memberId);
            List<NotificationConfigTemplate> notificationConfigs = retrieveNotificationConfigs(memberId, member);

            return MemberPayload.builder()
                    .member(payloadFactory.memberTemplate(summary))
                    .recommender(recommender)
                    .memberAccounts(memberAccounts.stream()
                            .map(payloadFactory::memberAccountTemplate)
                            .collect(Collectors.toList()))
                    .authProviders(authProviders)
                    .providerId(providerId)
                    .memberTermsAgrees(memberTermsAgrees)
                    .memberSkinType(payloadFactory.memberSkinTypeTemplate(interesting))
                    .devices(devices)
                    .interestLocations(memberPlaces)
                    .memberTroubles(payloadFactory.memberTroubles(interesting))
                    .notificationConfigs(notificationConfigs)
                    .abusingHistory(HistoryList.<BlacklistMemberTemplate>builder()
                            .history(abusingMember.getBlacklistMembers())
                            .accumulatedCount(summary.getAbusingCount())
                            .recentUpdatedAt(InvokeSupporters.getOrNullIfEmpty(
                                    () -> abusingMember.getBlacklistMembers().get(0).getUpdatedAt()))
                            .build())
                    .attentionHistory(HistoryList.<BlacklistMemberTemplate>builder()
                            .history(attentionMember.getBlacklistMembers())
                            .accumulatedCount(summary.getAttentionCount())
                            .recentUpdatedAt(InvokeSupporters.getOrNullIfEmpty(
                                    () -> attentionMember.getBlacklistMembers().get(0).getUpdatedAt()))
                            .build())
                    .recentAccessAt(InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(summary.getRecentAccessAt())))
                    .recentLoginBy(Optional.ofNullable(summary.getRecentAuthProvider())
                            .orElse(authProviders.size() == 1 ? authProviders.get(0) : null))
                    .build();
        });
    }

    public MemberPointDetailPageablePayload retrieveMemberPoints(long memberId, MemberPointFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            int totalPoint = memberPointService.findTotalMemberPointByMemberId(memberId, LocalDateTime.now());

            MemberPointFilterRequest modifiedRequest = request.toBuilder().memberIds(List.of(memberId)).build();
            MemberPointPageablePayload payload = memberPointService.retrieveMemberPoints(modifiedRequest);

            return MemberPointDetailPageablePayload.builder()
                    .totalPoint(totalPoint)
                    .memberPoints(payload.getMemberPoints())
                    .memberPointCompositionsByMemberPointId(payload.getMemberPointCompositionsByMemberPointId())
                    .adminProviderIds(payload.getAdminProviderIds())
                    .ordersByOrderId(payload.getOrdersByOrderId())
                    .expirePointsByOrderId(payload.getExpirePointsByOrderId())
                    .reservations(payload.getReservations())
                    .tickets(payload.getTickets())
                    .ticketPricesByTicketId(payload.getTicketPricesByTicketId())
                    .levelsByMemberPointId(payload.getLevelsByMemberPointId())
                    .pageable(payload.getPageable())
                    .build();
        });
    }

    public ExtinctionPointPayload retrieveExtinctionPoint(long memberId, int daysOfPointExtinction) {
        final LocalDateTime now = LocalDateTime.now();
        final LocalDateTime to = now.plusDays(daysOfPointExtinction).with(At.LOCAL_TIME_MAX);

        return transactionTemplate.executeMainReadableTransaction(() -> {
            int extinctionPoint = memberPointService.findMemberPointSummaryByMemberIdAndExpireAt(memberId, now, to)
                    .stream()
                    .mapToInt(MemberPointSummary::getAccumulatePoint)
                    .sum();
            return ExtinctionPointPayload.builder()
                    .points(extinctionPoint)
                    .days(daysOfPointExtinction)
                    .build();
        });
    }

    public BlacklistMemberPageablePayload retrieveManagingMembers(BlacklistMemberHistoryFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> memberMetaService.retrieveBlacklistMembers(request.toWhereCondition()));
    }

    public MemberReportBlockPageablePayload retrieveMemberReportBlocks(long memberId, ReportBlockFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            MemberServiceSummary summary = memberMetaService.fetchMemberServiceSummaryByMemberId(memberId)
                    .orElseThrow(() -> new MemberException(CommonCode.BAD_REQUEST));

            int blockCount = summary.getBlockCount();
            int reportCount = summary.getReportCount();

            ContentReportPageablePayload payload = reportBlockService.retrieveContentReports(
                    request.toBuilder().reportedMemberIds(List.of(memberId)).build());

            return MemberReportBlockPageablePayload.builder()
                    .reportedCount(reportCount)
                    .blockedCount(blockCount)
                    .reportBlocks(payload.getReports())
                    .members(payload.getMembers())
                    .pageable(payload.getPageable())
                    .build();
        });
    }

    public List<ProcessResult<Long>> updateBlacklistMemberStatus(BlacklistMemberStatusMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            List<ProcessResult<Long>> results = memberMetaService.updateBlacklistStatuses(request);

            if (request.getReasonType() == BlacklistReasonType.RELEASE || request.getType() != BlacklistType.ABUSING) {
                return results;
            }

            // ABUSING 설정인 경우 알림톡 보냄
            List<Long> successMemberIds = results.stream()
                    .filter(ProcessResult::isSuccess)
                    .map(ProcessResult::getItem)
                    .collect(Collectors.toList());

            List<Member> members = memberService.findMembersByMemberIds(successMemberIds);

            if (members.size() != successMemberIds.size()) {
                log.error("It's failed to find the member information.\nmemberIds: ({})", successMemberIds);
            }

            NotificationPayload.NotificationPayloadBuilder notificationPayloadBuilder = NotificationPayload.builder();
            members.forEach(member -> notificationPayloadBuilder.alimTalk(
                    alimTalkTemplateFactory.abusingMember(member, request.getReasonType(), request.getReason())));
            NotificationMessage notificationMessage = NotificationMessage.of(notificationPayloadBuilder.build());
            messagePublisher.publishNotification(notificationMessage);

            return results;
        });
    }

    public MemberPayload modifyMember(long memberId, MemberMutationRequest request) {
        transactionTemplate.executeMainWritableTransaction(() -> memberService.modifyMember(memberId, request));
        return retrieveMemberDetail(memberId);
    }

    public MemberOrderPageablePayload retrieveMemberOrders(long memberId, OrderPageableRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            OrderPageablePayload payload = orderService.retrieveOrders(request.toBuilder()
                    .userTypes(Set.of(UserType.MEMBER))
                    .memberIds(List.of(memberId))
                    .build()
                    .toWhereCondition());
            OrderSummary orderSummary = orderService.summarizeOrderStatByOrdererId(
                    UserType.MEMBER, memberId, List.of(OrderStatus.COMPLETE));

            return MemberOrderPageablePayload.builder()
                    .summary(orderSummary)
                    .orders(payload.getOrders())
                    .relations(OrderRelations.builder()
                            .salesEventIds(payload.getRelations().getSalesEventIds())
                            .salesProductIds(payload.getRelations().getSalesProductIds())
                            .orderSalesProductIds(payload.getRelations().getOrderSalesProductIds())
                            .hospitalIds(payload.getRelations().getHospitalIds())
                            .paymentIds(payload.getRelations().getPaymentIds())
                            .build())
                    .salesEvents(payload.getSalesEvents())
                    .salesProducts(payload.getSalesProducts())
                    .orderSalesProducts(payload.getOrderSalesProducts())
                    .hospitals(payload.getHospitals())
                    .payments(payload.getPayments())
                    .pageable(payload.getPageable())
                    .build();
        });
    }

    public MemberCouponDetailPageablePayload retrieveMemberCoupons(long memberId, MemberCouponFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            MemberCouponPageablePayload payload = couponService.fetchMemberCoupons(
                    request.toBuilder().memberId(memberId).build().toWhereCondition());
            MemberCouponSummary memberCouponSummary = couponService.summarizeMemberCouponStat(memberId);

            List<PaymentCoupon> paymentCoupons = orderService.fetchPaymentCouponsByMemberCouponIds(
                    payload.getMemberCoupons()
                            .stream()
                            .map(MemberCouponTemplate::getId)
                            .collect(Collectors.toSet()),
                    Collections.singleton(OrderStatus.COMPLETE));

            return MemberCouponDetailPageablePayload.builder()
                    .memberCouponSummary(memberCouponSummary)
                    .memberCoupons(payload.getMemberCoupons())
                    .pageable(payload.getPageable())
                    .coupons(payload.getCoupons())
                    .couponIssueConditions(payload.getCouponIssueConditions())
                    .relations(MemberCouponRelations.builder()
                            .orderIds(paymentCoupons.stream()
                                    .collect(Collectors.toMap(
                                            x -> x.getMemberCoupon().getId(),
                                            x -> x.getOrder().getId(),
                                            (a, b) -> a)))
                            .build())
                    .hospitals(payload.getHospitals())
                    .build();
        });
    }

    public BoolPayload resetPassword(long memberId, NotificationChannel notificationChannel) {
        if (!EnumSet.of(NotificationChannel.ALIM_TALK, NotificationChannel.EMAIL).contains(notificationChannel)) {
            throw new MemberException(CommonCode.BAD_REQUEST, "notificationChannel allows only ALIM_TALK and EMAIL.");
        }

        Member member = transactionTemplate.executeMainReadableTransaction(
                () -> memberService.findMemberByMemberId(memberId)
                        .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST))
        );

        transactionTemplate.executeMainWritableTransaction(() -> {
            String password = memberService.resetPassword(memberId);

            switch (notificationChannel) {
                case ALIM_TALK:
                    NotificationPayload payload = NotificationPayload.builder()
                            .alimTalk(alimTalkTemplateFactory.memberPasswordReset(member, password))
                            .build();
                    messagePublisher.publishNotification(NotificationMessage.of(payload));
                    break;
                case EMAIL:
                    NotificationContext context = gmailTemplateFactory.memberPasswordReset(member.getEmail(), password);
                    NotificationResult notificationResult = notificationService.sendToOne(context);
                    if (CollectionUtils.isNotEmpty(notificationResult.getFailed())) {
                        throw new MemberException(CommonCode.ERROR_WITH_MESSAGE, notificationResult.getFailed()
                                .stream()
                                .map(NotificationContextResult::getMessage)
                                .collect(Collectors.joining()));
                    }
                    break;
            }

            return true;
        });

        return BoolPayload.success();
    }

    public BoolPayload resetAccount(long memberId, AccountRequest request) {
        if (!validatorService.validate(Validator.MEMBER_ID, request.getAccessKey())) {
            throw new MemberException(ValidatorCode.VALIDATOR_MEMBER_ID_INVALID);
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            MemberAccount memberAccount = memberService.resetAccount(memberId, request.getAccessKey());

            String password = memberService.resetPassword(memberId);

            NotificationPayload payload = NotificationPayload.builder()
                    .alimTalk(alimTalkTemplateFactory.memberAccountReset(memberAccount.getMember(), memberAccount, password))
                    .build();
            messagePublisher.publishNotification(NotificationMessage.of(payload));

            return true;
        });

        return BoolPayload.builder().result(true).build();
    }

    private List<MemberTermsAgreeLogTemplate<AgreementTermsType>> retrieveMemberTermsAgreeLogs(long memberId) {
        return memberMetaService.fetchRecentTermsAgreeLogsWithoutMemberByMemberId(memberId)
                .stream()
                .map(payloadFactory::memberTermsAgreeLogTemplate)
                .collect(Collectors.toUnmodifiableList());
    }

    private List<DeviceType> retrieveMemberDevices(long memberId) {
        return memberMetaService.findDeviceTokenByMemberId(memberId)
                .stream()
                .map(DeviceToken::getDeviceType)
                .distinct()
                .collect(Collectors.toUnmodifiableList());
    }

    private List<MemberPlaceTemplate> retrieveMemberPlaces(long memberId) {
        return memberMetaService.findInterestingByMemberId(memberId)
                .map(payloadFactory::memberPlaceTemplates)
                .orElse(Collections.emptyList());
    }

    private List<NotificationConfigTemplate> retrieveNotificationConfigs(long memberId, Member member) {
        Map<NotificationConfigType, NotificationConfig> notificationConfigMap = notificationService.configs(memberId)
                .stream()
                .collect(Collectors.toUnmodifiableMap(NotificationConfig::getType, Function.identity()));

        final String on = "on";
        final String off = "off";

        return Arrays.stream(NotificationConfigType.values())
                .map(type -> {
                    NotificationConfig config = notificationConfigMap.get(type);
                    if (config != null) {
                        return NotificationConfigTemplate.builder().code(type.name())
                                .value(config.getActivateYn().toBoolean() ? on : off)
                                .createdAt(DateUtil.convertFrom(config.getCreated()))
                                .updatedAt(DateUtil.convertFrom(config.getUpdated()))
                                .build();
                    } else {
                        return NotificationConfigTemplate.builder().code(type.name())
                                .value(off)
                                .createdAt(DateUtil.convertFrom(member.getCreated()))
                                .updatedAt(DateUtil.convertFrom(member.getCreated()))
                                .build();
                    }
                })
                .collect(Collectors.toUnmodifiableList());
    }

    private MemberShortTemplate retrieveRecommender(long memberId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Optional<MemberServiceSummary> memberServiceSummary = memberMetaService
                    .fetchRecommenderMemberServiceSummaryByMemberId(memberId);

            if (memberServiceSummary.isEmpty()) {
                return null;
            }

            List<MemberAccount> accounts =
                    memberService.retrieveMemberAccountsByMemberIds(
                            Collections.singletonList(memberServiceSummary.get().getMember().getId()));

            return payloadFactory.memberShortTemplate(memberServiceSummary.get(), accounts.stream()
                    .map(MemberAccount::getProvider)
                    .collect(Collectors.toList()));
        });
    }

    private BlacklistMemberPageablePayload retrieveAbusingMembers(long memberId) {
        BlacklistMemberHistoryWhereCondition whereCondition = BlacklistMemberHistoryWhereCondition.builder()
                .memberIds(List.of(memberId))
                .type(BlacklistType.ABUSING)
                .pageable(PageableRequest.builder()
                        .page(0)
                        .size(Integer.MAX_VALUE)
                        .sort(List.of(Order.of("id", Direction.DESC)))
                        .build()
                        .toPageable())
                .build();

        return memberMetaService.retrieveBlacklistMembers(whereCondition);
    }

    private BlacklistMemberPageablePayload retrieveAttentionMembers(long memberId) {
        BlacklistMemberHistoryWhereCondition whereCondition = BlacklistMemberHistoryWhereCondition.builder()
                .memberIds(List.of(memberId))
                .type(BlacklistType.ATTENTION)
                .pageable(PageableRequest.builder()
                        .page(0)
                        .size(Integer.MAX_VALUE)
                        .sort(List.of(Order.of("id", Direction.DESC)))
                        .build()
                        .toPageable())
                .build();

        return memberMetaService.retrieveBlacklistMembers(whereCondition);
    }

    public MemberSystemCashDetailPageablePayload retrieveMemberSystemCashes(long memberId, SystemCashFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {

            int remainCash = systemCashService.findTotalCashByMemberId(memberId);
            int systemCash = Math.min(remainCash, MAXIMUM_AMOUNT_PER_SESSION);
            int depositSystemCash = Math.max(remainCash - systemCash, 0);

            SystemCashRefundAccountTemplate refundAccount = systemCashService.findAllRefundAccounts(memberId).stream()
                    .map(payloadFactory::systemCashRefundAccountTemplate)
                    .findFirst().orElse(null);

            SystemCashFilterRequest modifiedRequest = request.toBuilder().memberIds(List.of(memberId)).build();
            SystemCashPageablePayload payload = systemCashService.retrieveSystemCashes(modifiedRequest);

            List<Long> systemCashIds = payload.getSystemCashes().stream().map(SystemCashTemplate::getId)
                    .collect(Collectors.toList());

            Map<Long, SystemCashRefundStatusTemplate> systemCashRefundStatuses = systemCashService.findAllSystemCashRefundStatusBySystemCashIds(
                            systemCashIds).stream()
                    .map(payloadFactory::systemCashRefundStatusTemplate)
                    .collect(Collectors.toMap(SystemCashRefundStatusTemplate::getSystemCashId, Function.identity(), (a, b) -> a));

            return MemberSystemCashDetailPageablePayload.builder()
                    .systemCash(NumberTemplate.builder().type(NumberType.INTEGER).value(systemCash).build())
                    .depositSystemCash(NumberTemplate.builder().type(NumberType.INTEGER).value(depositSystemCash).build())
                    .systemCashRefundAccount(refundAccount)
                    .systemCashes(payload.getSystemCashes())
                    .ordersByOrderId(payload.getOrders())
                    .systemCashRefundStatusBySystemCashId(systemCashRefundStatuses)
                    .pageable(payload.getPageable())
                    .build();
        });
    }

    public BoolPayload registerRecommendCode(long memberId, String recommendCode) {
        Pair<Boolean, List<Long>> pointUsage = transactionTemplate.executeMainWritableTransaction(() -> {
            MemberServiceSummary inviteeSummary = memberService.fetchMemberServiceSummaryByMemberId(memberId);

            if (StringUtils.equalsIgnoreCase(inviteeSummary.getInviteCode(), recommendCode)) {
                log.info("memberId({}) recommends with own invite code", memberId);
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_NOT_EXIST);
            }

            MemberServiceSummary inviterSummary = memberService.fetchMemberServiceSummaryByInviteCode(recommendCode)
                    .orElseThrow(() -> new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_NOT_EXIST));

            if (!ValidationUtils.isValidCellPhone(inviteeSummary.getMember().getCountryCallingCode(),
                    inviteeSummary.getMember().getCellPhone())) {
                throw new ValidatorException(ValidatorCode.VALIDATOR_CELL_PHONE_NOT_EXIST);
            }

            if (!memberService.validateRecommendableByCellPhone(LocalDateTime.now(), inviteeSummary.getMember().getCellPhone())) {
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_INVALID_INVITEE_RESIGN_90DAYS);
            }

            if (!memberService.validateRecommendableByCellPhone(LocalDateTime.now(), inviterSummary.getMember().getCellPhone())) {
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_INVALID_INVITER_RESIGN_90DAYS);
            }

            Member inviter = inviterSummary.getMember();
            Member invitee = inviteeSummary.getMember();

            memberPointService.registerMemberPoint(
                    Collections.singletonList(invitee.getId()),
                    MemberPointAddContext.builder()
                            .title(MessageUtils.format(Action.REWARD_INVITE_FRIEND.getTitleKo(),
                                    inviterSummary.getInviteCode()))
                            .action(Action.REWARD_INVITE_FRIEND)
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(PointUtils.expireAt(Point.REWARD_SIGN_UP_RECOMMEND_EXPIRE_DAYS_DEFAULT))
                                    .point(Constant.Point.REGISTER_REWARD_INVITE_FRIEND)
                                    .build()))
                            .point(Constant.Point.REGISTER_REWARD_INVITE_FRIEND)
                            .type(MemberPointType.REWARD)
                            .build()
            );

            MemberPointUsageReports memberPointUsageReports = memberPointService.registerMemberPoint(
                    Collections.singletonList(inviter.getId()),
                    MemberPointAddContext.builder()
                            .title(MessageUtils.format(Action.REWARD_INVITE_FRIEND.getTitleKo(),
                                    inviteeSummary.getInviteCode()))
                            .action(Action.REWARD_INVITE_FRIEND)
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(PointUtils.expireAt(Point.REWARD_SIGN_UP_RECOMMEND_EXPIRE_DAYS_DEFAULT))
                                    .point(Constant.Point.REGISTER_REWARD_INVITE_FRIEND)
                                    .build()))
                            .point(Constant.Point.REGISTER_REWARD_INVITE_FRIEND)
                            .type(MemberPointType.REWARD)
                            .build());

            inviteeSummary.changeRecommendCode(inviterSummary.getInviteCode());

            if (memberPointUsageReports != null) {
                questService.registerInvitationRecord(inviter.getId(),
                        1,
                        0,
                        Constant.Point.REGISTER_REWARD_INVITE_FRIEND,
                        memberPointUsageReports.getUsageReports().get(inviter.getId()).getMemberPoint().getCreated());
            }

            return Pair.of(memberPointUsageReports != null, List.of(inviter.getId(), invitee.getId()));
        });

        pointUsage.getSecond().forEach(
                id -> messagePublisher.publishDomainEvent(DomainEventMessage.of(DomainEventType.MEMBER_POINT_CREATE, id)));

        return BoolPayload.builder().result(pointUsage.getFirst()).build();
    }

    public MemberStatPayload memberStat(long id, LocalDate from, LocalDate to) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            MemberServiceStatSummary stat = memberService.findMemberServiceStat(id, from, to);

            return MemberStatPayload.builder()
                    .serviceStat(MemberServiceStatTemplate.of(stat))
                    .build();
        });
    }

    public MemberLevelsPayload memberLevels(long id, LocalDate from, LocalDate to) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            MemberTemplate member = memberService.retrieveMember(id)
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            List<MemberLevel> memberLevels = memberService.findAllMemberLevelsByMemberId(member.getId(), from, to);

            return MemberLevelsPayload.builder()
                    .memberLevels(memberLevels.stream()
                            .map(MemberLevelTemplate::of)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public MemberLevelPayload level(long id, LocalDate at) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            MemberTemplate member = memberService.retrieveMember(id)
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            MemberLevelContainer previousLevel = memberService.findMemberLevel(member.getId(), at.minusMonths(1));
            MemberLevelContainer level = memberService.findMemberLevel(member.getId(), at);
            MemberLevelContainer expectLevel = memberService.findMemberLevel(member.getId(), at.plusMonths(1));

            return MemberLevelPayload.builder()
                    .previousMemberLevel(MemberLevelTemplate.of(previousLevel.getMemberLevel()))
                    .previousServiceStat(MemberServiceStatTemplate.of(previousLevel.getStat()))
                    .memberLevel(MemberLevelTemplate.of(level.getMemberLevel()))
                    .serviceStat(MemberServiceStatTemplate.of(level.getStat()))
                    .expectMemberLevel(MemberLevelTemplate.of(expectLevel.getMemberLevel()))
                    .expectServiceStat(MemberServiceStatTemplate.of(expectLevel.getStat()))
                    .levels(Arrays.stream(Level.values())
                            .collect(Collectors.toMap(Function.identity(), LevelTemplate::of)))
                    .build();
        });
    }

    public MemberLevelStatLogPageablePayload findAllStatLogs(long memberId, MemberLevelStatLogFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            MemberLevelStatLogFilterRequest filterRequest = request.toBuilder()
                    .memberIds(Set.of(memberId))
                    .build();

            Page<MemberServiceStatTicketLog> statLogs = memberService.findAllStatLogs(filterRequest.toWhereCondition());

            return MemberLevelStatLogPageablePayload.builder()
                    .statLogs(statLogs.stream()
                            .map(MemberServiceStatTicketLogTemplate::of)
                            .collect(Collectors.toList()))
                    .pageable(payloadFactory.pageableTemplate(statLogs))
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/BlockMembersPayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BlockMembersPayload {

    private long id;
    private MemberTemplate reportMember;
    private MemberTemplate blockMember;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    // TODO : 사유, 기존 서비스 없음. reboot IA 항목에 표기, 협의 후 변경.
    // private String reason;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/ExtinctionPointPayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ExtinctionPointPayload implements SystemAccessible {

    private int points;
    private int days;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberCouponDetailPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.coupon.model.MemberCouponSummary;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberCouponDetailPageablePayload {

    private MemberCouponSummary memberCouponSummary;
    private MemberCouponRelations relations;
    private List<MemberCouponTemplate> memberCoupons;
    private Map<Long, CouponShortTemplate> coupons;
    private Map<Long, List<CouponIssueConditionTemplate>> couponIssueConditions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private PageableTemplate pageable;


    @Builder
    @Getter
    @JsonInclude(Include.NON_NULL)
    public static class MemberCouponRelations {

        private Map<Long, Long> orderIds;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberLevelStatLogPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.MemberServiceStatTicketLogTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberLevelStatLogPageablePayload  implements SystemAccessible {

    private List<MemberServiceStatTicketLogTemplate> statLogs;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberPageablePayload {

    private List<MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberPayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.member.type.AgreementTermsType;
import kr.co.yeoshin.common.type.DeviceType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberPayload {

    private MemberTemplate member;
    private MemberShortTemplate recommender;
    private List<MemberAccountTemplate> memberAccounts;
    @Deprecated
    private List<AuthProvider> authProviders;
    @Deprecated
    private String providerId;
    private List<DeviceType> devices;
    private List<MemberTermsAgreeLogTemplate<AgreementTermsType>> memberTermsAgrees;
    private MemberSkinTypeTemplate memberSkinType;
    private List<MemberPlaceTemplate> interestLocations;
    private List<CategoryTemplate> memberTroubles;
    private List<NotificationConfigTemplate> notificationConfigs;
    private HistoryList<BlacklistMemberTemplate> abusingHistory;
    private HistoryList<BlacklistMemberTemplate> attentionHistory;
    private ZonedDateTime recentAccessAt;
    private AuthProvider recentLoginBy;

    @Getter
    @Builder
    public static class HistoryList<T> {

        private List<T> history;
        private long accumulatedCount;
        @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
        private ZonedDateTime recentUpdatedAt;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberPointDetailPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberPointDetailPageablePayload {

    private Integer totalPoint;
    private List<MemberPointTemplate> memberPoints;
    private Map<Long, List<MemberPointCompositionTemplate>> memberPointCompositionsByMemberPointId;
    private Map<Long, String> adminProviderIds;
    private Map<Long, OrderTemplate> ordersByOrderId;
    private Map<Long, Integer> expirePointsByOrderId;
    private Map<Long, ReservationShortTemplate> reservations;
    private Map<Long, TicketTemplate> tickets;
    private Map<Long, ValueTemplate<Integer>> ticketPricesByTicketId;
    private Map<Long, LevelTemplate> levelsByMemberPointId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberReportBlockPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.ContentReportTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberReportBlockPageablePayload implements SystemAccessible {

    private long reportedCount;
    private long blockedCount;
    private List<ContentReportTemplate> reportBlocks;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberStatPayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import kr.co.yeoshin.admin.common.model.template.MemberServiceStatTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberStatPayload {

    private MemberServiceStatTemplate serviceStat;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MemberSystemCashDetailPageablePayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberSystemCashDetailPageablePayload {

    private NumberTemplate systemCash;
    private NumberTemplate depositSystemCash;
    private SystemCashRefundAccountTemplate systemCashRefundAccount;
    private List<SystemCashTemplate> systemCashes;
    private Map<Long, SystemCashRefundStatusTemplate> systemCashRefundStatusBySystemCashId;
    private Map<Long, OrderTemplate> ordersByOrderId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/member/usecase/model/MembersPayload.java
================================================
package kr.co.yeoshin.admin.member.usecase.model;

import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MembersPayload {

    private MemberTemplate member;
    private int totalPurchaseCount;
    private int questionWritingCount;
    private int salesEventScrapCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/notification/component/mapper/NotificationMailTemplate.java
================================================
package kr.co.yeoshin.admin.notification.component.mapper;

import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.admin.notification.component.model.NotificationMailTemplateType;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.stringtemplate.v4.ST;

@RequiredArgsConstructor
@Component
public class NotificationMailTemplate {

    private final NotificationMailTemplateLoader templateLoader;

    public Optional<String> build(NotificationMailTemplateType mailTemplate, Map<String, Object> params) {
        Optional<String> query = templateLoader.getTemplate(mailTemplate);
        if (query.isEmpty()) {
            return Optional.empty();
        }

        ST template = new ST(query.get(), '$', '$');
        params.forEach(template::add);

        return Optional.of(template.render());
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/notification/component/mapper/NotificationTemplate.java
================================================
package kr.co.yeoshin.admin.notification.component.mapper;

import java.util.Map;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.stringtemplate.v4.ST;

@RequiredArgsConstructor
@Component
public class NotificationTemplate {

    private final NotificationTemplateMapperLoader mapperLoader;

    public Optional<String> build(String namespace, String id, Map<String, Object> params) {
        Optional<String> query = mapperLoader.getTemplate(namespace, id);
        if (query.isEmpty()) {
            return Optional.empty();
        }

        ST template = new ST(query.get(), '$', '$');
        params.forEach(template::add);

        return Optional.of(template.render());
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/order/service/model/OrderPageablePayload.java
================================================
package kr.co.yeoshin.admin.order.service.model;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderPageablePayload {

    private List<OrderTemplate> orders;
    private OrderRelations relations;
    private Map<Long, SalesEventTemplate> salesEvents;
    // TODO salesProducts 필드 삭제
    private Map<Long, SalesProductTemplate> salesProducts;
    private Map<Long, MemberTemplate> members;
    private Map<Long, HospitalTemplate> hospitals;
    private Map<Long, PaymentTemplate> payments;
    private Map<Long, OrderSalesProductTemplate> orderSalesProducts;
    private PageableTemplate pageable;

    @Builder
    @Getter
    @JsonInclude(Include.NON_NULL)
    public static class OrderRelations {
        private Map<Long, List<Long>> salesEventIds;
        private Map<Long, List<Long>> salesProductIds;
        private Map<Long, Long> memberIds;
        private Map<Long, List<Long>> hospitalIds;
        private Map<Long, Long> paymentIds;
        private Map<Long, List<Long>> orderSalesProductIds;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/order/service/model/OrderPayload.java
================================================
package kr.co.yeoshin.admin.order.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderPayload implements SystemAccessible {

    private OrderTemplate order;
    private MemberTemplate member;
    private PaymentTemplate payment;
    private PriceTemplate refundPrice;
    @Deprecated
    private CouponTemplate coupon;
    private String pgNumber;
    private Boolean isPreCancelAvailable;
    private BankAccountTemplate refundBankAccount;
    private List<TicketTemplate> tickets;
    private List<OrderPartCancelTemplate> partCancels;
    @Deprecated
    private MoneyReceiptLogTemplate moneyReceiptLog;

    private Map<Long, MemberCouponTemplate> memberCoupons;
    private Map<Long, CouponTemplate> coupons;
    private Map<Long, List<CouponIssueConditionTemplate>> couponIssueConditions;

    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    private Map<Long, OrderSalesProductTemplate> orderSalesProducts;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, MoneyReceiptLogTemplate> moneyReceiptLogs;
    private Map<Long, ReservationShortTemplate> reservationsByTicketId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/order/usecase/IamPortUseCase.java
================================================
package kr.co.yeoshin.admin.order.usecase;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import kr.co.yeoshin.admin.common.Constant.AdPoint;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.PaymentCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.PaymentException;
import kr.co.yeoshin.admin.hospital.service.HospitalManagementContactService;
import kr.co.yeoshin.admin.hospital.service.model.HospitalManagementContactContext;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.order.controller.model.IamportNotificationRequest;
import kr.co.yeoshin.admin.order.usecase.type.IamportStatusType;
import kr.co.yeoshin.admin.payment.iamport.component.retrofit.model.PaymentPayload;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.point.service.AdPointService;
import kr.co.yeoshin.admin.point.service.model.AdPointCharge;
import kr.co.yeoshin.admin.point.service.model.AdPointContext;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;
import kr.co.yeoshin.common.payment.entity.PaymentVirtualBank;
import kr.co.yeoshin.common.payment.type.*;
import kr.co.yeoshin.common.point.entity.AdPointProduct;
import kr.co.yeoshin.common.point.entity.OrderAdPointProduct;
import kr.co.yeoshin.common.point.type.AdPointAction;
import kr.co.yeoshin.common.point.type.AdPointChargeType;
import kr.co.yeoshin.common.point.type.AdPointType;
import kr.co.yeoshin.common.type.Bank;
import kr.co.yeoshin.common.utils.IamPortUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import kr.co.yeoshin.common.utils.model.IamPortMerchant;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.EnumUtils;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class IamPortUseCase {

    private final PaymentService paymentService;
    private final AdPointService adPointService;
    private final HospitalManagementContactService hospitalManagementContactService;
    private final TransactionTemplate transactionTemplate;
    private final SqsQueueMessagePublisher messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;

    private static final String DEFAULT_VBANK_HOLDER = "(주)패스트레인";

    public boolean notify(IamportNotificationRequest request) {
        IamportStatusType status = IamportStatusType.findByName(request.getStatus());
        if (status == null) {
            log.error("iamport notification({}) status undefined", request);
            return false;
        }
        Optional<IamPortMerchant> merchant = IamPortUtils.decryptIamPortMerchantUid(request.getMerchantUid());
        log.info("iamport notification({}) called - merchant({})", request, merchant);

        if (merchant.isEmpty()) {
            log.error("iamport notification({}) order id is not present", request);
            return false;
        }

        long orderId = merchant.get().getOrderId();

        Function<IamportNotificationRequest, Optional<PaymentPayload>> paymentAmountFunc = (r) -> {
            try {
                PaymentPayload paymentPayload = paymentService.retrieveAdPointPaymentHistory(request.getImportUid());
                log.info("iamport notification({}) payment payload({})", request, paymentPayload);
                return Optional.of(paymentPayload);
            } catch (Exception e) {
                log.error("iamport notification({}) retrieve payment history failed({})", request, e);
                return Optional.empty();
            }
        };

        try {
            Optional<PaymentPayload> payment = paymentAmountFunc.apply(request);
            if (payment.isEmpty()) {
                return false;
            }

            return transactionTemplate.executeMainWritableTransaction(
                    () -> {

                        OrderAdPointProduct orderAdPointProduct = adPointService.fetchOrderAdPointProductByOrderId(orderId)
                                .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_IAMPORT_WEBHOOK_FAIL,
                                        "order_ad_point_products not found."));

                        Hospital hospital = orderAdPointProduct.getHospital();
                        AdPointProduct adPointProduct = orderAdPointProduct.getAdPointProduct();

                        PaymentPayload paymentPayload = payment.get();
                        IamportStatusType afterStatus = IamportStatusType.findByName(paymentPayload.getStatus());

                        if (afterStatus == null) {
                            log.error("iamport notification({}) status undefined", paymentPayload);
                            return false;
                        }

                        PayMethod payMethod = EnumUtils.getEnumIgnoreCase(PayMethod.class, paymentPayload.getPayMethod());
                        if (payMethod == null) {
                            log.error("iamport payment({}) method undefined", paymentPayload);
                            return false;
                        }

                        if (payMethod == PayMethod.VBANK && afterStatus == IamportStatusType.READY) {
                            Bank bank = Bank.findByCode(paymentPayload.getVirtualBankCode())
                                    .orElse(Bank.UNKNOWN);

                            paymentService.registerVirtualBankOrder(PaymentVirtualBank.builder()
                                    .pgType(PgType.IAMPORT)
                                    .orderAdPointProductId(orderAdPointProduct.getId())
                                    .account(paymentPayload.getVirtualBankNumber())
                                    .holder(StringUtils.isBlank(paymentPayload.getVirtualBankHolder()) ? DEFAULT_VBANK_HOLDER
                                            : paymentPayload.getVirtualBankHolder())
                                    .bank(bank)
                                    .expireAt(LocalDateTime.ofInstant(Instant.ofEpochSecond(paymentPayload.getVirtualBankDate()),
                                            ZoneId.systemDefault()))
                                    .build());
                        }

                        OrderStatus beforeStatus = orderAdPointProduct.getOrder().getOrderStatus();

                        if (!orderValidation(beforeStatus, afterStatus.getOrderStatus())) {
                            return true;
                        }

                        if (!registerPurchasedAdPoint(orderAdPointProduct, paymentPayload, afterStatus, payMethod)) {
                            throw new PaymentException(PaymentCode.PAYMENT_IAMPORT_WEBHOOK_FAIL,
                                    "It's failed to register the purchased ad point.");
                        }

                        List<HospitalManagementContactContext> contactContexts = hospitalManagementContactService.fetchAllByHospitalIds(
                                HospitalManagementContactType.AD_POINT, Set.of(hospital.getId()));

                        contactContexts.stream().findFirst().ifPresent(
                                x -> {
                                    NhnKakaoAlimTalkNotificationContext notificationContext =
                                            adPointProduct.getOrderProductType() == OrderProductType.AD_POINT_PRODUCT
                                                    ? alimTalkTemplateFactory.adPointChargeDone(x,
                                                    orderAdPointProduct.getPaidPoint() + orderAdPointProduct.getFreePoint())
                                                    : alimTalkTemplateFactory.salesEventConsultationPointChargeDone(x,
                                                            orderAdPointProduct.getPaidPoint()
                                                                    + orderAdPointProduct.getFreePoint());

                                    messagePublisher.publishNotification(NotificationMessage.of(
                                            NotificationPayload.builder()
                                                    .alimTalk(notificationContext)
                                                    .build()));
                                });

                        return true;
                    }
            );
        } catch (Exception e) {
            log.error("It's failed to register the purchased ad point. orderId: {}", orderId, e);
            transactionTemplate.executeMainWritableTransaction(
                    () -> paymentService.registerPaymentFailure(orderId, PaymentFailureType.AD_POINT_ORDER, e.getMessage()));

            throw e;
        }
    }

    private boolean registerPurchasedAdPoint(
            OrderAdPointProduct orderAdPointProduct,
            PaymentPayload payment,
            IamportStatusType afterStatus,
            PayMethod payMethod
    ) {
        OrderPurchase order = orderAdPointProduct.getOrder();
        Hospital hospital = orderAdPointProduct.getHospital();

        int paymentAmount = payment.getAmount();

        if (order.getTotalSalesPrice() != paymentAmount) {
            log.error("iamport notification ({}) order({}) payment amount({}) does not match", payment, order,
                    paymentAmount);
            return false;
        }

        AdPointAction adPointAction = AdPointAction.getActionByPayMethodAndOrderProductType(payMethod,
                orderAdPointProduct.getAdPointProduct().getOrderProductType());
        LocalDateTime expireAt = PointUtils.expireAt(LocalDateTime.now().plusYears(AdPoint.EXPIRE_YEAR));

        adPointService.registerAdPoint(List.of(hospital.getId()), AdPointContext.builder()
                .title(adPointAction.getDescription())
                .action(adPointAction)
                .type(AdPointType.CHARGE)
                .chargePoints(List.of(
                        AdPointCharge.builder()
                                .chargeType(AdPointChargeType.PAID)
                                .point(orderAdPointProduct.getPaidPoint())
                                .expireAt(expireAt)
                                .build(),
                        AdPointCharge.builder()
                                .chargeType(AdPointChargeType.FREE)
                                .point(orderAdPointProduct.getFreePoint())
                                .expireAt(expireAt)
                                .build()
                ))
                .orderProductType(orderAdPointProduct.getAdPointProduct().getOrderProductType())
                .build());

        orderAdPointProduct.changeOrderStatus(AdPointOrderStatus.COMPLETE);
        orderAdPointProduct.changePayStatus(afterStatus.getOrderStatus());
        order.changeStatus(afterStatus.getOrderStatus());

        PaymentIamport paymentIamport = paymentService.retrievePaymentIamport(order);
        paymentIamport.changeIamportUid(payment.getIamportUniqueId());
        paymentIamport.changeAuthCode(payment.getApplyNumber());
        paymentIamport.changeQuota(payment.getCardQuota());
        paymentIamport.changeMerchantType(MerchantType.findByMerchantId(payment.getPgId()));
        paymentIamport.changePgProvider(PgProvider.findByProvider(payment.getPgProvider()));
        paymentIamport.changeCardCode(payment.getCardCode());
        paymentIamport.changeIssuerCode(payment.getCardCode());
        paymentIamport.changeCardName(payment.getCardName());
        paymentIamport.changeIssuerName(payment.getCardName());

        if (payMethod == PayMethod.VBANK) {
            PaymentVirtualBank paymentVirtualBank = paymentService.retrieveVirtualBankByOrderAdPointProductId(
                    orderAdPointProduct.getId());

            paymentVirtualBank.changeRefId(paymentIamport.getId());
        }

        return true;
    }

    private boolean orderValidation(OrderStatus beforeStatus, OrderStatus afterStatus) {
        return beforeStatus != OrderStatus.COMPLETE && afterStatus == OrderStatus.COMPLETE;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/order/usecase/OrderTestUseCase.java
================================================
package kr.co.yeoshin.admin.order.usecase;

import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.OrderCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.coupon.service.CouponService;
import kr.co.yeoshin.admin.exception.OrderException;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.admin.order.controller.model.OrderCancelRequest;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.order.service.model.OrderCancelDryRunResult;
import kr.co.yeoshin.admin.order.usecase.component.OrderCancelDryRunner;
import kr.co.yeoshin.admin.order.usecase.model.OrderCancelStatus;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.payment.service.RemittanceService;
import kr.co.yeoshin.admin.point.service.MemberPointService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.systemcash.service.SystemCashService;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.common.payment.type.NicepayRemittanceResultType;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.setting.entity.Setting;
import kr.co.yeoshin.common.setting.repository.SettingRepository;
import org.apache.commons.lang3.EnumUtils;
import org.springframework.context.annotation.Profile;
import org.springframework.core.env.Environment;

@UseCase
@Profile({"test", "local", "dev", "qa"})
public class OrderTestUseCase extends OrderUseCase {

    private final SettingRepository settingRepository;

    public OrderTestUseCase(OrderService orderService, PaymentService paymentService, RemittanceService remittanceService,
            MemberService memberService, MemberPointService memberPointService, SystemCashService systemCashService,
            CouponService couponService, TicketService ticketService,
            TransactionTemplate transactionTemplate, PayloadFactory payloadFactory,
            SqsQueueMessagePublisher messagePublisher, AlimTalkTemplateFactory alimTalkTemplateFactory,
            SlackTemplateFactory slackTemplateFactory, Environment environment, SettingRepository settingRepository,
            ApplicationProps applicationProps, OrderCancelDryRunner orderCancelDryRunner) {
        super(orderService, paymentService, remittanceService, memberService, memberPointService, systemCashService,
                couponService, ticketService, transactionTemplate, payloadFactory, messagePublisher, alimTalkTemplateFactory,
                slackTemplateFactory, environment, applicationProps, orderCancelDryRunner);
        this.settingRepository = settingRepository;
    }

    @Override
    protected OrderCancelStatus refundByBankAccount(OrderCancelRequest request, OrderCancelDryRunResult orderCancelDryRunResult) {
        NicepayRemittanceResultType resultType = settingRepository.findByCode(Constant.Setting.REMITTANCE_API_RESULT_TYPE_CODE)
                .map(Setting::getValue)
                .map(type -> EnumUtils.getEnum(NicepayRemittanceResultType.class, type))
                .orElse(NicepayRemittanceResultType.SUCCESS);

        if (resultType == NicepayRemittanceResultType.INCORRECT_ACCOUNT_HOLDER
                || resultType == NicepayRemittanceResultType.INCORRECT_ACCOUNT_NUMBER) {
            // 계좌 정보 불일치인 경우 주문상태 바꾸지 않기 위해 바로 오류 응답
            throw new OrderException(OrderCode.ORDER_CANCEL_INVALID_BANK_ACCOUNT);
        } else if (resultType == NicepayRemittanceResultType.LACK_OF_BALANCE) {
            // 잔고 부족인 경우 주문상태 취소중으로 변경
            return OrderCancelStatus.of(OrderStatus.CANCELING, resultType.getOrderStatusSpecifier());
        } else if (resultType != NicepayRemittanceResultType.SUCCESS) {
            // 이외의 오류인 경에 주문상태 바꾸지 않고 오류 응답
            throw new OrderException(OrderCode.ORDER_CANCEL_BY_BANK_ACCOUNT_FAILURE);
        }

        if (orderCancelDryRunResult.isWholeCancel()) {
            return OrderCancelStatus.of(OrderStatus.CANCEL);
        }

        return OrderCancelStatus.of(OrderStatus.PART_CANCEL);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/order/usecase/OrderUseCase.java
================================================
package kr.co.yeoshin.admin.order.usecase;

import static kr.co.yeoshin.common.payment.type.OrderStatus.*;

import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Profile;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.OrderCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.config.props.NicepayProps;
import kr.co.yeoshin.admin.coupon.service.CouponService;
import kr.co.yeoshin.admin.exception.OrderException;
import kr.co.yeoshin.admin.member.model.MemberOrderMinusStat;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.SlackNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.admin.order.controller.model.OrderCancelRequest;
import kr.co.yeoshin.admin.order.controller.model.OrderPageableRequest;
import kr.co.yeoshin.admin.order.controller.model.PreCancelOffOrderCancelRequest;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.order.service.RefundRemittanceContainer;
import kr.co.yeoshin.admin.order.service.model.OrderCancelDryRunResult;
import kr.co.yeoshin.admin.order.service.model.OrderContainer;
import kr.co.yeoshin.admin.order.service.model.OrderPageablePayload;
import kr.co.yeoshin.admin.order.service.model.OrderPayload;
import kr.co.yeoshin.admin.order.usecase.component.OrderCancelDryRunner;
import kr.co.yeoshin.admin.order.usecase.model.OrderCancel;
import kr.co.yeoshin.admin.order.usecase.model.OrderCancelDryRunPayload;
import kr.co.yeoshin.admin.order.usecase.model.OrderCancelStatus;
import kr.co.yeoshin.admin.payment.nicepay.component.retrofit.model.ApiResponse;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.payment.service.RemittanceService;
import kr.co.yeoshin.admin.payment.service.model.MerchantInfoContext;
import kr.co.yeoshin.admin.payment.service.model.RefundPaymentContainer;
import kr.co.yeoshin.admin.point.service.MemberPointService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.cpm.payment.CpmSettlementContext;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.admin.systemcash.service.SystemCashService;
import kr.co.yeoshin.admin.systemcash.service.model.SystemCashAddContext;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.payment.entity.*;
import kr.co.yeoshin.common.payment.model.SystemCashComposition;
import kr.co.yeoshin.common.payment.type.*;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.SystemCashUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.core.env.Environment;

@Slf4j
@RequiredArgsConstructor
@UseCase
@org.springframework.context.annotation.Profile({"stage", "prod"})
public class OrderUseCase {

    private final OrderService orderService;
    private final PaymentService paymentService;
    private final RemittanceService remittanceService;
    private final MemberService memberService;
    private final MemberPointService memberPointService;
    private final SystemCashService systemCashService;
    private final CouponService couponService;
    private final TicketService ticketService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final SqsQueueMessagePublisher messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SlackTemplateFactory slackTemplateFactory;
    private final Environment environment;
    private final ApplicationProps applicationProps;
    private final OrderCancelDryRunner orderCancelDryRunner;


    public OrderPageablePayload orders(OrderPageableRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> orderService.retrieveOrders(request.toWhereCondition()));
    }

    public OrderPayload order(long orderId) {
        return transactionTemplate.executeMainReadableTransaction(() -> orderService.retrieveOrderPayloadByOrderId(orderId));
    }

    public OrderCancelDryRunPayload cancelOrderDryRun(long orderId) {
        OrderCancelDryRunResult dryRunResult = transactionTemplate.executeMainReadableTransaction(
                () -> orderCancelDryRunner.dryRun(orderId, true));

        Map<Long, MemberCouponTemplate> memberCouponTemplates = dryRunResult.getRefundMemberCoupons().stream()
                .map(payloadFactory::memberCouponTemplate)
                .collect(Collectors.toMap(MemberCouponTemplate::getId, Function.identity()));

        Map<Long, CouponTemplate> couponTemplates = dryRunResult.getRefundMemberCoupons().stream()
                .map(MemberCoupon::getCoupon)
                .map(payloadFactory::couponTemplate)
                .collect(Collectors.toMap(CouponTemplate::getId, Function.identity()));

        return OrderCancelDryRunPayload.builder()
                .orderId(orderId)
                .order(payloadFactory.orderTemplate(dryRunResult.getOrder()))
                .refundMethod(dryRunResult.getRefundMethod())
                .paymentPrice(dryRunResult.getPaymentPrice())
                .refundAmount(dryRunResult.getRefundAmount())
                .refundPoint(InvokeSupporters.getOrDefaultIfNull(() -> dryRunResult.getRefundPoint().getPoint(), 0))
                .refundCouponId(dryRunResult.getRefundCouponId())
                .refundCouponIds(dryRunResult.getRefundMemberCouponIds())
                .refundMemberCouponIds(dryRunResult.getRefundMemberCouponIds())
                .refundCoupon(dryRunResult.getRefundCouponPrice())
                .refundSystemCash(
                        InvokeSupporters.getOrDefaultIfNull(() -> dryRunResult.getRefundSystemCash().getCash(), 0))
                .expirePoint(dryRunResult.getExpirePoint())
                .isWholeCancel(dryRunResult.isWholeCancel())
                .isOverAYear(dryRunResult.isOverAYear())
                .isBeforeReboot(dryRunResult.isBeforeReboot())
                .isPreCancelOn(dryRunResult.isPreCancelOn())
                .hasReservedTickets(dryRunResult.isHasReservedTicket())
                .hasCancelableTickets(dryRunResult.isHasCancelableTickets())
                .isCancelableStatus(dryRunResult.isCancelableStatus())
                .memberCoupons(memberCouponTemplates)
                .coupons(couponTemplates)
                .build();
    }

    public OrderPayload cancelOrder(long orderId, OrderCancelRequest request) {
        OrderPayload result = transactionTemplate.executeMainWritableTransaction(() -> {
            // 취소 가능여부와 취소시에 환불될 금액 등의 내용을 미리 계산.
            // 실제 orders 테이블에 적용하지 않음.
            OrderContainer orderContainer = orderService.fetchOrderContainer(orderId).orElseGet(OrderContainer::empty);
            OrderCancelDryRunResult orderCancelDryRunResult = orderCancelDryRunner.dryRun(orderId, false);

            Supplier<OrderPayload> callable = () -> {
                OrderStatus orderStatus;
                OrderStatusSpecifier statusSpecifier = null;
                if (!orderCancelDryRunResult.hasRefundableThings()) {
                    // 환불할 금액, 포인트, 쿠폰, 여신캐시 모두 없는 경우 주문 상태값만 반영
                    orderStatus = orderCancelDryRunResult.isWholeCancel() ? OrderStatus.CANCEL : OrderStatus.PART_CANCEL;
                } else {
                    if (orderCancelDryRunResult.getRefundMethod() == RefundMethod.SYSTEM_CASH) {
                        orderStatus = orderCancelDryRunResult.isWholeCancel() ? OrderStatus.CANCEL : OrderStatus.PART_CANCEL;
                        if (orderCancelDryRunResult.getRefundAmount() > 0) {
                            systemCashService.registerCash(orderContainer.getOrder().getOrdererId(),
                                    SystemCashAddContext.builder()
                                            .action(SystemCashAction.REFUND_ORDER_CANCEL_SALES_EVENT_PRODUCT)
                                            .cash(orderCancelDryRunResult.getRefundAmount())
                                            .publishType(kr.co.yeoshin.common.payment.type.PublishType.SYSTEM)
                                            .refType(DomainType.ORDER)
                                            .type(SystemCashStatus.TRANS)
                                            .compositions(Collections.singletonList(SystemCashComposition.builder()
                                                    .cash(orderCancelDryRunResult.getRefundAmount())
                                                    .type(SystemCashType.TRANS)
                                                    .expireAt(SystemCashUtils.expireAt())
                                                    .build()))
                                            .refId(orderId)
                                            .build());
                        }

                    } else if (!orderCancelDryRunResult.isPreCancelOn()) {
                        // 선취소 OFF
                        paymentService.registerPaymentFailure(orderId, PaymentFailureType.PRE_CANCEL_OFF, null);
                        orderStatus = CANCELING;
                        statusSpecifier = OrderStatusSpecifier.PRE_CANCEL_OFF;
                    } else if (orderCancelDryRunResult.getRefundAmount() == 0) {
                        orderStatus = refundByMileage(orderCancelDryRunResult);
                    } else if (orderCancelDryRunResult.isOverAYear()) {
                        // 계좌 환불
                        OrderCancelStatus orderCancelStatus = refundByBankAccount(request, orderCancelDryRunResult);
                        orderStatus = orderCancelStatus.getOrderStatus();
                        statusSpecifier = orderCancelStatus.getOrderStatusSpecifier();
                    } else {
                        // 카드 환불
                        orderStatus = refundByPayment(request, orderCancelDryRunResult);
                    }

                    refundAssets(orderCancelDryRunResult, orderStatus);
                }

                return applyCancelStatus(request, orderCancelDryRunResult, orderStatus, statusSpecifier);
            };

            try {
                OrderPayload orderPayload = callable.get();
                publishCpmSettlement(orderContainer, orderCancelDryRunResult);
                notifyCancelResult(orderPayload, orderCancelDryRunResult);
                return orderPayload;
            } catch (Exception e) {
                transactionTemplate.executeMainWritableTransaction(
                        () -> paymentService.registerPaymentFailure(orderId, PaymentFailureType.ORDER_CANCEL_ON_ADMIN,
                                e.getMessage()));
                log.error("It is failed to cancel order. orderId: {}", orderId);
                throw e;
            }
        });

        if (result.getOrder().getOrderStatus().isCancelCompleted()) {
            return result;
        } else if (result.getOrder().getOrderStatus() == CANCELING
                && result.getOrder().getStatusSpecifier() == OrderStatusSpecifier.LACK_OF_BALANCE) {
            throw new OrderException(OrderCode.ORDER_CANCEL_LACK_OF_BALANCE);
        } else {
            throw new OrderException(CommonCode.ERROR_WITH_MESSAGE,
                    Optional.ofNullable(result.getOrder().getStatusSpecifier())
                            .map(OrderStatusSpecifier::getDescription)
                            .orElse(CommonCode.ERROR.getDescription()));
        }
    }

    private OrderPayload applyCancelStatus(
            OrderCancelRequest request,
            OrderCancelDryRunResult orderCancelDryRunResult,
            OrderStatus orderStatus,
            OrderStatusSpecifier statusSpecifier
    ) {
        OrderPurchase order = orderCancelDryRunResult.getOrder();
        long orderId = order.getId();

        // 티켓 상태 변경
        ticketService.modifyTicketStatus(
                orderCancelDryRunResult.getTicketsByStatus(EnumSet.of(TicketStatus.UNUSED, TicketStatus.CANCELING))
                        .stream()
                        .map(Ticket::getId)
                        .collect(Collectors.toSet()),
                orderStatus == OrderStatus.CANCELING ? TicketStatus.CANCELING : TicketStatus.CANCEL);

        // orders 테이블에 상태 적용
        orderService.cancelOrder(request, orderCancelDryRunResult, orderStatus, statusSpecifier);

        if (orderStatus == CANCEL
                && orderCancelDryRunResult.getTotalOrderCompleteCount() <= 1) {
            memberService.modifyFirstOrderAt(order.getOrdererId(), Optional.empty());
        }

        memberService.applyStat(MemberOrderMinusStat.builder()
                .memberId(order.getOrdererId())
                .order(order)
                .at(LocalDateTime.now())
                .build());

        return orderService.retrieveOrderPayloadByOrderId(orderId);
    }


    private void publishCpmSettlement(
            OrderContainer orderContainer,
            OrderCancelDryRunResult orderCancelDryRunResult) {

        Map<Long, CpmSettlementContext> cpmSettlementContexts = new HashMap<>();
        List<Ticket> cancellableTickets = orderCancelDryRunResult.getCancelableTicket();
        for (Ticket cancellableTicket : cancellableTickets) {
            OrderSalesProduct orderSalesProduct = orderContainer.getOrderSalesProducts().get(
                    cancellableTicket.getOrderSalesProduct().getId());
            if (orderSalesProduct == null) {
                continue;
            }

            SalesProductVersion salesProductVersion = orderContainer.getSalesProductVersionsByOrderSalesProduct().get(
                    cancellableTicket.getOrderSalesProduct().getId());
            if (salesProductVersion == null) {
                continue;
            }

            if (cpmSettlementContexts.containsKey(salesProductVersion.getSalesEventId())) {
                CpmSettlementContext cpmSettlementContext = cpmSettlementContexts.get(
                        salesProductVersion.getSalesEventId());
                cpmSettlementContext.addCancelTicketPrice(salesProductVersion.getSalesUnitPrice());

                cpmSettlementContexts.put(salesProductVersion.getSalesEventId(), cpmSettlementContext);
            } else {
                cpmSettlementContexts.put(salesProductVersion.getSalesEventId(),
                        CpmSettlementContext.builder()
                                .salesEventId(salesProductVersion.getSalesEventId())
                                .cancelTicketPrice(salesProductVersion.getSalesUnitPrice())
                                .build());
            }
        }

        messagePublisher.publishCpm(CpmMessageUtils.settlement(
                orderContainer.getOrder().getOrdererId(), new ArrayList<>(cpmSettlementContexts.values())));
    }

    private void notifyCancelResult(OrderPayload payload, OrderCancelDryRunResult orderCancelDryRunResult) {
        NhnKakaoAlimTalkNotificationContext alimTalkContext = makeAlimTalkContext(payload, orderCancelDryRunResult);
        SlackNotificationContext slackContext = makeSlackContext(payload, orderCancelDryRunResult);

        if (!(alimTalkContext == null && slackContext == null)) {
            NotificationPayload.NotificationPayloadBuilder builder = NotificationPayload.builder();

            Optional.ofNullable(alimTalkContext).ifPresent(builder::alimTalk);
            Optional.ofNullable(slackContext).ifPresent(builder::slack);

            NotificationMessage notificationMessage = NotificationMessage.of(builder.build());

            messagePublisher.publishNotification(notificationMessage);
        }
    }

    private NhnKakaoAlimTalkNotificationContext makeAlimTalkContext(OrderPayload payload, OrderCancelDryRunResult dryRunResult) {
        OrderStatusSpecifier statusSpecifier = payload.getOrder().getStatusSpecifier();
        if (!(statusSpecifier == null || statusSpecifier == OrderStatusSpecifier.PRE_CANCEL_OFF)) {
            log.debug("Skipping order cancel notification because statusSpecifier is not null or PRE_CANCEL_OFF.");
            return null;
        }

        List<TicketTemplate> refundedTickets =
                dryRunResult.getTicketsByStatus(TicketStatus.UNUSED)
                        .stream()
                        .map(payloadFactory::ticketTemplate)
                        .collect(Collectors.toList());

        return alimTalkTemplateFactory.orderCancel(OrderCancel.builder()
                .order(payload.getOrder())
                .payment(Optional.ofNullable(payload.getPayment()).map(PaymentTemplate::getContext))
                .member(payload.getMember().toShortTemplate())
                .tickets(refundedTickets)
                .refundMethod(dryRunResult.getRefundMethod())
                .hospitals(new ArrayList<>(payload.getHospitals().values()))
                .refundAmount(dryRunResult.getRefundAmount())
                .refundAccounts(Optional.ofNullable(dryRunResult.getRefundAccounts()).orElse(Collections.emptyList()))
                .preCancel(dryRunResult.isPreCancelOn())
                .canceledAt(dryRunResult.getCanceledAt())
                .build());
    }

    private SlackNotificationContext makeSlackContext(OrderPayload payload, OrderCancelDryRunResult dryRunResult) {
        OrderStatus orderStatus = payload.getOrder().getOrderStatus();
        OrderStatusSpecifier statusSpecifier = payload.getOrder().getStatusSpecifier();

        Function<OrderPayload, List<String>> hospitalNames = p -> p.getHospitals()
                .values()
                .stream()
                .map(HospitalShortTemplate::getName)
                .collect(Collectors.toList());

        if (orderStatus == CANCELING && statusSpecifier == OrderStatusSpecifier.PRE_CANCEL_OFF) {
            return slackTemplateFactory.cancelingOrderByPreCancelOff(payload.getOrder(), hospitalNames.apply(payload));
        } else if (orderStatus == CANCELING && statusSpecifier == OrderStatusSpecifier.LACK_OF_BALANCE) {
            return slackTemplateFactory.lackOfRefundBalance(payload.getOrder());
        } else if (orderStatus.isCancelCompleted()
                && dryRunResult.isOverAYear()
                && dryRunResult.isPreCancelOn()
                && dryRunResult.getRefundMethod() != RefundMethod.SYSTEM_CASH) {
            return slackTemplateFactory.refundedByBankAccount(payload.getOrder(), dryRunResult, hospitalNames.apply(payload));
        }

        return null;
    }

    public BoolPayload updateAdminMemo(long orderId, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> orderService.updateAdminMemo(orderId, adminMemo));
    }

    public BoolPayload forceCancelOrder(long orderId, PreCancelOffOrderCancelRequest request) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            OrderPurchase order = orderService.retrieveOrderByOrderId(orderId)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_NOT_EXIST));

            OrderStatus previousStatus = order.getOrderStatus();

            OrderCancelDryRunResult orderCancelDryRunResult = orderCancelDryRunner.dryRun(orderId, false);

            // 포인트, 쿠폰 환불
            refundAssets(orderCancelDryRunResult,
                    orderCancelDryRunResult.isWholeCancel() ? OrderStatus.CANCEL : OrderStatus.PART_CANCEL);

            paymentService.donePaymentFailureByOrderIds(List.of(orderId));

            orderService.forceOrderCancel(orderId, request, orderCancelDryRunResult);
            if (previousStatus == OrderStatus.COMPLETE) {
                return memberService.applyStat(MemberOrderMinusStat.builder()
                        .memberId(order.getOrdererId())
                        .order(order)
                        .at(LocalDateTime.now())
                        .build());
            }

            return true;
        });

        return BoolPayload.of(result);
    }

    public BoolPayload refundByBankAccount(long orderId) {
        OrderPayload orderPayload = transactionTemplate.executeMainWritableTransaction(() -> {
            // 1년 지난 티켓 환불 중에 계좌 금액 부족으로 실패하고, 다시 계좌 송금 요청 하는 경우에만 처리
            OrderCancelDryRunResult orderCancelDryRunResult = orderCancelDryRunner.dryRun(orderId, false);
            OrderPurchase order = orderCancelDryRunResult.getOrder();

            if (order.getOrderStatus() != CANCELING
                    || order.getStatusSpecifier() != OrderStatusSpecifier.LACK_OF_BALANCE) {
                throw new OrderException(OrderCode.ORDER_CANCEL_BY_BANK_ACCOUNT_CAN_ONLY_CANCELING);
            }

            OrderRefundBankAccount account = orderService.retrieveOrderRefundBankAccount(orderId)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_CANCEL_REQUIRE_BANK_ACCOUNT));

            OrderCancelRequest orderCancelRequest = OrderCancelRequest.builder()
                    .bankType(account.getBankType())
                    .depositorName(account.getAccountHolder())
                    .accountNumber(account.getAccountNumber())
                    .cancelReasonCode(order.getCancelReasonCode())
                    .cancelReason(order.getCancelReason())
                    .build();
            // 계좌 송금
            OrderCancelStatus orderCancelStatus = refundByBankAccount(orderCancelRequest, orderCancelDryRunResult);
            // 포인트, 쿠폰 환불
            refundAssets(orderCancelDryRunResult, orderCancelStatus.getOrderStatus());

            OrderPayload result = applyCancelStatus(orderCancelRequest, orderCancelDryRunResult,
                    orderCancelStatus.getOrderStatus(),
                    orderCancelStatus.getOrderStatusSpecifier());

            notifyCancelResult(result, orderCancelDryRunResult);

            return result;
        });

        if (orderPayload.getOrder().getOrderStatus().isCancelCompleted()) {
            return BoolPayload.of(true);
        } else {
            throw new OrderException(OrderCode.ORDER_CANCEL_REMITTANCE_FAILURE,
                    Optional.ofNullable(orderPayload.getOrder().getStatusSpecifier())
                            .map(OrderStatusSpecifier::getDescription)
                            .orElse(CommonCode.ERROR.getDescription()));
        }
    }

    protected OrderCancelStatus refundByBankAccount(OrderCancelRequest request, OrderCancelDryRunResult orderCancelDryRunResult) {
        // QA 이전까지 송금 솔루션 사용하지 않기 위함
        String profile = Profile.getActiveProfile(environment);
        if (!Set.of(Profile.STAGE.getValue(), Profile.PROD.getValue()).contains(profile)) {
            return orderCancelDryRunResult.isWholeCancel()
                    ? OrderCancelStatus.of(OrderStatus.CANCEL) : OrderCancelStatus.of(OrderStatus.PART_CANCEL);
        }

        // 계좌 환불
        if (!request.hasValidBankAccountInfo()) {
            throw new OrderException(OrderCode.ORDER_CANCEL_REQUIRE_BANK_ACCOUNT);
        }

        long orderId = orderCancelDryRunResult.getOrder().getId();

        OrderRefundBankAccount account = orderService.registerOrderRefundByBankAccount(
                orderId, orderCancelDryRunResult.getOrder().getOrdererId(),
                request.getBankType(), request.getAccountNumber(), request.getDepositorName());

        RefundRemittanceContainer refundRemittanceContainer = RefundRemittanceContainer.builder()
                .refType(DomainType.ORDER)
                .refId(orderId)
                .bankType(account.getBankType())
                .accountNumber(account.getAccountNumber())
                .accountHolder(account.getAccountHolder())
                .refundAmount(orderCancelDryRunResult.getRefundAmount())
                .at(orderCancelDryRunResult.getCanceledAt())
                .build();

        NicepayProps nicepayProps = applicationProps.getPayment().getNicePay();
        MerchantInfoContext merchantInfoContext = MerchantInfoContext.builder()
                .merchantId(nicepayProps.getRemittanceTransferMerchantId())
                .merchantKey(nicepayProps.getRemittanceTransferMerchantKey())
                .build();
        int balance = remittanceService.retrieveBalance(orderId, refundRemittanceContainer.getAt(), merchantInfoContext);
        if (balance < refundRemittanceContainer.getRefundAmount()) {
            log.error(MessageUtils.format(
                    "remittance is failed for lack of balance. (order id: {}, request amount: {}, balance: {}",
                    orderId, refundRemittanceContainer.getRefundAmount(), balance));
            return OrderCancelStatus.of(OrderStatus.CANCELING, OrderStatusSpecifier.LACK_OF_BALANCE);
        }

        PaymentNicepayRemittance remittance = remittanceService.remit(refundRemittanceContainer, merchantInfoContext);
        if (remittance.getResult() == NicepayRemittanceResultType.RECEIVING_RESULT_DELAYED) {
            // TODO 이체 송금 실패했을 때 재요청 시 해당 API 사용 고려 되어야 할 듯
            NicepayRemittanceResultType result =
                    remittanceService.retrieveRemittanceResult(remittance.getTransactionId(), refundRemittanceContainer.getAt(),
                            merchantInfoContext);
            remittance.changeRemittanceResult(result);
        }

        if (remittance.getResult() == NicepayRemittanceResultType.INCORRECT_ACCOUNT_HOLDER
                || remittance.getResult() == NicepayRemittanceResultType.INCORRECT_ACCOUNT_NUMBER) {
            // 계좌 정보 불일치인 경우 주문상태 바꾸지 않기 위해 바로 오류 응답
            throw new OrderException(OrderCode.ORDER_CANCEL_INVALID_BANK_ACCOUNT);
        } else if (remittance.getResult() == NicepayRemittanceResultType.LACK_OF_BALANCE) {
            // 잔고 부족인 경우 주문상태 취소중으로 변경
            return OrderCancelStatus.of(OrderStatus.CANCELING, remittance.getResult().getOrderStatusSpecifier());
        } else if (remittance.getResult() != NicepayRemittanceResultType.SUCCESS) {
            // 이외의 오류인 경에 주문상태 바꾸지 않고 오류 응답
            throw new OrderException(OrderCode.ORDER_CANCEL_BY_BANK_ACCOUNT_FAILURE);
        }

        if (orderCancelDryRunResult.isWholeCancel()) {
            return OrderCancelStatus.of(OrderStatus.CANCEL);
        }

        return OrderCancelStatus.of(OrderStatus.PART_CANCEL);
    }

    private OrderStatus refundByPayment(OrderCancelRequest request, OrderCancelDryRunResult orderCancelDryRunResult) {
        long orderId = orderCancelDryRunResult.getOrder().getId();

        ApiResponse<?> apiResponse = paymentService.refundPayment(RefundPaymentContainer.builder()
                .orderId(orderId)
                .cancelReason(InvokeSupporters.getOrDefaultIfNull(
                        () -> request.getCancelReasonCode().getDescription(), ""))
                .isWholeCancel(orderCancelDryRunResult.isWholeCancel())
                .pgType(orderCancelDryRunResult.getOrder().getPgType())
                .paymentAmount(orderCancelDryRunResult.getPaymentPrice())
                .refundAmount(orderCancelDryRunResult.getRefundAmount())
                .build()
        );

        return apiResponse.isSuccess()
                ? orderCancelDryRunResult.isWholeCancel()
                ? OrderStatus.CANCEL
                : OrderStatus.PART_CANCEL
                : CANCELING;
    }

    private OrderStatus refundByMileage(OrderCancelDryRunResult orderCancelDryRunResult) {
        return orderCancelDryRunResult.isWholeCancel()
                ? OrderStatus.CANCEL
                : OrderStatus.PART_CANCEL;
    }

    private void refundAssets(OrderCancelDryRunResult orderCancelDryRunResult, OrderStatus orderStatus) {
        // 부분 취소나, 취소 진행중이 아닌 경우에만 포인트, 쿠폰 환불
        if (orderStatus == CANCEL) {
            Optional.ofNullable(orderCancelDryRunResult.getRefundMemberCouponIds())
                    .filter(CollectionUtils::isNotEmpty)
                    .ifPresent(couponService::refundMemberCoupons);
        }

        if (orderStatus == CANCEL || orderStatus == PART_CANCEL) {
            long memberId = orderCancelDryRunResult.getOrder().getOrdererId();

            Optional.ofNullable(orderCancelDryRunResult.getRefundPoint())
                    .ifPresent(rp -> memberPointService.registerMemberPoint(List.of(memberId), rp));

            Optional.ofNullable(orderCancelDryRunResult.getRefundSystemCash())
                    .ifPresent(sc -> systemCashService.registerCash(memberId, sc));
        }

    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/order/usecase/model/OrderCancelDryRunPayload.java
================================================
package kr.co.yeoshin.admin.order.usecase.model;

import com.fasterxml.jackson.annotation.JsonGetter;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.CouponTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberCouponTemplate;
import kr.co.yeoshin.admin.common.model.template.OrderTemplate;
import kr.co.yeoshin.common.payment.type.RefundMethod;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderCancelDryRunPayload {

    @Deprecated
    private long orderId;
    private OrderTemplate order;
    private RefundMethod refundMethod;
    private int paymentPrice;
    private int refundAmount;
    private int refundPoint;
    private int refundSystemCash;
    @Deprecated
    private Long refundCouponId;
    @Deprecated
    private List<Long> refundCouponIds;

    private List<Long> refundMemberCouponIds;

    private int refundCoupon;
    private int expirePoint;
    private boolean isWholeCancel;
    private boolean isOverAYear;
    private boolean isBeforeReboot;
    private boolean isPreCancelOn;
    private boolean hasReservedTickets;
    private boolean hasCancelableTickets;
    private boolean isCancelableStatus;

    private Map<Long, MemberCouponTemplate> memberCoupons;
    private Map<Long, CouponTemplate> coupons;

    @JsonGetter("isWholeCancel")
    public boolean isWholeCancel() {
        return isWholeCancel;
    }

    @JsonGetter("isOverAYear")
    public boolean isOverAYear() {
        return isOverAYear;
    }

    @JsonGetter("isBeforeReboot")
    public boolean isBeforeReboot() {
        return isBeforeReboot;
    }

    @JsonGetter("isPreCancelOn")
    public boolean isPreCancelOn() {
        return isPreCancelOn;
    }

    @JsonGetter("hasReservedTickets")
    public boolean hasReservedTickets() {
        return hasReservedTickets;
    }

    @JsonGetter("hasCancelableTickets")
    public boolean hasCancelableTickets() {
        return hasCancelableTickets;
    }

    @JsonGetter("isCancelableStatus")
    public boolean isCancelableStatus() {
        return isCancelableStatus;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/iamport/component/retrofit/model/PaymentPayload.java
================================================
package kr.co.yeoshin.admin.payment.iamport.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class PaymentPayload {

    //todo db에 해당 iamportUniqueId 저장
    @JsonProperty("imp_uid")
    private String iamportUniqueId;

    @JsonProperty("merchant_uid")
    private String merchantUniqueId;

    @JsonProperty("pay_method")
    private String payMethod;

    @JsonProperty("channel")
    private String channel;

    @JsonProperty("pg_provider")
    private String pgProvider;

    @JsonProperty("emb_pg_provider")
    private String embeddedPgProvider;

    @JsonProperty("pg_tid")
    private String pgTransactionId;

    @JsonProperty("pg_id")
    private String pgId;

    @JsonProperty("escrow")
    private boolean escrow;

    @JsonProperty("apply_num")
    private String applyNumber;

    @JsonProperty("bank_code")
    private String bankCode;

    @JsonProperty("bank_name")
    private String bankName;

    @JsonProperty("card_code")
    private String cardCode;

    @JsonProperty("card_name")
    private String cardName;

    @JsonProperty("card_quota")
    private int cardQuota;

    @JsonProperty("card_number")
    private String cardNumber;

    @JsonProperty("card_type")
    private String cardType;

    @JsonProperty("vbank_code")
    private String virtualBankCode;

    @JsonProperty("vbank_name")
    private String virtualBankName;

    @JsonProperty("vbank_num")
    private String virtualBankNumber;

    @JsonProperty("vbank_holder")
    private String virtualBankHolder;

    @JsonProperty("vbank_date")
    private int virtualBankDate;

    @JsonProperty("vbank_issued_at")
    private int virtualBankIssuedAt;

    @JsonProperty("name")
    private String name;

    @JsonProperty("amount")
    private int amount;

    @JsonProperty("cancel_amount")
    private int cancelAmount;

    @JsonProperty("currency")
    private String currency;

    @JsonProperty("buyer_name")
    private String buyerName;

    @JsonProperty("buyer_email")
    private String buyerEmail;

    @JsonProperty("buyer_tel")
    private String buyerTelephone;

    @JsonProperty("buyer_addr")
    private String buyerAddress;

    @JsonProperty("buyer_postcode")
    private String buyerPostcode;

    //json string
    @JsonProperty("custom_data")
    private String customData;

    @JsonProperty("user_agent")
    private String userAgent;

    //type
    @JsonProperty("status")
    private String status; // ready:미결제, paid:결제완료, cancelled:결제취소, failed:결제실패

    @JsonProperty("started_at")
    private int startedAt;

    @JsonProperty("paid_at")
    private int paidAt;

    @JsonProperty("failed_at")
    private int failedAt;

    @JsonProperty("cancelled_at")
    private int cancelledAt;

    @JsonProperty("fail_reason")
    private String failReason;

    @JsonProperty("cancel_reason")
    private String cancelReason;

    @JsonProperty("receipt_url")
    private String receiptUrl;

    @JsonProperty("cancel_history")
    private List<CancelHistory> cancelHistoryList;

    @JsonProperty("cancel_receipt_urls")
    private List<String> cancelReceiptUrls;

    @JsonProperty("cash_receipt_issued")
    private boolean cashReceiptIssued;

    @JsonProperty("customer_uid")
    private String customerUniqueId;

    @JsonProperty("customer_uid_usage")
    private String customerUniqueIdUsage;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/nicepay/component/retrofit/model/NicepaySubMerchantPayload.java
================================================
package kr.co.yeoshin.admin.payment.nicepay.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Objects;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;

@Getter
@NoArgsConstructor
public class NicepaySubMerchantPayload {

    private Header header;
    private Body body;

    @Builder
    public NicepaySubMerchantPayload(Header header, Body body) {
        this.header = header;
        this.body = body;
    }

    public boolean isSuccessful() {
        return Objects.nonNull(header) && StringUtils.equals(header.getResponseCode(), "0000"); // 성공 : 0000
    }

    public String getResponseCode() {
        if (Objects.isNull(header)) {
            return StringUtils.EMPTY;
        }

        return header.getResponseCode();
    }

    @Getter
    @NoArgsConstructor
    public static class Header {

        @JsonProperty("sid")
        private String sid;

        @JsonProperty("trDtm")
        private String transactionDateTime;

        @JsonProperty("gubun")
        private String payloadType; // 요청 : 'S', 응답 : 'R'

        @JsonProperty("resCode")
        private String responseCode;

        @JsonProperty("resMsg")
        private String responseMessage;

        @Builder
        public Header(String sid, String transactionDateTime, String payloadType, String responseCode, String responseMessage) {
            this.sid = sid;
            this.transactionDateTime = transactionDateTime;
            this.payloadType = payloadType;
            this.responseCode = responseCode;
            this.responseMessage = responseMessage;
        }
    }

    @Getter
    @NoArgsConstructor
    public static class Body {

        @JsonProperty("mid")
        private String merchantId;

        @JsonProperty("subId")
        private String subMerchantId;

        @JsonProperty("subNm")
        private String representativeName;

        @JsonProperty("subCoNo")
        private String businessRegistrationNumber;

        @JsonProperty("bankCd")
        private String bankCode;

        @JsonProperty("accntNo")
        private String accountNumber;

        @JsonProperty("accntNm")
        private String depositorName;

        @JsonProperty("memo")
        private String memo;

        @JsonProperty("reqType")
        private String requestType; // 등록 : '0', 수정 : '1'

        @JsonProperty("encKey")
        private String encryptKey;

        @Builder
        public Body(String merchantId, String subMerchantId, String representativeName, String businessRegistrationNumber,
                String bankCode, String accountNumber, String depositorName, String memo, String requestType, String encryptKey) {
            this.merchantId = merchantId;
            this.subMerchantId = subMerchantId;
            this.representativeName = representativeName;
            this.businessRegistrationNumber = businessRegistrationNumber;
            this.bankCode = bankCode;
            this.accountNumber = accountNumber;
            this.depositorName = depositorName;
            this.memo = memo;
            this.requestType = requestType;
            this.encryptKey = encryptKey;
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/usecase/PaymentBenefitUseCase.java
================================================
package kr.co.yeoshin.admin.payment.usecase;

import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.payment.controller.model.PaymentBenefitFilterRequest;
import kr.co.yeoshin.admin.payment.controller.model.PaymentBenefitMutationRequest;
import kr.co.yeoshin.admin.payment.service.PaymentBenefitService;
import kr.co.yeoshin.admin.payment.usecase.model.PaymentBenefitPageablePayload;
import kr.co.yeoshin.common.payment.entity.PaymentBenefit;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class PaymentBenefitUseCase {

    private final PaymentBenefitService paymentBenefitService;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;

    public PaymentBenefitPageablePayload paymentBenefits(PaymentBenefitFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<PaymentBenefit> benefits = paymentBenefitService.retrievePaymentBenefits(request);

            return PaymentBenefitPageablePayload.builder()
                    .paymentBenefits(benefits.stream()
                            .map(payloadFactory::paymentBenefitTemplate)
                            .collect(Collectors.toList()))
                    .pageable(payloadFactory.pageableTemplate(benefits))
                    .build();
        });
    }

    public BoolPayload registerPaymentBenefit(PaymentBenefitMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            paymentBenefitService.registerPaymentBenefit(request);
            return BoolPayload.of(true);
        });
    }

    public BoolPayload modifyPaymentBenefit(long paymentBenefitId, PaymentBenefitMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            paymentBenefitService.modifyPaymentBenefit(paymentBenefitId, request);
            return BoolPayload.of(true);
        });
    }

    public BoolPayload removePaymentBenefit(long paymentBenefitId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            paymentBenefitService.removePaymentBenefit(paymentBenefitId);
            return BoolPayload.of(true);
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/usecase/PaymentUseCase.java
================================================
package kr.co.yeoshin.admin.payment.usecase;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.AdPoint;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.code.OrderCode;
import kr.co.yeoshin.admin.common.model.api.code.PaymentCode;
import kr.co.yeoshin.admin.common.model.api.code.PointCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdPointPaymentTemplate;
import kr.co.yeoshin.admin.common.model.template.PaymentNicepayConfigTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.exception.OrderException;
import kr.co.yeoshin.admin.exception.PaymentException;
import kr.co.yeoshin.admin.exception.PointException;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalConfigMutationRequest;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.payment.controller.model.AdPointPaymentInfoRequest;
import kr.co.yeoshin.admin.payment.iamport.component.retrofit.model.PaymentPayload;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.payment.usecase.model.AdPointPaymentPayload;
import kr.co.yeoshin.admin.point.service.AdPointService;
import kr.co.yeoshin.admin.point.service.model.AdPointCharge;
import kr.co.yeoshin.admin.point.service.model.AdPointContext;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.type.HospitalConfigType;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;
import kr.co.yeoshin.common.payment.type.AdPointOrderStatus;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.payment.type.PayMethod;
import kr.co.yeoshin.common.point.entity.AdPointProduct;
import kr.co.yeoshin.common.point.entity.OrderAdPointProduct;
import kr.co.yeoshin.common.point.type.AdPointAction;
import kr.co.yeoshin.common.point.type.AdPointChargeType;
import kr.co.yeoshin.common.point.type.AdPointType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.IamPortUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class PaymentUseCase {

    private final AdPointService adPointService;
    private final OrderService orderService;
    private final PaymentService paymentService;
    private final HospitalService hospitalService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public AdPointPaymentPayload registerPaymentInfo(AdPointPaymentInfoRequest request) {

        return transactionTemplate.executeMainWritableTransaction(() -> {

            Admin admin = DiagnosticContext.fetchAdmin();
            Long hospitalId = DiagnosticContext.currentHospitalId()
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_MUTATION_VALIDATION_ERROR));

            Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId);
            AdPointProduct adPointProduct = adPointService.retrieveAdPointProduct(request.getAdPointProductId());
            OrderPurchase orderPurchase = orderService.registerAdPointOrder(admin, adPointProduct, request.getPayMethod());
            String merchantUid = IamPortUtils.createIamPortMerchantUid(orderPurchase)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_AD_POINT_PRODUCT_NOT_EXIST));

            if (request.getPayMethod() != PayMethod.BANK) {
                insertPaymentIamport(orderPurchase, merchantUid);
            }

            OrderAdPointProduct orderAdPointProduct = adPointService.registerOrderAdPointProduct(
                    OrderAdPointProduct.builder()
                            .order(orderPurchase)
                            .adPointProduct(adPointProduct)
                            .hospital(hospital)
                            .admin(admin)
                            .name(admin.getName())
                            .cellPhone(admin.getCellPhone())
                            .email(admin.getEmail())
                            .paidPoint(adPointProduct.getPaidPoint())
                            .freePoint(adPointProduct.getFreePoint())
                            .quantity(request.getQuantity())
                            .orderStatus(AdPointOrderStatus.DEPOSIT_CHECKING)
                            .payMethod(request.getPayMethod())
                            .payStatus(OrderStatus.READY)
                            .build()
            );

            AdPointPaymentTemplate adPointOrder = AdPointPaymentTemplate.builder()
                    .id(orderAdPointProduct.getId())
                    .orderId(orderPurchase.getId())
                    .merchantUid(merchantUid)
                    .amount(orderPurchase.getPaymentPrice())
                    .payMethod(request.getPayMethod())
                    .pgType(orderPurchase.getPgType())
                    .buyerTel(admin.getCellPhone())
                    .build();

            return AdPointPaymentPayload.builder()
                    .adPointPayment(adPointOrder)
                    .build();
        });

    }

    private void insertPaymentIamport(OrderPurchase orderPurchase, String merchantUid) {
        paymentService.registerPaymentIamport(PaymentIamport.builder()
                .order(orderPurchase)
                .merchantUid(merchantUid)
                .build());
    }

    public PaymentPayload retrievePayment(String iamportUniqueId) {
        return paymentService.retrieveAdPointPaymentHistory(iamportUniqueId);
    }

    public BoolPayload refund(long orderAdPointProductId) {
        OrderAdPointProduct orderAdPointProduct = transactionTemplate.executeMainReadableTransaction(
                () -> adPointService.retrieveOrderAdPointProduct(orderAdPointProductId));

        boolean refundResult = paymentService.refund(orderAdPointProduct);
        if (!refundResult) {
            throw new PaymentException(PaymentCode.PAYMENT_IAMPORT_REFUND_FAIL);
        }

        return BoolPayload.builder().result(transactionTemplate.executeMainWritableTransaction(() -> {
                    orderService.updateOrderStatus(List.of(orderAdPointProduct.getOrder().getId()), OrderStatus.CANCEL);

                    LocalDateTime expireAt = PointUtils.expireAt(LocalDateTime.now().plusYears(AdPoint.EXPIRE_YEAR));
                    // todo : 환불,  유무료 부과 타입 구분 ?, registerPointUsages
                    adPointService.registerAdPoint(List.of(orderAdPointProduct.getHospital().getId()), AdPointContext.builder()
                            .title(AdPointAction.AD_POINT_REFUND.getDescription())
                            .action(AdPointAction.AD_POINT_REFUND)
                            .type(AdPointType.REFUND)
                            .chargePoints(List.of(
                                    AdPointCharge.builder()
                                            .chargeType(AdPointChargeType.PAID)
                                            .point(orderAdPointProduct.getPaidPoint() * -1)
                                            .expireAt(expireAt)
                                            .build(),
                                    AdPointCharge.builder()
                                            .chargeType(AdPointChargeType.FREE)
                                            .point(orderAdPointProduct.getFreePoint() * -1)
                                            .expireAt(expireAt)
                                            .build()
                            ))
                            .orderProductType(orderAdPointProduct.getAdPointProduct().getOrderProductType())
                            .build());

                    return true;
                }))
                .build();
    }


    public BoolPayload modifyPreCancelOff(long hospitalId) {
        return BoolPayload.builder().result(transactionTemplate.executeMainWritableTransaction(
                () -> {
                    PaymentNicepayConfigTemplate configTemplate = paymentService.retrieveNicepayConfig(hospitalId)
                            .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_NICEPAY_CONFIG_NOT_EXIST));

                    paymentService.modifyNicepayConfig(hospitalId, configTemplate.getSubMerchantId(), YN.N);

                    hospitalService.upsertHospitalConfig(hospitalId, HospitalConfigMutationRequest.builder()
                            .configType(HospitalConfigType.PRE_CANCEL)
                            .value(YN.N.name())
                            .isActivated(Boolean.TRUE)
                            .build());

                    return true;
                })).build();
    }

    public BoolPayload deletePaymentInfo(long orderId) {
        OrderAdPointProduct orderAdPointProduct = adPointService.fetchOrderAdPointProductByOrderId(orderId)
                .orElseThrow(() -> new PointException(PointCode.POINT_AD_POINT_NOT_EXIST_PURCHASE_HISTORY));

        if (PayMethod.VBANK != orderAdPointProduct.getPayMethod()
                || AdPointOrderStatus.DEPOSIT_CHECKING != orderAdPointProduct.getOrderStatus()) {
            throw new OrderException(OrderCode.ORDER_CANNOT_CANCEL);
        }

        return BoolPayload.builder().result(transactionTemplate.executeMainWritableTransaction(() -> {
            adPointService.deleteOrderAdPointProductByOrderId(orderId);
            orderService.deleteOrderById(orderId);
            return true;
        })).build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/usecase/model/AdPointPaymentPayload.java
================================================
package kr.co.yeoshin.admin.payment.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdPointPaymentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointPaymentPayload implements PlusAccessible {

    private AdPointPaymentTemplate adPointPayment;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/usecase/model/PaymentBenefitPageablePayload.java
================================================
package kr.co.yeoshin.admin.payment.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.PaymentBenefitTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PaymentBenefitPageablePayload implements SystemAccessible {

    private List<PaymentBenefitTemplate> paymentBenefits;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/payment/usecase/model/VirtualBankPayload.java
================================================
package kr.co.yeoshin.admin.payment.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.VirtualBankTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class VirtualBankPayload implements PlusAccessible {

    private VirtualBankTemplate virtualBankTemplate;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/AdPointPageablePayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdPointTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointPageablePayload implements PlusAccessible {

    private List<AdPointTemplate> adPoints;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/AdPointPayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdPointTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointPayload implements PlusAccessible {

    private AdPointTemplate adPoint;
    private HospitalShortTemplate hospital;
    private Map<Long, AdminShortTemplate> admins;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/AdPointProductPageablePayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdPointProductTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AdPointProductPageablePayload implements PlusAccessible {

    private List<AdPointProductTemplate> adPointProducts;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/AdPointProductPayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdPointProductTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AdPointProductPayload implements PlusAccessible {

    private AdPointProductTemplate adPointProduct;
    private AdminShortTemplate creator;
    private AdminShortTemplate updater;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/MemberPointPageablePayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberPointPageablePayload {

    private List<MemberPointTemplate> memberPoints;
    private Map<Long, List<MemberPointCompositionTemplate>> memberPointCompositionsByMemberPointId;
    private Map<Long, String> adminProviderIds;
    private Map<Long, OrderTemplate> ordersByOrderId;
    private Map<Long, Integer> expirePointsByOrderId;
    private Map<Long, ReservationShortTemplate> reservations;
    private Map<Long, TicketTemplate> tickets;
    private Map<Long, ValueTemplate<Integer>> ticketPricesByTicketId;
    private Map<Long, LevelTemplate> levelsByMemberPointId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/MemberPointPayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import kr.co.yeoshin.admin.common.model.template.MemberPointTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberPointPayload {

    private MemberPointTemplate memberPoint;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/service/model/OrderAdPointProductPageablePayload.java
================================================
package kr.co.yeoshin.admin.point.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderAdPointProductPageablePayload implements PlusAccessible {

    private List<OrderAdPointProductTemplate> orderAdPointProducts;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, OrderTemplate> orders;
    private Map<Long, AdPointProductTemplate> adPointProducts;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, VirtualBankTemplate> virtualBanks;
    private List<CodeTemplate> banks;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/usecase/AdPointUseCase.java
================================================
package kr.co.yeoshin.admin.point.usecase;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.common.Constant.AdPoint;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.OrderCode;
import kr.co.yeoshin.admin.common.model.api.code.PointCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.OrderException;
import kr.co.yeoshin.admin.exception.PointException;
import kr.co.yeoshin.admin.hospital.service.HospitalManagementContactService;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.service.model.HospitalManagementContactContext;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.order.usecase.model.PgType;
import kr.co.yeoshin.admin.payment.service.PaymentService;
import kr.co.yeoshin.admin.point.controller.model.*;
import kr.co.yeoshin.admin.point.service.AdPointService;
import kr.co.yeoshin.admin.point.service.model.*;
import kr.co.yeoshin.admin.point.usecase.model.OrderAdPointProductListPayload;
import kr.co.yeoshin.admin.point.usecase.model.OrderAdPointProductPayload;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;
import kr.co.yeoshin.common.payment.model.Payment;
import kr.co.yeoshin.common.payment.type.AdPointOrderStatus;
import kr.co.yeoshin.common.payment.type.MerchantType;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.point.entity.AdPointProduct;
import kr.co.yeoshin.common.point.entity.OrderAdPointProduct;
import kr.co.yeoshin.common.point.type.AdPointAction;
import kr.co.yeoshin.common.point.type.AdPointChargeType;
import kr.co.yeoshin.common.point.type.AdPointType;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@UseCase
@RequiredArgsConstructor
public class AdPointUseCase {

    private final AdPointService adPointService;
    private final HospitalService hospitalService;
    private final AdminService adminService;
    private final OrderService orderService;
    private final PaymentService paymentService;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final HospitalManagementContactService hospitalManagementContactService;

    public AdPointProductPageablePayload retrieveAdPointProducts(AdPointProductFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> adPointService.retrievePointProducts(request.toWhereCondition())
        );
    }

    public AdPointProductPayload retrieveAdPointProduct(long pointProductId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    AdPointProduct pointProduct = adPointService.retrieveAdPointProduct(pointProductId);

                    return AdPointProductPayload.builder()
                            .adPointProduct(payloadFactory.adPointProductTemplate(pointProduct))
                            .creator(payloadFactory.adminShortTemplate(pointProduct.getCreator()))
                            .updater(payloadFactory.adminShortTemplate(pointProduct.getUpdater()))
                            .build();
                }

        );
    }

    public AdPointProductPayload registerAdPointProduct(AdPointProductMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> adPointService.registerAdPointProduct(request)
        );
    }

    public AdPointProductPayload updateAdPointProduct(long adPointProductId, AdPointProductMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> adPointService.updateAdPointProduct(adPointProductId, request)
        );
    }

    public BoolPayload removeAdPointProduct(long adPointProductId) {
        return BoolPayload.builder().result(
                        transactionTemplate.executeMainWritableTransaction(() -> adPointService.removeAdPointProduct(adPointProductId)))
                .build();
    }

    public AdPointPageablePayload retrieveAdPoints(AdPointFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> adPointService.retrieveAdPoints(request.toWhereCondition(hospitalId))
        );
    }

    public AdPointPayload retrieveAdPoint(long adPointId) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> adPointService.retrieveAdPoint(hospitalId, adPointId)
        );
    }

    public BoolPayload registerAdPoint(AdPointMutationRequest request) {

        List<AdPointCharge> saveAdPointCharges = new ArrayList<>();

        LocalDateTime expireAt = PointUtils.expireAt(DateUtil.convertFrom(request.getExpireAt()));

        if (request.getPaidPoint() != 0) {
            saveAdPointCharges.add(AdPointCharge.builder()
                    .chargeType(AdPointChargeType.PAID)
                    .point(request.getPaidPoint())
                    .expireAt(expireAt)
                    .build());
        }

        if (request.getTransPoint() != 0) {
            saveAdPointCharges.add(AdPointCharge.builder()
                    .chargeType(AdPointChargeType.DEPOSIT_TRANS)
                    .point(request.getTransPoint())
                    .expireAt(expireAt)
                    .build());
        }

        if (request.getFreePoint() != 0) {
            saveAdPointCharges.add(AdPointCharge.builder()
                    .chargeType(AdPointChargeType.FREE)
                    .point(request.getFreePoint())
                    .expireAt(expireAt)
                    .build());
        }

        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    AdPointUsageReports usageReports = adPointService.registerAdPoint(request.getHospitalIds(),
                            AdPointContext.builder()
                                    .title(request.getTitle())
                                    .action(request.getAction())
                                    .type(request.getType())
                                    .memo(request.getMemo())
                                    .adminMemo(request.getAdminMemo())
                                    .chargePoints(saveAdPointCharges)
                                    .orderProductType(request.getOrderProductType())
                                    .build());

                    if (AdPointType.CHARGE == request.getType() && request.isAlimTalk()) {
                        List<HospitalManagementContactContext> contactContexts = hospitalManagementContactService.fetchAllByHospitalIds(
                                HospitalManagementContactType.AD_POINT, usageReports.getHospitalIds());

                        int point = request.getPaidPoint() + request.getFreePoint();

                        List<NhnKakaoAlimTalkNotificationContext> notificationContexts =
                                request.getOrderProductType() == OrderProductType.AD_POINT_PRODUCT
                                        ? alimTalkTemplateFactory.adPointAdminRegister(
                                        contactContexts, point)
                                        : alimTalkTemplateFactory.salesEventConsultationPointChargeDone(
                                                contactContexts, point);

                        if (CollectionUtils.isNotEmpty(contactContexts)) {
                            messagePublisher.publishNotification(NotificationMessage.of(
                                    NotificationPayload.builder()
                                            .alimTalk(notificationContexts)
                                            .build())
                            );
                        }
                    }

                    return BoolPayload.builder().result(usageReports.isResult()).build();
                }
        );
    }

    public OrderAdPointProductPageablePayload retrieveAdPointOrders(OrderAdPointProductFilterRequest orderAdPointFilterRequest) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(() -> {
            OrderAdPointProductFilterRequest temp = orderAdPointFilterRequest;
            if (orderAdPointFilterRequest.getAdPointProductIds() == null
                    && StringUtils.isNotBlank(orderAdPointFilterRequest.getProductName())) {
                List<Long> adPointProductIds = adPointService.findAllPointProducts()
                        .stream()
                        .filter(product -> product.getName().contains(orderAdPointFilterRequest.getProductName()))
                        .map(AdPointProduct::getId)
                        .collect(Collectors.toList());
                temp = orderAdPointFilterRequest.toBuilder().adPointProductIds(adPointProductIds).build();
            }

            OrderAdPointProductFilterRequest newRequest = temp;

            return adPointService.retrieveOrderAdPointProducts(newRequest.toWhereCondition(hospitalId));
        });
    }

    public OrderAdPointProductPayload retrieveAdPointOrder(long orderAdPointProductId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            OrderAdPointProduct orderAdPointProduct = adPointService.retrieveOrderAdPointProduct(orderAdPointProductId);
            Hospital hospital = hospitalService.findHospitalByHospitalId(orderAdPointProduct.getHospital().getId());
            AdPointProduct adPointProduct = adPointService.retrieveAdPointProduct(
                    orderAdPointProduct.getAdPointProduct().getId());
            Admin admin = adminService.fetchByIdWithAccounts(orderAdPointProduct.getAdmin().getId());
            OrderPurchase orderPurchase = orderService.retrieveOrderByOrderId(orderAdPointProduct.getOrder().getId())
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_NOT_EXIST));

            Payment payment = paymentService.findPaymentByPgTypeAndOrderId(orderPurchase.getPgType(),
                    orderPurchase.getId());

            MerchantType merchantType = null;
            if (payment != null && payment.pgType() == kr.co.yeoshin.common.payment.type.PgType.IAMPORT) {
                PaymentIamport paymentIamport = (PaymentIamport) payment;
                merchantType = paymentIamport.getMerchantType();
            }

            PgType pgType = PgType.from(orderPurchase.getPgType(), merchantType);

            long sumAdPoint = 0L;
            long sumConsultationPoint = 0L;
            if (adPointProduct.getOrderProductType().equals(OrderProductType.AD_POINT_PRODUCT)) {
                sumAdPoint = adPointService.findTotalPointByHospitalId(hospital.getId(), OrderProductType.AD_POINT_PRODUCT);
            } else {
                sumConsultationPoint = adPointService.findTotalPointByHospitalId(hospital.getId(),
                        OrderProductType.AD_POINT_PRODUCT);
            }

            return OrderAdPointProductPayload.builder()
                    .orderAdPointProduct(payloadFactory.orderAdPointProductTemplate(orderAdPointProduct))
                    .hospital(payloadFactory.hospitalShortTemplate(hospital, sumAdPoint, sumConsultationPoint))
                    .order(payloadFactory.orderTemplate(orderPurchase))
                    .adPointProduct(payloadFactory.adPointProductTemplate(adPointProduct))
                    .admin(payloadFactory.adminShortTemplate(admin, admin.getAccounts()))
                    .payment(InvokeSupporters.getOrNullIfNull(() -> payloadFactory.paymentTemplate(payment, pgType)))
                    .build();

        });
    }

    public BoolPayload updateMemo(long id, String memo) {
        return transactionTemplate.executeMainWritableTransaction(() -> adPointService.updateMemo(id, memo));
    }

    public BoolPayload updateAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> adPointService.updateAdminMemo(id, adminMemo));
    }

    public BoolPayload updateOrderAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> adPointService.updateOrderAdminMemo(id, adminMemo));
    }

    public BoolPayload updateOrderAdPointProduct(long id, OrderAdPointProductMutationRequest request) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            OrderAdPointProduct orderAdPointProduct = adPointService.changeAdPointOrderStatus(List.of(id),
                            request.getAdPointOrderStatus()).stream().findFirst()
                    .orElseThrow(() -> new PointException(OrderCode.ORDER_NOT_EXIST));

            if (!orderAdPointProduct.getPayMethod().isBankAccount()) {
                throw new PointException(PointCode.POINT_AD_POINT_NOT_PREPAYMENT);
            }

            AdPointAction action = AdPointAction.AD_POINT_PREPAYMENT;
            if (orderAdPointProduct.getOrderStatus().equals(AdPointOrderStatus.COMPLETE)) {
                action = AdPointAction.AD_POINT_BANK;
                orderService.updateOrderStatus(List.of(orderAdPointProduct.getOrder().getId()), OrderStatus.COMPLETE);
            }

            LocalDateTime expireAt = PointUtils.expireAt(LocalDateTime.now().plusYears(AdPoint.EXPIRE_YEAR));

            AdPointUsageReports adPointUsageReports = adPointService.registerAdPoint(
                    List.of(orderAdPointProduct.getHospital().getId()), AdPointContext.builder()
                            .title(action.getDescription())
                            .action(action)
                            .type(AdPointType.CHARGE)
                            .chargePoints(List.of(
                                    AdPointCharge.builder()
                                            .chargeType(AdPointChargeType.PAID)
                                            .point(orderAdPointProduct.getPaidPoint())
                                            .expireAt(expireAt)
                                            .build(),
                                    AdPointCharge.builder()
                                            .chargeType(AdPointChargeType.FREE)
                                            .point(orderAdPointProduct.getFreePoint())
                                            .expireAt(expireAt)
                                            .build()
                            ))
                            .orderProductType(orderAdPointProduct.getAdPointProduct().getOrderProductType())
                            .build());

            AdPointProduct adPointProduct = adPointService.retrieveAdPointProduct(
                    orderAdPointProduct.getAdPointProduct().getId());

            if (request.isAlimTalk()) {
                List<HospitalManagementContactContext> contactContexts = hospitalManagementContactService.fetchAllByHospitalIds(
                        HospitalManagementContactType.AD_POINT, adPointUsageReports.getHospitalIds());

                contactContexts.stream().findFirst().ifPresent(
                        x -> {
                            NhnKakaoAlimTalkNotificationContext notificationContext =
                                    adPointProduct.getOrderProductType() == OrderProductType.AD_POINT_PRODUCT
                                            ? alimTalkTemplateFactory.adPointChargeDone(x,
                                            orderAdPointProduct.getPaidPoint() + orderAdPointProduct.getFreePoint())
                                            : alimTalkTemplateFactory.salesEventConsultationPointChargeDone(x,
                                                    orderAdPointProduct.getPaidPoint() + orderAdPointProduct.getFreePoint());

                            messagePublisher.publishNotification(NotificationMessage.of(
                                    NotificationPayload.builder()
                                            .alimTalk(notificationContext)
                                            .build()));
                        });
            }

            return true;
        });

        return BoolPayload.builder().result(result).build();
    }

    public OrderAdPointProductListPayload confirmCashDeposit(List<Long> ids) {
        List<OrderAdPointProduct> orderAdPointProducts = transactionTemplate.executeMainWritableTransaction(
                () -> adPointService.changeAdPointOrderStatus(ids, AdPointOrderStatus.COMPLETE));

        List<Long> orderIds = orderAdPointProducts.stream().map(id -> id.getOrder().getId()).collect(Collectors.toList());
        orderService.updateOrderStatus(orderIds, OrderStatus.COMPLETE);

        return OrderAdPointProductListPayload.builder()
                .orderAdPointProducts(orderAdPointProducts.stream().map(payloadFactory::orderAdPointProductTemplate)
                        .collect(Collectors.toList()))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/usecase/MemberPointUseCase.java
================================================
package kr.co.yeoshin.admin.point.usecase;

import java.util.Collections;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.NumberType;
import kr.co.yeoshin.admin.common.model.template.NumberTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.point.controller.model.MemberPointFilterRequest;
import kr.co.yeoshin.admin.point.controller.model.MemberPointMutationRequest;
import kr.co.yeoshin.admin.point.service.MemberPointService;
import kr.co.yeoshin.admin.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.admin.point.service.model.MemberPointMinusContext;
import kr.co.yeoshin.admin.point.service.model.MemberPointPageablePayload;
import kr.co.yeoshin.admin.point.service.model.MemberPointUsageReports;
import kr.co.yeoshin.admin.point.usecase.model.MemberPointListPayload;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class MemberPointUseCase {

    private final MemberPointService memberPointService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public MemberPointPageablePayload retrieveMemberPoints(MemberPointFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> memberPointService.retrieveMemberPoints(request));
    }

    public MemberPointListPayload registerMemberPoint(MemberPointMutationRequest request) {
        MemberPointUsageReports memberPointUsageReports = transactionTemplate.executeMainWritableTransaction(() -> {
                    Admin admin = DiagnosticContext.fetchAdmin();
                    boolean isAddPoint =
                            request.getType().equals(MemberPointType.REWARD) || request.getType().equals(MemberPointType.REFUND);

                    return isAddPoint ?
                            memberPointService.registerMemberPoint(request.getMemberIds(),
                                    MemberPointAddContext.builder()
                                            .title(request.getTitle())
                                            .action(request.getAction())
                                            .publishType(Optional.ofNullable(request.getPublishType()).orElse(PublishType.CS))
                                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                    .expireAt(PointUtils.expireAt(request.getExpireAt()))
                                                    .point(request.getPoint())
                                                    .build()))
                                            .point(request.getPoint())
                                            .type(request.getType())
                                            .refType(request.getRefType())
                                            .refId(request.getRefId())
                                            .admin(admin)
                                            .build())
                            :
                                    memberPointService.registerMemberPoint(request.getMemberIds(),
                                            MemberPointMinusContext.builder()
                                                    .title(request.getTitle())
                                                    .action(request.getAction())
                                                    .publishType(Optional.ofNullable(request.getPublishType()).orElse(PublishType.CS))
                                                    .type(request.getType())
                                                    .point(Math.abs(request.getPoint()) * -1)
                                                    .refType(request.getRefType())
                                                    .refId(request.getRefId())
                                                    .admin(admin)
                                                    .build());
                }
        );

        return MemberPointListPayload.builder()
                .successCount(NumberTemplate.builder()
                        .type(NumberType.INTEGER)
                        .value(memberPointUsageReports.getSuccess())
                        .build())
                .failCount(NumberTemplate.builder()
                        .type(NumberType.INTEGER)
                        .value(memberPointUsageReports.getFail())
                        .build())
                .memberPoints(memberPointUsageReports.getMemberIds().stream()
                        .map(id -> payloadFactory.memberPointTemplate(
                                memberPointUsageReports.getUsageReports().get(id).getMemberPoint()))
                        .collect(Collectors.toList()))
                .build();

    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/usecase/model/MemberPointListPayload.java
================================================
package kr.co.yeoshin.admin.point.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.MemberPointTemplate;
import kr.co.yeoshin.admin.common.model.template.NumberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberPointListPayload implements SystemAccessible {

    private NumberTemplate successCount;
    private NumberTemplate failCount;
    private List<MemberPointTemplate> memberPoints;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/usecase/model/OrderAdPointProductListPayload.java
================================================
package kr.co.yeoshin.admin.point.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.OrderAdPointProductTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderAdPointProductListPayload implements SystemAccessible {

    private List<OrderAdPointProductTemplate> orderAdPointProducts;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/point/usecase/model/OrderAdPointProductPayload.java
================================================
package kr.co.yeoshin.admin.point.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class OrderAdPointProductPayload implements PlusAccessible {

    private OrderAdPointProductTemplate orderAdPointProduct;
    private HospitalShortTemplate hospital;
    private OrderTemplate order;
    private AdPointProductTemplate adPointProduct;
    private AdminShortTemplate admin;
    private PaymentTemplate payment;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/popup/usecase/PopupUseCase.java
================================================
package kr.co.yeoshin.admin.popup.usecase;

import java.util.Collections;
import java.util.Set;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.PopupTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.popup.controller.model.PopupFilterRequest;
import kr.co.yeoshin.admin.popup.controller.model.PopupMutationRequest;
import kr.co.yeoshin.admin.popup.service.PopupService;
import kr.co.yeoshin.admin.popup.usecase.model.PopupPageablePayload;
import kr.co.yeoshin.admin.popup.usecase.model.PopupPayload;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.popup.type.PopupLocation;
import kr.co.yeoshin.common.popup.type.PopupType;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;

@RequiredArgsConstructor
@UseCase
public class PopupUseCase {

    private final PopupService popupService;
    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;

    public PopupPageablePayload listPopups(PopupLocation location, PopupFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> popupService.retrievePopups(location, request));
    }

    public PopupPayload registerPopup(PopupMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            PopupTemplate popup = popupService.registerPopup(request);

            if (request.getType() == PopupType.IMAGE) {
                mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                        .media(MediaType.IMAGE)
                        .accessible(MediaAccessibleType.PUBLIC)
                        .domain(MediaDomainType.POPUP)
                        .appliedMediaFileNames(Collections.emptySet())
                        .newMediaFileNames(Set.of(FilenameUtils.getName(popup.getContent())))
                        .build());
            }

            return PopupPayload.builder()
                    .popup(popup)
                    .build();
        });
    }

    public PopupPayload modifyPopup(long id, PopupMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    PopupTemplate popup = popupService.retrievePopup(id);
                    PopupTemplate modifiedPopup = popupService.modifyPopup(id, request);

                    mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PUBLIC)
                            .domain(MediaDomainType.POPUP)
                            .appliedMediaFileNames(popup.getType() == PopupType.IMAGE
                                    ? Set.of(FilenameUtils.getName(popup.getContent()))
                                    : Collections.emptySet())
                            .newMediaFileNames(modifiedPopup.getType() == PopupType.IMAGE
                                    ? Set.of(FilenameUtils.getName(modifiedPopup.getContent()))
                                    : Collections.emptySet())
                            .build());

                    return PopupPayload.builder()
                            .popup(modifiedPopup)
                            .build();
                });
    }

    public BoolPayload removePopup(long id) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            PopupTemplate popup = popupService.retrievePopup(id);

            if (popup.getType() == PopupType.IMAGE) {
                mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                        .media(MediaType.IMAGE)
                        .accessible(MediaAccessibleType.PUBLIC)
                        .domain(MediaDomainType.POPUP)
                        .appliedMediaFileNames(Set.of(FilenameUtils.getName(popup.getContent())))
                        .newMediaFileNames(Collections.emptySet())
                        .build());
            }

            return popupService.removePopup(id);
        });

        return BoolPayload.builder()
                .result(result)
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/popup/usecase/model/PopupPageablePayload.java
================================================
package kr.co.yeoshin.admin.popup.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.PopupTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PopupPageablePayload implements PlusAccessible {

    private List<PopupTemplate> popups;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/popup/usecase/model/PopupPayload.java
================================================
package kr.co.yeoshin.admin.popup.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.PopupTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PopupPayload implements SystemAccessible {

    private PopupTemplate popup;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventChangesPayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminMemoTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesEventTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventChangesPayload implements PlusAccessible {

    private SalesEventTemplate salesEvent;
    private List<AdminMemoTemplate> changes;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventConsultationPageablePayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonView;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationPageablePayload implements PlusAccessible {

    private List<SalesEventConsultationTemplate> salesEventConsultations;
    private Map<Long, List<SalesEventConsultationPaidStatusLogTemplate>> salesEventConsultationPaidStatusLogs;
    private SalesEventConsultationRelations relations;
    @JsonView(SystemAdmin.class)
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, MemberShortTemplate> members;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, HospitalDoctorTemplate> hospitalDoctors;
    private Map<Long, HospitalOfflineUpsellTemplate> hospitalOfflineUpsells;
    private PageableTemplate pageable;


    @Builder
    @Getter
    @JsonInclude(Include.NON_NULL)
    public static class SalesEventConsultationRelations implements PlusAccessible {

        private Map<Long, List<Long>> hospitalDoctorIds;
        private Map<Long, List<Long>> salesProductVersionIds;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventConsultationPayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import com.fasterxml.jackson.annotation.JsonView;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationPayload implements PlusAccessible {

    private SalesEventConsultationTemplate salesEventConsultation;
    private Map<Long, List<SalesEventConsultationPaidStatusLogTemplate>> salesEventConsultationPaidStatusLogs;
    @JsonView(SystemAdmin.class)
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, MemberShortTemplate> members;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, HospitalDoctorTemplate> hospitalDoctors;
    private Map<Long, HospitalOfflineUpsellTemplate> hospitalOfflineUpsells;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventDetailPayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonView;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventDetailPayload implements PlusAccessible {

    @JsonUnwrapped
    private SalesEventDetailTemplate salesEventDetail;
    private HospitalShortTemplate hospital;
    private TreatmentTemplate treatment;
    @JsonView(SystemAdmin.class)
    private SalesEventConsultationConfigTemplate salesEventConsultationConfig;
    @JsonView(SystemAdmin.class)
    private Map<Long, TagTemplate> solutionTags;
    private boolean isTrash;
    private List<PromotionTemplate> promotions;
    private List<FileTemplate> allFiles;
    private boolean isDeletable;

    @JsonGetter("isTrash")
    public boolean isTrash() {
        return isTrash;
    }

    @JsonGetter("isDeletable")
    public boolean isDeletable() {
        return isDeletable;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventQuestionPageablePayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventQuestionPageablePayload implements PlusAccessible {

    private List<SalesEventQuestionTemplate> salesEventQuestions;
    private Map<Long, MemberTemplate> members;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, List<SalesEventQuestionReplyTemplate>> replies;
    private Map<Long, AdminMemoTemplate> adminMemos;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventQuestionPayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventQuestionPayload implements PlusAccessible {

    private SalesEventQuestionTemplate salesEventQuestion;
    private MemberTemplate member;
    private SalesEventTemplate salesEvent;
    private HospitalShortTemplate hospital;
    private List<SalesEventQuestionReplyTemplate> replies;
    private FigureTemplate reportCount;
    private List<AdminMemoTemplate> memos;
    private ContentConcealReasonTemplate contentConcealReason;
    private List<CodeTemplate> concealReasons;

    public void addAdminMemos(List<AdminMemoTemplate> memos) {
        this.memos = memos;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/SalesEventQuestionReplyPayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.SalesEventQuestionReplyTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesEventQuestionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventQuestionReplyPayload implements PlusAccessible {

    private SalesEventQuestionTemplate salesEventQuestion;
    private SalesEventQuestionReplyTemplate salesEventQuestionReply;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/service/model/TreatmentMethodPayload.java
================================================
package kr.co.yeoshin.admin.product.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.TagTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentMethodPayload implements PlusAccessible {

    private TreatmentTemplate treatment;
    private List<TagTemplate> treatmentMethodTags;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/SalesEventConsultationUseCase.java
================================================
package kr.co.yeoshin.admin.product.usecase;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant.AdPoint;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.TextRequestBody;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdPointTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.cpm.service.CpmAdService;
import kr.co.yeoshin.admin.point.service.AdPointService;
import kr.co.yeoshin.admin.point.service.model.AdPointCharge;
import kr.co.yeoshin.admin.point.service.model.AdPointContext;
import kr.co.yeoshin.admin.point.service.model.AdPointUsageReport;
import kr.co.yeoshin.admin.product.component.SalesEventConsultationLogHelper;
import kr.co.yeoshin.admin.product.controller.model.SalesEventConsultationFilterRequest;
import kr.co.yeoshin.admin.product.controller.model.SalesEventConsultationMutationRequest;
import kr.co.yeoshin.admin.product.controller.model.SalesEventConsultationPaidStatusRequest;
import kr.co.yeoshin.admin.product.controller.model.SalesEventConsultationStatusRequest;
import kr.co.yeoshin.admin.product.service.SalesEventConsultationService;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.product.service.model.*;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.point.type.AdPointAction;
import kr.co.yeoshin.common.point.type.AdPointChargeType;
import kr.co.yeoshin.common.point.type.AdPointType;
import kr.co.yeoshin.common.product.entity.SalesEventConsultation;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationPaidStatusLog;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationPriceTag;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationStatusLog;
import kr.co.yeoshin.common.product.type.SalesEventConsultationPaidStatus;
import kr.co.yeoshin.common.product.type.SalesEventConsultationStatus;
import kr.co.yeoshin.common.product.type.SalesEventConsultationStep;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@UseCase
public class SalesEventConsultationUseCase {

    private final SalesEventService salesEventService;
    private final SalesEventConsultationService salesEventConsultationService;
    private final AdPointService adPointService;
    private final TransactionTemplate transactionTemplate;
    private final RevisionService revisionService;
    private final CpmAdService cpmAdService;

    public SalesEventConsultationPageablePayload salesEventConsultations(SalesEventConsultationFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> salesEventConsultationService.retrieveSalesEventConsultations(request.toWhereCondition(hospitalId))
        );
    }

    public SalesEventConsultationPayload salesEventConsultation(long salesEventConsultationId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> salesEventConsultationService.retrieveSalesEventConsultation(salesEventConsultationId)
        );
    }

    public BoolPayload modifyConsultationConfigure(SalesEventConsultationMutationRequest request) {
        if (request.getLocaleConsultations() != null) {
            return BoolPayload.builder()
                    .result(transactionTemplate.executeMainWritableTransaction(
                            () -> salesEventConsultationService.updateSalesEventConsultationConfigures(
                                    request.getSalesEventIds(), request.getLocaleConsultations())))
                    .build();
        } else {
            return BoolPayload.builder()
                    .result(transactionTemplate.executeMainWritableTransaction(
                            () -> salesEventConsultationService.updateSalesEventConsultationConfigures(
                                    request.getSalesEventIds(), !request.isHidable())))
                    .build();
        }
    }


    public BoolPayload modifyConsultationStatus(long consultationId, SalesEventConsultationStatusRequest request) {

        transactionTemplate.executeMainWritableTransaction(
                () -> {
                    SalesEventConsultationChange changed = salesEventConsultationService.updateSalesEventConsultationStatus(
                            consultationId,
                            request.getStatus(),
                            InvokeSupporters.getOrNullIfNull(() -> DateUtil.convertFrom(request.getVisitAt())));

                    SalesEventConsultation changedSalesEventConsultation = changed.getChanged();

                    SalesEventConsultationLogHelper.registerInstantLog(revisionService,
                            consultationId,
                            SalesEventConsultationLogHelper.transitionMessage(request.getStatus(), request.getVisitAt()));

                    if (request.getStatus() == SalesEventConsultationStatus.VISIT_EXPECTED) {
                        salesEventConsultationService.scheduleVisitWaitNotification(
                                changedSalesEventConsultation.getMember().getId(),
                                changedSalesEventConsultation
                        );
                    }

                    if (changed.getBeforeStatus().getStep() != SalesEventConsultationStep.PAYMENT
                            && changed.getAfterStatus().getStep() == SalesEventConsultationStep.PAYMENT) {
                        salesEventConsultationService.scheduleReviewNotification(
                                changedSalesEventConsultation.getMember().getId(),
                                changedSalesEventConsultation
                        );
                    }

                    if (request.getStatus().isVisitComplete()) {
                        List<SalesEventConsultationStatusLog> statusLog = salesEventConsultationService.findAllBySalesEventConsultationId(
                                        consultationId)
                                .stream()
                                .filter(x -> x.getAfterStatus().isVisitComplete())
                                .collect(Collectors.toList());

                        if (statusLog.size() == 1) {
                            cpmAdService.increaseCpaAdReportHourlyVisitCompleteCount(changedSalesEventConsultation);
                        }
                    }
                    return true;
                });

        return BoolPayload.builder()
                .result(true)
                .build();
    }


    public BoolPayload modifyConsultationPaidStatus(long consultationId, SalesEventConsultationPaidStatusRequest request) {
        transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventConsultationPaidChange change = salesEventConsultationService.updateSalesEventConsultationPaidStatus(
                    consultationId,
                    request.getPaidStatus(),
                    request.getAdminMemo());

            if (change.getBeforePaidStatus().isFree() == change.getAfterPaidStatus().isFree()) {
                return true;
            }

            SalesEventContainer salesEventContainer = salesEventService.retrieveSalesEventDetail(
                    change.getChanged().getSalesEvent().getId());

            SalesEventConsultationPriceTag priceTag = salesEventConsultationService.findConsultationPriceTag(
                    salesEventContainer, change.getChanged());

            if (change.getBeforePaidStatus().isFree() && change.getAfterPaidStatus().isPaid()) {
                Optional<Long> adPointId = Optional.ofNullable(adPointService.registerAdPoint(
                                Collections.singletonList(change.getChanged().getHospital().getId()),
                                AdPointContext.builder()
                                        .title(AdPointAction.CPA_AD.getDescription())
                                        .action(AdPointAction.CPA_AD)
                                        .type(AdPointType.DEDUCT)
                                        .chargePoints(Collections.singletonList(AdPointCharge.builder()
                                                .chargeType(AdPointChargeType.PAID)
                                                .point(-priceTag.getPriceKo())
                                                .build()))
                                        .orderProductType(OrderProductType.CONSULTATION_POINT_PRODUCT)
                                        .build()).getUsageReports().get(change.getChanged().getHospital().getId()))
                        .map(AdPointUsageReport::getAdPointId);

                salesEventConsultationService.registerConsultationPaidStatusLog(
                        change, priceTag, request.getAdminMemo(), adPointId);
            } else if (change.getBeforePaidStatus().isPaid()
                    && change.getAfterPaidStatus().isFree()
                    && change.getLastPaidLog().isPresent()) {
                SalesEventConsultationPaidStatusLog lastPaidLog = change.getLastPaidLog().get();
                AdPointTemplate adPoint = adPointService.retrieveAdPoint(
                                salesEventContainer.getSalesEvent().getHospital().getId(), lastPaidLog.getRefId())
                        .getAdPoint();

                List<AdPointCharge> adPointCharges = adPoint.getExpires().stream()
                        .map(x -> AdPointCharge.builder()
                                .chargeType(x.getChargeType())
                                .point(Math.abs(x.getPoint()))
                                .expireAt(x.getExpireAt())
                                .build())
                        .collect(Collectors.toList());

                String title = change.getAfterPaidStatus() == SalesEventConsultationPaidStatus.NO_SHOW ?
                        AdPointAction.CONSULTATION_MISSING_NUMBER_POINT_UNPAID.getDescription()
                        : request.getAdminMemo();

                Optional<Long> adPointId = Optional.ofNullable(adPointService.registerAdPoint(
                                Collections.singletonList(change.getChanged().getHospital().getId()),
                                AdPointContext.builder()
                                        .title(title)
                                        .action(AdPointAction.CONSULTATION_MISSING_NUMBER_POINT_UNPAID)
                                        .type(AdPointType.CHARGE)
                                        .chargePoints(adPointCharges)
                                        .orderProductType(OrderProductType.CONSULTATION_POINT_PRODUCT)
                                        .build()).getUsageReports().get(change.getChanged().getHospital().getId()))
                        .map(AdPointUsageReport::getAdPointId);

                salesEventConsultationService.registerConsultationPaidStatusLog(
                        change, priceTag, request.getAdminMemo(), adPointId);
            } else if (change.getBeforePaidStatus().isPaid()
                    && change.getAfterPaidStatus().isFree()
                    && change.getLastPaidLog().isEmpty()) {
                LocalDateTime expireAt = PointUtils.expireAt(LocalDateTime.now().plusYears(AdPoint.EXPIRE_YEAR));

                String title = change.getAfterPaidStatus() == SalesEventConsultationPaidStatus.NO_SHOW ?
                        AdPointAction.CONSULTATION_MISSING_NUMBER_POINT_UNPAID.getDescription()
                        : request.getAdminMemo();

                Optional<Long> adPointId = Optional.ofNullable(adPointService.registerAdPoint(
                                Collections.singletonList(change.getChanged().getHospital().getId()),
                                AdPointContext.builder()
                                        .title(title)
                                        .action(AdPointAction.CONSULTATION_MISSING_NUMBER_POINT_UNPAID)
                                        .type(AdPointType.CHARGE)
                                        .chargePoints(Collections.singletonList(AdPointCharge.builder()
                                                .chargeType(AdPointChargeType.PAID)
                                                .point(priceTag.getPriceKo())
                                                .expireAt(expireAt)
                                                .build()))
                                        .orderProductType(OrderProductType.CONSULTATION_POINT_PRODUCT)
                                        .build()).getUsageReports().get(change.getChanged().getHospital().getId()))
                        .map(AdPointUsageReport::getAdPointId);

                salesEventConsultationService.registerConsultationPaidStatusLog(
                        change, priceTag, request.getAdminMemo(), adPointId);
            } else {
                salesEventConsultationService.registerConsultationPaidStatusLog(
                        change, priceTag, request.getAdminMemo());
            }

            return true;
        });

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload modifyMemo(long consultationId, TextRequestBody request) {
        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> salesEventConsultationService.updateSalesEventConsultationMemo(
                                consultationId,
                                request.getText()
                        )))
                .build();
    }

    public BoolPayload modifyAdminMemo(long consultationId, TextRequestBody request) {
        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> salesEventConsultationService.updateSalesEventConsultationAdminMemo(
                                consultationId,
                                request.getText()
                        )))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/SalesEventQuestionUseCase.java
================================================
package kr.co.yeoshin.admin.product.usecase;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPageablePayload;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.member.service.MemberMetaService;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.FirebaseTemplateFactory;
import kr.co.yeoshin.admin.product.controller.model.SalesEventQuestionFilterRequest;
import kr.co.yeoshin.admin.product.controller.model.SalesEventQuestionMutationRequest;
import kr.co.yeoshin.admin.product.controller.model.SalesEventQuestionReplyMutationRequest;
import kr.co.yeoshin.admin.product.service.SalesEventQuestionService;
import kr.co.yeoshin.admin.product.service.model.SalesEventQuestionPageablePayload;
import kr.co.yeoshin.admin.product.service.model.SalesEventQuestionPayload;
import kr.co.yeoshin.admin.product.service.model.SalesEventQuestionReplyPayload;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.common.board.model.AdminMemoWhereCondition;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.setup.entity.DeviceToken;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;

@RequiredArgsConstructor
@UseCase
public class SalesEventQuestionUseCase {

    private final ApplicationProps applicationProps;
    private final SalesEventQuestionService salesEventQuestionService;
    private final AdminMemoService adminMemoService;
    private final MemberService memberService;
    private final MemberMetaService memberMetaService;
    private final TransactionTemplate transactionTemplate;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final FirebaseTemplateFactory firebaseTemplateFactory;
    private final QueueMessagePublisherTemplate messagePublisher;

    public SalesEventQuestionPageablePayload salesEventQuestionList(SalesEventQuestionFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> salesEventQuestionService.retrieveSalesEventQuestions(request.whereCondition(hospitalId))
        );
    }

    public SalesEventQuestionPayload salesEventQuestion(long salesEventQuestionId) {
        return transactionTemplate.executeMainReadableTransaction(() ->
                salesEventQuestionService.retrieveSalesEventQuestion(salesEventQuestionId));
    }

    public SalesEventQuestionPayload updateSalesEventQuestion(long salesEventQuestionId,
            SalesEventQuestionMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    SalesEventQuestionPayload payload = salesEventQuestionService.updateSalesEventQuestion(salesEventQuestionId,
                            request);
                    return registerAdminMemo(payload, request.getReason());
                });
    }

    public BoolPayload deleteSalesEventQuestion(long salesEventQuestionId) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> salesEventQuestionService.deleteSalesEventQuestion(salesEventQuestionId));
    }

    public SalesEventQuestionReplyPayload addSalesEventQuestionReply(SalesEventQuestionReplyMutationRequest request) {
        long adminId = DiagnosticContext.adminHospitalRole().getAdminId();

        SalesEventQuestionReplyPayload salesEventQuestionReplyPayload = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    SalesEventQuestionReplyPayload payload = salesEventQuestionService.addSalesEventQuestionReply(
                            adminId, request);

                    memberMetaService.fetchMemberServiceSummaryByMemberId(payload.getSalesEventQuestion().getMemberId())
                            .ifPresent(x -> x.changeLatestSalesEventQuestionReplyYn(YN.Y));

                    return payload;
                });

        long memberId = salesEventQuestionReplyPayload.getSalesEventQuestion().getMemberId();
        Optional<Member> member = transactionTemplate.executeMainReadableTransaction(
                () -> memberService.findMemberByMemberId(memberId));
        if (member.isEmpty()) {
            return salesEventQuestionReplyPayload;
        }

        if (applicationProps.getSalesEventQuestion().isNotificationAlimtalk()) {
            messagePublisher.publishNotification(NotificationMessage.of(
                    NotificationPayload.builder()
                            .alimTalk(alimTalkTemplateFactory.salesEventQuestionReply(member.get()))
                            .build()
            ));
        } else {
            List<DeviceToken> deviceTokens = transactionTemplate.executeMainReadableTransaction(
                    () -> memberMetaService.findDeviceTokenByMemberId(memberId));
            if (CollectionUtils.isNotEmpty(deviceTokens)) {
                messagePublisher.publishNotification(NotificationMessage.of(
                        NotificationPayload.builder()
                                .firebase(firebaseTemplateFactory.salesEventQuestionReply(member.get(), deviceTokens))
                                .build()));
            }
        }

        return salesEventQuestionReplyPayload;
    }

    public BoolPayload deleteSalesEventQuestionReply(long salesEventQuestionReplyId) {
        return transactionTemplate.executeMainWritableTransaction(() ->
                salesEventQuestionService.deleteSalesEventQuestionReply(salesEventQuestionReplyId));
    }

    public BoolPayload updateAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> salesEventQuestionService.updateAdminMemo(id, adminMemo));
    }

    public SalesEventQuestionReplyPayload updateSalesEventQuestionReply(long salesEventQuestionReplyId,
            SalesEventQuestionReplyMutationRequest salesEventQuestionReplyMutationRequest) {
        return transactionTemplate.executeMainWritableTransaction(() ->
                salesEventQuestionService.updateSalesEventQuestionReply(salesEventQuestionReplyId,
                        salesEventQuestionReplyMutationRequest));
    }

    private SalesEventQuestionPayload registerAdminMemo(SalesEventQuestionPayload payload, String reason) {
        AdminMemoMutationRequest memo = AdminMemoMutationRequest.WithCommit.builder()
                .content(payload.getSalesEventQuestion().isVisible() ? "" : reason)
                .subContent(payload.getSalesEventQuestion().isVisible() ? "노출" : "숨김")
                .refId(payload.getSalesEventQuestion().getId())
                .secretYn(YN.N)
                .build();

        AdminMemoPayload adminMemoPayload = adminMemoService.registerAdminMemo(AdminMemoType.SALES_EVENT_QUESTION, memo);
        payload.addAdminMemos(Collections.singletonList(adminMemoPayload.getMemo()));

        return payload;
    }

    public AdminMemoPageablePayload retrieveAdminMemo(long salesEventQuestionId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
                    AdminMemoWhereCondition condition = AdminMemoWhereCondition.builder()
                            .refTypes(List.of(AdminMemoType.SALES_EVENT_QUESTION))
                            .refId(salesEventQuestionId)
                            .pageable(PageRequest.of(0, Integer.MAX_VALUE, Sort.by(Order.desc("id"))))
                            .build();

                    return adminMemoService.retrieveAdminMemos(condition);
                }
        );
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/SalesEventUsageUseCase.java
================================================
package kr.co.yeoshin.admin.product.usecase;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.validation.Valid;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.SalesEventCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthorizationException;
import kr.co.yeoshin.admin.exception.SalesEventException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.product.controller.model.*;
import kr.co.yeoshin.admin.product.controller.model.SalesEventUsageMultiMutationRequest.SalesEventUsageObjectRequest;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.product.service.SalesEventUsageImageService;
import kr.co.yeoshin.admin.product.service.SalesEventUsageService;
import kr.co.yeoshin.admin.product.service.model.SalesEventUsageAsTreatmentMethodTagContext;
import kr.co.yeoshin.admin.product.service.model.SalesEventUsageContext;
import kr.co.yeoshin.admin.product.service.model.SalesEventUsageImageContext;
import kr.co.yeoshin.admin.product.usecase.model.*;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.model.ImageObject;
import kr.co.yeoshin.common.product.type.SalesEventUsageApprovalType;
import kr.co.yeoshin.common.product.type.SalesEventUsageImageType;
import kr.co.yeoshin.common.type.ApprovalStatus;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.data.domain.Page;


@UseCase
@RequiredArgsConstructor
public class SalesEventUsageUseCase {

    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final SalesEventUsageService salesEventUsageService;
    private final SalesEventUsageImageService salesEventUsageImageService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public SalesEventUsagePageablePayload retrieveSalesEventUsages(SalesEventUsageFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
                    Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);
                    Page<SalesEventUsage> salesEventUsagePage = salesEventUsageService.retrieveSalesEventUsages(
                            request.toWhereCondition(hospitalId));

                    List<SalesEventUsage> salesEventUsages = salesEventUsagePage.getContent();

                    List<Long> salesEventUsageIds = new ArrayList<>();
                    List<Long> hospitalIds = new ArrayList<>();
                    List<Long> salesEventIds = new ArrayList<>();

                    for (var salesEventUsage : salesEventUsages) {
                        salesEventUsageIds.add(salesEventUsage.getId());
                        hospitalIds.add(salesEventUsage.getHospital().getId());
                        salesEventIds.add(salesEventUsage.getSalesEvent().getId());
                    }

                    Map<Long, HospitalShortTemplate> hospitalByHospitalId = hospitalService.findHospitalsByHospitalIds(hospitalIds)
                            .stream()
                            .map(payloadFactory::hospitalShortTemplate)
                            .collect(Collectors.toMap(HospitalShortTemplate::getId, Function.identity(), (a, b) -> a, TreeMap::new));

                    Map<Long, SalesEventShortTemplate> salesEventBySalesEventId = salesEventService.findBySalesEventIdIn(salesEventIds)
                            .stream()
                            .map(payloadFactory::salesEventShortTemplate)
                            .collect(Collectors.toMap(SalesEventShortTemplate::getId, Function.identity(), (a, b) -> a, TreeMap::new));

                    Map<Long, SalesEventUsageApprovalTemplate> salesEventUsageApprovalBySalesEventUsageId = salesEventUsageService.findSalesEventUsageApprovalsBySalesEventUsageIds(
                                    salesEventUsageIds).stream()
                            .filter(x -> x.getLatestYn().toBoolean())
                            .collect(
                                    Collectors.toMap(x -> x.getSalesEventUsage().getId(), payloadFactory::salesEventUsageApprovalTemplate,
                                            (a, b) -> a));

                    Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImageBySalesEventUsageId = salesEventUsageImageService.findAllBySalesEventUsageIds(
                                    salesEventUsageIds).stream()
                            .sorted(Comparator.comparing(SalesEventUsageImage::getType).thenComparing(SalesEventUsageImage::getPriority))
                            .collect(Collectors.groupingBy(x -> x.getSalesEventUsage().getId(),
                                    Collectors.mapping(payloadFactory::salesEventUsageImageTemplate, Collectors.toList())));

                    return SalesEventUsagePageablePayload.builder()
                            .salesEventUsages(salesEventUsages.stream().map(payloadFactory::salesEventUsageTemplate).collect(
                                    Collectors.toList()))
                            .hospitalByHospitalId(hospitalByHospitalId)
                            .salesEventBySalesEventId(salesEventBySalesEventId)
                            .salesEventUsageApprovalBySalesEventUsageId(salesEventUsageApprovalBySalesEventUsageId)
                            .beforeAfterImageBySalesEventUsageId(salesEventUsageImageBySalesEventUsageId)
                            .pageable(payloadFactory.pageableTemplate(salesEventUsagePage))
                            .build();
                }
        );
    }


    public SalesEventUsagePayload retrieveSalesEventUsage(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            SalesEventUsage salesEventUsage = salesEventUsageService.retrieveSalesEventUsage(id)
                    .orElseThrow(() -> new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_NOT_EXIST));

            SalesEventUsageApproval salesEventUsageApproval = salesEventUsageService.findSalesEventUsageApprovalsBySalesEventUsageIds(
                            List.of(id))
                    .stream()
                    .filter(x -> x.getLatestYn().toBoolean())
                    .findFirst()
                    .orElseThrow(() -> new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_APPROVAL_NOT_EXIST));

            List<SalesEventUsageImageTemplate> salesEventUsageImages = salesEventUsageImageService.findAllBySalesEventUsageId(
                            salesEventUsage.getId()).stream()
                    .sorted(Comparator.comparing(SalesEventUsageImage::getType).thenComparing(SalesEventUsageImage::getPriority))
                    .map(payloadFactory::salesEventUsageImageTemplate)
                    .collect(Collectors.toList());

            List<Long> treatmentMethodTagIds = salesEventUsageService.findSalesEventUsageAsTreatmentMethodTagBySalesEventUsageId(
                            salesEventUsage.getId()).stream()
                    .map(x -> x.getTreatmentMethodTag().getId())
                    .collect(Collectors.toList());

            List<TagTemplate> treatmentMethodTagTemplates = salesEventUsageService.findAllTreatmentMethodTags(
                            treatmentMethodTagIds).stream()
                    .map(payloadFactory::tagTemplate)
                    .collect(Collectors.toList());

            return SalesEventUsagePayload.builder()
                    .salesEventUsage(payloadFactory.salesEventUsageTemplate(salesEventUsage))
                    .salesEventUsageApproval(payloadFactory.salesEventUsageApprovalTemplate(salesEventUsageApproval))
                    .salesEvent(payloadFactory.salesEventShortTemplate(salesEventUsage.getSalesEvent()))
                    .hospital(payloadFactory.hospitalShortTemplate(salesEventUsage.getHospital()))
                    .beforeAfterImages(salesEventUsageImages)
                    .treatmentMethodTags(treatmentMethodTagTemplates)
                    .build();
        });
    }

    public SalesEventUsageListPayload registerSalesEventUsages(@Valid SalesEventUsageMultiMutationRequest request) {
        SalesEvent salesEvent = salesEventService.fetchSalesEventById(request.getSalesEventId())
                .orElseThrow(() -> new SalesEventException(SalesEventCode.SALES_EVENT_NOT_EXIST));

        long savedSalesEventUsageCount = salesEventUsageService.countSalesEventUsageBySalesEventId(salesEvent.getId());
        List<SalesEventUsageObjectRequest> usageObjects = request.getSalesEventUsages();

        if (CollectionUtils.isEmpty(usageObjects)
                || (usageObjects.size() + savedSalesEventUsageCount) > Constant.SalesEvent.SALES_EVENT_MAPPING_USAGE_MAX_COUNT) {
            throw new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_COUNT_LACK_OR_EXCEED);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            Map<Integer, Map<SalesEventUsageImageType, List<ImageObject>>> baImagesByPriority = new TreeMap<>();
            Map<Integer, List<Long>> treatmentMethodTagIdByPriority = new TreeMap<>();
            Set<Long> registerTreatmentMethodTagIds = new HashSet<>();

            int startPriority = 1 + (int) savedSalesEventUsageCount;
            AtomicInteger index = new AtomicInteger(startPriority);
            List<SalesEventUsageContext> usageContexts = usageObjects.stream()
                    .map(x -> {
                        int priority = index.getAndIncrement();
                        baImagesByPriority.put(priority, x.fetchAllImageObjects());
                        if (CollectionUtils.isNotEmpty(x.getTreatmentMethodTagIds())) {
                            treatmentMethodTagIdByPriority.put(priority, x.getTreatmentMethodTagIds());
                            registerTreatmentMethodTagIds.addAll(x.getTreatmentMethodTagIds());
                        }
                        return SalesEventUsageContext.builder()
                                .title(x.getTitle())
                                .description(x.getDescription())
                                .afterDayCount(x.getAfterDayCount())
                                .priority(priority)
                                .build();
                    })
                    .collect(Collectors.toList());

            Map<Long, TreatmentMethodTag> savedTreatmentMethodTagById = salesEventUsageService.findAllTreatmentMethodTags(
                            registerTreatmentMethodTagIds).stream()
                    .collect(Collectors.toMap(TreatmentMethodTag::getId, Function.identity(), (a, b) -> a, TreeMap::new));

            List<SalesEventUsage> salesEventUsages = salesEventUsageService.registerSalesEventUsages(salesEvent, usageContexts);

            List<SalesEventUsageImageContext> usageImageContexts = new ArrayList<>();
            List<SalesEventUsageAsTreatmentMethodTagContext> treatmentMethodTagContexts = new ArrayList<>();

            for (var salesEventUsage : salesEventUsages) {
                int priority = salesEventUsage.getPriority();
                Map<SalesEventUsageImageType, List<ImageObject>> baImages = Optional.ofNullable(baImagesByPriority.get(priority))
                        .orElseThrow(() -> new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_NOT_REGISTER));

                for (var entry : baImages.entrySet()) {
                    usageImageContexts.add(SalesEventUsageImageContext.builder()
                            .hospital(salesEvent.getHospital())
                            .salesEvent(salesEvent)
                            .salesEventUsage(salesEventUsage)
                            .imageType(entry.getKey())
                            .imageObjects(entry.getValue())
                            .build());
                }

                List<Long> treatmentMethodTagIds = treatmentMethodTagIdByPriority.getOrDefault(priority, Collections.emptyList());
                for (var treatmentMethodTagId : treatmentMethodTagIds) {
                    TreatmentMethodTag treatmentMethodTag = savedTreatmentMethodTagById.getOrDefault(treatmentMethodTagId, null);
                    if (ObjectUtils.isNotEmpty(treatmentMethodTag)) {
                        treatmentMethodTagContexts.add(SalesEventUsageAsTreatmentMethodTagContext.builder()
                                .salesEventUsage(salesEventUsage)
                                .treatmentMethodTag(treatmentMethodTag)
                                .build());
                    }
                }
            }

            salesEventUsageService.registerSalesEventUsageAsTreatmentMethodTags(treatmentMethodTagContexts);

            List<SalesEventUsageImage> salesEventUsageImages = salesEventUsageImageService.registerSalesEventUsageImages(
                    usageImageContexts);

            Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImageTemplateMap = new TreeMap<>();
            for (var salesEventUsageImage : salesEventUsageImages) {
                salesEventUsageImageTemplateMap.computeIfAbsent(salesEventUsageImage.getSalesEventUsage().getId(),
                        x -> new ArrayList<>()).add(payloadFactory.salesEventUsageImageTemplate(salesEventUsageImage));

            }

            List<SalesEventUsageApproval> salesEventUsageApprovals = salesEventUsageService.registerSalesEventUsageApprovals(
                    salesEventUsages,
                    DiagnosticContext.currentHospitalId().orElse(null),
                    SalesEventUsageApprovalType.REGISTRATION);

            Map<Long, SalesEventUsageApprovalTemplate> salesEventUsageApprovalTemplateMap = new TreeMap<>();
            for (var salesEventUsageApproval : salesEventUsageApprovals) {
                salesEventUsageApprovalTemplateMap.putIfAbsent(salesEventUsageApproval.getSalesEventUsage().getId(),
                        payloadFactory.salesEventUsageApprovalTemplate(salesEventUsageApproval));
            }

            long usageCount = salesEventUsageService.findSalesEventUsagesBySalesEventIds(List.of(salesEvent.getId())).size();
            salesEventService.updateSalesEventStat(salesEvent, usageCount);

            return SalesEventUsageListPayload.builder()
                    .salesEventUsages(
                            salesEventUsages.stream().map(payloadFactory::salesEventUsageTemplate).collect(Collectors.toList()))
                    .salesEventUsageApprovalBySalesEventUsageId(salesEventUsageApprovalTemplateMap)
                    .salesEventUsageImagesBySalesEventUsageId(salesEventUsageImageTemplateMap)
                    .salesEvent(payloadFactory.salesEventShortTemplate(salesEvent))
                    .hospital(payloadFactory.hospitalShortTemplate(salesEvent.getHospital()))
                    .build();
        });
    }

    public BoolPayload modifySalesEventUsage(long salesEventUsageId, @Valid SalesEventUsageMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventUsage salesEventUsage = salesEventUsageService.retrieveSalesEventUsage(salesEventUsageId).orElseThrow(() ->
                    new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_NOT_EXIST));

            if (DiagnosticContext.isPlusAdmin() && ApprovalStatus.PENDING.equals(salesEventUsage.getApprovalStatus())) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_NOT_UPDATABLE_BY_PENDING);
            }

            SalesEventUsage modifiedSalesEventUsage = salesEventUsageService.modifySalesEventUsage(salesEventUsage.getId(),
                    request);

            Set<Long> savedSalesEventUsageIds = salesEventUsageImageService.findAllBySalesEventUsageId(salesEventUsage.getId())
                    .stream()
                    .map(SalesEventUsageImage::getId)
                    .collect(Collectors.toSet());

            Set<Long> updatedSalesEventUsageIds = salesEventUsageImageService.upsertSalesEventUsageImages(
                            modifiedSalesEventUsage.getId(), request.fetchAllImageObjects())
                    .stream()
                    .map(SalesEventUsageImage::getId)
                    .collect(Collectors.toSet());

            salesEventUsageService.upsertSalesEventUsageAsTreatmentMethodTags(modifiedSalesEventUsage,
                    request.getTreatmentMethodTagIds());

            if (DiagnosticContext.isSystemAdmin()) {
                modifiedSalesEventUsage.changeApprovalStatus(ApprovalStatus.APPROVED).changeViewYn(YN.Y);
            } else {
                if (modifiedSalesEventUsage.isChangeStatus() || !savedSalesEventUsageIds.containsAll(updatedSalesEventUsageIds)
                        || ApprovalStatus.REJECTED == modifiedSalesEventUsage.getApprovalStatus()) {
                    modifiedSalesEventUsage.changeApprovalStatus(ApprovalStatus.PENDING).changeViewYn(YN.N);
                }
            }

            salesEventUsageService.registerSalesEventUsageApprovals(List.of(modifiedSalesEventUsage),
                    DiagnosticContext.currentHospitalId().orElse(null),
                    SalesEventUsageApprovalType.MODIFICATION);

            Map<SalesEvent, List<SalesEventUsage>> salesEventUsagesBySalesEventId = salesEventUsageService.findSalesEventUsagesBySalesEventIds(
                            List.of(modifiedSalesEventUsage.getSalesEvent().getId(), modifiedSalesEventUsage.getKeptSalesEvent().getId()))
                    .stream()
                    .collect(Collectors.groupingBy(SalesEventUsage::getSalesEvent, Collectors.toList()));

            salesEventUsagesBySalesEventId.forEach((key, value) -> salesEventService.updateSalesEventStat(key, value.size()));

            return BoolPayload.of(true);
        });

    }

    public BoolPayload modifyApprovalStatus(long salesEventUsageId, SalesEventUsageApprovalStatusMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventUsageApproval modifiedSalesEventUsageApproval = salesEventUsageService.modifySalesEventUsageApproval(
                    salesEventUsageId,
                    request.getApprovalStatus(),
                    request.getRejectReasonCode(),
                    request.getRejectReason());

            if (modifiedSalesEventUsageApproval.getStatus().equals(ApprovalStatus.APPROVED)) {
                long salesEventId = modifiedSalesEventUsageApproval.getSalesEventUsage().getSalesEvent().getId();
                List<SalesEventUsage> salesEventUsages = salesEventUsageService.findSalesEventUsagesBySalesEventIds(
                        List.of(salesEventId));
                salesEventUsageService.reorderSalesEventUsages(salesEventUsages);
            }

            return BoolPayload.of(true);
        });
    }

    public SalesEventUsageApprovalPageablePayload retrieveSalesEventUsageApprovals(SalesEventUsageApprovalFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);
            Page<SalesEventUsageApproval> salesEventUsageApprovalPage = salesEventUsageService.retrieveSalesEventUsageApprovals(
                    request.toWhereCondition(hospitalId));

            List<SalesEventUsageApproval> salesEventUsageApprovals = salesEventUsageApprovalPage.getContent();

            List<Long> salesEventUsageIds = salesEventUsageApprovals.stream()
                    .map(x -> x.getSalesEventUsage().getId())
                    .collect(Collectors.toList());

            List<SalesEventUsage> salesEventUsages = salesEventUsageService.findSalesEventUsagesByIdIn(salesEventUsageIds);

            List<Long> salesEventIds = salesEventUsages.stream().map(x -> x.getSalesEvent().getId()).collect(Collectors.toList());

            List<SalesEvent> salesEvents = salesEventService.findBySalesEventIdIn(salesEventIds);

            Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImageBySalesEventUsageId = salesEventUsageImageService.findAllBySalesEventUsageIds(
                            salesEventUsageIds).stream()
                    .sorted(Comparator.comparing(SalesEventUsageImage::getType).thenComparing(SalesEventUsageImage::getPriority))
                    .collect(Collectors.groupingBy(x -> x.getSalesEventUsage().getId(),
                            Collectors.mapping(payloadFactory::salesEventUsageImageTemplate, Collectors.toList())));

            return SalesEventUsageApprovalPageablePayload.builder()
                    .salesEventUsageApprovals(
                            salesEventUsageApprovals.stream().map(payloadFactory::salesEventUsageApprovalTemplate).collect(
                                    Collectors.toList()))
                    .salesEventUsageBySalesEventUsageId(
                            salesEventUsages.stream().map(payloadFactory::salesEventUsageTemplate).collect(Collectors.toMap(
                                    SalesEventUsageTemplate::getId, Function.identity(), (a, b) -> a, TreeMap::new)))
                    .salesEventBySalesEventId(salesEvents.stream().map(payloadFactory::salesEventShortTemplate).collect(
                            Collectors.toMap(SalesEventShortTemplate::getId, Function.identity(), (a, b) -> a, TreeMap::new)))
                    .salesEventUsageImageBySalesEventUsageId(salesEventUsageImageBySalesEventUsageId)
                    .pageable(payloadFactory.pageableTemplate(salesEventUsageApprovalPage))
                    .build();
        });
    }

    public PriorityTargetSalesEventListPayload retrievePriorityTargetSalesEvents(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            List<SalesEvent> salesEvents = salesEventService.findVisibleSalesEventHasSalesEventUsageByHospitalId(hospitalId);

            return PriorityTargetSalesEventListPayload.builder()
                    .salesEvents(salesEvents.stream().map(payloadFactory::salesEventShortTemplate).collect(Collectors.toList()))
                    .build();
        });
    }

    public SalesEventUsageListPayload retrievePriorityTargetSalesEventUsages(long salesEventId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            SalesEvent salesEvent = salesEventService.findBySaleEventId(salesEventId).orElseThrow(() ->
                    new SalesEventException(SalesEventCode.SALES_EVENT_NOT_EXIST));

            List<SalesEventUsage> salesEventUsages = salesEventUsageService.findSalesEventUsagesBySalesEventIds(
                            List.of(salesEvent.getId())).stream()
                    .filter(x -> x.getApprovalStatus().equals(ApprovalStatus.APPROVED) && x.getViewYn().toBoolean())
                    .sorted(Comparator.comparing(SalesEventUsage::getPriority))
                    .collect(Collectors.toList());

            List<Long> salesEventUsageIds = new ArrayList<>();
            List<SalesEventUsageTemplate> salesEventUsageTemplates = new ArrayList<>();

            for (var salesEventUsage : salesEventUsages) {
                salesEventUsageTemplates.add(payloadFactory.salesEventUsageTemplate(salesEventUsage));
                salesEventUsageIds.add(salesEventUsage.getId());
            }

            Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImagesBySalesEventUsageId = salesEventUsageImageService.findAllBySalesEventUsageIds(
                            salesEventUsageIds).stream()
                    .collect(Collectors.groupingBy(x -> x.getSalesEventUsage().getId(),
                            Collectors.mapping(payloadFactory::salesEventUsageImageTemplate, Collectors.toList())));

            return SalesEventUsageListPayload.builder()
                    .salesEventUsages(salesEventUsageTemplates)
                    .salesEventUsageImagesBySalesEventUsageId(salesEventUsageImagesBySalesEventUsageId)
                    .salesEvent(payloadFactory.salesEventShortTemplate(salesEvent))
                    .build();

        });
    }

    public BoolPayload modifySalesEventUsagePriorities(SalesEventUsagePriorityMutationRequest request) {
        List<SalesEvent> salesEvents = salesEventService.findBySalesEventIdIn(request.getSalesEventIds());
        List<Long> salesEventIds = new ArrayList<>();
        for (var salesEvent : salesEvents) {
            if (!salesEvent.getViewYn().toBoolean()) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_USAGE_CANNOT_CHANGE_PRIORITY);
            }
            salesEventIds.add(salesEvent.getId());
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            salesEventUsageService.modifySalesEventUsagePriorities(salesEventIds, request.getPriorities());
            Map<Long, List<SalesEventUsage>> salesEventUsagesBySalesEventId = salesEventUsageService.findSalesEventUsagesBySalesEventIds(
                            salesEventIds)
                    .stream()
                    .collect(Collectors.groupingBy(x -> x.getSalesEvent().getId()));

            salesEventUsagesBySalesEventId.forEach((key, value) -> salesEventUsageService.reorderSalesEventUsages(value));

            return BoolPayload.of(true);
        });
    }

    public SalesEventStatPayload findSalesEventStatsByHospitalId(long hospitalId) {
        if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
            throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
        }

        List<SalesEventStat> salesEventStats = salesEventService.findSalesEventStatsByHospitalIdsAndUsageCount(
                List.of(hospitalId));

        List<SalesEventStatTemplate> salesEventStatTemplates = new ArrayList<>();
        Map<Long, SalesEventStatTemplate> salesEventStatTemplateMap = new TreeMap<>();
        for (var salesEventStat : salesEventStats) {
            SalesEventStatTemplate template = payloadFactory.salesEventStatTemplate(salesEventStat);
            salesEventStatTemplates.add(template);
            salesEventStatTemplateMap.put(salesEventStat.getSalesEvent().getId(), template);
        }

        return SalesEventStatPayload.builder()
                .salesEventStats(salesEventStatTemplates)
                .salesEventStatBySalesEventId(salesEventStatTemplateMap)
                .build();
    }

    public SalesEventUsageListPayload searchSalesEventUsages(long hospitalId, String query) {
        if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
            throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
        }

        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    List<SalesEventUsage> salesEventUsages = salesEventUsageService.findAllByHospitalIdAndQuery(hospitalId,
                            query);

                    List<SalesEventUsageTemplate> salesEventUsageTemplates = new ArrayList<>();
                    Set<Long> salesEventUsageIds = new HashSet<>();
                    for (var salesEventUsage : salesEventUsages) {
                        salesEventUsageTemplates.add(payloadFactory.salesEventUsageTemplate(salesEventUsage));
                        salesEventUsageIds.add(salesEventUsage.getId());
                    }
                    salesEventUsageTemplates.sort(Comparator.comparing(SalesEventUsageTemplate::getId).reversed());

                    List<SalesEventUsageImage> salesEventUsageImages = salesEventUsageImageService.findAllBySalesEventUsageIds(
                            salesEventUsageIds);

                    Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImageTemplateMap = new TreeMap<>();

                    for (var salesEventUsageImage : salesEventUsageImages) {
                        salesEventUsageImageTemplateMap.computeIfAbsent(salesEventUsageImage.getSalesEventUsage().getId(),
                                x -> new ArrayList<>()).add(payloadFactory.salesEventUsageImageTemplate(salesEventUsageImage));
                    }

                    return SalesEventUsageListPayload.builder()
                            .salesEventUsages(salesEventUsageTemplates)
                            .salesEventUsageImagesBySalesEventUsageId(salesEventUsageImageTemplateMap)
                            .build();
                });
    }

    public BoolPayload activateSalesEventUsage(long id, boolean activate) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> salesEventUsageService.modifySalesEventUsageActivate(id, activate));

    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/SalesEventUseCase.java
================================================
package kr.co.yeoshin.admin.product.usecase;

import java.util.*;
import java.util.Map.Entry;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.board.service.PromotionService;
import kr.co.yeoshin.admin.common.Profile;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.SalesEventCode;
import kr.co.yeoshin.admin.common.model.api.code.TreatmentCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.cpm.service.CpmAdService;
import kr.co.yeoshin.admin.exception.SalesEventException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.DefaultMediaContext;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.admin.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.admin.product.controller.model.*;
import kr.co.yeoshin.admin.product.service.*;
import kr.co.yeoshin.admin.product.service.model.SalesEventContainer;
import kr.co.yeoshin.admin.product.service.model.SalesEventDetailPayload;
import kr.co.yeoshin.admin.product.service.model.TreatmentMethodPayload;
import kr.co.yeoshin.admin.product.usecase.model.ActivationResultPayload;
import kr.co.yeoshin.admin.product.usecase.model.SalesEventLogContext;
import kr.co.yeoshin.admin.product.usecase.model.SalesEventPageablePayload;
import kr.co.yeoshin.admin.product.usecase.model.SalesProductPageablePayload;
import kr.co.yeoshin.admin.product.util.SalesEventUtils;
import kr.co.yeoshin.admin.product.util.SalesProductUtils;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.revision.service.model.InstantLogContext;
import kr.co.yeoshin.admin.search.service.DomainSearchService;
import kr.co.yeoshin.admin.search.service.model.SalesEventFilterResult;
import kr.co.yeoshin.admin.treatment.service.TreatmentPrincipleService;
import kr.co.yeoshin.admin.treatment.service.TreatmentService;
import kr.co.yeoshin.admin.utils.CollectionFunctionalUtils;
import kr.co.yeoshin.admin.utils.FunctionalUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.admin.utils.JaversUtils;
import kr.co.yeoshin.common.audit.entity.InstantLog;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.hospital.entity.*;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.model.CommissionType;
import kr.co.yeoshin.common.product.model.ImageObject;
import kr.co.yeoshin.common.product.model.SalesEventWhereCondition;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleUsageType;
import kr.co.yeoshin.common.type.ApprovalStatus;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class SalesEventUseCase {

    private final SalesEventService salesEventService;
    private final SalesProductService salesProductService;
    private final SalesEventImageService salesEventImageService;
    private final TreatmentPrincipleService treatmentPrincipleService;
    private final MediaService mediaService;
    private final SalesEventCpmService salesEventCpmService;
    private final HospitalService hospitalService;
    private final AdminService adminService;
    private final DomainSearchService searchService;
    private final RevisionService revisionService;
    private final CpmAdService cpmAdService;
    private final SalesEventConsultationService salesEventConsultationService;
    private final PromotionService promotionService;
    private final SalesEventUsageService salesEventUsageService;
    private final SalesEventUsageImageService salesEventUsageImageService;
    private final TreatmentService treatmentService;
    private final TransactionTemplate transactionTemplate;
    private final SqsQueueMessagePublisher messagePublisher;
    private final SlackTemplateFactory slackTemplateFactory;
    private final Environment env;
    private final PayloadFactory payloadFactory;

    public SalesEventPageablePayload retrieveSalesEvents(SalesEventFilterRequest request) {
        Set<Long> hospitalIds = DiagnosticContext.currentHospitalId()
                .map(Set::of)
                .orElse(Optional.ofNullable(request.getHospitalIds()).map(Set::copyOf).orElse(null));

        List<Long> salesEventIds = Optional.ofNullable(request.getSalesEventName())
                .filter(it -> request.getSalesEventIds() == null && StringUtils.isNotBlank(it))
                .map(it -> searchService.searchSalesEvent(it, List.of("name"))
                        .getResults()
                        .stream()
                        .filter(s -> hospitalIds == null || hospitalIds.contains(s.getHospitalId()))
                        .map(SalesEventFilterResult::getId)
                        .collect(Collectors.toList()))
                .orElse(request.getSalesEventIds());

        // ES에서 이벤트명 검색시 결과가 없으면 바로 empty 응답
        if (StringUtils.isNotBlank(request.getSalesEventName()) && salesEventIds != null && salesEventIds.isEmpty()) {
            return SalesEventPageablePayload.empty(payloadFactory.pageableTemplate(request.getPageable().toPageable(), 0));
        }

        SalesEventWhereCondition whereCondition = request.toWhereCondition().toBuilder()
                .hospitalIds(hospitalIds)
                .salesEventIds(salesEventIds)
                .trashYn(YN.N)
                .build();

        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<SalesEvent> salesEventPage = salesEventService.retrieveSalesEvents(whereCondition);

            List<SalesEventShortTemplate> salesEventTemplates = new ArrayList<>();
            Map<Long, String> hospitalNames = new TreeMap<>();
            Map<Long, Long> hospitalIdsBySalesEventId = new HashMap<>();
            for (SalesEvent salesEvent : salesEventPage.getContent()) {
                salesEventTemplates.add(payloadFactory.salesEventShortTemplate(salesEvent));
                hospitalNames.putIfAbsent(salesEvent.getId(),
                        InvokeSupporters.getOrDefaultIfNull(() -> salesEvent.getHospital().getName(), StringUtils.EMPTY));
                hospitalIdsBySalesEventId.put(salesEvent.getId(), salesEvent.getHospital().getId());
            }

            Map<Long, CpmAdStatus> adStatusesByHospitalId = cpmAdService
                    .retrieveCpmAdConfigsByHospitalId(hospitalIdsBySalesEventId.values())
                    .entrySet()
                    .stream()
                    .collect(Collectors.toUnmodifiableMap(Entry::getKey, entry -> entry.getValue().getStatus()));

            Map<Long, CpmAdStatus> adStatusesBySalesEventId = new TreeMap<>();
            for (var salesEvent : salesEventPage.getContent()) {
                Optional.ofNullable(adStatusesByHospitalId.get(salesEvent.getHospital().getId()))
                        .ifPresent(it -> adStatusesBySalesEventId.put(salesEvent.getId(), it));
            }

            return SalesEventPageablePayload.builder()
                    .salesEvents(salesEventTemplates)
                    .hospitalNamesBySalesEventId(hospitalNames)
                    .adStatusesBySalesEventId(adStatusesBySalesEventId)
                    .pageable(payloadFactory.pageableTemplate(salesEventPage))
                    .build();
        });
    }

    public SalesEventDetailPayload retrieveSalesEventDetail(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            SalesEventContainer salesEventContainer = salesEventService.retrieveSalesEventDetail(id);

            if (!salesEventContainer.isValid()) {
                throw new SalesEventException(CommonCode.ERROR, "sales_event (" + id + ") is invalid.");
            }

            SalesEventConsultationConfigTemplate salesEventConsultationConfigTemplate = salesEventConsultationService
                    .findSalesEventConsultationConfigsBySalesEventIds(List.of(id))
                    .stream()
                    .findFirst()
                    .map(payloadFactory::salesEventConsultationConfigTemplate)
                    .orElse(null);

            Map<Long, TagTemplate> solutionTagMap = salesEventContainer.getSolutionTags()
                    .stream()
                    .map(payloadFactory::tagTemplate)
                    .collect(
                            Collectors.toUnmodifiableMap(TagTemplate::getId, Function.identity(), FunctionalUtils.selectFirst()));

            SalesEvent salesEvent = salesEventContainer.getSalesEvent();

            List<HospitalDepartment> hospitalDepartments = hospitalService
                    .fetchHospitalDepartmentAsTreatments(List.of(salesEvent.getTreatment().getId()))
                    .stream()
                    .map(HospitalDepartmentAsTreatment::getHospitalDepartment)
                    .collect(Collectors.toList());
            List<Long> hospitalDepartmentIds = hospitalDepartments.stream()
                    .map(HospitalDepartment::getId)
                    .collect(Collectors.toList());
            List<HospitalTreatment> hospitalTreatments = hospitalService
                    .fetchHospitalDepartmentAsHospitalTreatments(hospitalDepartmentIds)
                    .stream()
                    .map(HospitalDepartmentAsHospitalTreatment::getHospitalTreatment)
                    .collect(Collectors.toList());

            List<SalesEventUsage> salesEventUsages = salesEventUsageService.findSalesEventUsagesBySalesEventIds(List.of(id))
                    .stream()
                    .filter(x -> x.getApprovalStatus() == ApprovalStatus.APPROVED)
                    .collect(Collectors.toList());
            List<Long> salesEventUsageIds = salesEventUsages.stream()
                    .map(SalesEventUsage::getId)
                    .collect(Collectors.toList());

            List<SalesEventUsageImage> salesEventUsageImages = salesEventUsageImageService
                    .findAllBySalesEventUsageIds(salesEventUsageIds);

            List<SalesEventUsageAsTreatmentMethodTag> salesEventUsageAsTreatmentMethodTags = salesEventService
                    .fetchAllTreatmentMethodTagsBySalesEventUsageIds(salesEventUsageIds);

            List<PromotionTemplate> promotionTemplates = promotionService.retrievePromotionsBySalesEventIds(List.of(id))
                    .values()
                    .stream()
                    .findFirst()
                    .map(l -> l.stream().map(payloadFactory::promotionTemplate).collect(Collectors.toList()))
                    .orElse(Collections.emptyList());

            List<String> imageNames = new ArrayList<>();
            List<String> fileNames = new ArrayList<>();
            salesEventContainer.fetchLocaleSalesEventImageMap()
                    .values()
                    .stream()
                    .map(MultiLanguageType::toMap)
                    .forEach(m -> m.values().stream().flatMap(List::stream)
                            .forEach(x -> {
                                if (x.getType() != SalesEventImageType.TREATMENT_PART) {
                                    fileNames.add(x.getImage());
                                }
                                imageNames.add(x.getImage());
                            }));
            salesEventUsageImages.forEach(u -> imageNames.add(u.getImage()));

            Map<String, MediaContainer> mediaContainerMap = mediaService.retrieveMedia(
                    imageNames, DefaultMediaContext.PUBLIC_PRODUCT_IMAGE);

            Map<String, FileTemplate> allFiles = SalesEventUtils.makeImageFileTemplates(fileNames, mediaContainerMap);

            SalesEventDetailTemplate salesEventDetailTemplate = SalesEventDetailTemplate.of(
                    salesEventContainer,
                    hospitalDepartments,
                    hospitalTreatments,
                    salesEventUsages,
                    salesEventUsageImages,
                    salesEventUsageAsTreatmentMethodTags,
                    mediaContainerMap
            );

            boolean isDeletable = !salesEvent.getUseYn().toBoolean() && !cpmAdService.hasCpmStartHistory(salesEvent.getId());

            return SalesEventDetailPayload.builder()
                    .salesEventDetail(salesEventDetailTemplate)
                    .salesEventConsultationConfig(salesEventConsultationConfigTemplate)
                    .hospital(payloadFactory.hospitalShortTemplate(salesEvent.getHospital()))
                    .treatment(payloadFactory.treatmentTemplate(salesEvent.getTreatment()))
                    .solutionTags(solutionTagMap)
                    .isTrash(salesEvent.getTrashYn().toBoolean())
                    .promotions(promotionTemplates)
                    .allFiles(List.copyOf(allFiles.values()))
                    .isDeletable(isDeletable)
                    .build();

        });
    }

    public SalesEventDetailPayload registerSalesEvent(SalesEventMutationRequest salesEventMutationRequest) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            long adminId = DiagnosticContext.fetchAdminId();

            SalesEvent registered = salesEventService.registerSalesEvent(salesEventMutationRequest);
            SalesEventContainer salesEventContainer = salesEventService.retrieveSalesEventDetail(registered.getId());
            SalesEvent salesEvent = salesEventContainer.getSalesEvent();

            salesEventService.registerSalesEventConsultationConfig(
                    salesEvent, salesEventMutationRequest.getLocaleSalesProducts());

            updateSalesEventImages(adminId, salesEvent, salesEventMutationRequest);

            upsertSalesProducts(salesEvent.getId(), salesEventMutationRequest);

            if (salesEvent.getTreatmentLibraryYn().toBoolean() && salesEventContainer.getSalesEventTreatmentLibrary()
                    .isPresent()) {
                treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                        TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY,
                        salesEventContainer.getSalesEventTreatmentLibrary().get().getId(),
                        salesEventMutationRequest.getSalesEventTreatmentLibrary().getTreatmentPrincipleIds()
                );
            }

            salesEventCpmService.upsertSalesEventCpm(salesEvent.getId(), salesEvent.getViewYn() == YN.N);

            notifyKahfCreatedSalesEvent(salesEvent);

            return retrieveSalesEventDetail(salesEvent.getId());
        });
    }

    public SalesEventDetailPayload updateSalesEvent(long id, SalesEventMutationRequest salesEventMutationRequest) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            long adminId = DiagnosticContext.fetchAdminId();
            SalesEventDetailTemplate oldSalesEventTemplate = retrieveSalesEventDetail(id).getSalesEventDetail();

            SalesEvent updated = salesEventService.updateSalesEvent(id, salesEventMutationRequest);
            SalesEventContainer salesEventContainer = salesEventService.retrieveSalesEventDetail(updated.getId());
            SalesEvent salesEvent = salesEventContainer.getSalesEvent();

            salesEventService.updateSalesEventConsultationConfig(salesEvent, salesEventMutationRequest.getLocaleSalesProducts());

            updateSalesEventImages(adminId, salesEvent, salesEventMutationRequest);

            // treatment_principle_usage 정리
            if (oldSalesEventTemplate.getSalesEventTreatmentLibrary() != null
                    && salesEventContainer.getSalesEventTreatmentLibrary().isEmpty()) {
                treatmentPrincipleService.deleteAllTreatmentPrincipleUsages(
                        TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY,
                        oldSalesEventTemplate.getSalesEventTreatmentLibrary().getId()
                );
            } else {
                treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                        TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY,
                        salesEventContainer.getSalesEventTreatmentLibrary()
                                .map(SalesEventTreatmentLibrary::getId)
                                .orElse(null),
                        InvokeSupporters.getOrNullIfNull(
                                () -> salesEventMutationRequest.getSalesEventTreatmentLibrary().getTreatmentPrincipleIds())
                );
            }

            upsertSalesProducts(id, salesEventMutationRequest);

            salesEventCpmService.upsertSalesEventCpm(id, salesEvent.getViewYn() == YN.N);

            notifyKahfUpdatedSalesEvent(salesEvent);

            SalesEventDetailPayload payload = retrieveSalesEventDetail(id);
            logModifiedFields(oldSalesEventTemplate, payload.getSalesEventDetail());

            return payload;
        });
    }

    public SalesProductPageablePayload salesProductList(long salesEventId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<SalesProductShortTemplate> salesProductShortTemplates = salesProductService
                    .fetchSalesProductsBySalesEventId(salesEventId)
                    .stream()
                    .map(SalesProductShortTemplate::of)
                    .collect(Collectors.toUnmodifiableList());

            return SalesProductPageablePayload.builder()
                    .salesProducts(salesProductShortTemplates)
                    .build();
        });
    }

    private void updateSalesEventImages(
            long adminId,
            SalesEvent salesEvent,
            SalesEventMutationRequest salesEventMutationRequest
    ) {
        Map<SalesEventImageType, List<ImageObject>> requestedImages = salesEventMutationRequest.fetchAllImageObjects();

        // 이벤트요청서를 통해서 이벤트를 등록하는 경우에 이벤트요청서에 업로드했던 PRIVATE 버킷에 있던 이미지를 복사
        Map<SalesEventImageType, List<ImageObject>> replacedImages = copyPrivateImageToPublic(adminId, requestedImages);

        // 메인 이미지나 썸네일 이미지 중 하나만 있을 때 복사
        Map<SalesEventImageType, List<ImageObject>> imagesMap = copyMainOrThumbnail(adminId, replacedImages);

        salesEventImageService.upsertSalesEventImages(salesEvent.getId(), imagesMap);
    }

    Map<SalesEventImageType, List<ImageObject>> copyPrivateImageToPublic(
            long adminId, Map<SalesEventImageType, List<ImageObject>> images) {
        List<String> imageNames = CollectionFunctionalUtils.flatMapToList(images.values(), ImageObject::getImage);

        Map<String, MediaStatus> copies = mediaService.findStatusesByFileNames(imageNames)
                .stream()
                .filter(ms -> ms.getAccessibleType() == MediaAccessibleType.PRIVATE)
                .map(source -> {
                    MediaStatus copied = SalesEventUtils.copyMedia(mediaService, adminId, source);
                    return Pair.of(source, copied);
                })
                .collect(Collectors.toMap(p -> p.getKey().getFileName(), Pair::getValue));

        return images.entrySet().stream()
                .map(entry -> Pair.of(entry.getKey(), entry.getValue()
                        .stream()
                        .map(i -> Optional.ofNullable(copies.get(i.getImage()))
                                .map(c -> i.toBuilder().image(c.getFileName()).build())
                                .orElse(i))
                        .collect(Collectors.toList())))
                .collect(Collectors.toMap(Pair::getKey, Pair::getValue));
    }

    Map<SalesEventImageType, List<ImageObject>> copyMainOrThumbnail(long adminId,
            Map<SalesEventImageType, List<ImageObject>> imageMap) {
        Map<SalesEventImageType, List<ImageObject>> mutableMap = new HashMap<>(imageMap);
        if (!(mutableMap.containsKey(SalesEventImageType.MAIN)
                && mutableMap.containsKey(SalesEventImageType.THUMBNAIL))) {
            if (mutableMap.containsKey(SalesEventImageType.MAIN)) {
                // main 이미지만 있는 경우 main 이미지를 thumbnail 로 복사
                List<ImageObject> thumbnails = SalesEventUtils.copyImages(mediaService, adminId,
                        mutableMap.get(SalesEventImageType.MAIN), SalesEventImageType.MAIN);
                mutableMap.put(SalesEventImageType.THUMBNAIL, thumbnails);
            } else {
                List<ImageObject> mains = SalesEventUtils.copyImages(mediaService, adminId,
                        mutableMap.get(SalesEventImageType.THUMBNAIL), SalesEventImageType.THUMBNAIL);
                mutableMap.put(SalesEventImageType.MAIN, mains);
            }
        }

        return mutableMap;
    }

    private void notifyKahfCreatedSalesEvent(SalesEvent salesEvent) {
        notifyKahfSalesEvent(CommissionType.NEW, salesEvent);
    }

    private void notifyKahfUpdatedSalesEvent(SalesEvent salesEvent) {
        notifyKahfSalesEvent(CommissionType.MOD, salesEvent);
    }

    private void notifyKahfSalesEvent(CommissionType type, SalesEvent salesEvent) {
        if (!Profile.PROD.getValue().equals(Profile.getActiveProfile(env))) {
            return;
        }

        Hospital hospital = salesEvent.getHospital();
        hospitalService.fetchHospitalByHospitalId(hospital.getId())
                .filter(h -> h.getKahfYn() == YN.Y)
                .ifPresent(h -> {
                    AdminAccountTemplate adminAccount = adminService.fetchAllAdminAccountByAdminIds(
                                    List.of(hospital.getAdmin().getId()))
                            .stream()
                            .findFirst()
                            .orElse(null);

                    messagePublisher.publishNotification(NotificationMessage.of(NotificationPayload.builder()
                            .slack(slackTemplateFactory.salesEventMultiLanguage(type,
                                    salesEvent, hospital, adminAccount))
                            .build()));
                });
    }

    private void upsertSalesProducts(long salesEventId, SalesEventMutationRequest salesEventMutationRequest) {
        long hospitalId = salesEventMutationRequest.getHospitalId();
        TreeMap<Language, List<SalesProductMutationRequest>> multiLanguageProducts = new TreeMap<>(
                Comparator.comparingInt(Language::ordinal));

        if (salesEventMutationRequest.getLocaleSalesProducts() == null) {
            List<SalesProductMutationRequest> salesProductMutationRequests = convertAndSortSalesProductRequestItems(
                    salesEventId, hospitalId, Language.KOREAN, salesEventMutationRequest.getProducts());
            multiLanguageProducts.put(Language.KOREAN, salesProductMutationRequests);
        } else {
            salesEventMutationRequest.getLocaleSalesProducts().toMap()
                    .forEach((k, v) -> multiLanguageProducts.put(k,
                            convertAndSortSalesProductRequestItems(salesEventId, hospitalId, k, v)));
        }

        multiLanguageProducts.entrySet().stream()
                .filter(e -> CollectionUtils.isNotEmpty(e.getValue()))
                .forEach((e) -> salesProductService.upsertSalesProducts(salesEventId, hospitalId, e.getKey(), e.getValue()));
    }

    List<SalesProductMutationRequest> convertAndSortSalesProductRequestItems(long salesEventId,
            long hospitalId, Language language, Collection<SalesProductRequestItem> salesProducts) {
        if (CollectionUtils.isEmpty(salesProducts)) {
            return Collections.emptyList();
        }

        List<SalesProductMutationRequest> optionList = new ArrayList<>();
        List<SalesProductMutationRequest> additionList = new ArrayList<>();
        int optionIdx = 0, additionIdx = 0;
        for (var salesProduct : salesProducts) {
            if (SalesProductUtils.isTrash(salesProduct)) {
                continue;
            }

            var priority = salesProduct.getType().isAddition() ? additionIdx++ : optionIdx++;
            var list = salesProduct.getType().isAddition() ? additionList : optionList;
            list.add(SalesProductMutationRequest.of(salesProduct, salesEventId, hospitalId, priority, language));
        }

        return Stream.concat(optionList.stream(), additionList.stream()).collect(Collectors.toList());
    }

    List<InstantLog> logModifiedFields(SalesEventDetailTemplate oldSalesEvent, SalesEventDetailTemplate updatedSalesEvent) {
        MultiLanguageType<List<String>> modifiedFields = MultiLanguageType.<List<String>>builder()
                .ko(JaversUtils.fetchModifiedFields(SalesEventLogContext.from(Language.KOREAN, oldSalesEvent),
                        SalesEventLogContext.from(Language.KOREAN, updatedSalesEvent),
                        SalesEventLogContext.fieldNameReplacement()))
                .en(JaversUtils.fetchModifiedFields(SalesEventLogContext.from(Language.ENGLISH, oldSalesEvent),
                        SalesEventLogContext.from(Language.ENGLISH, updatedSalesEvent),
                        SalesEventLogContext.fieldNameReplacement()))
                .zh(JaversUtils.fetchModifiedFields(SalesEventLogContext.from(Language.CHINESE, oldSalesEvent),
                        SalesEventLogContext.from(Language.CHINESE, updatedSalesEvent),
                        SalesEventLogContext.fieldNameReplacement()))
                .ja(JaversUtils.fetchModifiedFields(SalesEventLogContext.from(Language.JAPANESE, oldSalesEvent),
                        SalesEventLogContext.from(Language.JAPANESE, updatedSalesEvent),
                        SalesEventLogContext.fieldNameReplacement()))
                .build();

        List<String> messages = new ArrayList<>();

        BiConsumer<Language, List<String>> makeMessage = (l, f) -> Optional.ofNullable(f)
                .filter(CollectionUtils::isNotEmpty)
                .map(it -> MessageUtils.format("{} - {}",
                        l.getCode(),
                        String.join(", ", it)))
                .ifPresent(messages::add);

        makeMessage.accept(Language.KOREAN, modifiedFields.getKo());
        makeMessage.accept(Language.ENGLISH, modifiedFields.getEn());
        makeMessage.accept(Language.CHINESE, modifiedFields.getZh());
        makeMessage.accept(Language.JAPANESE, modifiedFields.getJa());

        return messages.stream()
                .map(m -> revisionService.registerInstantLog(InstantLogContext.builder()
                        .refType(DomainType.SALES_EVENT)
                        .refId(oldSalesEvent.getSalesEvent().getId())
                        .message(m)
                        .build()))
                .collect(Collectors.toList());
    }

    public TreatmentMethodPayload treatmentMethodsBySalesEventId(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            SalesEvent salesEvent = salesEventService.fetchSalesEventById(id)
                    .orElseThrow(() -> new SalesEventException(SalesEventCode.SALES_EVENT_NOT_EXIST));

            Treatment treatment = treatmentService.findByTreatmentIdIn(List.of(salesEvent.getTreatment().getId()))
                    .stream()
                    .findFirst()
                    .orElseThrow(() -> new SalesEventException(TreatmentCode.TREATMENT_NOT_EXIST));

            List<TagTemplate> treatmentMethodTagTemplates = salesEventService.findAllTreatmentMethodTags(treatment.getId())
                    .stream()
                    .map(payloadFactory::tagTemplate)
                    .collect(Collectors.toUnmodifiableList());

            return TreatmentMethodPayload.builder()
                    .treatment(payloadFactory.treatmentTemplate(treatment))
                    .treatmentMethodTags(treatmentMethodTagTemplates)
                    .build();

        });
    }

    public ActivationResultPayload activates(boolean isOn, @Valid SalesEventActivationRequest request) {

        List<Long> salesEventIds = request.getSalesEventIds();
        return transactionTemplate.executeMainWritableTransaction(() -> {
            List<SalesEvent> salesEvents = salesEventService.findBySalesEventIdIn(salesEventIds);
            if (CollectionUtils.isEmpty(salesEvents)) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_NOT_EXIST);
            }

            Map<Long, SalesEvent> updateSalesEvents = salesEvents.stream()
                    .filter(x -> {
                        boolean isView = x.getViewYn().toBoolean();
                        boolean isUse = x.getUseYn().toBoolean();
                        return isOn ? !isUse : (!isView && isUse);
                    })
                    .map(x -> x.changeUseYn(YN.of(isOn)))
                    .collect(Collectors.toMap(SalesEvent::getId, Function.identity(), (a, b) -> a));

            if (updateSalesEvents.isEmpty()) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_ACTIVATE_CHANGE_NOT_EXIST);
            }

            return ActivationResultPayload.builder()
                    .requestCount(salesEvents.size())
                    .successCount(updateSalesEvents.size())
                    .failCount(salesEvents.size() - updateSalesEvents.size())
                    .build();
        });
    }

    public BoolPayload deleteSalesEvent(long salesEventId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEvent salesEvent = salesEventService.findBySaleEventId(salesEventId)
                    .orElseThrow(() -> new SalesEventException(SalesEventCode.SALES_EVENT_NOT_EXIST));

            if (salesEvent.getUseYn().toBoolean() || cpmAdService.hasCpmStartHistory(salesEvent.getId())) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_CANNOT_DELETE);
            }

            salesProductService.removeSalesProductsBySalesEventId(salesEventId);

            cpmAdService.removeSalesEventCpmCpa(salesEventId);

            salesEventService.findSalesEventTreatmentLibraryBySalesEventId(salesEventId).ifPresent(treatmentLibrary -> {
                treatmentPrincipleService.deleteAllTreatmentPrincipleUsages(
                        TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY, treatmentLibrary.getId());
                salesEventService.removeSalesEventTreatmentLibraryById(treatmentLibrary.getId());
            });

            List<SalesEventImage> salesEventImages = salesEventImageService.findAllBySalesEventId(salesEventId);
            salesEventImageService.removeSalesEventImages(salesEventImages);
            List<String> filenames = salesEventImages.stream().map(SalesEventImage::getImage).collect(Collectors.toList());
            mediaService.removeStatus(filenames);

            salesEventService.removeSalesEventStatBySalesEventId(salesEventId);

            salesEventService.removeSalesEventById(salesEventId);

            return BoolPayload.of(true);
        });
    }
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/SalesProductUseCase.java
================================================
package kr.co.yeoshin.admin.product.usecase;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.CacheTemplate;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentPrincipleTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.DefaultMediaContext;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.admin.product.service.SalesProductService;
import kr.co.yeoshin.admin.product.usecase.model.AttributePreset;
import kr.co.yeoshin.admin.product.usecase.model.AttributeTypeDescriptionPresetPayload;
import kr.co.yeoshin.admin.treatment.service.TreatmentPrincipleService;
import kr.co.yeoshin.admin.treatment.service.TreatmentService;
import kr.co.yeoshin.admin.treatment.service.model.TreatmentPrincipleContainer;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.product.entity.Treatment;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class SalesProductUseCase {

    private final SalesProductService salesProductService;
    private final TreatmentService treatmentService;
    private final TreatmentPrincipleService treatmentPrincipleService;
    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;
    private final CacheTemplate cacheTemplate;

    public AttributeTypeDescriptionPresetPayload retrieveAttributeTypeDescriptionPresets() {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<AttributePreset> attributePresets = salesProductService.retrieveAttributePresets();

            Set<Long> treatmentIds = new HashSet<>();
            Set<Long> treatmentPrincipleIds = new HashSet<>();
            for (AttributePreset attributePreset : attributePresets) {
                treatmentIds.add(attributePreset.getTreatmentId());
                treatmentPrincipleIds.addAll(attributePreset.getTreatmentPrincipleIds());
            }

            Map<String, TreatmentPrincipleContainer> treatmentPrincipleMap = treatmentPrincipleService
                    .findAllByIds(treatmentPrincipleIds)
                    .stream()
                    .collect(Collectors.toMap(x -> x.getTreatmentPrinciple().getNameKo(), Function.identity()));

            List<String> images = treatmentPrincipleMap.values().stream()
                    .flatMap(c -> c.getTreatmentPrinciple().getAllThumbnails().stream())
                    .collect(Collectors.toList());
            treatmentPrincipleMap.values().stream()
                    .flatMap(c -> c.getTreatmentPrincipleDetails().stream())
                    .flatMap(tpd -> tpd.getAllImages().stream())
                    .forEach(images::add);
            Map<String, MediaContainer> mediaContainerMap = mediaService.retrieveMedia(images, DefaultMediaContext.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.TREATMENT)
                    .build());

            Map<Long, TreatmentTemplate> treatments = treatmentService.findByTreatmentIdIn(treatmentIds)
                    .stream()
                    .collect(Collectors.toMap(Treatment::getId, TreatmentTemplate::of));
            Map<Long, TreatmentPrincipleTemplate> treatmentPrinciples = treatmentPrincipleMap.values().stream()
                    .map(x -> TreatmentPrincipleTemplate.of(x, mediaContainerMap))
                    .collect(Collectors.toMap(TreatmentPrincipleTemplate::getId, Function.identity()));

            return AttributeTypeDescriptionPresetPayload.builder()
                    .attributes(attributePresets)
                    .treatments(treatments)
                    .treatmentPrinciples(treatmentPrinciples)
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/ActivationResultPayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ActivationResultPayload {

    private int requestCount;
    private int successCount;
    private int failCount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/AttributeTypeDescriptionPresetPayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.TreatmentPrincipleTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AttributeTypeDescriptionPresetPayload implements PlusAccessible {

    private List<AttributePreset> attributes;

    private Map<Long, TreatmentTemplate> treatments;

    private Map<Long, TreatmentPrincipleTemplate> treatmentPrinciples;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/PriorityTargetSalesEventListPayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.SalesEventShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PriorityTargetSalesEventListPayload implements PlusAccessible {

    private List<SalesEventShortTemplate> salesEvents;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesEventPageablePayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesEventShortTemplate;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventPageablePayload implements PlusAccessible {

    private List<SalesEventShortTemplate> salesEvents;
    private Map<Long, String> hospitalNamesBySalesEventId;
    private Map<Long, CpmAdStatus> adStatusesBySalesEventId;
    private PageableTemplate pageable;

    public static SalesEventPageablePayload empty() {
        return empty(PageableTemplate.empty());
    }

    public static SalesEventPageablePayload empty(PageableTemplate pageable) {
        return new SalesEventPageablePayload(Collections.emptyList(), Collections.emptyMap(), Collections.emptyMap(), pageable);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesEventStatPayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.SalesEventStatTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventStatPayload implements PlusAccessible {

    List<SalesEventStatTemplate> salesEventStats;
    Map<Long, SalesEventStatTemplate> salesEventStatBySalesEventId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesEventUsageApprovalPageablePayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventUsageApprovalPageablePayload implements PlusAccessible {

    private List<SalesEventUsageApprovalTemplate> salesEventUsageApprovals;
    private Map<Long, SalesEventUsageTemplate> salesEventUsageBySalesEventUsageId;
    private Map<Long, SalesEventShortTemplate> salesEventBySalesEventId;
    private Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImageBySalesEventUsageId;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesEventUsageListPayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventUsageListPayload implements PlusAccessible {

    private List<SalesEventUsageTemplate> salesEventUsages;
    private Map<Long, SalesEventUsageApprovalTemplate> salesEventUsageApprovalBySalesEventUsageId;
    private SalesEventShortTemplate salesEvent;
    private HospitalShortTemplate hospital;
    private Map<Long, List<SalesEventUsageImageTemplate>> salesEventUsageImagesBySalesEventUsageId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesEventUsagePageablePayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventUsagePageablePayload implements PlusAccessible {

    private List<SalesEventUsageTemplate> salesEventUsages;
    private Map<Long, SalesEventUsageApprovalTemplate> salesEventUsageApprovalBySalesEventUsageId;
    private Map<Long, SalesEventShortTemplate> salesEventBySalesEventId;
    private Map<Long, HospitalShortTemplate> hospitalByHospitalId;
    private Map<Long, List<SalesEventUsageImageTemplate>> beforeAfterImageBySalesEventUsageId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesEventUsagePayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventUsagePayload implements PlusAccessible {

    private SalesEventUsageTemplate salesEventUsage;
    private SalesEventUsageApprovalTemplate salesEventUsageApproval;
    private SalesEventShortTemplate salesEvent;
    private HospitalShortTemplate hospital;
    private List<SalesEventUsageImageTemplate> beforeAfterImages;
    private List<TagTemplate> treatmentMethodTags;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesProductPageablePayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesProductShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesProductPageablePayload implements PlusAccessible {

    private List<SalesProductShortTemplate> salesProducts;
    @JsonInclude(Include.NON_NULL)
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/product/usecase/model/SalesProductPayload.java
================================================
package kr.co.yeoshin.admin.product.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesProductTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesProductPayload implements PlusAccessible {

    private SalesProductTemplate salesProduct;
    private HospitalTemplate hospital;
    // TODO TreatmentTemplate 추가
//    private List<TreatmentProductTemplate> treatmentProducts;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/component/publisher/MessagePublisherTemplate.java
================================================
package kr.co.yeoshin.admin.queue.component.publisher;


import kr.co.yeoshin.admin.queue.model.Message;

public interface MessagePublisherTemplate {

    boolean publishDomainEvent(Message<?> message);

    boolean publishDomainEventSlow(Message<?> message);

    boolean publishDomainEventSlowest(Message<?> message);

    boolean publishDomainLog(Message<?> message);

    boolean publishNotification(Message<?> message);

    boolean publishCpm(Message<?> message);
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/component/publisher/QueueMessagePublisherTemplate.java
================================================
package kr.co.yeoshin.admin.queue.component.publisher;

import kr.co.yeoshin.admin.queue.model.Message;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@AllArgsConstructor
@Component
public class QueueMessagePublisherTemplate implements MessagePublisherTemplate {

    private final SqsQueueMessagePublisher sqsPublisher;

    @Override
    public boolean publishDomainEvent(Message<?> message) {
        return sqsPublisher.publishDomainEvent(message);
    }

    @Override
    public boolean publishDomainEventSlow(Message<?> message) {
        return sqsPublisher.publishDomainEventSlow(message);
    }

    @Override
    public boolean publishDomainEventSlowest(Message<?> message) {
        return sqsPublisher.publishDomainEventSlowest(message);
    }

    @Override
    public boolean publishDomainLog(Message<?> message) {
        return sqsPublisher.publishDomainLog(message);
    }

    @Override
    public boolean publishNotification(Message<?> message) {
        return sqsPublisher.publishNotification(message);
    }

    @Override
    public boolean publishCpm(Message<?> message) {
        return sqsPublisher.publishCpm(message);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/model/MonitoringReservationStatusLogPayload.java
================================================
package kr.co.yeoshin.admin.queue.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MonitoringReservationStatusLogPayload {

    private long reservationId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/model/cpm/CpmPayload.java
================================================
package kr.co.yeoshin.admin.queue.model.cpm;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant.Cpm;
import kr.co.yeoshin.common.type.DeviceType;
import lombok.Data;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;

@Data
public class CpmPayload {

    @JsonFormat(pattern = Cpm.CPM_MESSAGE_DATE_FORMAT)
    private LocalDate date;
    @JsonFormat(pattern = Cpm.CPM_MESSAGE_DATETIME_FORMAT)
    private LocalDateTime dateTime;
    private String ip;
    private long memberId;
    private List<CpmSalesEvent> salesEvents;
    private CpmActionType actionType;
    private CpmEventType eventType;
    private int value;
    private DeviceType devicePlatform;
    private String userAgent;
    private String language;
    private String campaign;
    private int defaultPriority;
    private Map<String, Object> context;

    @JsonIgnore
    public LocalDateTime getReportAt() {
        return dateTime.truncatedTo(ChronoUnit.HOURS);
    }

    @JsonIgnore
    public List<Long> getSalesEventIds() {
        return Optional.ofNullable(salesEvents)
                .filter(CollectionUtils::isNotEmpty)
                .orElse(Collections.emptyList())
                .stream()
                .map(CpmSalesEvent::getSalesEventId)
                .collect(Collectors.toList());
    }

    public Map<String, Object> getContext() {
        return MapUtils.isEmpty(context) ? Collections.emptyMap() : context;
    }
}




================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/model/domainevent/DomainEventPayload.java
================================================
package kr.co.yeoshin.admin.queue.model.domainevent;

import java.util.Map;
import lombok.Data;

@Data
public class DomainEventPayload {

    private long id;
    private DomainEventType event;
    private Map<String, Object> contexts;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/model/domainlog/DomainLogPayload.java
================================================
package kr.co.yeoshin.admin.queue.model.domainlog;

import java.util.Map;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Data;
import lombok.Getter;

@Getter
@Builder
public class DomainLogPayload {

    private DomainType domainType;
    private Map<String, Object> payload;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/model/domainlog/ReservationCrmLogPayload.java
================================================
package kr.co.yeoshin.admin.queue.model.domainlog;

import kr.co.yeoshin.common.reservation.type.CrmDevice;
import kr.co.yeoshin.common.reservation.type.ReservationSource;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.type.YN;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationCrmLogPayload {

    private long reservationId;
    private ReservationStatus reservationStatus;
    private long version;
    private CrmDevice crmType;
    private ReservationSource actionSource;
    private String actionType;
    private YN completeYn;
    private String content;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/queue/model/notificationevent/NotificationPayload.java
================================================
package kr.co.yeoshin.admin.queue.model.notificationevent;

import java.util.List;
import kr.co.yeoshin.admin.notification.component.model.FirebasePushNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.NhnSmsNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.SlackNotificationContext;
import lombok.Builder;
import lombok.Getter;
import lombok.NonNull;
import lombok.Singular;

@Getter
@Builder
public class NotificationPayload {
    @Singular("alimTalk")
    private List<@NonNull NhnKakaoAlimTalkNotificationContext> alimTalk;

    @Singular("firebase")
    private List<@NonNull FirebasePushNotificationContext> firebase;

    @Singular("slack")
    private List<@NonNull SlackNotificationContext> slack;

    @Singular("sms")
    private List<@NonNull NhnSmsNotificationContext> sms;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/report/service/model/ContentReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.report.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.ContentReportTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ContentReportPageablePayload {

    private List<ContentReportTemplate> reports;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/report/service/model/MemberReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.report.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberReportTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberReportPageablePayload {

    private List<MemberReportTemplate> reports;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/report/usecase/ReportBlockUseCase.java
================================================
package kr.co.yeoshin.admin.report.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.report.controller.model.ReportBlockFilterRequest;
import kr.co.yeoshin.admin.report.service.ReportBlockService;
import kr.co.yeoshin.admin.report.service.model.ContentReportPageablePayload;
import kr.co.yeoshin.admin.report.service.model.MemberReportPageablePayload;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class ReportBlockUseCase {

    private final ReportBlockService reportBlockService;
    private final TransactionTemplate transactionTemplate;

    public MemberReportPageablePayload retrieveMemberReports(ReportBlockFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> reportBlockService.retrieveMemberReports(request));
    }

    public ContentReportPageablePayload retrieveContentReports(ReportBlockFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> reportBlockService.retrieveContentReports(request));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/component/crm/api/model/SmartDoctorCrmApiErrorPayload.java
================================================
package kr.co.yeoshin.admin.reservation.component.crm.api.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class SmartDoctorCrmApiErrorPayload {

    @JsonProperty("errCode")
    private String code;

    @JsonProperty("errMessage")
    private String message;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/controller/model/LinkUpWithCrmResultPayload.java
================================================
package kr.co.yeoshin.admin.reservation.controller.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.CrmDeviceTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationHospitalConfigTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class LinkUpWithCrmResultPayload implements SystemAccessible {

    @Deprecated
    private ReservationHospitalConfigTemplate reservationHospitalConfig;
    private List<CrmDeviceTemplate> crms;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/controller/model/ReservationDoctorsPayload.java
================================================
package kr.co.yeoshin.admin.reservation.controller.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.ReservationDoctorTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationDoctorsPayload implements PlusAccessible {

    private List<ReservationDoctorTemplate> reservationDoctors;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/CrmVegasReservationUseCase.java
================================================
package kr.co.yeoshin.admin.reservation.usecase;

import com.google.common.collect.ImmutableList;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant.At;
import kr.co.yeoshin.admin.common.Constant.Crm;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CrmVegasCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.CrmReservationVegasException;
import kr.co.yeoshin.admin.exception.DomainException;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.reservation.component.crm.CrmReservationAction;
import kr.co.yeoshin.admin.reservation.component.crm.VegasCrmReservationActionListener;
import kr.co.yeoshin.admin.reservation.controller.model.CrmReservationMutationRequest;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationCancelRequest;
import kr.co.yeoshin.admin.reservation.service.CrmReservationService;
import kr.co.yeoshin.admin.reservation.service.ReservationReadableService;
import kr.co.yeoshin.admin.reservation.service.ReservationWritableService;
import kr.co.yeoshin.admin.reservation.service.model.ReservationRegister;
import kr.co.yeoshin.admin.reservation.service.model.ReservationTickets;
import kr.co.yeoshin.admin.reservation.service.model.ReservationsWithMembers;
import kr.co.yeoshin.admin.reservation.usecase.model.*;
import kr.co.yeoshin.admin.reservation.usecase.model.CrmReservationsPayload.Body;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.TicketsWithProducts;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.model.CrmReservationRegister;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.reservation.type.ReservationType;
import kr.co.yeoshin.common.utils.CrmUtils;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@UseCase
public class CrmVegasReservationUseCase {

    private final CrmReservationService crmReservationService;
    private final ReservationReadableService reservationReadableService;
    private final ReservationWritableService reservationWritableService;
    private final MemberService memberService;
    private final TicketService ticketService;
    private final OrderService orderService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final SqsQueueMessagePublisher messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final VegasCrmReservationActionListener actionListener;

    public CrmVegasReservationUseCase(List<CrmReservationService> crmReservationServices,
            ReservationReadableService reservationReadableService, ReservationWritableService reservationWritableService,
            MemberService memberService, TicketService ticketService, OrderService orderService,
            TransactionTemplate transactionTemplate, PayloadFactory payloadFactory, SqsQueueMessagePublisher messagePublisher,
            AlimTalkTemplateFactory alimTalkTemplateFactory,
            VegasCrmReservationActionListener vegasCrmReservationActionListener) {
        this.crmReservationService = crmReservationServices.stream().findAny()
                .orElseThrow(() -> new IllegalStateException("crm progress reservation services are not exist"));
        this.reservationReadableService = reservationReadableService;
        this.reservationWritableService = reservationWritableService;
        this.memberService = memberService;
        this.ticketService = ticketService;
        this.orderService = orderService;
        this.transactionTemplate = transactionTemplate;
        this.payloadFactory = payloadFactory;
        this.messagePublisher = messagePublisher;
        this.alimTalkTemplateFactory = alimTalkTemplateFactory;
        this.actionListener = vegasCrmReservationActionListener;
    }

    public CrmReservationsPayload retrieveReservations(long hospitalId, int year, int month, boolean scroll) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            LocalDateTime now = LocalDateTime.now();

            YearMonth yearMonth = YearMonth.of(year, month);
            LocalDateTime fromCreated = DateUtil.atStartOfDay(yearMonth.atDay(1));
            LocalDateTime toCreated = DateUtil.atEndOfDay(yearMonth.atEndOfMonth());
            // TODO 베가스에서는 같은 병원의 연/월 요청을 별개의 요청으로 구분해야 하여 scroll id를 MySQL DATIME과 동일한 포맷(yyyy-MM-dd HH:mm:ss)의 연/월 날짜로 지정
            String scrollId = fromCreated.format(DateTimeFormatter.ofPattern(Crm.DATE_TIME_FORMAT));

            LocalDateTime updated = scroll ?
                    crmReservationService.retrieveCrmLatestAccess(hospitalId, scrollId)
                            .map(it -> it.getAt().truncatedTo(ChronoUnit.MINUTES))
                            .orElse(At.MIN_LOCAL_DATETIME) : At.MIN_LOCAL_DATETIME;

            Set<ReservationStatus> canceledStatuses = scroll ?
                    ReservationProgress.CANCEL.getStatuses() : Collections.emptySet();

            ReservationsWithMembers reservationsWithMembers =
                    reservationReadableService.retrieveReservations(hospitalId, fromCreated, toCreated, updated,
                            ImmutableList.<ReservationStatus>builder()
                                    .addAll(ReservationStatus.findReservationInProgressStatus())
                                    .addAll(canceledStatuses)
                                    .add(ReservationStatus.VISIT_COMPLETE)
                                    .build());

            List<ReservationShortTemplate> reservations = reservationsWithMembers.getReservations();
            if (CollectionUtils.isEmpty(reservations)) {
                return CrmReservationsPayload.empty();
            }

            Map<Long, ReservationShortTemplate> reservationById = reservations.stream()
                    .filter(it -> it.getType() != ReservationType.THE_DAY)
                    .collect(Collectors.toMap(ReservationShortTemplate::getId, Function.identity()));
            List<CrmReservationTemplate> crmReservations =
                    crmReservationService.retrieveCrmReservations(reservationById.keySet());

            Map<Long, CrmReservationTemplate> crmReservationByReservationId =
                    crmReservations.stream()
                            .collect(Collectors.toMap(CrmReservationTemplate::getReservationId, Function.identity(),
                                    (a, b) -> b));

            List<ReservationTickets> reservationTickets =
                    reservationReadableService.retrieveReservationAsTickets(reservationById.keySet());

            Map<Long, MemberShortTemplate> memberById = reservationsWithMembers.getMembers().stream()
                    .collect(Collectors.toMap(MemberShortTemplate::getId, Function.identity(), (a, b) -> a));

            CrmReservationsPayload payload =
                    CrmReservationsPayload.builder()
                            .reservations(reservationTickets.stream()
                                    .map(reservationTicket -> {
                                        ReservationTemplate reservation = reservationTicket.getReservation();
                                        CrmReservationStatus crmReservationStatus = CrmReservationStatus.findBy(
                                                        reservation.getStatus())
                                                .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_ERROR,
                                                        MessageUtils.format(
                                                                "reservation status is invalid (reservation id: {}, status: {})",
                                                                reservation.getId(), reservation.getStatus())));

                                        return Body.builder()
                                                .reservationId(reservation.getId())
                                                .reservationCode(reservation.getCode())
                                                .crmReservationId(InvokeSupporters.getOrNullIfNull(
                                                        () -> crmReservationByReservationId.get(reservation.getId())
                                                                .getCrmReservationId()))
                                                .reservationDate(reservation.getStartAt().toLocalDate())
                                                .startAt(DateUtil.convertFrom(reservation.getStartAt()))
                                                .endAt(DateUtil.convertFrom(reservation.getEndAt()))
                                                .statusCode(crmReservationStatus.getCode())
                                                .statusName(crmReservationStatus.getName())
                                                .memberName(memberById.computeIfAbsent(reservation.getMemberId(),
                                                        notFound -> {
                                                            log.error("reservation(id: {}) member(id: {}) does not exist",
                                                                    reservation.getId(), reservation.getMemberId());
                                                            throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_ERROR,
                                                                    "member must exist for crm reservation");
                                                        }).getName())
                                                .memberCellPhone(memberById.computeIfAbsent(reservation.getMemberId(),
                                                        notFound -> {
                                                            log.error("reservation(id: {}) member(id: {}) does not exist",
                                                                    reservation.getId(), reservation.getMemberId());
                                                            throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_ERROR,
                                                                    "member must exist for crm reservation");
                                                        }).getCellPhone())
                                                .treatmentNames(
                                                        CrmUtils.generateTreatmentNames(reservationTicket.getTickets().stream()
                                                                .map(TicketTemplate::getNameKo)
                                                                .collect(Collectors.toList())))
                                                .created(DateUtil.convertFrom(reservation.getCreatedAt()))
                                                .build();
                                    }).collect(Collectors.toList()))
                            .build();

            crmReservationService.upsertCrmLatestAccess(hospitalId, CrmDevice.VEGAS, scrollId, now);

            return payload;
        });
    }

    public CrmReservationPayload retrieveCrmReservation(long hospitalId, long reservationId) {
        Reservation reservation = reservationReadableService.fetchById(reservationId)
                .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_RESERVATION_NOT_EXIST));
        Hospital hospital = reservation.getHospital();
        Member member = reservation.getMember();

        ReservationHospitalConfigTemplate hospitalConfig =
                reservationReadableService.retrieveHospitalConfig(hospital.getId())
                        .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_NOT_LINKED_HOSPITAL));

        if (hospitalConfig.getHospitalId() != hospitalId) {
            throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_BAD_REQUEST,
                    MessageUtils.format("reservation(id: {})'s hospital is mismatch (hospital id: {}, reqested hospital id: {})",
                            reservation.getId(), hospitalConfig.getHospitalId(), hospitalId));
        }

        CrmReservationTemplate crmReservation =
                crmReservationService.retrieveCrmReservationByReservationIdAndCrmType(reservation.getId(), CrmDevice.VEGAS)
                        .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_RESERVATION_NOT_EXIST,
                                MessageUtils.format("reservation(id: {})'s crm reservation is not exist.")));

        CrmReservationStatus crmReservationStatus =
                CrmReservationStatus.findBy(reservation.getStatus())
                        .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_ERROR,
                                MessageUtils.format("reservation status is invalid (reservation id: {}, status: {})",
                                        reservation.getId(), reservation.getStatus())));

        List<ReservationTickets> reservationTickets =
                reservationReadableService.retrieveReservationAsTickets(Set.of(reservation.getId()));

        return CrmReservationPayload.builder()
                .reservationId(reservation.getId())
                .reservationCode(reservation.getCode())
                .memberId(member.getId())
                .reservationDate(reservation.getStartAt().toLocalDate())
                .startAt(reservation.getStartAt())
                .endAt(reservation.getEndAt())
                .crmReservationId(crmReservation.getCrmReservationId())
                .memberName(member.getName())
                .memberCellPhone(member.getCellPhone())
                .hospitalCode(hospitalConfig.getHospitalCode())
                .statusCode(crmReservationStatus.getCode())
                .memo(CrmUtils.generateCrmMemo(reservationTickets.stream()
                        .flatMap(it -> it.getTickets().stream())
                        .map(TicketTemplate::getNameKo)
                        .collect(Collectors.toList())))
                .crmDoctorId(crmReservation.getCrmDoctorId())
                .crmMemberId(crmReservation.getCrmMemberId())
                .treatment(StringUtils.EMPTY)
                .created(reservation.getCreated())
                .build();
    }

    public CrmConfirmReservationCountPayload isConfirmReservation(long hospitalId, long reservationId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ReservationTemplate reservation = reservationReadableService.retrieveReservation(reservationId);

            if (reservation.getHospitalId() != hospitalId) {
                throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_BAD_REQUEST,
                        MessageUtils.format(
                                "crm api request's hospital id and reservation id are mismatch (hospital id: {}, reservation id: {})",
                                hospitalId, reservationId));
            }

            CrmReservationStatus crmReservationStatus = CrmReservationStatus.findBy(reservation.getStatus())
                    .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_ERROR,
                            MessageUtils.format("reservation status is invalid (reservation id: {}, status: {})",
                                    reservation.getId(), reservation.getStatus())));

            if (crmReservationStatus != CrmReservationStatus.CONFIRM) {
                return CrmConfirmReservationCountPayload.empty();
            }

            return CrmConfirmReservationCountPayload.builder()
                    .count(1)
                    .build();
        });
    }

    public BoolPayload modifyConfirmReservationByReservationId(long reservationId, long hospitalId,
            CrmReservationMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> modifyConfirmReservation(reservationId, hospitalId, request));
    }

    @Deprecated
    public BoolPayload modifyConfirmReservationByCrmReservationId(long crmReservationId, long hospitalId,
            CrmReservationMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            CrmReservationTemplate crmReservation =
                    crmReservationService.retrieveCrmReservationByCrmReservationIdAndHospitalId(crmReservationId, hospitalId)
                            .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_RESERVATION_NOT_EXIST));

            return modifyConfirmReservation(crmReservation.getReservationId(), hospitalId, request);
        });
    }

    private BoolPayload modifyConfirmReservation(long reservationId, long hospitalId, CrmReservationMutationRequest request) {
        ReservationTemplate reservation = reservationReadableService.retrieveReservation(reservationId);

        try {
            ReservationHospitalConfigTemplate hospitalConfig = reservationReadableService.retrieveHospitalConfig(hospitalId)
                    .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_NOT_LINKED_HOSPITAL));

            /**
             * 해당 클래스 현재는 베가스만 사용중
             */
            CrmDeviceTemplate crmAsHospital = crmReservationService.retrieveCrmDevices(hospitalId).stream()
                    .filter(it -> it.getType() == CrmDevice.VEGAS)
                    .findFirst()
                    .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_NOT_LINKED_HOSPITAL));

            if (ReservationProgress.isCanceledStatus(reservation.getStatus())) {
                throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_CANCELED_RESERVATION);
            }

            if (ReservationProgress.isImmutableStatus(reservation.getStatus())) {
                CrmVegasCode code = reservation.getStatus() == ReservationStatus.WAIT_VISIT_COMPLETE
                        ? CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_WAIT_VISIT_COMPLETE_RESERVATION
                        : CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_VISIT_COMPLETE_RESERVATION;
                throw new CrmReservationVegasException(code);
            }

            LocalDateTime reservationAt = LocalDateTime.of(request.getReservationDate(), request.getReservationTime());
            /**
             * https://fastlane.atlassian.net/browse/PM-1914
             */
            //  LocalDateTime previousReservationAt = DateUtil.convertFrom(reservation.getStartAt());
            //  if (!previousReservationAt.isEqual(reservationAt) &&
            //          !reservationReadableService.hasReservableTimeSchedule(hospitalConfig.getHospitalId(), reservationAt)) {
            //      throw new CrmReservationException(CrmVegasCode.CRM_VEGAS_UNABLE_TO_RESERVE_TIME_SCHEDULE);
            //  }

            List<ReservationTickets> reservationAsTickets =
                    reservationReadableService.retrieveReservationAsTickets(List.of(reservation.getId()));

            boolean allConfirmable = reservationAsTickets.stream()
                    .flatMap(reservationTicket -> reservationTicket.getTickets().stream())
                    .allMatch(ticket -> ticket.getStatus() == TicketStatus.RESERVED);

            if (!allConfirmable) {
                throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_RESERVATION_TICKET);
            }

            if (orderService.retrieveOrderByOrderIds(reservationAsTickets.stream()
                            .flatMap(it -> it.getTickets().stream())
                            .map(TicketTemplate::getOrderId)
                            .collect(Collectors.toSet()))
                    .stream()
                    .anyMatch(order -> order.getOrderStatus() != OrderStatus.COMPLETE)) {
                throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_RESERVATION_TICKET,
                        MessageUtils.format(
                                "reservation ticket's order is not reservable status."));
            }

            Long reservationDoctorId =
                    Optional.ofNullable(request.getCrmDoctorId())
                            .flatMap(crmDoctorId -> reservationReadableService.retrieveReservationDoctorByCrmDoctorId(
                                    hospitalConfig.getHospitalId(), crmDoctorId))
                            .filter(ReservationDoctorTemplate::isActivated)
                            .map(ReservationDoctorTemplate::getId)
                            .orElse(null);

            Reservation modifiedReservation =
                    reservationWritableService.modifyReservation(reservation.getId(), ReservationRegister.builder()
                                    .memberId(reservation.getMemberId())
                                    .hospitalId(reservation.getHospitalId())
                                    .startAt(reservationAt)
                                    .endAt(reservationAt.plusMinutes(hospitalConfig.getSlotTimeInterval().getMinutes()))
                                    .status(ReservationProgress.findStatusByReservationAt(reservation.getStatus(), reservationAt))
                                    .type(reservation.getType())
                                    .hospitalMemo(request.getHospitalMemo())
                                    .reservationDoctorId(reservationDoctorId)
                                    .supportTodayReservation(hospitalConfig.isReservableOnToday())
                                    .build());

            reservationWritableService.upsertReservationLatestStatus(modifiedReservation.getId(),
                    modifiedReservation.getMember().getId(), modifiedReservation.getHospital().getId());

            crmReservationService.retrieveCrmReservationByReservationIdAndCrmType(modifiedReservation.getId(), CrmDevice.VEGAS)
                    .filter(it -> request.getCrmReservationId() != null
                            && request.getCrmReservationId() != it.getCrmReservationId())
                    .ifPresent(it -> log.info("vegas crm reservation id({}) is modified to {}.",
                            it.getCrmReservationId(), request.getCrmReservationId()));

            crmReservationService.upsertCrmReservation(CrmReservationRegister.builder()
                    .reservationId(reservation.getId())
                    .hospitalId(reservation.getHospitalId())
                    .reservationAt(DateUtil.convertFrom(reservation.getStartAt()))
                    .crmDeviceType(CrmDevice.VEGAS)
                    .crmAccessId(CrmUtils.generateCrmAccessId(
                            hospitalConfig.getHospitalCode(),
                            crmAsHospital.getCrmHospitalId()))
                    .crmDoctorId(reservation.getReservationDoctorId())
                    .crmReservationId(request.getCrmReservationId())
                    .crmMemberId(request.getCrmMemberId())
                    .build());

            if (ReservationProgress.findByStatus(reservation.getStatus()) == ReservationProgress.WAIT_CONFIRM
                    && ReservationProgress.findByStatus(modifiedReservation.getStatus()) == ReservationProgress.IN_PROGRESS) {
                ReservationTemplate modified = payloadFactory.reservationTemplate(modifiedReservation);
                MemberShortTemplate member = payloadFactory.memberShortTemplate(modifiedReservation.getMember());
                HospitalShortTemplate hospital = payloadFactory.hospitalShortTemplate(modifiedReservation.getHospital());
                List<TicketTemplate> tickets = reservationAsTickets.stream()
                        .flatMap(reservationTickets -> reservationTickets.getTickets().stream())
                        .collect(Collectors.toList());

                sendAlimTalk(alimTalkTemplateFactory.reservationConfirmed(modified, member, hospital, tickets));
            }

            return BoolPayload.builder()
                    .result(actionListener.onSuccess(reservation.getId(), reservation.getStatus(),
                            CrmReservationAction.ActionType.MODIFICATION))
                    .build();
        } catch (DomainException e) {
            return BoolPayload.of(actionListener.onFailure(e,
                    reservation.getId(),
                    reservation.getStatus(),
                    CrmReservationAction.ActionType.REGISTRATION));
        }
    }

    public BoolPayload cancelReservation(long reservationId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationTemplate reservation = reservationReadableService.retrieveReservation(reservationId);
            try {
                if (ReservationProgress.CANCEL.getStatuses().contains(reservation.getStatus())) {
                    return BoolPayload.builder()
                            .result(true)
                            .build();
                }

                long hospitalId = DiagnosticContext.adminHospitalRole().getHospitalId();
                if (!Objects.equals(hospitalId, reservation.getHospitalId())) {
                    throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_BAD_REQUEST,
                            MessageUtils.format(
                                    "crm api request's hospital id and reservation id are mismatch (hospital id: {}, reservation id: {})",
                                    hospitalId, reservationId));
                }

                if (ReservationProgress.isImmutableStatus(reservation.getStatus())) {
                    CrmVegasCode code = reservation.getStatus() == ReservationStatus.WAIT_VISIT_COMPLETE
                            ? CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_WAIT_VISIT_COMPLETE_RESERVATION
                            : CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_VISIT_COMPLETE_RESERVATION;
                    throw new CrmReservationVegasException(code,
                            MessageUtils.format("crm api request's reservation(id: {}, status: {}) is unable to cancel",
                                    reservation.getId(), reservation.getStatus()));
                }

                List<ReservationTickets> reservationTickets =
                        reservationReadableService.retrieveReservationAsTickets(List.of(reservation.getId()));

                boolean allCancelable = reservationTickets.stream()
                        .flatMap(reservationTicket -> reservationTicket.getTickets().stream())
                        .allMatch(ticket -> ticket.getStatus() == TicketStatus.RESERVED);

                if (!allCancelable) {
                    throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_RESERVATION_TICKET);
                }

                if (orderService.retrieveOrderByOrderIds(reservationTickets.stream()
                                .flatMap(it -> it.getTickets().stream())
                                .map(TicketTemplate::getOrderId)
                                .collect(Collectors.toSet()))
                        .stream()
                        .anyMatch(order -> order.getOrderStatus() != OrderStatus.COMPLETE)) {
                    throw new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_UNABLE_TO_MODIFY_RESERVATION_TICKET,
                            MessageUtils.format(
                                    "reservation ticket's order is not reservable status."));
                }

                MemberTemplate member = memberService.retrieveMember(reservation.getMemberId())
                        .orElseThrow(() -> new CrmReservationVegasException(CrmVegasCode.CRM_VEGAS_ERROR));

                Reservation canceledReservation =
                        reservationWritableService.cancelReservation(
                                reservation.getId(),
                                member.getId(),
                                reservation.getStatus(),
                                ReservationCancelRequest.builder()
                                        .hospitalMemo(reservation.getHospitalMemo())
                                        .build());

                reservationWritableService.upsertReservationLatestStatus(canceledReservation.getId(),
                        member.getId(), canceledReservation.getHospital().getId());

                List<TicketTemplate> canceledTickets = reservationTickets.stream()
                        .flatMap(reservationAsTicket -> reservationAsTicket.getTickets().stream())
                        .collect(Collectors.toList());

                ticketService.modifyTicketStatus(canceledTickets.stream()
                        .filter(TicketTemplate::isExpired)
                        .map(TicketTemplate::getId)
                        .collect(Collectors.toSet()), TicketStatus.EXPIRED);

                ticketService.modifyTicketStatus(canceledTickets.stream()
                        .filter(it -> !it.isExpired())
                        .map(TicketTemplate::getId)
                        .collect(Collectors.toSet()), TicketStatus.UNUSED);

                TicketsWithProducts modifiedTicketsWithProducts =
                        ticketService.retrieveTickets(canceledTickets.stream()
                                .map(TicketTemplate::getId)
                                .collect(Collectors.toSet()));

                ReservationTemplate canceled = payloadFactory.reservationTemplate(canceledReservation);
                List<TicketTemplate> tickets = modifiedTicketsWithProducts.getTickets();
                HospitalShortTemplate hospital = payloadFactory.hospitalShortTemplate(canceledReservation.getHospital());

                sendAlimTalk(alimTalkTemplateFactory.reservationCanceled(canceled, member.toShortTemplate(), hospital, tickets));

                return BoolPayload.builder()
                        .result(actionListener.onSuccess(reservation.getId(), reservation.getStatus(),
                                CrmReservationAction.ActionType.CANCEL))
                        .build();
            } catch (DomainException e) {
                return BoolPayload.of(actionListener.onFailure(e,
                        reservation.getId(),
                        reservation.getStatus(),
                        CrmReservationAction.ActionType.CANCEL));
            }
        });
    }

    private void sendAlimTalk(NhnKakaoAlimTalkNotificationContext notificationContext) {
        NotificationMessage notificationMessage =
                NotificationMessage.of(NotificationPayload.builder()
                        .alimTalk(notificationContext)
                        .build());

        messagePublisher.publishNotification(notificationMessage);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/ReservationReadableUseCase.java
================================================
package kr.co.yeoshin.admin.reservation.usecase;

import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPageablePayload;
import kr.co.yeoshin.admin.common.Constant.Paging;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthorizationException;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.member.service.MemberMetaService;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.reservation.component.crm.model.CrmConfigs;
import kr.co.yeoshin.admin.reservation.component.scheduler.model.ReservationTimeSchedule;
import kr.co.yeoshin.admin.reservation.component.scheduler.model.ReservationTimeSchedule.ReservationTime;
import kr.co.yeoshin.admin.reservation.component.scheduler.model.ReservationTimeSchedule.ScheduleStatus;
import kr.co.yeoshin.admin.reservation.controller.model.*;
import kr.co.yeoshin.admin.reservation.service.CrmReservationService;
import kr.co.yeoshin.admin.reservation.service.ReservationConfigService;
import kr.co.yeoshin.admin.reservation.service.ReservationReadableService;
import kr.co.yeoshin.admin.reservation.service.model.*;
import kr.co.yeoshin.admin.reservation.usecase.model.*;
import kr.co.yeoshin.admin.reservation.usecase.model.CrmDoctorsPayload.CrmDoctorTemplate;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.revision.service.model.RevisionSnapshot;
import kr.co.yeoshin.admin.ticket.service.TicketRestorationInquiryService;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.TicketsWithProducts;
import kr.co.yeoshin.admin.utils.CollectionFunctionalUtils;
import kr.co.yeoshin.common.board.model.AdminMemoWhereCondition;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.reservation.entity.QReservation;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicketLog;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalConfig;
import kr.co.yeoshin.common.reservation.model.ReservationAsTicketLogAction;
import kr.co.yeoshin.common.reservation.model.ReservationCalendarWhereCondition;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import kr.co.yeoshin.common.reservation.type.HospitalOperationStatus;
import kr.co.yeoshin.common.type.UserType;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.data.domain.Pageable;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class ReservationReadableUseCase {

    private final ReservationReadableService reservationReadableService;
    private final ReservationConfigService reservationConfigService;
    private final CrmReservationService crmReservationService;
    private final TicketService ticketService;
    private final TicketRestorationInquiryService ticketRestorationInquiryService;
    private final OrderService orderService;
    private final MemberService memberService;
    private final MemberMetaService memberMetaService;
    private final AdminService adminService;
    private final HospitalService hospitalService;
    private final RevisionService revisionService;
    private final AdminMemoService adminMemoService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public ReservationPayload retrieveReservation(long reservationId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ReservationTemplate reservation = reservationReadableService.retrieveReservation(reservationId);

            List<ReservationTickets> reservationAsTickets =
                    reservationReadableService.retrieveReservationAsTickets(List.of(reservation.getId()));

            List<ReservationAsTicketLog> reservationAsTicketLogs = ticketRestorationInquiryService.retrieveReservationAsTicketLogByReservationId(
                    reservation.getId(),
                    ReservationAsTicketLogAction.TICKET_RESTORATION_INQUIRY);

            Set<Long> ticketIds = Stream.concat(
                            reservationAsTickets.stream()
                                    .flatMap(reservationTicket -> reservationTicket.getTickets().stream())
                                    .map(TicketTemplate::getId),
                            reservationAsTicketLogs.stream()
                                    .map(log -> log.getTicket().getId())
                    )
                    .collect(Collectors.toSet());

            TicketsWithProducts ticketsWithProducts = ticketService.retrieveTickets(ticketIds);

            ReservationDoctorTemplate reservationDoctor = Optional.ofNullable(reservation.getReservationDoctorId())
                    .flatMap(doctorId -> reservationReadableService.retrieveReservationDoctor(reservation.getHospitalId(),
                            doctorId))
                    .orElse(null);

            MemberShortTemplate member = memberMetaService.fetchMemberServiceSummaryByMemberId(reservation.getMemberId())
                    .map(mss -> payloadFactory.memberShortTemplate(mss, null))
                    .orElseGet(() -> memberService.findMemberByMemberId(reservation.getMemberId())
                            .map(payloadFactory::memberShortTemplate)
                            .orElse(null));

            List<RevisionSnapshot<Reservation>> snapshots = revisionService.retrieveRevisionSnapshots(
                    reservation.getId(),
                    Reservation.class,
                    Set.of(QReservation.reservation.status.getMetadata(), QReservation.reservation.startAt.getMetadata()),
                    false);

            Set<Long> adminIds = Stream.concat(
                    snapshots.stream()
                            .filter(snapshot -> Objects.nonNull(snapshot.getAuthorId()))
                            .filter(snapshot -> snapshot.getUserType() == UserType.ADMIN)
                            .map(RevisionSnapshot::getAuthorId),
                    reservationAsTicketLogs.stream()
                            .filter(log -> Objects.nonNull(log.getAdmin()))
                            .map(log -> log.getAdmin().getId())
            ).collect(Collectors.toSet());

            List<AdminShortTemplate> admins = adminService.retrieveAdmins(adminIds);

            AdminMemoPageablePayload adminMemos =
                    adminMemoService.retrieveAdminMemos(AdminMemoWhereCondition.builder()
                            .refTypes(List.of(AdminMemoType.RESERVATION, AdminMemoType.RESERVATION_LOG_V1))
                            .refId(reservation.getId())
                            .pageable(Pageable.ofSize(Paging.MAX_SIZE))
                            .build());

            HospitalTemplate hospital = hospitalService.retrieveHospital(reservation.getHospitalId())
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));

            HospitalOfflineUpsellTemplate hospitalOfflineUpsell =
                    hospitalService.retrieveHospitalOfflineUpsell(reservation.getHospitalId(), reservation.getId())
                            .orElse(null);

            List<Long> orderIds = reservationAsTickets.stream()
                    .map(ReservationTickets::getTickets)
                    .filter(CollectionUtils::isNotEmpty)
                    .flatMap(List::stream)
                    .map(TicketTemplate::getOrderId)
                    .collect(Collectors.toList());

            Map<Long, OrderTemplate> orders = orderService.retrieveOrderByOrderIds(orderIds)
                    .stream()
                    .map(payloadFactory::orderTemplate)
                    .collect(Collectors.toMap(OrderTemplate::getId, Function.identity()));

            List<TicketRestorationInquiryTemplate> restorationInquiries = ticketRestorationInquiryService.retrieveAllTicketRestorationInquiryByReservationId(
                    reservationId);

            return ReservationPayload.builder()
                    .reservation(reservation)
                    .tickets(ticketsWithProducts.getTickets())
                    .salesEvents(ticketsWithProducts.getSalesEvents())
                    .salesProductVersions(ticketsWithProducts.getSalesProductVersions())
                    .reservationDoctor(reservationDoctor)
                    .hospital(hospital.toShortTemplate())
                    .member(member)
                    .revisions(Stream.concat(
                                    snapshots.stream()
                                            .map(payloadFactory::reservationRevisionTemplate),
                                    adminMemos.getMemos().stream()
                                            .filter(it -> it.getRefType() == AdminMemoType.RESERVATION_LOG_V1)
                                            .map(payloadFactory::reservationRevisionTemplate)
                                            .filter(Objects::nonNull))
                            .collect(Collectors.toList()))
                    .adminMemos(adminMemos.getMemos().stream()
                            .filter(it -> it.getRefType() == AdminMemoType.RESERVATION)
                            .collect(Collectors.toList()))
                    .admins(admins.stream()
                            .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity())))
                    .hospitalOfflineUpsell(hospitalOfflineUpsell)
                    .orders(orders)
                    .reservationAsTicketLogsByTicketId(reservationAsTicketLogs.stream()
                            .map(payloadFactory::reservationAsTicketLogTemplate)
                            .collect(Collectors.toMap(ReservationAsTicketLogTemplate::getTicketId, Function.identity(),
                                    (a, b) -> b)))
                    .inquiries(restorationInquiries)
                    .build();
        });
    }

    public ReservationPageablePayload retrieveReservations(ReservationFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);

            ReservationPage reservationPage =
                    reservationReadableService.retrieveReservations(request.toWhereCondition(currentHospitalId));

            List<ReservationTickets> reservationTickets =
                    reservationReadableService.retrieveReservationAsTickets(
                            CollectionFunctionalUtils.mapToSetOrEmpty(reservationPage.getReservations(),
                                    ReservationTemplate::getId));

            TicketsWithProducts ticketsWithProducts = ticketService.retrieveTickets(reservationTickets.stream()
                    .flatMap(it -> it.getTickets().stream())
                    .map(TicketTemplate::getId)
                    .collect(Collectors.toSet()));

            return ReservationPageablePayload.builder()
                    .reservations(reservationPage.getReservations())
                    .hospitals(reservationPage.getHospitals())
                    .members(reservationPage.getMembers())
                    .ticketsByReservationId(reservationTickets.stream()
                            .collect(Collectors.toMap(it -> it.getReservation().getId(),
                                    ReservationTickets::getTickets)))
                    .salesEvents(ticketsWithProducts.getSalesEvents())
                    .salesProductVersions(ticketsWithProducts.getSalesProductVersions())
                    .pageable(reservationPage.getPageable())
                    .build();
        });
    }

    public ReservationCalendarPayload calendars(CalendarFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ReservationCalendarWhereCondition whereCondition = request.toWhereCondition();

            ReservationsWithMembers reservationsWithMembers = reservationReadableService.retrieveReservations(whereCondition);

            List<ReservationDoctorTemplate> doctors =
                    reservationReadableService.retrieveReservationDoctors(request.getHospitalId())
                            .stream().filter(ReservationDoctorTemplate::isActivated)
                            .collect(Collectors.toList());

            List<ReservationOperationTimeTemplate> reservationOperationTimes =
                    reservationReadableService.retrieveReservationOperationTimes(request.getHospitalId());

            List<ReservationTemporaryOperationTimeTemplate> reservationTemporaryOperationTimes =
                    reservationConfigService.retrieveTemporaryOperationTimes(
                            request.getHospitalId(),
                            whereCondition.getFrom(),
                            whereCondition.getTo(),
                            Set.of(HospitalOperationStatus.OPERATING, HospitalOperationStatus.CLOSED));

            CrmReservationsWithCounts crmReservationsWithCounts =
                    crmReservationService.retrieveCrmReservations(request.getHospitalId(),
                            whereCondition.getFrom(), whereCondition.getTo());

            List<DateTimeTemplate> crmHolidays = crmReservationService.retrieveCrmHospitalHolidays(request.getHospitalId(),
                    whereCondition.getFrom(), whereCondition.getTo());

            List<HolidayTemplate> holidays =
                    reservationReadableService.retrieveHolidays(Locale.KOREA, whereCondition.getFrom(), whereCondition.getTo());

            return ReservationCalendarPayload.builder()
                    .reservations(reservationsWithMembers.getReservations())
                    .members(reservationsWithMembers.getMembers().stream()
                            .collect(Collectors.toMap(MemberShortTemplate::getId, Function.identity())))
                    .reservationDoctors(doctors)
                    .reservationOperationTimes(reservationOperationTimes)
                    .reservationCloseDateTimes(reservationTemporaryOperationTimes.stream()
                            .filter(it -> it.getType() == HospitalOperationStatus.CLOSED)
                            .collect(Collectors.toList()))
                    .reservationOpenDateTimes(reservationTemporaryOperationTimes.stream()
                            .filter(it -> it.getType() == HospitalOperationStatus.OPERATING)
                            .collect(Collectors.toList()))
                    .crmReservationCounts(crmReservationsWithCounts.getCrmReservationCounts())
                    .crmReservationHolidays(Collections.emptyList())
                    .holidays(holidays)
                    .crmHolidays(crmHolidays)
                    .build();
        });
    }

    public ReservationHospitalConfigPayload retrieveConfig(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ReservationHospitalConfigTemplate reservationConfig =
                    reservationReadableService.retrieveHospitalConfig(hospitalId)
                            .orElse(null);

            List<ReservationOperationTimeTemplate> operationTimes =
                    reservationReadableService.retrieveReservationOperationTimes(hospitalId);

            List<ReservationDoctorTemplate> reservationDoctors =
                    reservationReadableService.retrieveReservationDoctors(hospitalId).stream()
                            .filter(ReservationDoctorTemplate::isActivated)
                            .collect(Collectors.toList());

            CrmDeviceTemplate crm = crmReservationService.retrieveCrmDevices(hospitalId).stream()
                    .max(Comparator.comparingLong(CrmDeviceTemplate::getId))
                    .orElse(CrmDeviceTemplate.empty());

            return ReservationHospitalConfigPayload.builder()
                    .reservationHospitalConfig(reservationConfig)
                    .operationTimes(operationTimes)
                    .reservationDoctors(reservationDoctors)
                    .crms(Collections.singletonList(crm))
                    .build();
        });
    }

    public TicketOwnMembersPayload usableTicketOwnedMembers(long hospitalId, UsableTicketOwnedMemberFilterRequest request) {
        List<MemberTemplate> hospitalUsableTicketMembers = transactionTemplate.executeMainReadableTransaction(
                () -> memberService.retrieveHospitalUsableTicketMembers(hospitalId, request));

        List<ReservationTemplate> latestReservations = reservationReadableService.retrieveLatestReservations(
                CollectionFunctionalUtils.mapToSetOrEmpty(hospitalUsableTicketMembers, MemberTemplate::getId), hospitalId);

        Map<Long, ReservationTemplate> latestReservationByMemberId =
                CollectionFunctionalUtils.mapToUnmodifiableMapOrEmpty(latestReservations,
                        ReservationTemplate::getMemberId, Function.identity());

        Map<Long, Boolean> reservableByMemberId = new HashMap<>();
        for (MemberTemplate member : hospitalUsableTicketMembers) {
            if (!latestReservationByMemberId.containsKey(member.getId())) {
                reservableByMemberId.put(member.getId(), true);
                continue;
            }

            ReservationTemplate reservation = latestReservationByMemberId.get(member.getId());
            reservableByMemberId.put(member.getId(), !ReservationProgress.isInProgressStatus(reservation.getStatus()));
        }

        return TicketOwnMembersPayload.builder()
                .members(hospitalUsableTicketMembers)
                .reservableByMemberId(reservableByMemberId)
                .reservationsByMemberId(request.isPageableEnabled()
                        ? latestReservationByMemberId
                        : Collections.emptyMap())
                .build();
    }

    public TicketsPayload reservableTickets(long hospitalId, long memberId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            TicketsWithProducts ticketsWithProducts = ticketService.retrieveAllUsableTickets(memberId, hospitalId);

            return TicketsPayload.builder()
                    .tickets(ticketsWithProducts.getTickets())
                    .salesEvents(ticketsWithProducts.getSalesEvents())
                    .salesProductVersions(ticketsWithProducts.getSalesProductVersions())
                    .build();
        });
    }

    public ReservationPayload latestReservation(long hospitalId, long memberId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Optional<ReservationTemplate> latestReservationOptional =
                    reservationReadableService.retrieveLatestReservation(hospitalId, memberId);

            if (latestReservationOptional.isEmpty()) {
                return ReservationPayload.empty();
            }

            return retrieveReservation(latestReservationOptional.get().getId());
        });
    }

    public ReservationTemporaryOperationTimesPayload retrieveTemporaryOperationTimes(
            ReservationTemporaryOperationTimeFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(request.getHospitalId())) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            List<ReservationTemporaryOperationTimeTemplate> operationTimes =
                    reservationConfigService.retrieveTemporaryOperationTimes(
                            request.getHospitalId(),
                            DateUtil.convertFrom(request.getFrom()),
                            DateUtil.convertFrom(request.getTo()),
                            request.getTypes());

            return ReservationTemporaryOperationTimesPayload.builder()
                    .reservationTemporaryOperationTimes(operationTimes)
                    .build();
        });
    }

    @Deprecated
    public ReservationCloseDateTimesPayload retrieveReservationCloseDateTimes(ReservationCloseDateTimeFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(request.getHospitalId())) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            List<ReservationTemporaryOperationTimeTemplate> reservationCloseDateTimes =
                    reservationConfigService.retrieveTemporaryOperationTimes(
                            request.getHospitalId(),
                            DateUtil.convertFrom(request.getFrom()),
                            DateUtil.convertFrom(request.getTo()),
                            Set.of(HospitalOperationStatus.CLOSED));

            return ReservationCloseDateTimesPayload.builder()
                    .reservationCloseDateTimes(reservationCloseDateTimes)
                    .build();
        });
    }

    public CrmDoctorsPayload retrieveCrmDoctors(CrmDevice crmType, long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            CrmConfigs crmConfigs = reservationConfigService.retrieveCrmConfigs(crmType, hospitalId);

            return CrmDoctorsPayload.builder()
                    .crmDoctors(crmConfigs.getCrmDoctors().stream()
                            .map(crmDoctor -> CrmDoctorTemplate.builder()
                                    .crmDoctorId(NumberUtils.toLong(crmDoctor.getId(), -1L))
                                    .name(crmDoctor.getName())
                                    .build())
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public ReservationTimeSchedulePayload retrieveTimeSchedules(long hospitalId, LocalDateTime at) {
        ReservationTimeSchedule timeSchedule = transactionTemplate.executeMainReadableTransaction(
                () -> {
                    LocalDateTime now = LocalDateTime.now();
                    ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(hospitalId);
                    return reservationConfigService.retrieveReservationTimeSchedule(hospitalId,
                            now, now, at.toLocalDate(), config);
                });

        return ReservationTimeSchedulePayload.builder()
                .reservableByTime(timeSchedule.getTimes()
                        .stream()
                        .collect(Collectors.toMap(ReservationTime::getTime,
                                it -> it.getStatus() == ScheduleStatus.OPEN,
                                (a, b) -> a)))
                .build();
    }

    public ReservationDoctorsPayload retrieveDoctors(long hospitalId) {
        List<ReservationDoctorTemplate> reservationDoctors =
                transactionTemplate.executeMainReadableTransaction(
                        () -> reservationReadableService.retrieveReservationDoctors(hospitalId).stream()
                                .filter(ReservationDoctorTemplate::isActivated)
                                .collect(Collectors.toList()));

        return ReservationDoctorsPayload.builder()
                .reservationDoctors(reservationDoctors)
                .build();
    }

    public DeniedVisitCompleteReservationsPayload retrieveDeniedVisitCompleteReservations(
            DeniedVisitCompleteReservationFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ReservationStatusLogPage reservationStatusLogPage = reservationReadableService.retrieveReservationStatusLogs(request);

            List<ReservationStatusLogTemplate> reservationStatusLogs = reservationStatusLogPage.getReservationStatusLogs();

            Set<Long> reservationIds = new HashSet<>();
            Set<Long> hospitalIds = new HashSet<>();
            for (ReservationStatusLogTemplate reservationStatusLog : reservationStatusLogs) {
                reservationIds.add(reservationStatusLog.getReservationId());
                hospitalIds.add(reservationStatusLog.getHospitalId());
            }

            List<ReservationTemplate> reservations = reservationReadableService.retrieveReservations(reservationIds);
            List<HospitalTemplate> hospitals = hospitalService.retrieveHospitals(hospitalIds);
            List<MemberTemplate> members = memberService.retrieveMembers(reservations.stream()
                    .map(ReservationTemplate::getMemberId)
                    .collect(Collectors.toSet()));

            return DeniedVisitCompleteReservationsPayload.builder()
                    .deniedVisitCompletes(reservationStatusLogs)
                    .reservations(reservations.stream()
                            .collect(Collectors.toMap(ReservationTemplate::getId, ReservationTemplate::toShortTemplate)))
                    .hospitals(hospitals.stream()
                            .collect(Collectors.toMap(HospitalTemplate::getId, HospitalTemplate::toShortTemplate)))
                    .members(members.stream()
                            .collect(Collectors.toMap(MemberTemplate::getId, MemberTemplate::toShortTemplate)))
                    .pageable(reservationStatusLogPage.getPageable())
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/ReservationWritableUseCase.java
================================================
package kr.co.yeoshin.admin.reservation.usecase;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.common.Constant.Crm;
import kr.co.yeoshin.admin.common.Constant.Entity;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.LocalDateTimeRange;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.ReservationCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthorizationException;
import kr.co.yeoshin.admin.exception.MemberException;
import kr.co.yeoshin.admin.exception.ReservationException;
import kr.co.yeoshin.admin.hospital.controller.model.HospitalOfflineUpsellMutationRequest;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.insurance.service.InsuranceService;
import kr.co.yeoshin.admin.member.model.MemberTicketMinusStat;
import kr.co.yeoshin.admin.member.service.MemberMetaService;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.point.service.MemberPointService;
import kr.co.yeoshin.admin.point.service.model.MemberPointUsageReport;
import kr.co.yeoshin.admin.point.service.model.MemberPointUsageReports;
import kr.co.yeoshin.admin.quest.service.QuestService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventMessage;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.reservation.controller.model.*;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationCloseDateTimeMutationRequest.CloseDateTime;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationTemporaryOperationTimeMutationRequest.OperationTime;
import kr.co.yeoshin.admin.reservation.service.*;
import kr.co.yeoshin.admin.reservation.service.model.*;
import kr.co.yeoshin.admin.reservation.usecase.model.*;
import kr.co.yeoshin.admin.review.service.TreatmentReviewService;
import kr.co.yeoshin.admin.settlement.service.SettlementService;
import kr.co.yeoshin.admin.ticket.service.TicketRestorationInquiryService;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.TicketsWithProducts;
import kr.co.yeoshin.admin.utils.CollectionFunctionalUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import kr.co.yeoshin.common.insurance.type.InsuranceTicketStatus;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.queue.utils.DomainEventContextUtils;
import kr.co.yeoshin.common.reservation.entity.*;
import kr.co.yeoshin.common.reservation.type.*;
import kr.co.yeoshin.common.type.TimeInterval;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class ReservationWritableUseCase {

    private final ReservationReadableService reservationReadableService;
    private final ReservationWritableService reservationWritableService;
    private final ReservationConfigService reservationConfigService;
    private final ReservationValidationService reservationValidationService;
    private final CrmReservationService crmReservationService;
    private final OrderService orderService;
    private final TicketService ticketService;
    private final TreatmentReviewService treatmentReviewService;
    private final MemberService memberService;
    private final MemberMetaService memberMetaService;
    private final HospitalService hospitalService;
    private final SettlementService settlementService;
    private final InsuranceService insuranceService;
    private final MemberPointService memberPointService;
    private final TicketRestorationInquiryService ticketRestorationInquiryService;
    private final QuestService questService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SqsQueueMessagePublisher messagePublisher;

    public BoolPayload confirmReservation(long reservationId, ReservationConfirmRequest request) {
        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservationContext = reservationReadableService.fetchContext(reservationId);

            if (reservationValidationService.isDuplicateReservation(reservationContext.getMemberId(),
                    reservationContext.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(), reservationContext.getHospitalId(),
                                reservationContext.getMemberId()));
            }

            if (reservationContext.getReservationStatus() != ReservationStatus.WAIT_CONFIRM) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CONFIRM_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservationContext.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation confirmedReservation =
                    reservationWritableService.confirmReservation(reservationContext.getReservationId(),
                            reservationContext.getMemberId(), request);

            reservationWritableService.upsertReservationLatestStatus(confirmedReservation.getId(),
                    confirmedReservation.getMember().getId(), confirmedReservation.getHospital().getId());

            ReservationTemplate modifiedReservation = payloadFactory.reservationTemplate(confirmedReservation);

            ReservationContext modifiedReservationContext = reservationContext.toBuilder()
                    .reservation(modifiedReservation)
                    .build();

            crmReservationService.modifyReservationStatus(CrmReservationContext.builder()
                    .reservationContext(modifiedReservationContext)
                    .previousReservationState(Optional.of(reservationContext.getReservation()))
                    .build());

            return modifiedReservationContext;
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationConfirmed(context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return BoolPayload.of(true);
    }

    public ReservationPayload registerReservation(ReservationRegisterRequest request) {
        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            if (reservationValidationService.isDuplicateReservationRegister(request.getMemberId(), request.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(),
                                request.getHospitalId(),
                                request.getMemberId()));
            }

            MemberServiceSummary serviceSummary = memberMetaService.fetchMemberServiceSummaryByMemberId(
                            request.getMemberId())
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            if (!reservationValidationService.validateReservableHospital(request.getMemberId(), request.getHospitalId(),
                    serviceSummary.getReservationDuplicateAllowYn().toBoolean())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL);
            }

            ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(request.getHospitalId());

            if (!reservationConfigService.hasReservableTimeSchedule(request.getHospitalId(),
                    DateUtil.convertFrom(request.getStartAt()), config)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_RESERVE_TIME_SCHEDULE);
            }

            TicketsWithProducts tickets = ticketService.retrieveTickets(request.getTicketIds());
            if (!reservationValidationService.validateReservableTickets(request.getMemberId(), request.getHospitalId(),
                    tickets.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            ReservationDoctorTemplate reservationDoctor =
                    Optional.ofNullable(request.getReservationDoctorId())
                            .map(doctorId ->
                                    reservationReadableService.retrieveReservationDoctor(request.getHospitalId(), doctorId)
                                            .filter(ReservationDoctorTemplate::isActivated)
                                            .orElseThrow(
                                                    () -> new ReservationException(ReservationCode.RESERVATION_DOCTOR_NOT_EXIST)))
                            .orElse(null);

            CrmDevice crmType = crmReservationService.retrieveCrmDevices(request.getHospitalId()).stream()
                    .max(Comparator.comparingLong(CrmDeviceTemplate::getId))
                    .map(CrmDeviceTemplate::getType)
                    .orElse(CrmDevice.NONE);

            Reservation registeredReservation = reservationWritableService.registerReservation(ReservationRegister.builder()
                    .memberId(request.getMemberId())
                    .hospitalId(request.getHospitalId())
                    .startAt(DateUtil.convertFrom(request.getStartAt())
                            .truncatedTo(ChronoUnit.MINUTES))
                    .endAt(DateUtil.convertFrom(request.getStartAt())
                            .truncatedTo(ChronoUnit.MINUTES)
                            .plusMinutes(TimeInterval.HALF_HOUR.getMinutes()))
                    .status(ReservationStatus.CONFIRM)
                    .type(ReservationType.DIRECT)
                    .source(ReservationSource.PLUS)
                    .crmType(crmType)
                    .reservationDoctorId(InvokeSupporters.getOrNullIfNull(() -> reservationDoctor.getId()))
                    .hospitalMemo(request.getHospitalMemo())
                    .supportTodayReservation(config.getTodayReservationYn().toBoolean())
                    .build());

            reservationWritableService.registerReservationTickets(registeredReservation.getId(), request.getTicketIds());

            ticketService.modifyTicketStatus(request.getTicketIds(), TicketStatus.RESERVED);

            reservationWritableService.upsertReservationLatestStatus(
                    registeredReservation.getId(),
                    registeredReservation.getMember().getId(),
                    registeredReservation.getHospital().getId());

            ReservationContext reservation = reservationReadableService.fetchContext(registeredReservation.getId());

            crmReservationService.registerReservation(CrmReservationContext.builder()
                    .reservationContext(reservation)
                    .previousReservationState(Optional.empty())
                    .build());

            return reservation;
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationConfirmed(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return ReservationPayload.builder()
                .reservation(context.getReservation())
                .build();
    }

    public BoolPayload modifyReservation(long reservationId, ReservationMutationRequest request) {
        ReservationNotificationContext notificationContext = transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

            if (reservationValidationService.isDuplicateReservation(reservation.getMemberId(), reservation.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(), reservation.getHospitalId(),
                                reservation.getMemberId()));
            }

            if (ReservationProgress.isImmutableStatus(reservation.getReservationStatus())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_STATUS);
            }

            ValidatedTickets validatedTickets = reservationValidationService.validateReservationTickets(
                    reservation.getMemberId(), reservation.getHospitalId(),
                    reservation.getTicketIds(), request.getTicketIds());

            ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(
                    reservation.getHospitalId());

            if (!reservation.getReservationStartAt().isEqual(request.getStartAt()) &&
                    !reservationConfigService.hasReservableTimeSchedule(reservation.getHospitalId(),
                            DateUtil.convertFrom(request.getStartAt()), config)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_RESERVE_TIME_SCHEDULE);
            }

            ReservationDoctorTemplate reservationDoctor =
                    Objects.isNull(request.getDoctorId()) ? null
                            : reservationReadableService.retrieveReservationDoctor(reservation.getHospitalId(),
                                            request.getDoctorId())
                                    .filter(ReservationDoctorTemplate::isActivated)
                                    .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_DOCTOR_NOT_EXIST));

            List<ReservationAsTicket> reservationAsTickets = reservationWritableService.modifyReservationTickets(reservationId,
                    validatedTickets.getAddedTicketIds(), validatedTickets.getExcludedTicketIds());

            ticketService.modifyTicketStatus(validatedTickets.getAddedTicketIds(), TicketStatus.RESERVED);
            ticketService.modifyTicketStatus(validatedTickets.getExcludedTickets().stream()
                    .filter(it -> !it.isExpired())
                    .map(TicketTemplate::getId)
                    .collect(Collectors.toList()), TicketStatus.UNUSED);
            ticketService.modifyTicketStatus(validatedTickets.getExcludedTickets().stream()
                    .filter(TicketTemplate::isExpired)
                    .map(TicketTemplate::getId)
                    .collect(Collectors.toList()), TicketStatus.EXPIRED);

            LocalDateTime reservationAt = DateUtil.convertFrom(request.getStartAt());
            boolean reservationAtChanged = !DateUtil.convertFrom(reservation.getReservationStartAt()).isEqual(reservationAt);
            boolean ticketChanged =
                    CollectionUtils.isNotEmpty(validatedTickets.getAddedTicketIds()) ||
                            CollectionUtils.isNotEmpty(validatedTickets.getExcludedTicketIds());

            // https://fastlane.atlassian.net/wiki/spaces/YR/pages/1612218525/04.#01-7.-%EC%98%88%EC%95%BD-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0
            // https://fastlane.atlassian.net/browse/PM-1165?focusedCommentId=38434
            // 예약시간이 변경되었거나 티켓이 변경 된 경우에만 예약 상태 변경
            ReservationStatus status = reservationAtChanged || ticketChanged
                    ? ReservationProgress.findStatusByReservationAt(reservation.getReservationStatus(), reservationAt)
                    : reservation.getReservationStatus();

            Reservation modified = reservationWritableService.modifyReservation(reservation.getReservationId(),
                    ReservationRegister.builder()
                            .memberId(reservation.getMemberId())
                            .hospitalId(reservation.getHospitalId())
                            .startAt(reservationAt)
                            .endAt(reservationAt.plusMinutes(reservation.getHospitalConfig().getSlotTimeInterval().getMinutes()))
                            .status(status)
                            .type(reservation.getReservationType())
                            .hospitalMemo(request.getHospitalMemo())
                            .reservationDoctorId(request.getDoctorId())
                            .supportTodayReservation(config.getTodayReservationYn().toBoolean())
                            .build());

            reservationWritableService.upsertReservationLatestStatus(reservationId,
                    reservation.getMemberId(), reservation.getHospitalId());

            ReservationTemplate modifiedReservation = payloadFactory.reservationTemplate(modified);

            boolean confirmed = reservation.getReservationStatus() == ReservationStatus.WAIT_CONFIRM
                    && modifiedReservation.getStatus() != ReservationStatus.WAIT_CONFIRM;

            ReservationContext modifiedReservationContext = reservation.toBuilder()
                    .reservation(modifiedReservation)
                    .tickets(validatedTickets.getProgressTickets())
                    .orders(orderService.retrieveOrderByOrderIds(validatedTickets.getProgressTicketIds()).stream()
                            .map(payloadFactory::orderTemplate)
                            .collect(Collectors.toList()))
                    .reservationDoctor(reservationDoctor)
                    .build();

            crmReservationService.modifyReservation(CrmReservationContext.builder()
                    .reservationContext(modifiedReservationContext)
                    .previousReservationState(Optional.of(reservation.getReservation()))
                    .build());

            if (confirmed || reservationAtChanged || ticketChanged) {
                return ReservationNotificationContext.builder()
                        .notificationContext(alimTalkTemplateFactory.reservationConfirmed(modifiedReservation,
                                reservation.getMember(),
                                reservation.getHospital(),
                                validatedTickets.getProgressTickets()))
                        .build();
            }

            return ReservationNotificationContext.EMPTY;
        });

        notificationContext.getContext()
                .ifPresent(this::sendAlimTalk);

        return BoolPayload.of(true);
    }

    public BoolPayload cancelReservation(long reservationId, ReservationCancelRequest request) {
        ReservationContext context = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

                    /*
                        [취소 불가 예약 상태]
                        - 통합관리자 : 취소
                        - 플러스관리자 : 취소, 방문확정대기, 방문완료
                    */
                    if (DiagnosticContext.isSystemAdmin() &&
                            !ReservationProgress.isCancellableStatus(reservation.getReservationStatus())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CANCEL_STATUS);
                    }

                    if (DiagnosticContext.isPlusAdmin() &&
                            ReservationProgress.isImmutableStatus(reservation.getReservationStatus())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CANCEL_STATUS);
                    }

                    /*
                        - 통합관리자 : 사용완료된 티켓 취소 가능
                        - 플러스관리자 : 예약중 티켓만 취소 가능
                     */
                    if (DiagnosticContext.isSystemAdmin() &&
                            !reservationValidationService.validateReservableOrderStatus(reservation.getOrders())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_CANCELED_ORDER_TICKET_STATUS);
                    }

                    if (DiagnosticContext.isPlusAdmin() &&
                            !reservationValidationService.validateReservedTickets(reservation.getTickets())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CANCEL_STATUS);
                    }

                    /*
                        방문 완료 상태에서 취소된 경우 정산, 보험 처리 반영
                     */
                    if (reservation.getReservationStatus() == ReservationStatus.VISIT_COMPLETE) {
                        settlementService.revertSettlement(reservation.getTicketIds(), LocalDateTime.now());
                        insuranceService.modifyInsuranceTicketStatus(reservation.getTicketIds(), InsuranceTicketStatus.UNUSED);
                    }

                    Reservation canceledReservation = reservationWritableService.cancelReservation(
                            reservation.getReservationId(),
                            reservation.getMemberId(),
                            DiagnosticContext.isSystemAdmin()
                                    ? ReservationStatus.CANCEL_BY_ADMIN : reservation.getReservationStatus(),
                            request);

                    reservationWritableService.upsertReservationLatestStatus(reservation.getReservationId(),
                            reservation.getMemberId(), reservation.getHospitalId());

                    List<Ticket> expiredTickets = ticketService.modifyTicketStatus(reservation.getTickets().stream()
                            .filter(TicketTemplate::isExpired)
                            .map(TicketTemplate::getId)
                            .collect(Collectors.toSet()), TicketStatus.EXPIRED);

                    List<Ticket> unusedTickets = ticketService.modifyTicketStatus(reservation.getTickets().stream()
                            .filter(it -> !it.isExpired())
                            .map(TicketTemplate::getId)
                            .collect(Collectors.toSet()), TicketStatus.UNUSED);

                    List<Ticket> modifiedTickets =
                            Stream.concat(expiredTickets.stream(), unusedTickets.stream())
                                    .collect(Collectors.toList());

                    treatmentReviewService.removeTreatmentReviews(reservation.getMemberId(), reservation.getReservationId());

                    ReservationContext canceledReservationContext = reservation.toBuilder()
                            .reservation(payloadFactory.reservationTemplate(canceledReservation))
                            .build();

                    crmReservationService.cancelReservation(CrmReservationContext.builder()
                            .reservationContext(canceledReservationContext)
                            .previousReservationState(Optional.of(reservation.getReservation()))
                            .build());

                    ticketRestorationInquiryService.cancelInquiryTickets(reservation.getReservationId());

                    memberService.applyStat(MemberTicketMinusStat.builder()
                            .memberId(reservation.getMemberId())
                            .tickets(modifiedTickets)
                            .orderSalesProducts(orderService.fetchAllOrderSalesProductsByIds(modifiedTickets.stream()
                                    .map(it -> it.getOrderSalesProduct().getId())
                                    .collect(Collectors.toList())))
                            .at(LocalDateTime.now())
                            .build());

                    return reservation;
                });

        sendAlimTalk(alimTalkTemplateFactory.reservationCanceled(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return BoolPayload.of(true);
    }

    public BoolPayload prevVisitComplete(long reservationId) {
        ReservationContext reservationContext = transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

            if (reservation.getReservationStatus() != ReservationStatus.VISIT_COMPLETE) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_STATUS);
            }

            if (!reservationValidationService.validateReservableOrderStatus(reservation.getOrders())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_CANCELED_ORDER_TICKET_STATUS,
                        MessageUtils.format("reservation(id: {})'s order has invalid status",
                                reservation.getReservationId()));
            }

            settlementService.revertSettlement(reservation.getTicketIds(), LocalDateTime.now());

            ReservationStatus reservationStatus = ZonedDateTime.now().isAfter(reservation.getReservationStartAt()) ?
                    ReservationStatus.VISIT_DELAYED : ReservationStatus.VISIT_EXPECTED_TODAY;

            ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(
                    reservation.getHospitalId());

            reservationWritableService.modifyReservation(reservationId, reservationStatus, config);

            ticketService.modifyTicketStatus(reservation.getTicketIds(), TicketStatus.RESERVED);

            insuranceService.modifyInsuranceTicketStatus(reservation.getTicketIds(), InsuranceTicketStatus.UNUSED);

            treatmentReviewService.removeTreatmentReviews(reservation.getMemberId(), reservationId);

            ticketRestorationInquiryService.cancelInquiryTickets(reservation.getReservationId());

            MemberServiceSummary recomendee = memberService.fetchMemberServiceSummaryByMemberId(reservation.getMemberId());
            if (StringUtils.isBlank(recomendee.getRecommendCode())) {
                return reservation;
            }

            MemberServiceSummary recommender = memberService.fetchMemberServiceSummaryByInviteCode(recomendee.getRecommendCode())
                    .orElse(null);
            if (recommender == null) {
                return reservation;
            }

            MemberPointUsageReports memberPointUsageReports = memberPointService.revokeFirstTicketUsePoint(
                    recomendee, recommender, reservation.getReservationId()).orElse(null);

            MemberPointUsageReport memberPointUsageReport = InvokeSupporters.getOrNullIfNull(
                    () -> memberPointUsageReports.getUsageReports().get(recommender.getMember().getId()));
            if (memberPointUsageReport == null) {
                return reservation;
            }

            questService.registerInvitationRecord(
                    recommender.getMember().getId(),
                    0,
                    -1,
                    memberPointUsageReport.getMemberPoint().getPoint(),
                    memberPointUsageReport.getMemberPoint().getCreated());

            return reservation;
        });

        messagePublisher.publishDomainEventSlow(
                DomainEventMessage.of(DomainEventType.TREATMENT_REVIEW_WRITABLE_DELETE, Entity.NOT_EXIST_ID,
                        DomainEventContextUtils.treatmentReviewWritableDeleteContext(reservationContext.getMemberId())));

        return BoolPayload.success();
    }

    public BoolPayload askVisitComplete(long reservationId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);
            if (reservationValidationService.isDuplicateReservation(reservation.getMemberId(),
                    reservation.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(), reservation.getHospitalId(),
                                reservation.getMemberId()));
            }

            if (!EnumSet.of(ReservationStatus.VISIT_EXPECTED_TODAY, ReservationStatus.VISIT_DELAYED)
                    .contains(reservation.getReservationStatus())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_VISIT_COMPLETE_ASKABLE_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservation.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation modifiedReservation =
                    reservationWritableService.modifyVisitCompleteAskableStatus(reservation.getReservationId(),
                            ReservationStatus.WAIT_VISIT_COMPLETE);

            ReservationContext modifiedReservationContext = reservation.toBuilder()
                    .reservation(payloadFactory.reservationTemplate(modifiedReservation))
                    .build();

            crmReservationService.modifyReservationStatus(CrmReservationContext.builder()
                    .reservationContext(modifiedReservationContext)
                    .previousReservationState(Optional.of(reservation.getReservation()))
                    .build());

            sendAlimTalk(alimTalkTemplateFactory.reservationWaitVisitComplete(
                    modifiedReservationContext.getReservation(),
                    modifiedReservationContext.getMember(),
                    modifiedReservationContext.getHospital(),
                    modifiedReservationContext.getTickets()));

            return BoolPayload.of(true);
        });
    }

    public BoolPayload cancelAskingVisitComplete(long reservationId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

            if (reservation.getReservationStatus() != ReservationStatus.WAIT_VISIT_COMPLETE) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_VISIT_COMPLETE_ASKABLE_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservation.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            ReservationStatus status = ZonedDateTime.now().isBefore(reservation.getReservationStartAt()) ?
                    ReservationStatus.VISIT_EXPECTED_TODAY : ReservationStatus.VISIT_DELAYED;

            Reservation modifiedReservation =
                    reservationWritableService.modifyVisitCompleteAskableStatus(reservationId, status);

            reservationWritableService.registerReservationStatusLog(modifiedReservation,
                    ReservationStatus.WAIT_VISIT_COMPLETE, status);

            ReservationContext context = reservation.toBuilder()
                    .reservation(payloadFactory.reservationTemplate(modifiedReservation))
                    .build();

            sendAlimTalk(alimTalkTemplateFactory.reservationCancelWaitVisitComplete(
                    context.getReservation(),
                    context.getMember(),
                    context.getHospital(),
                    context.getTickets()));

            return BoolPayload.of(true);
        });
    }

    public ReservationHospitalConfigPayload modifyHospitalConfig(ReservationHospitalConfigMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationHospitalConfigTemplate hospitalConfig =
                    reservationReadableService.retrieveReservationHospitalConfig(request.getHospitalId())
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_HOSPITAL_CONFIG_NOT_EXIST));

            ReservationHospitalConfig reservationHospitalConfig = reservationConfigService.modifyHospitalConfig(
                    ReservationHospitalConfigRegister.builder()
                            .hospitalId(hospitalConfig.getHospitalId())
                            .crmLinkYn(YN.of(hospitalConfig.isCrmLinked()))
                            .mobileReservationYn(YN.of(request.isUseMobileReservation()))
                            .hospitalCode(hospitalConfig.getHospitalCode())
                            .slot(request.getSlot())
                            .slotTimeInterval(TimeInterval.HALF_HOUR)
                            .todayReservationYn(YN.of(request.isReservableOnToday()))
                            .immediateReservationYn(YN.N)
                            .autoConfirmReservationYn(YN.of(request.isReservationAutoConfirm()))
                            .holidayReservationYn(YN.of(request.isReservableOnHoliday()))
                            .build());

            hospitalService.modifyHospitalBadges(reservationHospitalConfig.getHospital().getId(),
                    Map.of(BadgeType.RESERVATION_MOBILE, request.isUseMobileReservation(),
                            BadgeType.RESERVATION_TODAY, request.isReservableOnToday()));

            reservationWritableService.upsertOperationTimes(request.getHospitalId(), request.getOperationTimes());
            List<ReservationHospitalOperationInfo> updatedOperationTimes =
                    reservationWritableService.upsertCloseTimes(request.getHospitalId(), request.getCloseTimes());
            List<ReservationDoctor> reservationDoctors =
                    reservationWritableService.upsertReservationDoctors(request.getHospitalId(), request.getReservationDoctors());

            CrmDeviceTemplate crm = crmReservationService.retrieveCrmDevices(request.getHospitalId()).stream()
                    .max(Comparator.comparingLong(CrmDeviceTemplate::getId))
                    .orElse(CrmDeviceTemplate.empty());

            return ReservationHospitalConfigPayload.builder()
                    .reservationHospitalConfig(payloadFactory.reservationHospitalConfigTemplate(reservationHospitalConfig))
                    .operationTimes(updatedOperationTimes.stream()
                            .map(payloadFactory::reservationOperationTimeTemplate)
                            .collect(Collectors.toList()))
                    .reservationDoctors(reservationDoctors.stream()
                            .map(payloadFactory::reservationDoctorTemplate)
                            .collect(Collectors.toList()))
                    .crms(Collections.singletonList(crm))
                    .build();
        });
    }

    public ReservationPayload registerTheVeryDayReservation(TheVeryDayReservationRequest request) {
        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            if (reservationValidationService.isDuplicateReservationRegister(request.getMemberId(), request.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(),
                                request.getHospitalId(),
                                request.getMemberId()));
            }

            MemberServiceSummary serviceSummary = memberMetaService.fetchMemberServiceSummaryByMemberId(
                            request.getMemberId())
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            if (!reservationValidationService.validateReservableHospital(request.getMemberId(), request.getHospitalId(),
                    serviceSummary.getReservationDuplicateAllowYn().toBoolean())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL);
            }

            TicketsWithProducts tickets = ticketService.retrieveTickets(request.getTicketIds());
            if (!reservationValidationService.validateReservableTickets(request.getMemberId(), request.getHospitalId(),
                    tickets.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            ReservationDoctorTemplate reservationDoctor =
                    Optional.ofNullable(request.getReservationDoctorId())
                            .map(doctorId ->
                                    reservationReadableService.retrieveReservationDoctor(request.getHospitalId(), doctorId)
                                            .filter(ReservationDoctorTemplate::isActivated)
                                            .orElseThrow(
                                                    () -> new ReservationException(ReservationCode.RESERVATION_DOCTOR_NOT_EXIST)))
                            .orElse(null);

            ReservationHospitalConfigTemplate hospitalConfig =
                    reservationReadableService.retrieveReservationHospitalConfig(request.getHospitalId())
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_HOSPITAL_CONFIG_NOT_EXIST));

            LocalDateTime reservationDateTime =
                    DateUtil.floor(LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES),
                            hospitalConfig.getSlotTimeInterval().getMinutes());

            CrmDevice crmType = crmReservationService.retrieveCrmDevices(request.getHospitalId()).stream()
                    .max(Comparator.comparingLong(CrmDeviceTemplate::getId))
                    .map(CrmDeviceTemplate::getType)
                    .orElse(CrmDevice.NONE);

            Reservation registeredReservation = reservationWritableService.registerTheDayReservation(ReservationRegister.builder()
                    .memberId(request.getMemberId())
                    .hospitalId(request.getHospitalId())
                    .startAt(reservationDateTime)
                    .endAt(reservationDateTime.plusMinutes(hospitalConfig.getSlotTimeInterval().getMinutes()))
                    .status(ReservationStatus.WAIT_VISIT_COMPLETE)
                    .type(ReservationType.THE_DAY)
                    .source(ReservationSource.PLUS)
                    .crmType(crmType)
                    .reservationDoctorId(InvokeSupporters.getOrNullIfNull(() -> reservationDoctor.getId()))
                    .hospitalMemo(request.getHospitalMemo())
                    .supportTodayReservation(hospitalConfig.isReservableOnToday())
                    .build());

            reservationWritableService.registerReservationTickets(registeredReservation.getId(), request.getTicketIds());

            ticketService.modifyTicketStatus(request.getTicketIds(), TicketStatus.RESERVED);

            reservationWritableService.upsertReservationLatestStatus(registeredReservation.getId(),
                    registeredReservation.getMember().getId(),
                    registeredReservation.getHospital().getId());

            Optional.ofNullable(request.getHospitalOfflineUpsell())
                    .ifPresent(it -> hospitalService.upsertHospitalOfflineUpsell(registeredReservation.getHospital().getId(),
                            HospitalOfflineUpsellMutationRequest.builder()
                                    .reservationId(registeredReservation.getId())
                                    .counselorName(it.getCounselorName())
                                    .treatmentCounselingContent(it.getTreatmentCounselingContent())
                                    .paymentPrice(it.getPaymentPrice())
                                    .build()));

            ReservationContext reservation = reservationReadableService.fetchContext(registeredReservation.getId());

            return reservation;
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationWaitVisitComplete(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return ReservationPayload.builder()
                .reservation(context.getReservation())
                .build();
    }

    public LinkUpWithCrmResultPayload linkUpWithCrm(LinkUpWithCrmRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            reservationConfigService.linkCrm(
                    CrmConfigRegister.builder()
                            .hospitalId(request.getHospitalId())
                            .crmHospitalId(request.getCrmHospitalId())
                            .crmSalesProductId(request.getCrmSalesProductId())
                            .crmType(request.getCrmType())
                            .build());

            ReservationHospitalConfigTemplate reservationHospitalConfig =
                    reservationReadableService.retrieveReservationHospitalConfig(request.getHospitalId())
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_HOSPITAL_CONFIG_NOT_EXIST));

            List<CrmDeviceTemplate> crms =
                    crmReservationService.retrieveCrmDevices(reservationHospitalConfig.getHospitalId());

            return LinkUpWithCrmResultPayload.builder()
                    .reservationHospitalConfig(reservationHospitalConfig)
                    .crms(crms)
                    .build();
        });
    }

    public BoolPayload unlinkCrm(UnlinkCrmRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            CrmDevice crmType = InvokeSupporters.getOrDefaultIfNull(request::getCrmType, CrmDevice.VEGAS);

            ReservationHospitalConfigTemplate hospitalConfig =
                    reservationReadableService.retrieveReservationHospitalConfig(request.getHospitalId())
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_HOSPITAL_CONFIG_NOT_EXIST));

            CrmDeviceTemplate crm =
                    crmReservationService.retrieveCrmDevices(hospitalConfig.getHospitalId())
                            .stream()
                            .filter(it -> it.getType() == crmType)
                            .findFirst()
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_CRM_NOT_LINKED));

            reservationConfigService.removeCrmAsHospital(crmType, crm.getHospitalId());
            reservationConfigService.modifyHospitalConfig(
                    ReservationHospitalConfigRegister.builder()
                            .hospitalId(hospitalConfig.getHospitalId())
                            .mobileReservationYn(YN.of(hospitalConfig.isUseMobileReservation()))
                            .hospitalCode(hospitalConfig.getHospitalCode())
                            .crmLinkYn(YN.N)
                            .slot(hospitalConfig.getSlot())
                            .slotTimeInterval(hospitalConfig.getSlotTimeInterval())
                            .todayReservationYn(YN.of(hospitalConfig.isReservableOnToday()))
                            .immediateReservationYn(YN.of(hospitalConfig.isReservableAtThirtyMinutesInAdvance()))
                            .holidayReservationYn(YN.of(hospitalConfig.isReservableOnHoliday()))
                            .autoConfirmReservationYn(YN.of(hospitalConfig.isReservationAutoConfirm()))
                            .build());

            // crm_reservation_count : 베가스에서만 사용하는 데이터 (베가스 미연동 병원 데이터 없음)
            LocalDateTime from = LocalDateTime.now();
            LocalDateTime to = from.plusMonths(Crm.RESERVATION_COUNT_INITIALIZATION_MONTH_PERIOD);
            crmReservationService.removeCrmReservationCounts(request.getHospitalId(), from, to);

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public BoolPayload modifyTemporaryOperationTimes(ReservationTemporaryOperationTimeMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(request.getHospitalId())) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            reservationConfigService.removeTemporaryOperationTimes(
                    request.getHospitalId(),
                    request.getRemovedOperationTimeIds(),
                    request.getType());

            if (reservationConfigService.hasDuplicateTemporaryOperationTimeRange(request.getHospitalId(),
                    request.getAddedOperationTimes().stream()
                            .map(OperationTime::toLocalDateTimeRange)
                            .collect(Collectors.toList()),
                    EnumSet.allOf(HospitalOperationStatus.class))) {
                throw new ReservationException(ReservationCode.RESERVATION_TEMPORARY_OPERATION_TIME_MUTATION_ERROR);
            }

            reservationConfigService.registerTemporaryOperationTimes(
                    request.getHospitalId(),
                    request.getAddedOperationTimes().stream()
                            .map(OperationTime::toLocalDateTimeRange)
                            .collect(Collectors.toList()),
                    request.getType());

            return BoolPayload.of(true);
        });
    }

    @Deprecated
    public ReservationCloseDateTimeMutationResultPayload modifyCloseDateTimes(ReservationCloseDateTimeMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(request.getHospitalId())) {
                throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
            }

            Set<Long> removedCloseDateTimeIds = request.getRemovedCloseDateTimeIds();
            if (CollectionUtils.isNotEmpty(removedCloseDateTimeIds)) {
                reservationConfigService.removeTemporaryOperationTimes(
                        request.getHospitalId(),
                        removedCloseDateTimeIds,
                        HospitalOperationStatus.CLOSED);
            }

            if (reservationConfigService.hasDuplicateTemporaryOperationTimeRange(request.getHospitalId(),
                    request.getAddedCloseDateTimes().stream()
                            .map(CloseDateTime::toLocalDateTimeRange)
                            .collect(Collectors.toList()),
                    Set.of(HospitalOperationStatus.CLOSED))) {
                throw new ReservationException(ReservationCode.RESERVATION_CLOSE_DATE_TIME_MUTATION_ERROR);
            }

            List<LocalDateTimeRange> requestAddedCloseDateTimes =
                    CollectionFunctionalUtils.mapToUnmodifiableListOrEmpty(request.getAddedCloseDateTimes(),
                            CloseDateTime::toLocalDateTimeRange);

            boolean dateTimesAdded = CollectionUtils.isNotEmpty(requestAddedCloseDateTimes);
            List<ReservationTemporaryOperationTime> addedCloseDateTimes = dateTimesAdded
                    ? reservationConfigService.registerTemporaryOperationTimes(
                    request.getHospitalId(),
                    requestAddedCloseDateTimes,
                    HospitalOperationStatus.CLOSED)
                    : Collections.emptyList();

            return ReservationCloseDateTimeMutationResultPayload.builder()
                    .addedReservationCloseDateTimes(CollectionFunctionalUtils.mapToUnmodifiableListOrEmpty(addedCloseDateTimes,
                            payloadFactory::reservationTemporaryOperationTimeTemplate))
                    .removedReservationCloseDateTimeIds(removedCloseDateTimeIds)
                    .build();
        });
    }

    public BoolPayload modifyReservationMemo(long reservationId, ReservationMemoMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

            Reservation modifiedReservation =
                    reservationWritableService.modifyReservationMemo(reservation.getReservationId(), request);

            boolean result =
                    crmReservationService.modifyReservationMemo(reservation.toBuilder()
                            .reservation(payloadFactory.reservationTemplate(modifiedReservation))
                            .build());

            return BoolPayload.of(result);
        });
    }

    public BoolPayload syncCrmReservations(CrmReservationSyncCommand command) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            List<Reservation> reservations = reservationReadableService.retrieveReservations(
                    command.getHospitalId(),
                    command.getSyncReservationStatuses(),
                    command.getSyncReservationTypes());

            List<CrmReservation> syncReservations =
                    crmReservationService.retrieveCrmReservations(
                            command.getCrmType(),
                            reservations.stream()
                                    .map(Reservation::getId)
                                    .collect(Collectors.toSet()));

            Map<Long, CrmReservation> syncReservationsByReservationId =
                    syncReservations.stream()
                            .collect(Collectors.toMap(CrmReservation::getReservationId, Function.identity()));

            List<ReservationContext> syncTargetReservations =
                    reservationReadableService.fetchContexts(reservations.stream()
                            .map(Reservation::getId)
                            .filter(it -> !syncReservationsByReservationId.containsKey(it))
                            .collect(Collectors.toSet()));

            boolean sync =
                    crmReservationService.registerReservations(
                            command.getCrmType(),
                            command.getHospitalId(),
                            syncTargetReservations.stream()
                                    .map(it -> CrmReservationContext.builder()
                                            .reservationContext(it)
                                            .previousReservationState(Optional.empty())
                                            .build())
                                    .collect(Collectors.toList()));

            return BoolPayload.of(sync);
        });
    }

    private void sendAlimTalk(NhnKakaoAlimTalkNotificationContext notificationContext) {
        NotificationMessage notificationMessage =
                NotificationMessage.of(NotificationPayload.builder()
                        .alimTalk(notificationContext)
                        .build());

        messagePublisher.publishNotification(notificationMessage);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/CrmConfirmReservationCountPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmConfirmReservationCountPayload {

    @JsonUnwrapped
    @JsonProperty("hasConfirm")
    private long count;

    public static CrmConfirmReservationCountPayload empty() {
        return CrmConfirmReservationCountPayload.builder()
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/CrmDoctorsPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmDoctorsPayload implements PlusAccessible {

    private List<CrmDoctorTemplate> crmDoctors;

    public static CrmDoctorsPayload empty() {
        return CrmDoctorsPayload.builder()
                .crmDoctors(Collections.emptyList())
                .build();
    }

    @Getter
    @Builder
    public static class CrmDoctorTemplate implements PlusAccessible {

        private long crmDoctorId;
        private String name;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/CrmReservationPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.time.LocalDateTime;
import kr.co.yeoshin.admin.common.Constant.Crm;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationPayload {

    private long reservationId;

    @JsonProperty("orderNumber")
    private String reservationCode;

    @JsonProperty("orderId")
    private long memberId;

    @JsonProperty("reservationDate")
    @JsonFormat(pattern = Crm.DATE_FORMAT)
    private LocalDate reservationDate;

    @JsonProperty("reservationStartTime")
    @JsonFormat(pattern = Crm.TIME_COLON_FORMAT)
    private LocalDateTime startAt;

    @JsonProperty("reservationEndTime")
    @JsonFormat(pattern = Crm.TIME_COLON_FORMAT)
    private LocalDateTime endAt;

    @JsonProperty("sid")
    private Long crmReservationId;

    @JsonProperty("reservationName")
    private String memberName;

    @JsonProperty("reservationMobileNumber")
    private String memberCellPhone;

    @JsonProperty("customerCode")
    private String hospitalCode;

    @JsonProperty("reservationStatus")
    private String statusCode;

    @JsonProperty("reservationMemo")
    private String memo;

    @JsonProperty("doctorId")
    private Long crmDoctorId;

    @JsonProperty("cid")
    private Long crmMemberId;

    private String treatment;

    @JsonProperty("createDate")
    @JsonFormat(pattern = Crm.DATE_TIME_FORMAT)
    private LocalDateTime created;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/CrmReservationsPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Crm;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationsPayload {

    @JsonValue
    private List<Body> reservations;

    public static CrmReservationsPayload empty() {
        return CrmReservationsPayload.builder()
                .reservations(Collections.emptyList())
                .build();
    }

    @Getter
    @Builder
    public static class Body {

        private long reservationId;

        @JsonProperty("orderNumber")
        private String reservationCode;

        @JsonProperty("sid")
        private Long crmReservationId;

        @JsonProperty("reservationDate")
        @JsonFormat(pattern = Crm.DATE_FORMAT)
        private LocalDate reservationDate;

        @JsonProperty("reservationStartTime")
        @JsonFormat(pattern = Crm.TIME_COLON_FORMAT)
        private LocalDateTime startAt;

        @JsonProperty("reservationEndTime")
        @JsonFormat(pattern = Crm.TIME_COLON_FORMAT)
        private LocalDateTime endAt;

        @JsonProperty("reservationStatusCode")
        private String statusCode;

        @JsonProperty("reservationStatusName")
        private String statusName;

        @JsonProperty("reservationName")
        private String memberName;

        @JsonProperty("reservationMobileNumber")
        private String memberCellPhone;

        @JsonProperty("reservationMemo")
        private String treatmentNames;

        @JsonProperty("createDate")
        @JsonFormat(pattern = Crm.DATE_FORMAT)
        private LocalDateTime created;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/DeniedVisitCompleteReservationsPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DeniedVisitCompleteReservationsPayload {

    private List<ReservationStatusLogTemplate> deniedVisitCompletes;
    private Map<Long, ReservationShortTemplate> reservations;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationCalendarPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationCalendarPayload implements PlusAccessible {

    private List<ReservationShortTemplate> reservations;
    private Map<Long, MemberShortTemplate> members;
    private List<ReservationDoctorTemplate> reservationDoctors;
    private List<ReservationOperationTimeTemplate> reservationOperationTimes;
    private List<ReservationTemporaryOperationTimeTemplate> reservationCloseDateTimes;
    private List<ReservationTemporaryOperationTimeTemplate> reservationOpenDateTimes;
    private List<CrmReservationCountTemplate> crmReservationCounts;
    @Deprecated
    private List<CrmReservationHolidayTemplate> crmReservationHolidays;
    private List<HolidayTemplate> holidays;
    private List<DateTimeTemplate> crmHolidays;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationChangeLogPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationChangeLogTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationChangeLogPayload {

    private ReservationChangeLogTemplate changeLog;
    private ReservationShortTemplate reservation;
    private HospitalShortTemplate hospital;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationCloseDateTimeMutationResultPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import java.util.Set;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.ReservationTemporaryOperationTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationCloseDateTimeMutationResultPayload implements PlusAccessible {

    private List<ReservationTemporaryOperationTimeTemplate> addedReservationCloseDateTimes;
    private Set<Long> removedReservationCloseDateTimeIds;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationCloseDateTimesPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.ReservationCloseDateTimeTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationTemporaryOperationTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Deprecated
@Getter
@Builder
public class ReservationCloseDateTimesPayload implements PlusAccessible {

    private List<ReservationTemporaryOperationTimeTemplate> reservationCloseDateTimes;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationHospitalConfigPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.CrmDeviceTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationDoctorTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationHospitalConfigTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationOperationTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationHospitalConfigPayload implements PlusAccessible {

    private ReservationHospitalConfigTemplate reservationHospitalConfig;
    private List<ReservationOperationTimeTemplate> operationTimes;
    private List<ReservationDoctorTemplate> reservationDoctors;
    private List<CrmDeviceTemplate> crms;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationPageablePayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationPageablePayload implements PlusAccessible {

    private List<ReservationTemplate> reservations;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, MemberShortTemplate> members;
    private Map<Long, List<TicketTemplate>> ticketsByReservationId;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import com.fasterxml.jackson.annotation.JsonGetter;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationPayload implements PlusAccessible {

    private ReservationTemplate reservation;
    private List<TicketTemplate> tickets;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    private ReservationDoctorTemplate reservationDoctor;
    private HospitalShortTemplate hospital;
    private MemberShortTemplate member;
    private List<ReservationRevisionTemplate> revisions;
    private List<AdminMemoTemplate> adminMemos;
    private Map<Long, AdminShortTemplate> admins;
    private HospitalOfflineUpsellTemplate hospitalOfflineUpsell;
    private Map<Long, OrderTemplate> orders;
    private Map<Long, ReservationAsTicketLogTemplate> reservationAsTicketLogsByTicketId;
    private List<TicketRestorationInquiryTemplate> inquiries;

    public static ReservationPayload empty() {
        return ReservationPayload.builder()
                .tickets(Collections.emptyList())
                .salesEvents(Collections.emptyMap())
                .salesProductVersions(Collections.emptyMap())
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationShortPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationShortPayload {

    private ReservationShortTemplate reservation;
    private MemberTemplate member;
    private HospitalShortTemplate hospital;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationStatisticsPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationStatisticsPayload {

    private long hospitalId;
    private String hospitalName;
    private long reservationCount;
    private long waitCount;
    private long approveCount;
    private long cancelCount;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationTemporaryOperationTimesPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.ReservationTemporaryOperationTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationTemporaryOperationTimesPayload implements PlusAccessible {

    private List<ReservationTemporaryOperationTimeTemplate> reservationTemporaryOperationTimes;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/ReservationTimeSchedulePayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.time.LocalTime;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationTimeSchedulePayload implements PlusAccessible {

    private Map<LocalTime, Boolean> reservableByTime;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/TicketOwnMembersPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketOwnMembersPayload implements PlusAccessible {

    private List<MemberTemplate> members;
    private Map<Long, Boolean> reservableByMemberId;
    private Map<Long, ReservationTemplate> reservationsByMemberId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/usecase/model/TicketsPayload.java
================================================
package kr.co.yeoshin.admin.reservation.usecase.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.SalesEventTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesProductVersionTemplate;
import kr.co.yeoshin.admin.common.model.template.TicketTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketsPayload implements PlusAccessible {

    private List<TicketTemplate> tickets;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;

    public static TicketsPayload empty() {
        return TicketsPayload.builder()
                .tickets(Collections.emptyList())
                .salesEvents(Collections.emptyMap())
                .salesProductVersions(Collections.emptyMap())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/vegas/component/retrofit/model/CrmIdPayload.java
================================================
package kr.co.yeoshin.admin.reservation.vegas.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class CrmIdPayload {

    @JsonProperty("sid")
    private long crmReservationId;

    @JsonProperty("cid")
    private long crmMemberId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/vegas/component/retrofit/model/DoctorPayload.java
================================================
package kr.co.yeoshin.admin.reservation.vegas.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class DoctorPayload {

    @JsonProperty("doctor_id")
    private long id;

    @JsonProperty("doctor_name")
    private String name;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/vegas/component/retrofit/model/HolidayPayload.java
================================================
package kr.co.yeoshin.admin.reservation.vegas.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.Constant.Crm;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class HolidayPayload {

    @JsonProperty("holidays")
    private String holidays;

    public List<LocalDateTime> toLocalDateTime(int year) {
        try {
            return Arrays.stream(StringUtils.split(holidays, DELIMITER))
                    .map(monthDay -> LocalDate.parse(year + monthDay, DateTimeFormatter.ofPattern(Crm.DATE_FORMAT))
                            .atStartOfDay())
                    .collect(Collectors.toList());
        } catch (DateTimeParseException exception) {
            log.error("crm holiday date format error: ({})", exception.getMessage());

            return Collections.emptyList();
        }
    }

    private static final String DELIMITER = ",";
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/vegas/component/retrofit/model/HospitalInformationPayload.java
================================================
package kr.co.yeoshin.admin.reservation.vegas.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class HospitalInformationPayload {

    @JsonProperty("doctors")
    private List<DoctorPayload> doctors;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/vegas/component/retrofit/model/OperationTimePayload.java
================================================
package kr.co.yeoshin.admin.reservation.vegas.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.DayOfWeek;
import java.time.LocalTime;
import kr.co.yeoshin.admin.common.Constant.Crm;
import lombok.Getter;

public class OperationTimePayload {

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("OPENTIME")
    private LocalTime startTime;

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("CLOSETIME")
    private LocalTime endTime;

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("STARTLUNCHTIME")
    private LocalTime lunchStartTime;

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("ENDLUNCHTIME")
    private LocalTime lunchEndTime;

    @JsonProperty("DAYCLOSE")
    private int closedDay;  // 휴무일: 1, 휴무일 X: 0

    @JsonProperty("TIMEFIX")
    private int reservationRestrictedThirtyMinutesInAdvance;    // 예약제한: 1, 예약제한 X: 0

    @JsonProperty("WEEKDAY")
    private int dayOfWeek;

    public boolean isHoliday() {
        return this.closedDay == 1;
    }

    public boolean isReservableAtThirtyMinutesInAdvance() {
        return this.reservationRestrictedThirtyMinutesInAdvance == 0;
    }

    public DayOfWeek dayOfWeek() {
        // 일(0), 월(1), 화(2), 수(3), 목(4), 금(5), 토(6)
        if (dayOfWeek < 0 || dayOfWeek > 6) {
            return null;
        }

        if (dayOfWeek == 0) {
            return DayOfWeek.SUNDAY;
        }

        return DayOfWeek.of(dayOfWeek);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/reservation/vegas/component/retrofit/model/ReservationPayload.java
================================================
package kr.co.yeoshin.admin.reservation.vegas.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.time.LocalTime;
import kr.co.yeoshin.admin.common.Constant.Crm;
import lombok.Data;

@Data
public class ReservationPayload {

    @JsonProperty("sid")
    private long crmReservationId;

    @JsonProperty("cid")
    private long crmMemberId;

    @JsonFormat(pattern = Crm.DATE_FORMAT)
    @JsonProperty("resv_date")
    private LocalDate reservationDate;

    @JsonFormat(pattern = Crm.TIME_WITH_SECONDS_FORMAT)
    @JsonProperty("resv_time")
    private LocalTime reservationTime;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/service/model/TreatmentReviewConfirmPageablePayload.java
================================================
package kr.co.yeoshin.admin.review.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReviewConfirmPageablePayload {
    private List<TreatmentReviewShortTemplate> reviews;
    private Map<Long, TreatmentReviewConfirmShortTemplate> reviewConfirms;
    private Map<Long, ReservationShortTemplate> reservations;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, SalesEventShortTemplate> events;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/service/model/TreatmentReviewConfirmPayload.java
================================================
package kr.co.yeoshin.admin.review.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReviewConfirmPayload {

    private TreatmentReviewConfirmTemplate treatmentReviewConfirm;
    private TreatmentReviewShortTemplate treatmentReview;
    private TreatmentReceiptReviewTemplate treatmentReceiptReview;
    private TreatmentReviewHospitalCommentTemplate treatmentReviewHospitalComment;
    private HospitalShortTemplate hospital;
    private SalesEventShortTemplate salesEvent;
    private MemberShortTemplate member;
    private List<AdminMemoTemplate> comments;

    public void addAdminTemplate(List<AdminMemoTemplate> adminMemo) {
        this.comments = adminMemo;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/service/model/TreatmentReviewHospitalCommentPageablePayload.java
================================================
package kr.co.yeoshin.admin.review.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewHospitalCommentPageablePayload implements PlusAccessible {

    private List<TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComments;
    private Map<Long, TreatmentReviewShortTemplate> treatmentReview;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, SalesEventTemplate> salesEvents;
    private PageableTemplate pageable;
}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/service/model/TreatmentReviewHospitalCommentPayload.java
================================================
package kr.co.yeoshin.admin.review.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentReviewHospitalCommentTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentReviewShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewHospitalCommentPayload implements PlusAccessible {

    private TreatmentReviewHospitalCommentTemplate treatmentReviewHospitalComment;
    private TreatmentReviewShortTemplate treatmentReview;
    private AdminShortTemplate creator;
    private AdminShortTemplate updater;

}


================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/service/model/TreatmentReviewPageablePayload.java
================================================
package kr.co.yeoshin.admin.review.service.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewPageablePayload implements PlusAccessible {

    private List<TreatmentReviewShortTemplate> treatmentReviews;
    private Map<Long, TreatmentReviewConfirmShortTemplate> treatmentReviewConfirm;
    private Map<Long, MemberProfileTemplate> members;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComment;
    private Map<Long, ReservationShortTemplate> reservations;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, List<AdminMemoTemplate>> adminMemoByTreatmentReviewId;
    private Map<Long, List<InstantLogTemplate>> logsByTreatmentReviewId;
    private PageableTemplate pageable;

    public static TreatmentReviewPageablePayload empty() {
        return TreatmentReviewPageablePayload.builder()
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewConfirm(Collections.emptyMap())
                .members(Collections.emptyMap())
                .salesEvents(Collections.emptyMap())
                .hospitals(Collections.emptyMap())
                .treatmentReviewHospitalComment(Collections.emptyMap())
                .admins(Collections.emptyMap())
                .adminMemoByTreatmentReviewId(Collections.emptyMap())
                .logsByTreatmentReviewId(Collections.emptyMap())
                .build();
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/service/model/TreatmentReviewPayload.java
================================================
package kr.co.yeoshin.admin.review.service.model;

import java.util.List;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPageablePayload;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewPayload implements PlusAccessible {

    private TreatmentReviewTemplate treatmentReview;
    private TreatmentReviewConfirmShortTemplate treatmentReviewConfirm;
    private TreatmentReviewRewardTemplate treatmentReviewReward;
    private TreatmentReceiptReviewTemplate treatmentReceiptReview;
    private TreatmentReviewHospitalCommentTemplate treatmentReviewHospitalComment;
    private HospitalShortTemplate hospital;
    private MemberProfileTemplate member;
    private ReservationShortTemplate reservation;
    private SalesEventShortTemplate salesEvent;
    private List<SalesEventImageTemplate> salesEventImages;
    private List<SalesProductTemplate> salesProducts;
    private List<TicketTemplate> tickets;
    private List<CodeTemplate> pausedReasons;
    private List<CodeTemplate> concealReasons;
    private List<MemberPointTemplate> memberPoints;
    private NumberTemplate visibleTreatmentReviewCount;
    private AdminMemoPageablePayload adminMemo;
    private List<TreatmentTemplate> treatmentTemplates;

    public void addAdminMemoTemplates(AdminMemoPageablePayload adminMemo) {
        this.adminMemo = adminMemo;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/review/usecase/TreatmentReviewUseCase.java
================================================
package kr.co.yeoshin.admin.review.usecase;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPageablePayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdminMemoTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.MemberException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.review.controller.model.*;
import kr.co.yeoshin.admin.review.service.TreatmentReviewService;
import kr.co.yeoshin.admin.review.service.model.*;
import kr.co.yeoshin.common.board.model.AdminMemoWhereCondition;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.member.entity.Member;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;

@RequiredArgsConstructor
@Slf4j
@UseCase
public class TreatmentReviewUseCase {

    private final TreatmentReviewService treatmentReviewService;
    private final MemberService memberService;
    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final AdminMemoService adminMemoService;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessagePublisherTemplate messagePublisher;

    public TreatmentReviewPageablePayload treatmentReviewList(TreatmentReviewFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentReviewService.retrieveAllTreatmentReview(request.toWhereCondition(hospitalId)));
    }

    public TreatmentReviewPayload treatmentReview(long treatmentReviewId) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    TreatmentReviewPayload treatmentReviewPayload = treatmentReviewService.fetchTreatmentReviewByTreatmentReviewId(
                            hospitalId, treatmentReviewId);

                    if (!ObjectUtils.isEmpty(treatmentReviewPayload.getTreatmentReviewConfirm())) {
                        AdminMemoWhereCondition condition = AdminMemoWhereCondition.builder()
                                .refTypes(List.of(AdminMemoType.TREATMENT_REVIEW_CONFIRM, AdminMemoType.TREATMENT_REVIEW))
                                .refId(treatmentReviewPayload.getTreatmentReview().getId())
                                .pageable(PageRequest.of(0, Integer.MAX_VALUE, Sort.by(Order.desc("id"))))
                                .build();

                        AdminMemoPageablePayload adminMemoPageablePayload = adminMemoService.retrieveAdminMemos(condition);

                        treatmentReviewPayload.addAdminMemoTemplates(adminMemoPageablePayload);
                    }

                    return treatmentReviewPayload;

                });
    }

    public TreatmentReviewPayload updateTreatmentReview(long treatmentReviewId,
            TreatmentReviewMutationRequest treatmentReviewMutationRequest) {

        transactionTemplate.executeMainWritableTransaction(
                () -> {
                    treatmentReviewService.updateTreatmentReview(treatmentReviewId, treatmentReviewMutationRequest);
                    treatmentReviewService.deleteTreatmentReviewTranslation(treatmentReviewId);
                    return true;
                });
        return treatmentReview(treatmentReviewId);
    }

    public BoolPayload deleteTreatmentReview(long treatmentReviewId) {
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(
                        () -> {
                            treatmentReviewService.deleteTreatmentReview(treatmentReviewId);
                            treatmentReviewService.deleteTreatmentReviewTranslation(treatmentReviewId);
                            return true;
                        })).build();
    }

    public BoolPayload concealTreatmentReview(long treatmentReviewId, TreatmentReviewCheckMutationRequest request) {
        // TODO add send message
        TreatmentReviewConfirmContainer container = transactionTemplate.executeMainWritableTransaction(
                () -> treatmentReviewService.concealTreatmentReview(treatmentReviewId, request));

        Member member = transactionTemplate.executeMainReadableTransaction(
                () -> memberService.findMemberByMemberId(container.getTreatmentReview().getMember().getId())
                        .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST)));

        Hospital hospital = transactionTemplate.executeMainReadableTransaction(
                () -> hospitalService.findHospitalByHospitalId(container.getTreatmentReview().getHospital().getId()));

        List<NhnKakaoAlimTalkNotificationContext> alimTalks = Collections.singletonList(
                alimTalkTemplateFactory.treatmentReviewConceal(member, hospital, container));

        messagePublisher.publishNotification(NotificationMessage.of(
                NotificationPayload.builder()
                        .alimTalk(alimTalks)
                        .build()
        ));

        return BoolPayload.builder().result(true).build();

    }

    public BoolPayload approveTreatmentReview(List<Long> treatmentReviewIds, TreatmentReceiptReviewMatchIdsRequest matchRequest) {
        // TODO add send message
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentReviewService.approveTreatmentReview(treatmentReviewIds, matchRequest));
    }

    public BoolPayload reExposureTreatmentReview(long treatmentReviewId, TreatmentReviewReExposureRequest request) {
        return BoolPayload.builder().result(transactionTemplate.executeMainWritableTransaction(
                () -> {
                    TreatmentReviewConfirmContainer confirmContainer = treatmentReviewService.reExposureTreatmentReview(
                            treatmentReviewId);

                    Member member = memberService.findMemberByMemberId(confirmContainer.getTreatmentReview().getMember().getId())
                            .orElse(null);

                    if (confirmContainer.isReExposure() && member != null && request.getAlimTalk().toBoolean()) {
                        messagePublisher.publishNotification(NotificationMessage.of(
                                NotificationPayload.builder()
                                        .alimTalk(alimTalkTemplateFactory.treatmentReviewReExposure(member))
                                        .build()
                        ));
                    } else {
                        log.error("cannot find member, fail to send alimtalk of treatment review(id:{})", treatmentReviewId);
                    }
                    return true;
                }
        )).build();
    }

    public TreatmentReviewHospitalCommentPageablePayload retrieveTreatmentReviewHospitalComments(
            TreatmentReviewHospitalCommentFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentReviewService.retrieveTreatmentReviewHospitalComments(request.toWhereCondition(hospitalId)));
    }


    public TreatmentReviewHospitalCommentPayload retrieveTreatmentReviewHospitalComment(long treatmentReviewHospitalCommentId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentReviewService.retrieveTreatmentReviewHospitalComment(treatmentReviewHospitalCommentId)
        );
    }

    public TreatmentReviewHospitalCommentPayload registerTreatmentReviewHospitalComment(
            TreatmentReviewHospitalCommentMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentReviewService.registerTreatmentReviewHospitalComment(request));
    }

    public TreatmentReviewHospitalCommentPayload updateTreatmentReviewHospitalComment(long treatmentReviewHospitalCommentId,
            TreatmentReviewHospitalCommentMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentReviewService.updateTreatmentReviewHospitalComment(treatmentReviewHospitalCommentId, request));
    }

    public BoolPayload removeTreatmentReviewHospitalComment(long treatmentReviewHospitalCommentId) {
        return BoolPayload.builder()
                .result(
                        transactionTemplate.executeMainWritableTransaction(() ->
                                treatmentReviewService.removeTreatmentReviewHospitalComment(treatmentReviewHospitalCommentId))
                )
                .build();
    }

    public TreatmentReviewConfirmPageablePayload retrieveTreatmentReviewConfirms(TreatmentReviewConfirmFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentReviewService.fetchTreatmentReviewConfirmsByTreatmentIdIn(
                        request.toWhereCondition(hospitalId)));
    }

    public TreatmentReviewConfirmPayload retrieveTreatmentReviewConfirm(long treatmentReviewId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    TreatmentReviewConfirmPayload payload = treatmentReviewService.fetchTreatmentReviewConfirm(
                            treatmentReviewId);

                    List<AdminMemoTemplate> adminMemoTemplates = adminMemoService.retrieveAdminMemoByRefIdAndRefType(
                            payload.getTreatmentReviewConfirm().getTreatmentReviewId(),
                            AdminMemoType.TREATMENT_REVIEW_CONFIRM);

                    payload.addAdminTemplate(adminMemoTemplates);

                    return payload;
                });
    }

    public BoolPayload updateAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> treatmentReviewService.updateAdminMemo(id, adminMemo));
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/revision/service/model/RevisionPayload.java
================================================
package kr.co.yeoshin.admin.revision.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.CommitInfoTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class RevisionPayload  implements PlusAccessible {

    private List<CommitInfoTemplate> commits;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, MemberShortTemplate> members;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/revision/usecase/RevisionUseCase.java
================================================
package kr.co.yeoshin.admin.revision.usecase;

import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.revision.model.RevisionType;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.revision.service.model.RevisionPayload;
import kr.co.yeoshin.common.type.DomainType;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class RevisionUseCase {

    private final RevisionService revisionService;
    private final TransactionTemplate transactionTemplate;

    private final Map<RevisionType, DomainType> revisionTypeToDomainType = Map.of(
            RevisionType.TREATMENT_REVIEW, DomainType.TREATMENT_REVIEW,
            RevisionType.FRAY_MEMBER, DomainType.FRAY_MEMBER,
            RevisionType.SALES_EVENT_CONSULTATION, DomainType.SALES_EVENT_CONSULTATION,
            RevisionType.SALES_EVENT, DomainType.SALES_EVENT
    );

    public RevisionPayload retrieveRevisions(RevisionType revisionType, long id, boolean includeGroupObjects) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            if (revisionType.getClazz() == DomainType.class) {
                return Optional.ofNullable(revisionTypeToDomainType.get(revisionType))
                        .map(dt -> revisionService.retrieveInstantLogs(dt, id))
                        .orElseThrow(() -> new IllegalArgumentException(revisionType.name() + " is not mapped to DomainType."));
            } else {
                return revisionService.retrieveRevisions(id, revisionType.getClazz(), includeGroupObjects);
            }
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/saleseventcommission/service/model/SalesEventCommissionPageablePayload.java
================================================
package kr.co.yeoshin.admin.saleseventcommission.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventCommissionPageablePayload implements PlusAccessible {

    private List<SalesEventCommissionShortTemplate> salesEventCommissions;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, SalesEventShortTemplate> salesEvents;
    private Map<Long, TreatmentTemplate> treatments;
    private Map<Long, AdminShortTemplate> admins;
    private SalesEventPromotionItem salesEventPromotion;
    private PageableTemplate pageable;

    @Getter
    @Builder
    public static class SalesEventPromotionItem {
        private Map<Long, List<Long>> promotionIdsBySalesEventId;
        private Map<Long, PromotionTemplate> promotions;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/saleseventcommission/service/model/SalesEventCommissionPayload.java
================================================
package kr.co.yeoshin.admin.saleseventcommission.service.model;

import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonView;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.administrator.type.View.SystemAdmin;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventCommissionPayload implements PlusAccessible {

    @JsonUnwrapped
    private SalesEventCommissionTemplate salesEventCommission;

    private HospitalShortTemplate hospital;

    private TreatmentTemplate treatment;

    @JsonView(SystemAdmin.class)
    private Map<Long, TagTemplate> solutionTags;

    private List<AdminMemoTemplate> comments;

    private List<FileTemplate> allFiles;

    @JsonView(SystemAdmin.class)
    private boolean hasOrderAndConsultationEvent;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/saleseventcommission/service/model/SalesEventCommissionTempSavePayload.java
================================================
package kr.co.yeoshin.admin.saleseventcommission.service.model;

import com.fasterxml.jackson.annotation.JsonUnwrapped;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.SalesEventCommissionTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SalesEventCommissionTempSavePayload implements PlusAccessible {

    @JsonUnwrapped
    private SalesEventCommissionTemplate salesEventCommission;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/saleseventcommission/usecase/SalesEventCommissionUseCase.java
================================================
package kr.co.yeoshin.admin.saleseventcommission.usecase;

import static java.util.function.Predicate.not;
import static kr.co.yeoshin.common.product.type.SalesEventCommissionStatus.WAIT;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.Nullable;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.PromotionService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest.AdminMemoMutationRequestBuilder;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPayload;
import kr.co.yeoshin.admin.common.Constant;
import kr.co.yeoshin.admin.common.Constant.Api.QueryParam;
import kr.co.yeoshin.admin.common.component.LocaleTextMutationFactory;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.*;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguageType;
import kr.co.yeoshin.admin.common.model.localetext.SalesEventMultiLanguage;
import kr.co.yeoshin.admin.common.model.localetext.SalesEventTreatmentLibraryMultiLanguage;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.model.template.SalesEventImageTemplate.SalesEventNamedImageTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.HospitalException;
import kr.co.yeoshin.admin.exception.MediaException;
import kr.co.yeoshin.admin.exception.SalesEventException;
import kr.co.yeoshin.admin.hospital.service.HospitalManagementContactService;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.media.component.template.Media;
import kr.co.yeoshin.admin.media.controller.model.MediaFileUploadPayload;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.DefaultMediaContext;
import kr.co.yeoshin.admin.media.service.model.MediaContainer;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.media.usecase.model.*;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.admin.product.controller.model.*;
import kr.co.yeoshin.admin.product.service.*;
import kr.co.yeoshin.admin.product.service.model.SalesEventContainer;
import kr.co.yeoshin.admin.product.util.SalesEventUtils;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.saleseventcommission.controller.model.SalesEventCommissionFilterRequest;
import kr.co.yeoshin.admin.saleseventcommission.controller.model.SalesEventCommissionMutationRequest;
import kr.co.yeoshin.admin.saleseventcommission.service.ImmediatelyModifiableSalesEventCommissionService;
import kr.co.yeoshin.admin.saleseventcommission.service.SalesEventCommissionService;
import kr.co.yeoshin.admin.saleseventcommission.service.SalesEventCommissionTempSaveService;
import kr.co.yeoshin.admin.saleseventcommission.service.model.*;
import kr.co.yeoshin.admin.saleseventcommission.service.model.SalesEventCommissionPageablePayload.SalesEventPromotionItem;
import kr.co.yeoshin.admin.saleseventcommission.util.SalesEventCommissionUtils;
import kr.co.yeoshin.admin.treatment.service.TreatmentPrincipleService;
import kr.co.yeoshin.admin.treatment.service.TreatmentService;
import kr.co.yeoshin.admin.utils.CollectionFunctionalUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.Constant.At;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.board.entity.Promotion;
import kr.co.yeoshin.common.board.entity.QAdminMemo;
import kr.co.yeoshin.common.board.model.AdminMemoStatPerRefId;
import kr.co.yeoshin.common.board.model.AdminMemoWhereCondition;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.hospital.entity.*;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.notification.type.NotificationNhnKakaoAlimTalkIdType;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.model.CommissionType;
import kr.co.yeoshin.common.product.model.SalesEventWhereCondition;
import kr.co.yeoshin.common.product.type.SalesEventCommissionStatus;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import kr.co.yeoshin.common.product.type.SalesEventMakingType;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleUsageType;
import kr.co.yeoshin.common.reservation.entity.Holiday;
import kr.co.yeoshin.common.reservation.repository.HolidayRepository;
import kr.co.yeoshin.common.type.ApprovalStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.lang3.EnumUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class SalesEventCommissionUseCase {

    private final SalesEventCommissionService salesEventCommissionService;
    private final AdminMemoService adminMemoService;
    private final AdminService adminService;
    private final SalesEventService salesEventService;
    private final SalesEventImageService salesEventImageService;
    private final MediaService mediaService;
    private final TreatmentPrincipleService treatmentPrincipleService;
    private final SalesEventCommissionTempSaveService tempSaveService;
    private final HospitalService hospitalService;
    private final SqsQueueMessagePublisher messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SlackTemplateFactory slackTemplateFactory;
    private final HolidayRepository holidayRepository;
    private final HospitalManagementContactService hospitalManagementContactService;
    private final ImmediatelyModifiableSalesEventCommissionService immediatelyModifiableSalesEventCommissionService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final SalesProductService salesProductService;
    private final SalesEventUsageService salesEventUsageService;
    private final SalesEventUsageImageService salesEventUsageImageService;
    private final TreatmentService treatmentService;
    private final PromotionService promotionService;

    public SalesEventCommissionPageablePayload retrieveSalesEventCommissions(SalesEventCommissionFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    var conditionBuilder = request.toWhereCondition().toBuilder();
                    if (DiagnosticContext.isPlusAdmin()) {
                        conditionBuilder.isSecret(false);
                    }
                    DiagnosticContext.currentHospitalId().ifPresent(id -> conditionBuilder.hospitalIds(List.of(id)));

                    if (request.getHasNewComment() != null) {
                        LocalDateTime now = LocalDateTime.now();
                        List<Holiday> holidays = holidayRepository.findAllByCountryCodeAndAtBetween(
                                Locale.KOREA.getCountry(), now.minusDays(Constant.SalesEvent.NEW_COMMENT_DAYS), now);
                        LocalDateTime fourDaysAgo = DateUtil
                                .minusDaysInBusinessDayWithHoliday(
                                        now.toLocalDate(), Constant.SalesEvent.NEW_COMMENT_DAYS, holidays)
                                .atTime(LocalTime.MIN);

                        if (request.getHasNewComment()) {
                            conditionBuilder.fromCommentRegistered(fourDaysAgo);
                            conditionBuilder.toCommentRegistered(now);
                        } else {
                            conditionBuilder.fromCommentRegistered(Constant.At.MIN_LOCAL_DATETIME);
                            conditionBuilder.toCommentRegistered(fourDaysAgo.minusDays(1).with(At.LOCAL_TIME_MAX));
                        }
                    }

                    Page<SalesEventCommission> salesEventCommissionPage = salesEventCommissionService
                            .retrieveSalesEventCommissions(conditionBuilder.build());

                    List<Long> salesEventCommissionIds = CollectionFunctionalUtils.mapToList(
                            salesEventCommissionPage.get(), SalesEventCommission::getId);
                    Map<Long, AdminMemoStatPerRefId> commentInfoItemMap = adminMemoService
                            .retrieveStatPerRefIdByRefTypeAndRefIdInAndSecretYnIn(AdminMemoType.SALES_EVENT_COMMISSION,
                                    salesEventCommissionIds,
                                    DiagnosticContext.isSystemAdmin() ? EnumSet.allOf(YN.class) : EnumSet.of(YN.N));

                    LocalDate now = LocalDate.now();

                    List<Holiday> holidays = holidayRepository.findAllByCountryCodeAndAtBetween(
                            Locale.KOREA.getCountry(),
                            now.minusDays(Constant.SalesEvent.NEW_COMMENT_DAYS).atTime(LocalTime.MIN),
                            now.atTime(At.LOCAL_TIME_MAX)
                    );

                    List<SalesEventCommissionShortTemplate> salesEventCommissions = new ArrayList<>();
                    Map<Long, HospitalShortTemplate> hospitals = new TreeMap<>();
                    Set<Long> salesEventIds = new TreeSet<>();
                    Set<Long> treatmentIds = new TreeSet<>();
                    Set<Long> managerIds = new TreeSet<>();
                    for (var eventCommission : salesEventCommissionPage.getContent()) {
                        Long salesEventId = InvokeSupporters.getOrNullIfNull(
                                () -> eventCommission.getSalesEventDetailCommission().getSalesEvent().getId());
                        Optional.ofNullable(salesEventId).ifPresent(salesEventIds::add);

                        Long treatmentId = InvokeSupporters.getOrNullIfNull(
                                () -> eventCommission.getSalesEventDetailCommission().getRepresentativeTreatment().getId());
                        Optional.ofNullable(treatmentId).ifPresent(treatmentIds::add);

                        Hospital hospital = eventCommission.getHospital();
                        Long managerId = Optional.ofNullable(hospital.getSalesAdmin())
                                .map(Admin::getId)
                                .orElse(Optional.ofNullable(hospital.getAdvertisingManager()).map(Admin::getId).orElse(null));
                        Optional.ofNullable(managerId).ifPresent(managerIds::add);
                        managerIds.add(eventCommission.getWriter().getId());

                        LocalDateTime criterion = DateUtil
                                .minusDaysInBusinessDayWithHoliday(now, Constant.SalesEvent.NEW_COMMENT_DAYS, holidays)
                                .atTime(LocalTime.MIN);

                        AdminMemoStatPerRefId commentStat = commentInfoItemMap.get(eventCommission.getId());
                        SalesEventCommissionShortTemplate eventCommissionTemplate = payloadFactory.salesEventCommissionShortTemplate(
                                eventCommission,
                                salesEventId,
                                treatmentId,
                                managerId,
                                eventCommission.getWriter().getId(),
                                Optional.ofNullable(commentStat).map(AdminMemoStatPerRefId::getNumberOfMemo)
                                        .orElse(0),
                                Optional.ofNullable(commentStat)
                                        .map(AdminMemoStatPerRefId::getLatestCreatedAt)
                                        .map(it -> !it.isBefore(criterion))
                                        .orElse(false)
                        );
                        salesEventCommissions.add(eventCommissionTemplate);
                        hospitals.computeIfAbsent(hospital.getId(), id -> payloadFactory.hospitalShortTemplate(hospital));
                    }

                    Map<Long, SalesEventShortTemplate> salesEvents = salesEventService.retrieveSalesEvents(salesEventIds)
                            .stream()
                            .map(payloadFactory::salesEventShortTemplate)
                            .filter(Objects::nonNull)
                            .collect(Collectors.toMap(SalesEventShortTemplate::getId, Function.identity(), (v1, v2) -> v1,
                                    TreeMap::new));

                    treatmentIds.addAll(salesEvents.values().stream()
                            .map(SalesEventShortTemplate::getRepresentativeTreatmentId)
                            .collect(Collectors.toSet()));

                    Map<Long, TreatmentTemplate> treatments = treatmentService.findByTreatmentIdIn(treatmentIds)
                            .stream()
                            .map(payloadFactory::treatmentTemplate)
                            .filter(Objects::nonNull)
                            .collect(Collectors.toMap(TreatmentTemplate::getId, Function.identity(),
                                    (v1, v2) -> v2, TreeMap::new));

                    Map<Long, AdminShortTemplate> admins = adminService.retrieveAdmins(managerIds)
                            .stream()
                            .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity(), (v1, v2) -> v1,
                                    TreeMap::new));

                    Map<Long, List<Promotion>> promotionsBySalesEventId = promotionService.retrievePromotionsBySalesEventIds(
                            salesEventIds);

                    Map<Long, List<Long>> promotionIdsBySalesEventId = new HashMap<>();
                    Map<Long, PromotionTemplate> promotions = new HashMap<>();
                    for (Entry<Long, List<Promotion>> entry : promotionsBySalesEventId.entrySet()) {
                        List<Long> promotionIds = promotionIdsBySalesEventId.computeIfAbsent(entry.getKey(),
                                k -> new ArrayList<>());
                        for (Promotion promotion : entry.getValue()) {
                            promotionIds.add(promotion.getId());
                            promotions.computeIfAbsent(promotion.getId(), k -> payloadFactory.promotionTemplate(promotion));
                        }
                    }

                    return SalesEventCommissionPageablePayload.builder()
                            .salesEventCommissions(salesEventCommissions)
                            .hospitals(hospitals)
                            .salesEvents(salesEvents)
                            .treatments(treatments)
                            .admins(admins)
                            .salesEventPromotion(SalesEventPromotionItem.builder()
                                    .promotionIdsBySalesEventId(promotionIdsBySalesEventId)
                                    .promotions(promotions)
                                    .build())
                            .pageable(payloadFactory.pageableTemplate(salesEventCommissionPage))
                            .build();
                });
    }

    public SalesEventCommissionPayload retrieveSalesEventCommission(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            SalesEventCommissionContainer container = salesEventCommissionService.retrieveSalesEventCommission(id);
            SalesEventCommission salesEventCommission = container.getSalesEventCommission();
            if (salesEventCommission.getSecretYn() == YN.Y && DiagnosticContext.isPlusAdmin()) {
                throw new SalesEventException(AuthCode.AUTH_FORBIDDEN_ACCESS);
            }

            List<String> allFileNames = container.fetchAllFileNames();
            Map<String, MediaContainer> mediaContainerMap = mediaService.retrieveMedia(
                    allFileNames, DefaultMediaContext.PUBLIC_PRODUCT_IMAGE);

            var imageTemplates = SalesEventCommissionUtils.collectImages(salesEventCommission, mediaContainerMap)
                    .toMap().values().stream()
                    .flatMap(List::stream)
                    .collect(Collectors.toList());

            Map<String, FileTemplate> fileTemplates = SalesEventUtils.makeImageFileTemplates(
                    container.fetchAllBulkFileNames(), mediaContainerMap);

            SalesEventCommissionTemplate salesEventCommissionTemplate = SalesEventCommissionTemplate.of(
                    container, isApplicable(salesEventCommission), DiagnosticContext.isPlusAdmin(), imageTemplates, fileTemplates);
            HospitalShortTemplate hospitalShortTemplate = payloadFactory.hospitalShortTemplate(
                    salesEventCommission.getHospital());

            Long treatmentId = InvokeSupporters.getOrNullIfNull(
                    () -> salesEventCommission.getSalesEventDetailCommission().getRepresentativeTreatment().getId());
            TreatmentTemplate treatment = Optional.ofNullable(treatmentId)
                    .map(it -> payloadFactory.treatmentTemplate(
                            salesEventCommission.getSalesEventDetailCommission().getRepresentativeTreatment()))
                    .orElse(null);

            List<Long> solutionTagIds = InvokeSupporters.getOrNullIfNull(
                    () -> salesEventCommission.getSalesEventDetailCommission().getSolutionTagIds());
            Map<Long, TagTemplate> solutionTags = Optional.ofNullable(solutionTagIds)
                    .map(it -> salesEventService.fetchSolutionTagsById(it)
                            .values()
                            .stream()
                            .map(payloadFactory::tagTemplate)
                            .collect(Collectors.toMap(TagTemplate::getId, Function.identity(), (v1, v2) -> v1, TreeMap::new)))
                    .orElseGet(TreeMap::new);

            List<AdminMemoTemplate> comments = retrieveAdminMemo(id);

            List<FileTemplate> allFiles = List.copyOf(
                    SalesEventUtils.makeImageFileTemplates(allFileNames, mediaContainerMap).values());

            Page<SalesEvent> salesEvents = salesEventService.retrieveSalesEvents(SalesEventWhereCondition.builder()
                    .hospitalIds(List.of(salesEventCommission.getHospital().getId()))
                    .trashYn(YN.N)
                    .orderYn(YN.Y)
                    .consultationYn(YN.Y)
                    .skipCount(true)
                    .pageable(PageRequest.of(0, 1))
                    .build());

            return SalesEventCommissionPayload.builder()
                    .salesEventCommission(salesEventCommissionTemplate)
                    .hospital(hospitalShortTemplate)
                    .treatment(treatment)
                    .solutionTags(solutionTags)
                    .comments(comments)
                    .allFiles(allFiles)
                    .hasOrderAndConsultationEvent(CollectionUtils.size(salesEvents.getContent()) > 0)
                    .build();
        });
    }

    public SalesEventCommissionPayload registerSalesEventCommission(SalesEventCommissionMutationRequest request) {
        Supplier<Long> register = () -> {
            if (request.fetchSalesEventId().flatMap(salesEventCommissionService::fetchInProgressSalesEventCommission)
                    .isPresent()) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_COMMISSION_ALREADY_EXIST);
            }

            if (immediatelyModifiableSalesEventCommissionService.isApplicableImmediately(request)) {
                // 즉시적용 여부 확인 후에 이미지 복사해야 변경여부 검사시에 문제되지 않음.
                copyImageOnEventCopy(request, null);
                SalesEventCommission immediatelyApplied = immediatelyModifiableSalesEventCommissionService
                        .applyImmediately(request);
                if (immediatelyApplied != null) {
                    return immediatelyApplied.getId();
                }
            } else {
                copyImageOnEventCopy(request, null);
            }

            SalesEventCommission salesEventCommission = salesEventCommissionService.registerSalesEventCommission(request);

            // principleId 가 있는 경우 treatment_principle_usage 테이블에 추가
            if (request.getMakingType() == SalesEventMakingType.SYSTEM) {
                treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                        TreatmentPrincipleUsageType.SALES_EVENT_SYSTEM_COMMISSION,
                        salesEventCommission.getId(),
                        request.getSalesEventTreatmentLibrary().getTreatmentPrincipleIds()
                );
            }

            AdminMemoMutationRequest memo;
            if (salesEventCommission.getStatus() == SalesEventCommissionStatus.APPLIED) {
                memo = AdminMemoMutationRequest.WithCommit.builder()
                        .content(salesEventCommission.getStatus().getDescription())
                        .subContent(salesEventCommission.getStatus().name())
                        .refId(salesEventCommission.getId())
                        .secretYn(YN.N)
                        .build();
                AdminMemoPayload adminMemo = adminMemoService.registerAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION,
                        memo);
                salesEventCommission
                        .changeCommentRegistered(DateUtil.convertFrom(adminMemo.getMemo().getCreatedAt()));
            }

            return salesEventCommission.getId();
        };

        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    long id = register.get();
                    return this.retrieveSalesEventCommission(id);
                });
    }

    public SalesEventCommissionPayload updateSalesEventCommission(long id, SalesEventCommissionMutationRequest request) {
        Supplier<Long> update = () -> {
            boolean isPlusAdmin = DiagnosticContext.isPlusAdmin();
            SalesEventCommissionContainer container = salesEventCommissionService.retrieveSalesEventCommission(id);

            SalesEventCommissionStatus status = container.getSalesEventCommission().getStatus();
            if (isPlusAdmin && !SalesEventCommissionStatus.isUpdatableStatus(status)) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_COMMISSION_NOT_UPDATABLE);
            }

            copyImageOnEventCopy(request, container);

            salesEventCommissionService.updateSalesEventCommission(id, request);

            // principleIds를 treatment_principle_usage 테이블에 업데이트
            treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                    TreatmentPrincipleUsageType.SALES_EVENT_SYSTEM_COMMISSION,
                    id,
                    InvokeSupporters.getOrNullIfNull(
                            () -> request.getSalesEventTreatmentLibrary().getTreatmentPrincipleIds())
            );

            if (isPlusAdmin && container.getSalesEventCommission().getStatus() != SalesEventCommissionStatus.READY) {
                AdminMemoMutationRequest memo = AdminMemoMutationRequest.builder()
                        .content(container.getSalesEventCommission().getStatus().getDescription())
                        .subContent(container.getSalesEventCommission().getStatus().name())
                        .refId(container.getSalesEventCommission().getId())
                        .secretYn(YN.N)
                        .build();
                AdminMemoPayload adminMemo = adminMemoService.registerAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION, memo);
                salesEventCommissionService.updateCommentRegistered(id, DateUtil.convertFrom(adminMemo.getMemo().getCreatedAt()));
            }

            return id;
        };

        return transactionTemplate.executeMainWritableTransaction(() -> {
            long updatedId = update.get();
            return this.retrieveSalesEventCommission(updatedId);
        });
    }

    public BoolPayload deleteSalesEventCommission(long id) {
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventCommissionTemplate template = this.retrieveSalesEventCommission(id).getSalesEventCommission();

            if (template.getStatus() != SalesEventCommissionStatus.READY) {
                throw new SalesEventException(SalesEventCode.SALES_EVENT_COMMISSION_CANNOT_DELETE);
            }

            // 미디어 파일 정리
            Optional.ofNullable(template.getBulkCommission())
                    .map(SalesEventCommissionTemplate.BulkCommissionTemplate::fetchBulkUploadFiles)
                    .filter(CollectionUtils::isNotEmpty)
                    .map(bf -> MediaRegisterStatusMutation.builder()
                            .media(MediaType.FILE)
                            .accessible(MediaAccessibleType.PRIVATE)
                            .domain(MediaDomainType.PRODUCT)
                            .appliedMediaFileNames(bf)
                            .newMediaFileNames(Collections.emptyList())
                            .build())
                    .ifPresent(mediaService::modifyRegisterYnStatuses);

            Optional.ofNullable(template.getBulkCommission())
                    .map(SalesEventCommissionTemplate.BulkCommissionTemplate::fetchBulkUploadFiles)
                    .filter(CollectionUtils::isNotEmpty)
                    .map(bi -> MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PRIVATE)
                            .domain(MediaDomainType.PRODUCT)
                            .appliedMediaFileNames(bi)
                            .newMediaFileNames(Collections.emptyList())
                            .build())
                    .ifPresent(mediaService::modifyRegisterYnStatuses);

            Optional.ofNullable(template.fetchAllImages())
                    .filter(CollectionUtils::isNotEmpty)
                    .map(img -> MediaRegisterStatusMutation.builder()
                            .media(MediaType.IMAGE)
                            .accessible(MediaAccessibleType.PRIVATE)
                            .domain(MediaDomainType.PRODUCT)
                            .appliedMediaFileNames(img)
                            .newMediaFileNames(Collections.emptyList())
                            .build())
                    .ifPresent(mediaService::modifyRegisterYnStatuses);

            // 시술원리 사용처 정리
            treatmentPrincipleService.deleteAllTreatmentPrincipleUsages(
                    TreatmentPrincipleUsageType.SALES_EVENT_SYSTEM_COMMISSION, template.getId());

            // 코멘트 정리
            adminMemoService.deleteAllAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION, template.getId());

            salesEventCommissionService.deleteSalesEventCommission(template.getId());

            return true;
        });

        return BoolPayload.builder().result(result).build();
    }

    public BoolPayload updateNotConfirmedSalesEvent(long id, SalesEventCommissionStatus status, String reason) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!salesEventCommissionService.updateNotConfirmedSalesEvent(id, status)) {
                throw new SalesEventException(CommonCode.ERROR);
            }

            if (status == SalesEventCommissionStatus.APPLY_REJECTED) {
                AdminMemoMutationRequest memo = AdminMemoMutationRequest.WithCommit.builder()
                        .refId(id)
                        .content(reason)
                        .subContent(status.name())
                        .secretYn(YN.N)
                        .build();
                AdminMemoPayload adminMemo = adminMemoService.registerAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION, memo);

                salesEventCommissionService.updateCommentRegistered(id, DateUtil.convertFrom(adminMemo.getMemo().getCreatedAt()));
            }
            return BoolPayload.builder().result(true).build();
        });
    }

    public SalesEventCommissionPayload loadSalesEventCommissionData(long salesEventId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Optional<SalesEventCommission> latestSalesEventCommission = salesEventCommissionService
                    .fetchInProgressSalesEventCommission(salesEventId);

            if (latestSalesEventCommission.isPresent()) {
                // 기존에 완료되지 않은 요청이 있으면 해당 내용 응답
                SalesEventCommission latest = latestSalesEventCommission.get();
                SalesEventCommissionContainer container = salesEventCommissionService
                        .retrieveSalesEventCommission(latest.getId());
                Map<Long, SolutionTag> solutionTagMap = InvokeSupporters.getOrNullIfNull(
                        () -> salesEventService.fetchSolutionTagsById(
                                container.getSalesEventDetailCommission().getSolutionTagIds()));

                Map<Long, TagTemplate> solutionTags = solutionTagMap.values()
                        .stream()
                        .map(payloadFactory::tagTemplate)
                        .collect(Collectors.toUnmodifiableMap(TagTemplate::getId, Function.identity()));
                List<AdminMemoTemplate> comments = adminMemoService.retrieveAdminMemoByRefIdAndRefType(
                        latest.getId(), AdminMemoType.SALES_EVENT_COMMISSION);

                List<String> allFileNames = container.fetchAllFileNames();
                Map<String, MediaContainer> mediaContainerMap = mediaService.retrieveMedia(
                        allFileNames, DefaultMediaContext.PUBLIC_PRODUCT_IMAGE);
                var imageTemplates = SalesEventCommissionUtils.collectImages(latest, mediaContainerMap)
                        .toMap()
                        .values()
                        .stream()
                        .flatMap(Collection::stream)
                        .collect(Collectors.toList());

                return SalesEventCommissionPayload.builder()
                        .salesEventCommission(SalesEventCommissionTemplate.of(
                                container,
                                isApplicable(latest),
                                DiagnosticContext.isPlusAdmin(),
                                imageTemplates,
                                Collections.emptyMap()
                        ))
                        .hospital(payloadFactory.hospitalShortTemplate(latest.getHospital()))
                        .treatment(payloadFactory.treatmentTemplate(latest.getSalesEventDetailCommission()
                                .getRepresentativeTreatment()))
                        .solutionTags(solutionTags)
                        .comments(comments)
                        .build();
            }

            SalesEventContainer salesEventContainer = salesEventService.retrieveSalesEventDetail(salesEventId);
            SalesEvent salesEvent = salesEventContainer.getSalesEvent();

            if (salesEvent.getTreatmentLibraryYn() == YN.Y && salesEventContainer.getSalesEventTreatmentLibrary().isEmpty()) {
                throw new SalesEventException(CommonCode.ERROR, "sales_event_treatment_library must exists.");
            }

            List<String> imageNames = salesEventContainer.getSalesEventImages()
                    .stream()
                    .map(SalesEventImage::getImage)
                    .collect(Collectors.toList());
            Map<String, MediaContainer> mediaContainerMap = mediaService.retrieveMedia(
                    imageNames, DefaultMediaContext.PUBLIC_PRODUCT_IMAGE);

            Map<Long, TagTemplate> solutionTags = salesEventService.fetchSolutionTagsById(
                            salesEvent.getRepresentativeSolutionTagIds())
                    .values()
                    .stream()
                    .map(payloadFactory::tagTemplate)
                    .collect(Collectors.toUnmodifiableMap(TagTemplate::getId, Function.identity()));

            List<HospitalDepartment> hospitalDepartments =
                    hospitalService.fetchHospitalAsHospitalDepartmentsByHospitalId(salesEvent.getHospital().getId())
                            .stream()
                            .map(HospitalAsHospitalDepartment::getHospitalDepartment)
                            .collect(Collectors.toList());

            List<HospitalTreatment> hospitalTreatments =
                    hospitalService.fetchHospitalAsHospitalTreatmentsByHospitalId(salesEvent.getHospital().getId())
                            .stream()
                            .map(HospitalAsHospitalTreatment::getHospitalTreatment)
                            .collect(Collectors.toList());

            List<SalesEventUsage> usages = salesEventUsageService.findSalesEventUsagesBySalesEventIds(List.of(salesEventId))
                    .stream()
                    .filter(x -> x.getApprovalStatus() == ApprovalStatus.APPROVED)
                    .collect(Collectors.toList());

            List<SalesEventUsageImage> usageImages = salesEventUsageImageService.findAllBySalesEventUsageIds(usages.stream()
                    .map(SalesEventUsage::getId)
                    .collect(Collectors.toList()));

            List<SalesEventUsageAsTreatmentMethodTag> usageAsTreatmentMethodTags = salesEventUsageService
                    .findSalesEventUsageAsTreatmentMethodTagBySalesEventUsageIds(usages.stream()
                            .map(SalesEventUsage::getId)
                            .collect(Collectors.toList()));

            SalesEventDetailTemplate detail = SalesEventDetailTemplate.of(
                    salesEventContainer,
                    hospitalDepartments,
                    hospitalTreatments,
                    usages,
                    usageImages,
                    usageAsTreatmentMethodTags,
                    mediaContainerMap
            );

            SalesEventCommissionTemplate commissionTemplate = SalesEventCommissionTemplate.builder()
                    .salesEventDetail(SalesEventCommissionDetailTemplate.from(detail))
                    .styleColor(detail.getSalesEvent().getStyleColor())
                    .commissionType(CommissionType.MOD)
                    .status(WAIT)
                    .build();

            return SalesEventCommissionPayload.builder()
                    .salesEventCommission(commissionTemplate)
                    .hospital(payloadFactory.hospitalShortTemplate(salesEvent.getHospital()))
                    .treatment(payloadFactory.treatmentTemplate(salesEvent.getTreatment()))
                    .solutionTags(solutionTags)
                    .comments(Collections.emptyList())
                    .allFiles(payloadFactory.fileTemplatesWithOriginalFileName(commissionTemplate.fetchAllImages()))
                    .build();
        });
    }

    public AdminMemoPayload registerSalesEventCommissionComment(long salesEventCommissionId, AdminMemoMutationRequest request) {
        SalesEventCommissionStatus status = EnumUtils.getEnum(SalesEventCommissionStatus.class, request.getSubContent());

        if (DiagnosticContext.isPlusAdmin()
                && !(status == null || status == SalesEventCommissionStatus.RECHECK_REQUESTED)) {
            throw new SalesEventException(CommonCode.BAD_REQUEST, "Plus admin cannot change the status.");
        }
        if (StringUtils.isNotBlank(request.getSubContent()) && status == null) {
            throw new SalesEventException(CommonCode.BAD_REQUEST, "Status value is not valid.");
        }

        AdminMemoPayload result = transactionTemplate.executeMainWritableTransaction(() -> {
            AdminMemoMutationRequestBuilder<?, ?> req = request.toBuilder();
            if (status != null) {
                if (StringUtils.isBlank(request.getContent())) {
                    req.content(status.getDescription());
                }

                salesEventCommissionService.updateStatus(salesEventCommissionId, status);
            }

            AdminMemoPayload adminMemo = adminMemoService.registerAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION,
                    req.refId(salesEventCommissionId).build());

            if (request.getSecretYn() == YN.N) {
                salesEventCommissionService.updateCommentRegistered(salesEventCommissionId,
                        DateUtil.convertFrom(adminMemo.getMemo().getCreatedAt()));
            }

            return adminMemo;
        });

        sendNotification(status, salesEventCommissionId, result);

        return result;
    }

    public AdminMemoPayload updateSalesEventCommissionComment(
            long salesEventCommissionId,
            long commentId,
            AdminMemoMutationRequest request
    ) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            AdminMemoTemplate memo = adminMemoService.retrieveAdminMemoByAdminMemoId(AdminMemoType.SALES_EVENT_COMMISSION,
                            commentId)
                    .map(AdminMemoPayload::getMemo)
                    .filter(m -> m.getRefId() == salesEventCommissionId)
                    .orElseThrow(() -> new SalesEventException(BoardCode.BOARD_ADMIN_MEMO_NOT_EXIST));

            AdminMemoMutationRequest modified = request.toBuilder()
                    .refId(memo.getRefId())
                    .subContent(memo.getSubContent())
                    .build();

            return adminMemoService.updateAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION, commentId, modified);
        });
    }

    public BoolPayload deleteSalesEventCommissionComment(long salesEventCommissionId, long commentId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            AdminMemoTemplate memo = adminMemoService.retrieveAdminMemoByAdminMemoId(AdminMemoType.SALES_EVENT_COMMISSION,
                            commentId)
                    .map(AdminMemoPayload::getMemo)
                    .filter(m -> m.getRefId() == salesEventCommissionId)
                    .orElseThrow(() -> new SalesEventException(BoardCode.BOARD_ADMIN_MEMO_NOT_EXIST));

            AdminMemoWhereCondition whereCondition = AdminMemoWhereCondition.builder()
                    .refTypes(EnumSet.of(AdminMemoType.SALES_EVENT_COMMISSION))
                    .refId(salesEventCommissionId)
                    .pageable(PageRequest.of(0, 1, Direction.DESC, QAdminMemo.adminMemo.id.getMetadata().getName()))
                    .build();
            List<AdminMemoTemplate> memoList = adminMemoService.retrieveAdminMemos(whereCondition).getMemos();

            if (CollectionUtils.isEmpty(memoList) || memoList.get(0).getId() == commentId) {
                // 삭제하려는 코멘트가 마지막 코멘트인 경우 실제 데이터 삭제
                adminMemoService.deleteAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION, commentId);
            } else {
                // 삭제하려는 코멘트가 중간 코멘트인 경우 메시지를 마스킹하고 비밀글로 변경
                AdminMemoMutationRequest mutationRequest = AdminMemoMutationRequest.builder()
                        .refId(salesEventCommissionId)
                        .content(Constant.SalesEvent.SALES_EVENT_COMMISSION_DELETED_COMMENT)
                        .subContent(memo.getSubContent())
                        .secretYn(YN.Y)
                        .build();
                adminMemoService.updateAdminMemo(AdminMemoType.SALES_EVENT_COMMISSION, commentId, mutationRequest);
            }

            return BoolPayload.of(true);
        });
    }

    public SalesEventCommissionTempSavePayload saveRequestTemporarily(SalesEventCommissionMutationRequest request) {
        if (request.getCommissionType() == null || request.getMakingType() == null) {
            throw new SalesEventException(CommonCode.BAD_REQUEST, "commissionType and makingType are required.");
        }

        long hospitalId = Optional.ofNullable(DiagnosticContext.currentHospitalId().orElseGet(request::getHospitalId))
                .orElseThrow(() -> new SalesEventException(CommonCode.BAD_REQUEST));

        return transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventCommissionTempSave tempSave = tempSaveService.retrieveTemporarilySavedRequest(hospitalId);
            SalesEventCommissionTempSaveContainer container = tempSave == null ? null : this.convert(tempSave, hospitalId);

            if (request.getMakingType() == SalesEventMakingType.BULK) {
                List<String> beforeBulkFiles = Optional.ofNullable(container)
                        .map(SalesEventCommissionTempSaveContainer::getTempSave)
                        .map(SalesEventCommissionTemplate::getBulkCommission)
                        .map(SalesEventCommissionTemplate.BulkCommissionTemplate::fetchBulkImageFiles)
                        .orElse(Collections.emptyList());
                List<String> beforeBulkImages = Optional.ofNullable(container)
                        .map(SalesEventCommissionTempSaveContainer::getTempSave)
                        .map(SalesEventCommissionTemplate::getBulkCommission)
                        .map(SalesEventCommissionTemplate.BulkCommissionTemplate::fetchBulkImageFiles)
                        .orElse(Collections.emptyList());

                List<String> bulkFiles = request.fetchBulkNoneImageFiles();
                List<String> bulkImages = request.fetchBulkImageFiles();

                if (CollectionUtils.isNotEmpty(bulkFiles)) {
                    modifyMediaRegisterYnStatusesInTempSave(MediaType.FILE, beforeBulkFiles, bulkFiles);
                }
                if (CollectionUtils.isNotEmpty(bulkImages)) {
                    modifyMediaRegisterYnStatusesInTempSave(MediaType.IMAGE, beforeBulkImages, bulkImages);
                }
            } else {
                List<String> beforeAllImages = Optional.ofNullable(container)
                        .map(SalesEventCommissionTempSaveContainer::getTempSave)
                        .map(SalesEventCommissionTemplate::fetchAllImages)
                        .orElse(Collections.emptyList());
                List<String> allImages = request.fetchAllLocaleImages();
                if (CollectionUtils.isNotEmpty(allImages)) {
                    modifyMediaRegisterYnStatusesInTempSave(MediaType.IMAGE, beforeAllImages, allImages);
                }
            }

            SalesEventCommissionTempSave newTempSave = tempSaveService.saveRequestTemporarily(request);

            return SalesEventCommissionTempSavePayload.builder()
                    .salesEventCommission(convert(newTempSave, hospitalId).getTempSave())
                    .build();
        });
    }

    public SalesEventCommissionTempSavePayload retrieveTemporarilySavedRequest(long hospitalId) {
        SalesEventCommissionTempSaveContainer container = transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventCommissionTempSave temp = tempSaveService.retrieveTemporarilySavedRequest(hospitalId);

            SalesEventCommissionTempSaveContainer tempSaveContainer = temp == null ? null : convert(temp, hospitalId);
            if (tempSaveContainer != null && tempSaveContainer.isStale()) {
                deleteTemporarilySavedRequest(hospitalId);
            }

            return tempSaveContainer;
        });

        if (container == null || container.isStale()) {
            throw new SalesEventException(SalesEventCode.SALES_EVENT_COMMISSION_TEMP_SAVE_NOT_EXIST);
        }

        return SalesEventCommissionTempSavePayload.builder()
                .salesEventCommission(container.getTempSave())
                .build();
    }

    public BoolPayload deleteTemporarilySavedRequest(long hospitalId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventCommissionTempSave tempSave = tempSaveService.retrieveTemporarilySavedRequest(hospitalId);
            if (tempSave == null) {
                return BoolPayload.of(true);
            }

            SalesEventCommissionTempSaveContainer container = convert(tempSave, hospitalId);

            boolean success = tempSaveService.deleteTemporarilySavedRequest(hospitalId);
            if (!success) {
                return BoolPayload.of(false);
            }

            SalesEventCommissionTemplate template = container.getTempSave();
            SalesEventMakingType makingType = Optional.ofNullable(template)
                    .map(SalesEventCommissionTemplate::getSalesEventDetail)
                    .map(SalesEventCommissionDetailTemplate::getMakingType)
                    .orElse(null);

            if (makingType == SalesEventMakingType.BULK) {
                List<String> bulkFiles = Optional.ofNullable(template.getBulkCommission())
                        .map(SalesEventCommissionTemplate.BulkCommissionTemplate::fetchBulkNoneImageFiles)
                        .orElse(null);
                List<String> bulkImages = Optional.ofNullable(template.getBulkCommission())
                        .map(SalesEventCommissionTemplate.BulkCommissionTemplate::fetchBulkImageFiles)
                        .orElse(null);

                if (CollectionUtils.isNotEmpty(bulkFiles)) {
                    modifyMediaRegisterYnStatusesInTempSave(MediaType.FILE, bulkFiles, Collections.emptyList());
                }
                if (CollectionUtils.isNotEmpty(bulkImages)) {
                    modifyMediaRegisterYnStatusesInTempSave(MediaType.IMAGE, bulkImages, Collections.emptyList());
                }
            } else if (template != null) {
                List<String> allImages = template.fetchAllImages();
                if (CollectionUtils.isNotEmpty(allImages)) {
                    modifyMediaRegisterYnStatusesInTempSave(MediaType.IMAGE, allImages, Collections.emptyList());
                }
            }

            return BoolPayload.of(true);
        });
    }

    public MediaFileUploadPayload uploadFile(MultipartFile file, Long hospitalId) {
        long adminId = DiagnosticContext.fetchAdminId();

        MediaUpload mediaUpload;
        if (ValidationUtils.isValidImageExtension(file.getOriginalFilename())) {
            // image
            mediaUpload = ImageUpload.builder()
                    .accessibleType(MediaAccessibleType.PRIVATE)
                    .domainType(MediaDomainType.PRODUCT)
                    .multipartFile(file)
                    .keepOriginalFileName(true)
                    .build();
        } else if (ValidationUtils.isValidFileExtension(file.getOriginalFilename())) {
            if (hospitalId == null) {
                throw new SalesEventException(CommonCode.BAD_REQUEST, QueryParam.HOSPITAL_ID + " is required.");
            }
            // other files
            // 현재 엑셀 파일 업로드는 일괄등록 엑셀 파일만 있기 때문에, 일괄등록 엑셀 파일인것으로 간주하고 처리..
            String originalFilename = null;
            if (ValidationUtils.isValidExcelExtension(file.getOriginalFilename())) {
                Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId);
                String date = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
                originalFilename = MessageUtils.format("전체 옵션 상세 파일_{}_업로드_{}.{}",
                        hospital.getName(),
                        date,
                        FileUtils.extractExtension(file.getOriginalFilename()).toLowerCase());
            }

            mediaUpload = FileUpload.builder()
                    .accessibleType(MediaAccessibleType.PRIVATE)
                    .domainType(MediaDomainType.PRODUCT)
                    .multipartFile(file)
                    .originalFileName(originalFilename)
                    .keepOriginalFileName(true)
                    .build();
        } else {
            // video, ...
            throw new SalesEventException(CommonCode.BAD_REQUEST, "It is not supported file.");
        }

        Media media = mediaService.createMedia(mediaUpload);
        long mediaId = transactionTemplate.executeMainWritableTransaction(
                () -> mediaService.registerStatus(adminId, mediaUpload, media).getId());

        mediaService.uploadMedia(media, mediaUpload.getMultipartFile());

        return MediaFileUploadPayload.builder()
                .id(mediaId)
                .file(media.getFileName())
                .size(mediaUpload.getMultipartFile().getSize())
                .endpoint(mediaService.retrieveEndpoint(
                        media.getType(), mediaUpload.getAccessibleType(), mediaUpload.getDomainType(), media.getFileName()))
                .build();
    }

//    private boolean applyImages(SalesEventCommissionPayload salesEventCommission, long appliedSalesEventId) {
//        // 요청단계에서 PRIVATE 영역에 저장했던 이미지를 적용(승인) 이후에 PUBLIC 영역으로 이동시킴
//        Map<SalesEventImageType, List<ImageObject>> imageObjects = new HashMap<>();
//        for (var entry : salesEventCommission.fetchAllImages().entrySet()) {
//            List<ImageObject> imageObjectList = imageObjects.computeIfAbsent(entry.getKey(), k -> new ArrayList<>());
//            imageObjectList.addAll(CollectionFunctionalUtils.mapToList(
//                    entry.getValue(),
//                    t -> ImageObject.builder()
//                            .id(t.getId())
//                            .directionType(EnumUtils.getEnum(DirectionType.class, t.getType()))
//                            .image(UrlUtils.extractFilename(t.getImage()))
//                            .isBlur(t.isPrivate())
//                            .build()
//            ));
//        }
//
//        long adminId = DiagnosticContext.fetchAdminId();
//        Map<String, MediaStatus> mediaStatuses = CollectionFunctionalUtils.mapToUnmodifiableMap(
//                mediaService.findStatusesByFileNames(
//                        CollectionFunctionalUtils.flatMapToUnmodifiableList(imageObjects.values(), ImageObject::getImage)),
//                MediaStatus::getFileName
//        );
//
//        Map<SalesEventImageType, List<ImageObject>> finalImageObjects = new HashMap<>();
//        for (var entry : imageObjects.entrySet()) {
//            SalesEventImageType imageType = entry.getKey();
//            for (var imageObject : entry.getValue()) {
//                var mediaStatus = mediaStatuses.get(imageObject.getImage());
//                List<ImageObject> imageObjectList = finalImageObjects.computeIfAbsent(imageType, k -> new ArrayList<>());
//                if (mediaStatus.getAccessibleType() == MediaAccessibleType.PUBLIC) {
//                    imageObjectList.add(imageObject);
//                    continue;
//                }
//
//                ImageObject copiedImageObject = SalesEventUtils.copyMedia(mediaService, adminId, mediaStatus, imageObject);
//                imageObjectList.add(copiedImageObject);
//            }
//        }
//
//        // 메인 이미지나 썸네일 이미지 중 하나만 있을 때 복사
//        if (!(finalImageObjects.containsKey(SalesEventImageType.MAIN) && finalImageObjects.containsKey(
//                SalesEventImageType.THUMBNAIL))) {
//            if (finalImageObjects.containsKey(SalesEventImageType.MAIN)) {
//                // main 이미지만 있는 경우 main 이미지를 thumbnail 로 복사
//                List<ImageObject> thumbnails = SalesEventUtils.copyImages(mediaService, adminId,
//                        finalImageObjects.get(SalesEventImageType.MAIN), SalesEventImageType.MAIN);
//                finalImageObjects.put(SalesEventImageType.THUMBNAIL, thumbnails);
//            } else {
//                List<ImageObject> mains = SalesEventUtils.copyImages(mediaService, adminId,
//                        finalImageObjects.get(SalesEventImageType.THUMBNAIL), SalesEventImageType.THUMBNAIL);
//                finalImageObjects.put(SalesEventImageType.MAIN, mains);
//            }
//        }
//
//        salesEventImageService.upsertSalesEventImages(appliedSalesEventId, finalImageObjects);
//        return true;
//    }

    private void copyImageOnEventCopy(
            SalesEventCommissionMutationRequest request,
            @Nullable SalesEventCommissionContainer salesEventCommission
    ) {
        Set<String> requestedImages = Set.copyOf(request.fetchAllLocaleImages());
        List<SalesEventImage> images = salesEventImageService.findAllSalesEventImagesByFileNames(requestedImages);
        Map<String, MediaStatus> mediaStatusMap = CollectionFunctionalUtils.mapToUnmodifiableMapOrEmpty(
                mediaService.findStatusesByFileNames(requestedImages),
                MediaStatus::getFileName
        );

        // 기존 이벤트 이미지는 복사
        Map<String, String> replaceMap = new HashMap<>();
        long adminId = DiagnosticContext.fetchAdminId();

        for (var image : images) {
            MediaStatus mediaStatus = mediaStatusMap.get(image.getImage());
            if (mediaStatus == null || image.getMediaStatus().getId() == Constant.Entity.NOT_EXIST_ID) {
                // 리부트 이전에 생성된 이미지는 media_status 테이블로 관리하지 않기 때문에 복사하지 않고 그대로 사용.
                continue;
            }
            MediaCopy mediaCopy = ImageCopy.builder()
                    .sourceAccessibleType(mediaStatus.getAccessibleType())
                    .sourceDomainType(mediaStatus.getDomainType())
                    .sourceFileName(mediaStatus.getFileName())
                    .destinationAccessibleType(MediaAccessibleType.PRIVATE)
                    .destinationDomainType(mediaStatus.getDomainType())
                    .build();
            org.springframework.data.util.Pair<Media, Media> mediaPair = mediaService.createMedia(mediaCopy);
            org.springframework.data.util.Pair<MediaStatus, MediaStatus> mediaStatusPair = mediaService.registerStatus(
                    adminId, mediaCopy, mediaPair);
            mediaService.copyMedia(mediaPair.getFirst(), mediaPair.getSecond());

            replaceMap.put(image.getImage(), mediaStatusPair.getSecond().getFileName());
        }

        // 복사된 이미지로 이미지명 변경.
        replaceAllImages(request, replaceMap);

        // 기존 요청에 포함되어 있는 이미지 중 이번 요청에 포함되어 있지 않은 이미지 데이터 삭제.
        if (salesEventCommission != null) {
            Set<String> oldImages = SalesEventCommissionUtils.collectImages(salesEventCommission.getSalesEventCommission())
                    .toMap()
                    .values()
                    .stream()
                    .flatMap(List::stream)
                    .map(SalesEventImageTemplate::getImage)
                    .collect(Collectors.toSet());

            Long salesEventId = InvokeSupporters.getOrNullIfNull(
                    () -> salesEventCommission.getSalesEventDetailCommission().getSalesEvent().getId());
            Set<String> othersImages = images.stream()
                    .filter(img -> salesEventId == null || !salesEventId.equals(img.getSalesEvent().getId()))
                    .map(SalesEventImage::getImage)
                    .collect(Collectors.toSet());

            Set<String> noOthersImages = SetUtils.difference(requestedImages, othersImages);
            Set<String> deletionTargets = SetUtils.difference(oldImages, noOthersImages);

            mediaService.findStatusesByFileNames(deletionTargets).forEach(it -> it.changeRegisterYn(YN.N));
        }
    }

    private void replaceAllImages(SalesEventCommissionMutationRequest request, Map<String, String> replaceImageMap) {
        request.getLocaleImages()
                .toMap()
                .values()
                .stream()
                .flatMap(List::stream)
                .forEach(x -> {
                    var changedImage = replaceImageMap.get(x.getImage());
                    if (StringUtils.isNotBlank(changedImage)) {
                        x.changeImage(changedImage);
                    }
                });
    }

    private void modifyMediaRegisterYnStatusesInTempSave(MediaType mediaType, List<String> appliedMediaFilenames,
            List<String> newMediaFilenames) {

        Set<String> imageNamesForChecking = Stream.concat(appliedMediaFilenames.stream(), newMediaFilenames.stream())
                .collect(Collectors.toSet());

        // 임시저장에 포함된 이미지중에 현재 서비스에서 사용중인 이미지는 appliedMediaFilenames 에서 제외하여 삭제되지 않도록 함.
        Set<String> applied = salesEventImageService.findAllSalesEventImagesByFileNames(imageNamesForChecking)
                .stream()
                .map(SalesEventImage::getImage)
                .collect(Collectors.toSet());
        List<String> notInServiceAppliedMediaFilenames = appliedMediaFilenames.stream()
                .filter(not(applied::contains))
                .collect(Collectors.toList());
        List<String> notInServiceNewMediaFilenames = newMediaFilenames.stream()
                .filter(not(applied::contains))
                .collect(Collectors.toList());

        try {
            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .domain(MediaDomainType.PRODUCT)
                    .accessible(MediaAccessibleType.PRIVATE)
                    .media(mediaType)
                    .appliedMediaFileNames(notInServiceAppliedMediaFilenames)
                    .newMediaFileNames(notInServiceNewMediaFilenames)
                    .build());
        } catch (MediaException e) {
            if (e.getCode() != MediaCode.MEDIA_NOT_EXIST) {
                throw e;
            }
        }
    }

    private void applyTreatmentPrincipleUsage(
            Long oldSalesEventTreatmentLibraryId,
            Long newSalesEventTreatmentLibraryId,
            List<Long> treatmentPrincipleIds
    ) {
        if (oldSalesEventTreatmentLibraryId != null && newSalesEventTreatmentLibraryId == null) {
            // 기존에 sales_event_treatment_library 가 있었는데, 수정후 없으면 해당 라이브러리의 usage 모두 삭제
            treatmentPrincipleService.deleteAllTreatmentPrincipleUsages(
                    TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY, oldSalesEventTreatmentLibraryId);
            return;
        } else if (oldSalesEventTreatmentLibraryId == null && newSalesEventTreatmentLibraryId != null) {
            // 기존에 sales_event_treatment_library 가 없었는데, 수정후 있으면 해당 라이브러리의 usage 추가
            treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                    TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY,
                    newSalesEventTreatmentLibraryId,
                    treatmentPrincipleIds
            );
            return;
        } else if (oldSalesEventTreatmentLibraryId == null) {
            // 기존과 수정후 모두 sales_event_treatment_library 가 없으면 아무 작업도 하지 않음
            return;
        } else if (!Objects.equals(oldSalesEventTreatmentLibraryId, newSalesEventTreatmentLibraryId)) {
            // 수정 전후에 sales_event_treatment_library 아이디가 다르면 잘못된 경우
            throw new SalesEventException(CommonCode.ERROR,
                    "old salesEventTreatmentLibraryId and new salesEventTreatmentLibraryId must sames.");
        }

        // 수정 전후에 변경된 usage 적용
        treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                TreatmentPrincipleUsageType.SALES_EVENT_TREATMENT_LIBRARY,
                oldSalesEventTreatmentLibraryId,
                treatmentPrincipleIds
        );
    }

    private void sendNotification(SalesEventCommissionStatus status, long salesEventCommissionId, AdminMemoPayload memo) {
        if (memo.getMemo().isSecret()) {
            return;
        }

        SalesEventCommissionPayload payload = transactionTemplate.executeMainReadableTransaction(
                () -> this.retrieveSalesEventCommission(salesEventCommissionId));

        if (payload.getSalesEventCommission().isSecret()) {
            return;
        }

        if (status == SalesEventCommissionStatus.DONE) {
            sendAlimtalk(NotificationNhnKakaoAlimTalkIdType.SALES_EVENT_COMMISSION_COMPLETE, payload,
                    memo.getMemo().getContent());
        } else if (status == SalesEventCommissionStatus.MODIFICATION_REQUESTED) {
            sendAlimtalk(NotificationNhnKakaoAlimTalkIdType.SALES_EVENT_COMMISSION_MODIFY_REQUEST, payload,
                    memo.getMemo().getContent());
        } else if (status == SalesEventCommissionStatus.REJECTED) {
            sendAlimtalk(NotificationNhnKakaoAlimTalkIdType.SALES_EVENT_COMMISSION_PAUSE, payload, memo.getMemo().getContent());
        }

        if (DiagnosticContext.isPlusAdmin() &&
                DiagnosticContext.adminHospitalRole().getRole() == Level.ROLE_HOSPITAL_OWNER) {
            HospitalTemplate hospital = hospitalService.retrieveHospital(
                            DiagnosticContext.adminHospitalRole().getHospitalId())
                    .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_NOT_EXIST));

            messagePublisher.publishNotification(NotificationMessage.of(NotificationPayload.builder()
                    .slack(slackTemplateFactory.salesEventCommissionComment(
                            payload.getSalesEventCommission(), memo.getMemo(), hospital.toShortTemplate()))
                    .build()));
        }
    }

    private void sendAlimtalk(
            NotificationNhnKakaoAlimTalkIdType idType,
            SalesEventCommissionPayload salesEventCommission,
            String comment
    ) {
        List<String> eventManagerPhoneNumbers = hospitalManagementContactService
                .retrieveManagementContacts(salesEventCommission.getHospital().getId())
                .stream()
                .filter(m -> m.getContactTypes().contains(HospitalManagementContactType.SALES_EVENT))
                .map(HospitalManagementContactTemplate::getCellPhone)
                .filter(StringUtils::isNotBlank)
                .collect(Collectors.toUnmodifiableList());

        if (CollectionUtils.isEmpty(eventManagerPhoneNumbers)) {
            log.warn("The phone number of event mangers is not found. (salesEventCommissionId: {})",
                    salesEventCommission.getSalesEventCommission().getId());
        } else {
            String hospitalName = salesEventCommission.getHospital().getNames().getKo();
            String title = salesEventCommission.getSalesEventCommission().getTitle();
            NhnKakaoAlimTalkNotificationContext context = alimTalkTemplateFactory
                    .salesEventCommissionModificationRequested(
                            idType,
                            eventManagerPhoneNumbers,
                            salesEventCommission.getSalesEventCommission().getCreatedAt(),
                            hospitalName,
                            title,
                            comment);
            NotificationPayload notificationPayload = NotificationPayload.builder().alimTalk(context).build();
            NotificationMessage notificationMessage = NotificationMessage.of(notificationPayload);
            messagePublisher.publishNotification(notificationMessage);
        }
    }

    public BoolPayload updateConfigures(SalesEventConfigMutationRequest request) {
        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> salesEventService.updateSalesEventOrders(request)))
                .build();
    }

    private SalesEventCommissionTempSaveContainer convert(SalesEventCommissionTempSave tempSave, long hospitalId) {
        boolean isStale = tempSave.getUpdated().plusDays(14).with(At.LOCAL_TIME_MAX).isBefore(LocalDateTime.now());

        SalesEventCommissionMutationRequest saved = JsonUtils.toObject(tempSave.getPayload(),
                SalesEventCommissionMutationRequest.class);
        if (saved == null) {
            throw new SalesEventException(CommonCode.ERROR,
                    "Temporarily saved request is not valid json.\n" + tempSave.getPayload());
        }

        SalesEventCommissionTemplate.SalesEventCommissionTemplateBuilder builder = SalesEventCommissionTemplate.builder()
                .commissionType(saved.getCommissionType())
                .status(SalesEventCommissionStatus.READY)
                .title(saved.getTitle())
                .styleColor(saved.getStyleColor())
                .thumbnailType(saved.getThumbnailType())
                .salesProductsFileName(saved.getSalesProductsFileName())
                .isSecret(saved.isSecret())
                .createdAt(DateUtil.convertFrom(tempSave.getCreated()))
                .updatedAt(DateUtil.convertFrom(tempSave.getUpdated()));

        if (saved.getMakingType() == SalesEventMakingType.BULK) {
            Map<String, MediaStatus> mediaStatusMap = mediaService.findStatusesByFileNames(saved.fetchAllBulkFiles())
                    .stream()
                    .collect(Collectors.toMap(MediaStatus::getFileName, Function.identity()));
            Function<List<String>, List<FileTemplate>> toFileTemplate = urls -> {
                if (org.springframework.util.CollectionUtils.isEmpty(urls)) {
                    return null;
                }
                return CollectionFunctionalUtils.mapToList(urls, url -> {
                    MediaStatus mediaStatus = mediaStatusMap.get(UrlUtils.extractFilename(url));
                    if (mediaStatus == null) {
                        return FileTemplate.builder()
                                .id(-1)
                                .fileName(url)
                                .url(url)
                                .build();
                    } else {
                        return FileTemplate.builder()
                                .id(mediaStatus.getId())
                                .fileName(mediaStatus.getOriginalFileName())
                                .url(url)
                                .build();
                    }
                });
            };

            return SalesEventCommissionTempSaveContainer.builder()
                    .tempSave(builder.bulkCommission(SalesEventCommissionTemplate.BulkCommissionTemplate.builder()
                                    .additionalMemo(saved.getAdditionalMemo())
                                    .bulkUploadThumbnails(toFileTemplate.apply(saved.getBulkUploadThumbnails()))
                                    .bulkUploadFiles(toFileTemplate.apply(saved.getBulkUploadFiles()))
                                    .bulkUploadImages(toFileTemplate.apply(saved.getBulkUploadImages()))
                                    .build())
                            .salesEventDetail(SalesEventCommissionDetailTemplate.builder()
                                    .makingType(SalesEventMakingType.BULK)
                                    .build())
                            .build()
                    )
                    .isStale(isStale)
                    .build();
        }

        SalesEventRequestItem salesEvent = saved.getSalesEvent();
        SalesEventTreatmentLibraryRequestItem library = saved.getSalesEventTreatmentLibrary();

        MultiLanguageType<List<SalesEventImageRequest>> images = SalesEventCommissionUtils.collectImages(saved);
        List<String> imageNames = images.toMap().values().stream()
                .flatMap(List::stream)
                .map(SalesEventImageRequest::fetchImage)
                .collect(Collectors.toList());

        Map<String, MediaContainer> mediaContainerMap = mediaService.retrieveMedia(imageNames,
                DefaultMediaContext.PUBLIC_PRODUCT_IMAGE);

        Map<SalesEventImageType, MultiLanguageType<List<SalesEventImageRequest>>> imageMap = images.toMap().values().stream()
                .flatMap(List::stream)
                .collect(Collectors.groupingBy(SalesEventImageRequest::getType))
                .entrySet()
                .stream()
                .collect(Collectors.toMap(Entry::getKey,
                        e -> MultiLanguageType.of(e.getValue(), SalesEventImageRequest::getLanguage)));

        var beforeAfterImages = MultiLanguageType.convert(imageMap.get(SalesEventImageType.BEFORE_AFTER),
                x -> SalesEventCommissionUtils.convertNamedImageTemplate(x, mediaContainerMap));
        var treatmentIntroductionImages = MultiLanguageType.convert(imageMap.get(SalesEventImageType.TREATMENT_INTRODUCTION),
                x -> SalesEventCommissionUtils.convertNamedImageTemplate(x, mediaContainerMap));
        var hospitalIntroductionImages = MultiLanguageType.convert(imageMap.get(SalesEventImageType.HOSPITAL_INTRODUCTION),
                x -> SalesEventCommissionUtils.convertNamedImageTemplate(x, mediaContainerMap));

        SalesEventCommissionDetailTemplate.SalesEventCommissionDetailTemplateBuilder detailBuilder =
                SalesEventCommissionDetailTemplate.builder()
                        .makingType(saved.getMakingType())
                        .beforeAfterImages(InvokeSupporters.getOrNullIfNull(() -> beforeAfterImages.getKo()))
                        .localeBeforeAfterImages(beforeAfterImages)
                        .salesProducts(SalesProductObjectTemplate.of(
                                SalesProductObjectRequest.toSalesProductObjects(saved.getSalesProducts())))
                        .treatmentIntroductionImages(InvokeSupporters.getOrNullIfNull(() -> treatmentIntroductionImages.getKo()))
                        .localeTreatmentIntroductionImages(treatmentIntroductionImages)
                        .hospitalIntroductionImages(InvokeSupporters.getOrNullIfNull(() -> hospitalIntroductionImages.getKo()))
                        .localeHospitalIntroductionImages(hospitalIntroductionImages)
                        .localeImages(MultiLanguageType.convert(images,
                                x -> SalesEventNamedImageTemplate.of(x, mediaContainerMap)));

        if (salesEvent != null) {
            SalesEventMultiLanguage multiLanguage = LocaleTextMutationFactory.salesEventMultiLanguage(salesEvent);
            var thumbnailImage = Optional.ofNullable(InvokeSupporters.getOrNullIfEmpty(() -> MultiLanguageType.convertWithFirstItem(
                    imageMap.get(SalesEventImageType.THUMBNAIL),
                    x -> SalesEventCommissionUtils.convertNamedImageTemplate(x, mediaContainerMap)
            )));
            var mainImage = Optional.ofNullable(InvokeSupporters.getOrNullIfEmpty(() -> MultiLanguageType.convertWithFirstItem(
                    imageMap.get(SalesEventImageType.MAIN),
                    x -> SalesEventCommissionUtils.convertNamedImageTemplate(x, mediaContainerMap)
            )));

            detailBuilder.mainImage(mainImage.map(MultiLanguageType::getKo).orElse(null))
                    .salesEvent(SalesEventTemplate.builder()
                            .id(salesEvent.getId())
                            .styleColor(salesEvent.getStyleColor())
                            .nameKo(multiLanguage.getNames().getKo())
                            .localeName(multiLanguage.getNames())
                            .subNameKo(multiLanguage.getSubNames().getKo())
                            .localeSubName(multiLanguage.getSubNames())
                            .isTreatmentLibrary(saved.getMakingType() == SalesEventMakingType.SYSTEM)
                            .thumbnailImage(thumbnailImage.map(MultiLanguageType::getKo).orElse(null))
                            .localeThumbnailImages(thumbnailImage.orElse(null))
                            .representativeSolutionTagIds(salesEvent.getRepresentativeSolutionTagIds())
                            .representativeTreatmentId(
                                    Optional.ofNullable(salesEvent.getRepresentativeTreatmentId()).orElse(-1L))
                            .requireTimeKo(multiLanguage.getRequireTimes().getKo())
                            .localeRequireTime(multiLanguage.getRequireTimes())
                            .anesthesiaKo(multiLanguage.getAnesthesias().getKo())
                            .localeAnesthesia(multiLanguage.getAnesthesias())
                            .downtimeKo(multiLanguage.getDowntimes().getKo())
                            .localeDowntime(multiLanguage.getDowntimes())
                            .treatmentEffectAppearsTimeKo(multiLanguage.getTreatmentEffectAppearsTimes().getKo())
                            .localeTreatmentEffectAppearsTime(multiLanguage.getTreatmentEffectAppearsTimes())
                            .hospitalId(hospitalId)
                            .build());
        }

        if (library != null) {
            SalesEventTreatmentLibraryMultiLanguage multiLanguage
                    = LocaleTextMutationFactory.salesEventTreatmentLibraryMultiLanguage(library);

            MultiLanguageType<List<String>> localeTreatmentParts = MultiLanguageType.convert(
                    imageMap.get(SalesEventImageType.TREATMENT_PART), SalesEventImageRequest::fetchImage);

            detailBuilder.salesEventTreatmentLibrary(SalesEventTreatmentLibraryTemplate.builder()
                    .salesEventId(Optional.ofNullable(salesEvent).map(SalesEventRequestItem::getId).orElse(null))
                    .introductionKo(TitleContentObjectTemplate.of(
                            TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getIntroductions().getKo())))
                    .localeIntroduction(MultiLanguageType.<List<TitleContentObjectTemplate>>builder()
                            .ko(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getIntroductions().getKo())))
                            .en(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getIntroductions().getEn())))
                            .zh(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getIntroductions().getZh())))
                            .ja(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getIntroductions().getJa())))
                            .build())
                    .suggestionCycleKo(library.getSuggestionCycleKo())
                    .suggestionTimesKo(library.getSuggestionTimesKo())
                    .meritsKo(TitleContentObjectTemplate.of(
                            TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getMerits().getKo())))
                    .localeMerits(MultiLanguageType.<List<TitleContentObjectTemplate>>builder()
                            .ko(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getMerits().getKo())))
                            .en(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getMerits().getEn())))
                            .zh(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getMerits().getZh())))
                            .ja(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getMerits().getJa())))
                            .build())
                    .faqsKo(TitleContentObjectTemplate.of(
                            TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getFaqs().getKo())))
                    .localeFaqs(MultiLanguageType.<List<TitleContentObjectTemplate>>builder()
                            .ko(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getFaqs().getKo())))
                            .en(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getFaqs().getEn())))
                            .zh(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getFaqs().getZh())))
                            .ja(TitleContentObjectTemplate.of(
                                    TitleContentObjectRequest.toTitleContentObjects(multiLanguage.getFaqs().getJa())))
                            .build())
                    .precautionsKo(InvokeSupporters.getOrNullIfNull(() -> List.copyOf(multiLanguage.getPrecautions().getKo())))
                    .localePrecautions(MultiLanguageType.<List<String>>builder()
                            .ko(multiLanguage.getPrecautions().getKo())
                            .en(multiLanguage.getPrecautions().getEn())
                            .zh(multiLanguage.getPrecautions().getZh())
                            .ja(multiLanguage.getPrecautions().getJa())
                            .build())
                    .treatmentProcessKo(
                            InvokeSupporters.getOrNullIfNull(() -> List.copyOf(multiLanguage.getTreatmentProcesses().getKo())))
                    .localeTreatmentProcess(MultiLanguageType.<List<String>>builder()
                            .ko(multiLanguage.getTreatmentProcesses().getKo())
                            .en(multiLanguage.getTreatmentProcesses().getEn())
                            .zh(multiLanguage.getTreatmentProcesses().getZh())
                            .ja(multiLanguage.getTreatmentProcesses().getJa())
                            .build())
                    .treatmentParts(InvokeSupporters.getOrNullIfNull(() -> localeTreatmentParts.getKo()))
                    .localeTreatmentParts(localeTreatmentParts)
                    .treatmentPrincipleIds(library.getTreatmentPrincipleIds())
                    .suggestionTargets(library.getSuggestionTargets())
                    .build());
        }

        return SalesEventCommissionTempSaveContainer.builder()
                .tempSave(builder.salesEventDetail(detailBuilder.build()).build())
                .isStale(isStale)
                .build();
    }

    private List<AdminMemoTemplate> retrieveAdminMemo(long salesEventCommissionId) {
        AdminMemoWhereCondition.AdminMemoWhereConditionBuilder builder = AdminMemoWhereCondition.builder()
                .refTypes(List.of(AdminMemoType.SALES_EVENT_COMMISSION))
                .refId(salesEventCommissionId)
                .secretYn(DiagnosticContext.isPlusAdmin() ? YN.N : null)
                .pageable(PageRequest.of(0, Integer.MAX_VALUE, Sort.by(Order.desc("id"))));

        return adminMemoService.retrieveAdminMemos(builder.build()).getMemos();
    }

    boolean isApplicable(SalesEventCommission salesEventCommission) {
        // 이미 저장된 데이터에 대해서 "즉시적용"이 가능한지 확인하는 것이기 때문에 모든 필드의 유효성 검사는 하지 않음.
        // 제작유형이 일괄등록이 아니고, 이벤트 수정요청이고, 썸네일 or 메인 이미지가 등록되어 있는 경우에 즉시 적용 가능한 것으로 판단.
        if (salesEventCommission == null) {
            return false;
        }

        if (salesEventCommission.getCommissionType() == CommissionType.NEW) {
            // 이벤트 수정 요청인 경우만 즉시 적용 가능
            log.debug("If commissionType is NEW, it cannot be applied immediately.");
            return false;
        }

        if (salesEventCommission.getMakingType() == SalesEventMakingType.BULK) {
            // BULK 타입인 경우 즉시 적용 불가능
            log.debug("If makingType is BULK, it cannot be applied immediately.");
            return false;
        }

        if (salesEventCommission.getThumbnailType() != null) {
            log.debug("If thumbnailType is set, it cannot be applied immediately.");
            return false;
        }

        SalesEventDetailCommission detailCommission = salesEventCommission.getSalesEventDetailCommission();
        if (detailCommission == null
                || StringUtils.isAllBlank(detailCommission.getThumbnail(), detailCommission.getMainImage())) {
            log.debug("Thumbnail or main image are required.");
            return false;
        }

        return true;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/search/repository/ElasticsearchRepository.java
================================================
package kr.co.yeoshin.admin.search.repository;

import co.elastic.clients.elasticsearch.core.search.*;
import co.elastic.clients.json.JsonData;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import co.elastic.clients.elasticsearch.ElasticsearchClient;
import co.elastic.clients.elasticsearch._types.SortOptions;
import co.elastic.clients.elasticsearch._types.SortOrder;
import co.elastic.clients.elasticsearch._types.query_dsl.Query;
import co.elastic.clients.elasticsearch._types.query_dsl.Query.Builder;
import co.elastic.clients.elasticsearch.core.SearchResponse;
import co.elastic.clients.util.ObjectBuilder;
import com.google.common.base.CaseFormat;
import io.jsonwebtoken.lang.Collections;
import kr.co.yeoshin.admin.common.model.api.code.SearchCode;
import kr.co.yeoshin.admin.common.stereotype.SearchRepository;
import kr.co.yeoshin.admin.exception.SearchException;
import kr.co.yeoshin.admin.search.component.ElasticsearchClientProvider;
import kr.co.yeoshin.admin.search.document.LongTypeIdDocument;
import kr.co.yeoshin.admin.search.model.SearchRequest;
import kr.co.yeoshin.admin.search.model.SearchResult;
import kr.co.yeoshin.common.elasticsearch.document.Document;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;

/**
 * Ref: <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/searching.html">Search for documents</a>
 */
@Slf4j
@SearchRepository
@RequiredArgsConstructor
public class ElasticsearchRepository {

    private static final int BULK_SIZE = 10_000;

    private final ElasticsearchClientProvider clientProvider;

    public <T extends Document> SearchResult<T> search(@Valid SearchRequest request, @NotNull Class<T> documentType) {
        validate(request);

        ElasticsearchClient client = clientProvider.findClient(documentType)
                .orElseThrow(() -> new SearchException(SearchCode.SEARCH_CLIENT_NOT_FOUND));

        try {
            Function<Builder, ObjectBuilder<Query>> query = request.getQuery();
            co.elastic.clients.elasticsearch.core.SearchRequest esSearchRequest = makeSearchRequest(request, query, documentType);

            log.debug("es query : {}", esSearchRequest.query());

            SearchResponse<T> result = client.search(esSearchRequest, documentType);

            HitsMetadata<T> hitsMetadata = result.hits();

            return makeSearchResult(request, hitsMetadata, documentType);
        } catch (IOException e) {
            log.error("Elasticsearch Client failed the request.", e);
            throw new RuntimeException(e);
        }
    }

    public <T extends Document> SearchResult<T> searchAll(@Valid SearchRequest request, Class<T> documentType) {
        request = request.copy(BULK_SIZE);

        SearchResult<T> result = search(request, documentType);
        List<T> elements = new ArrayList<>(result.getResults());

        long totalCount = result.getTotalCount();
        while (result.hasNext()) {
            result = search(result.next(), documentType);
            elements.addAll(result.getResults());
        }

        return SearchResult.<T>builder()
                .results(elements)
                .totalCount(totalCount)
                .hasNext(false)
                .searchAfter(null)
                .request(result.next())
                .build();
    }

    public List<Long> searchAllToLongTypeIds(@Valid SearchRequest request) {
        return searchAll(request, LongTypeIdDocument.class)
                .getResults()
                .stream()
                .map(LongTypeIdDocument::getId)
                .collect(Collectors.toUnmodifiableList());
    }

    private co.elastic.clients.elasticsearch.core.SearchRequest makeSearchRequest(
            SearchRequest request,
            Function<Query.Builder, ObjectBuilder<Query>> query,
            Class<?> documentType
    ) {
        co.elastic.clients.elasticsearch.core.SearchRequest.Builder builder
                = new co.elastic.clients.elasticsearch.core.SearchRequest.Builder();

        builder.index(request.getIndex())
                .query(query)
                .size(request.getSize());

        if (!CollectionUtils.isEmpty(request.getSearchAfter())) {
            builder.searchAfter(request.getSearchAfter());
        }

        if (request.getSort() == null) {
            builder.sort(
                    SortOptions.of(s -> s.field(f -> f.field("_score").order(SortOrder.Desc))),
                    SortOptions.of(s -> s.field(f -> f.field("_doc")))
            );
        } else if (request.getSort().isSorted()) {
            List<SortOptions> sortOptions = request.getSort()
                    .stream()
                    .map(sort -> SortOptions.of(s ->
                            s.field(f -> f.field(sort.getProperty())
                                    .order(sort.getDirection().isDescending() ? SortOrder.Desc : SortOrder.Asc)
                            ))
                    )
                    .collect(Collectors.toUnmodifiableList());
            builder.sort(sortOptions);
        }

        List<String> sourceFields = Arrays.stream(documentType.getDeclaredFields())
                .map(Field::getName)
                .map(n -> CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, n))
                .collect(Collectors.toUnmodifiableList());
        builder.source(s -> s.filter(f -> f.includes(sourceFields)));

        if (request.getGroupBy() != null && StringUtils.isNotBlank(request.getGroupBy().getField())) {
            SearchRequest.GroupByRequest groupByRequest = request.getGroupBy();
            var sortOption = StringUtils.isBlank(groupByRequest.getSortField())
                    ? SortOptions.of(s -> s.field(f -> f.field("_doc").order(SortOrder.Desc)))
                    : SortOptions.of(s -> s.field(f ->
                    f.field(groupByRequest.getSortField())
                            .order(groupByRequest.getSortOrder() == SortOrder.Asc ? SortOrder.Asc : SortOrder.Desc)));
            var collapse = FieldCollapse.of(f -> f.field(groupByRequest.getField())
                    .innerHits(ih -> ih.name(groupByRequest.getField()).size(1).sort(sortOption)));
            builder.collapse(collapse);
        }

        return builder.build();
    }

    private <T> SearchResult<T> makeSearchResult(SearchRequest request, HitsMetadata<T> hitsMetadata, Class<T> documentType)
            throws IOException {

        List<T> documentList;
        if (request.getGroupBy() == null || StringUtils.isBlank(request.getGroupBy().getField())) {
            documentList = hitsMetadata.hits().stream()
                    .filter(it -> it.source() != null)
                    .map(Hit::source)
                    .collect(Collectors.toUnmodifiableList());
        } else {
            documentList = hitsMetadata.hits().stream()
                    .map(Hit::innerHits)
                    .filter(MapUtils::isNotEmpty)
                    .map(innerHits -> innerHits.get(request.getGroupBy().getField()))
                    .filter(innerHit -> innerHit != null && innerHit.hits() != null && CollectionUtils.isNotEmpty(innerHit.hits().hits()))
                    .map(hits -> hits.hits().hits().get(0).source())
                    .filter(Objects::nonNull)
                    .map(it -> it.to(documentType))
                    .collect(Collectors.toUnmodifiableList());
        }

        long totalCount = Optional.ofNullable(hitsMetadata.total()).map(TotalHits::value).orElse((long) documentList.size());
        List<String> searchAfter = Collections.isEmpty(hitsMetadata.hits())
                ? null
                : hitsMetadata.hits().get(hitsMetadata.hits().size() - 1).sort();

        return SearchResult.<T>builder()
                .results(documentList)
                .totalCount(totalCount)
                .hasNext(request.getSize() <= documentList.size())
                .searchAfter(searchAfter)
                .request(request)
                .build();
    }

    private void validate(SearchRequest request) {
        List<String> errorMessages = request.validate();
        if (!CollectionUtils.isEmpty(errorMessages)) {
            throw new IllegalArgumentException(String.join(",", errorMessages));
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/DepositPageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositPageablePayload implements PlusAccessible {

    private List<DepositTemplate> deposits;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, HospitalPartnershipTemplate> hospitalPartnerships;
    private Map<Long, DepositRefundTemplate> depositRefunds;
    private Map<Long, AdminShortTemplate> admins;
    private Map<Long, List<TicketTemplate>> ticketsByDepositId;
    private List<CodeTemplate> depositAdjustTypes;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/DepositPayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminMemoTemplate;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.DepositTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositPayload {

    private DepositTemplate deposit;
    private HospitalShortTemplate hospital;
    private Map<Long, AdminShortTemplate> admins;
    private List<AdminMemoTemplate> memos;

    public void addAdminMemos(List<AdminMemoTemplate> memos) {
        this.memos = memos;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/DepositRefundPageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositRefundPageablePayload implements PlusAccessible {

    private List<DepositRefundTemplate> depositRefunds;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, DepositTemplate> depositsByDepositRefundId;
    private Map<Long, HospitalPartnershipTemplate> hospitalPartnerships;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/DepositRefundPayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.DepositRefundTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalPartnershipTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositRefundPayload implements PlusAccessible {

    private DepositRefundTemplate depositRefund;
    private HospitalShortTemplate hospital;
    private HospitalPartnershipTemplate hospitalPartnership;
    private AdminShortTemplate admin;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/DepositRefundRegisterPayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.DepositRefundTemplate;
import kr.co.yeoshin.admin.common.model.template.DepositTemplate;
import kr.co.yeoshin.common.settlement.repository.model.RemainDepositDto;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DepositRefundRegisterPayload implements PlusAccessible {

    private List<DepositTemplate> requestDeposits;

    private Map<Long, RemainDepositDto> remainDepositByDepositId;
    private Map<Long, Boolean> isOnCashRefundPendingByHospitalId;
    private Map<Long, DepositTemplate> depositByHospitalId;
    private Map<Long, DepositRefundTemplate> alreadyDepositRefundByHospitalId;

    private List<DepositRefundTemplate> savedDepositRefunds;
    private List<DepositTemplate> savedDeposits;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/SettlementAdjustDetailPayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementAdjustDetailPayload {

    private List<TicketTemplate> tickets;
    private Map<Long, OrderTemplate> order;
    private Map<Long, MemberShortTemplate> member;
    private Map<Long, SalesEventTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/SettlementAdjustPageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementAdjustPageablePayload implements PlusAccessible {

    private List<SettlementAdjustTemplate> settlementAdjusts;
    private List<SettlementScheduleTemplate> settlementSchedules;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, HospitalPartnershipTemplate> hospitalPartnershipsByHospitalId;
    private Map<Long, List<TicketTemplate>> ticketsBySettlementAdjustId;
    private List<CodeTemplate> adjustTypes;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/SettlementAdjustPayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.AdminMemoTemplate;
import kr.co.yeoshin.admin.common.model.template.SettlementAdjustTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementAdjustPayload {

    private SettlementAdjustTemplate settlementAdjust;
    private List<AdminMemoTemplate> memos;

    public void addAdminMemos(List<AdminMemoTemplate> memos) {
        this.memos = memos;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/SettlementPgFeePageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementPgFeePageablePayload {

    private List<SettlementReportPeriodTemplate> settlements;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, HospitalPartnershipTemplate> hospitalPartnership;
    private Map<String, PgFeeTemplate> pgFees;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/service/model/VatReportPageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.VatReportTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class VatReportPageablePayload implements PlusAccessible {

    private List<VatReportTemplate> vatReport;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/DepositUseCase.java
================================================
package kr.co.yeoshin.admin.settlement.usecase;

import java.util.Collections;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPayload;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.settlement.controller.model.*;
import kr.co.yeoshin.admin.settlement.service.DepositService;
import kr.co.yeoshin.admin.settlement.service.model.DepositPageablePayload;
import kr.co.yeoshin.admin.settlement.service.model.DepositPayload;
import kr.co.yeoshin.admin.settlement.service.model.DepositRefundPageablePayload;
import kr.co.yeoshin.admin.settlement.service.model.DepositRefundRegisterPayload;
import kr.co.yeoshin.admin.settlement.usecase.model.AdminMemoContext;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.settlement.type.DepositRefundStatus;
import kr.co.yeoshin.common.settlement.type.DepositRefundType;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class DepositUseCase {

    private final DepositService depositService;
    private final AdminMemoService adminMemoService;
    private final TransactionTemplate transactionTemplate;

    public DepositPageablePayload retrieveDeposits(DepositFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> depositService.retrieveDeposits(request.toWhereCondition(hospitalId))
        );
    }

    public DepositPayload registerDepositAdjustment(DepositMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            long depositId = depositService.registerDepositAdjustment(request);
            DepositPayload depositPayload = depositService.retrieveDeposit(depositId);
            AdminMemoPayload payload = registerAdminMemo(AdminMemoContext.builder()
                    .memoType(AdminMemoType.DEPOSIT)
                    .content(depositPayload.getDeposit().getType().getDescription())
                    .subContent(depositPayload.getDeposit().getType().name())
                    .refId(depositPayload.getDeposit().getId())
                    .build());
            depositPayload.addAdminMemos(Collections.singletonList(payload.getMemo()));

            return depositPayload;
        });
    }

    public DepositPayload cancelDepositAdjustment(long depositId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            long cancelDepositId = depositService.cancelDepositAdjustment(depositId);
            DepositPayload depositPayload = depositService.retrieveDeposit(cancelDepositId);
            AdminMemoPayload payload = registerAdminMemo(AdminMemoContext.builder()
                    .memoType(AdminMemoType.DEPOSIT)
                    .content(depositPayload.getDeposit().getType().getDescription())
                    .subContent(depositPayload.getDeposit().getType().name())
                    .refId(depositPayload.getDeposit().getId())
                    .build()
            );
            depositPayload.addAdminMemos(Collections.singletonList(payload.getMemo()));

            return depositPayload;
        });
    }

    public DepositRefundPageablePayload retrieveDepositRefunds(DepositRefundFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> depositService.retrieveDepositRefunds(request.toWhereCondition(hospitalId))
        );
    }

    public BoolPayload confirmCashRefunds(CheckBoxConfirmMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> {
                    BoolPayload payload = depositService.confirmCashRefunds(request);
                    if (payload.isResult()) {
                        request.getConfirmIds().forEach(
                                x -> registerAdminMemo(AdminMemoContext.builder()
                                        .memoType(AdminMemoType.DEPOSIT_CASH)
                                        .content(DepositRefundType.CASH.getDescription())
                                        .subContent(DepositRefundStatus.COMPLETE.name())
                                        .refId(x)
                                        .build()));
                    }
                    return payload;
                });
    }

    public DepositRefundRegisterPayload registerDepositRefunds(DepositRefundMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> depositService.registerDepositRefunds(request)
        );
    }

    public BoolPayload cancelCashRefund(long depositRefundId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
                    BoolPayload payload = depositService.cancelCashRefund(depositRefundId);
                    if (payload.isResult()) {
                        registerAdminMemo(AdminMemoContext.builder()
                                .memoType(AdminMemoType.DEPOSIT_CASH)
                                .content(DepositRefundType.CASH.getDescription() + " " + DepositRefundStatus.CANCEL.getDescription())
                                .subContent(DepositRefundStatus.CANCEL.name())
                                .refId(depositRefundId)
                                .build());
                    }
                    return payload;
                }
        );
    }

    private AdminMemoPayload registerAdminMemo(AdminMemoContext context) {
        AdminMemoMutationRequest memo = AdminMemoMutationRequest.WithCommit.builder()
                .content(context.getContent())
                .subContent(context.getSubContent())
                .refId(context.getRefId())
                .secretYn(YN.N)
                .build();

        return adminMemoService.registerAdminMemo(context.getMemoType(), memo);
    }

    public BoolPayload confirmAdPointRefundTaxInvoices(CheckBoxConfirmMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> depositService.confirmAdPointRefundTaxInvoices(request)
        );
    }

    public BoolPayload updateAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> depositService.updateAdminMemo(id, adminMemo));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/SettlementUseCase.java
================================================
package kr.co.yeoshin.admin.settlement.usecase;

import com.nimbusds.oauth2.sdk.util.MapUtils;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.board.service.AdminMemoService;
import kr.co.yeoshin.admin.board.service.model.AdminMemoMutationRequest;
import kr.co.yeoshin.admin.board.service.model.AdminMemoPayload;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.SettlementCode;
import kr.co.yeoshin.admin.common.model.api.payload.MultipleResultPayload;
import kr.co.yeoshin.admin.common.model.api.request.PageableRequest;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.SettlementException;
import kr.co.yeoshin.admin.export.model.ExportResult;
import kr.co.yeoshin.admin.export.util.ZipUtils;
import kr.co.yeoshin.admin.hospital.service.HospitalManagementContactService;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.hospital.service.model.HospitalManagementContactContext;
import kr.co.yeoshin.admin.media.component.template.S3Template;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.revision.service.model.RevisionPayload;
import kr.co.yeoshin.admin.settlement.component.SettlementAgencyUploadFileDelegator;
import kr.co.yeoshin.admin.settlement.controller.model.*;
import kr.co.yeoshin.admin.settlement.service.SettlementService;
import kr.co.yeoshin.admin.settlement.service.model.*;
import kr.co.yeoshin.admin.settlement.usecase.model.*;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.TicketsWithProducts;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.hospital.model.HospitalWhereCondition;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.SettlementPgType;
import kr.co.yeoshin.common.settlement.entity.SettlementAdjustAsTicket;
import kr.co.yeoshin.common.settlement.entity.SettlementPgReport;
import kr.co.yeoshin.common.settlement.entity.SettlementReport;
import kr.co.yeoshin.common.settlement.entity.SettlementSchedule;
import kr.co.yeoshin.common.settlement.model.SettlementWhereCondition;
import kr.co.yeoshin.common.settlement.repository.model.PgFeeDto;
import kr.co.yeoshin.common.settlement.repository.model.SettlementPgReportDto;
import kr.co.yeoshin.common.settlement.type.AdjustStatus;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import kr.co.yeoshin.common.settlement.type.SettlementStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.FileUtils;
import kr.co.yeoshin.common.utils.JsonUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.util.Pair;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class SettlementUseCase {

    private final SettlementService settlementService;
    private final TicketService ticketService;
    private final OrderService orderService;
    private final AdminMemoService adminMemoService;
    private final HospitalService hospitalService;
    private final RevisionService revisionService;
    private final PayloadFactory payloadFactory;
    private final HospitalManagementContactService hospitalManagementContactService;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final QueueMessagePublisherTemplate queueMessagePublisherTemplate;
    private final TransactionTemplate transactionTemplate;
    private final List<SettlementAgencyUploadFileDelegator> uploadFileDelegators;
    private final ApplicationProps applicationProps;
    private final S3Template s3Template;

    public SettlementPageablePayload retrieveSettlements(SettlementFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        return transactionTemplate.executeMainReadableTransaction(
                () -> settlementService.retrieveSettlements(request.toWhereCondition(hospitalId))
        );
    }

    public SettlementPayload retrieveSettlement(long settlementId) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        return transactionTemplate.executeMainReadableTransaction(
                () -> settlementService.retrieveSettlement(hospitalId, settlementId));
    }

    public SettlementStatusResult updateSettlementStatus(long settlementId, SettlementStatusMutationRequest mutationRequest) {
        MultipleResultPayload<Long, SettlementStatusResult> result = this.updateSettlementStatus(
                SettlementsStatusMutationRequest.builder()
                        .status(mutationRequest.getStatus())
                        .pauseReason(mutationRequest.getPauseReason())
                        .verbose(mutationRequest.getVerbose())
                        .settlementIds(List.of(settlementId))
                        .build(),
                true
        );

        return CollectionUtils.isNotEmpty(result.getResults())
                ? result.getResults().get(0).getResult()
                : SettlementStatusResult.builder().success(false)
                        .settlementStatus(mutationRequest.getStatus())
                        .build();
    }

    public MultipleResultPayload<Long, SettlementStatusResult> updateSettlementStatus(
            SettlementsStatusMutationRequest request,
            boolean forceUpdate
    ) {
        Map<Long, List<SettlementPgReportDto>> pgReports = !forceUpdate && request.getStatus() == SettlementStatus.COMPLETE
                ? transactionTemplate.executeMainReadableTransaction(
                        () -> settlementService.retrieveSettlementPgReportsBySettlementReportIds(request.getSettlementIds()))
                : Collections.emptyMap();

        // PG별 지급 상태에 따라서 COMPLETE로 변경하지 못하는 항목 필터링
        Set<Long> unmodifiableStatusIds = new HashSet<>();
        List<SettlementStatusContext> statusContexts = new ArrayList<>();
        for (var sid : request.getSettlementIds()) {
            var pgReport = pgReports.get(sid);
            boolean allPgCompleted = Optional.ofNullable(pgReport)
                    .map(x -> x.stream()
                            .allMatch(spr -> (spr.getSettlementPgType() != SettlementPgType.SYSTEM_CASH && spr.getStatus() == SettlementStatus.COMPLETE)
                                    || (spr.getSettlementPgType() == SettlementPgType.SYSTEM_CASH && spr.getSettlementPrice() > 0)))
                    .orElse(true);

            if (allPgCompleted) {
                statusContexts.add(SettlementStatusContext.builder()
                        .settlementId(sid)
                        .status(request.getStatus())
                        .pauseReason(request.getPauseReason())
                        .verbose(request.getVerbose())
                        .build());
            } else {
                unmodifiableStatusIds.add(sid);
            }
        }

        var results = transactionTemplate.executeMainWritableTransaction(() -> {
            List<SettlementReport> settlementReports = settlementService.retrieveSettlementReports(request.getSettlementIds());

            Map<Long, SettlementStatus> unmodifiedStatuses = new HashMap<>();
            Map<Long, SettlementStatus> beforeStatuses = new HashMap<>();
            for (var settlementReport : settlementReports) {
                if (unmodifiableStatusIds.contains(settlementReport.getId())) {
                    unmodifiedStatuses.put(settlementReport.getId(), settlementReport.getStatus());
                }
                beforeStatuses.put(settlementReport.getId(), settlementReport.getStatus());
            }

            Map<Long, SettlementReport> settlementReportMap = settlementService.updateSettlementStatus(statusContexts, forceUpdate)
                    .stream()
                    .collect(Collectors.toMap(SettlementReport::getId, Function.identity()));

            final Set<SettlementStatus> successStatuses = EnumSet.of(SettlementStatus.COMPLETE, SettlementStatus.PAUSE);
            List<SettlementReport> statusChangedSettlements = new ArrayList<>();
            List<MultipleResultPayload.ResultItem<Long, SettlementStatusResult>> r = new ArrayList<>();
            for (var sid : request.getSettlementIds()) {
                SettlementReport settlementReport = settlementReportMap.get(sid);
                SettlementStatusResult settlementStatusResult;
                if (settlementReport == null) {
                    settlementStatusResult = SettlementStatusResult.builder()
                            .success(false)
                            .settlementStatus(unmodifiedStatuses.get(sid))
                            .build();
                } else if (settlementReport.getStatus() == request.getStatus()) {
                    settlementStatusResult = SettlementStatusResult.builder()
                            .success(true)
                            .settlementStatus(settlementReport.getStatus())
                            .build();
                } else {
                    settlementStatusResult = SettlementStatusResult.builder()
                            .success(false)
                            .settlementStatus(settlementReport.getStatus())
                            .build();
                }

                if (settlementReport != null && beforeStatuses.get(sid) != settlementReport.getStatus()) {
                    // 상태가 변경되면 알림을 보냄
                    if (successStatuses.contains(settlementReport.getStatus()) && settlementReport.getSettlementPrice() != 0) {
                        statusChangedSettlements.add(settlementReport);
                    }
                }

                r.add(MultipleResultPayload.ResultItem.<Long, SettlementStatusResult>builder()
                        .request(sid)
                        .result(settlementStatusResult)
                        .build());
            }

            return Pair.of(r, statusChangedSettlements);
        });

        transactionTemplate.executeMainReadableTransaction(() -> {
            List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = makeAlimTalkNotificationContexts(results.getSecond());
            NotificationPayload notificationPayload = NotificationPayload.builder().alimTalk(alimTalkContexts).build();
            NotificationMessage notificationMessage = NotificationMessage.of(notificationPayload);

            log.debug("Sending AlimTalk notification...\n{}", JsonUtils.toJsonString(notificationMessage));
            return queueMessagePublisherTemplate.publishNotification(notificationMessage);
        });

        return MultipleResultPayload.<Long, SettlementStatusResult>builder()
                .results(results.getFirst())
                .build();
    }

    public SettlementAdjustPageablePayload retrieveSettlementAdjusts(SettlementAdjustFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);

        return transactionTemplate.executeMainReadableTransaction(
                () -> settlementService.getSettlementAdjusts(request.toWhereCondition(hospitalId)));
    }

    public SettlementAdjustDetailPayload retrieveSettlementAdjust(long settlementAdjustId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<SettlementAdjustAsTicket> settlementAdjustAsTickets = settlementService.getSettlementAdjustAsTicket(
                    settlementAdjustId);

            if (settlementAdjustAsTickets.isEmpty()) {
                throw new SettlementException(SettlementCode.SETTLEMENT_ADJUST_TICKET_NOT_EXIST);
            }

            Set<Long> ticketIds = settlementAdjustAsTickets.stream()
                    .map(x -> x.getTicket().getId())
                    .collect(Collectors.toSet());

            TicketsWithProducts ticketsWithProducts = ticketService.retrieveTickets(ticketIds);

            List<Long> ticketGroupIds = ticketsWithProducts.getTickets().stream()
                    .distinct()
                    .map(TicketTemplate::getGroupId)
                    .collect(Collectors.toList());

            List<Ticket> tickets = ticketService.fetchAllTicketsByGroupIds(ticketGroupIds);

            Map<Long, MemberShortTemplate> members = tickets.stream().distinct().collect(
                    Collectors.toMap(t -> t.getMember().getId(), t -> payloadFactory.memberShortTemplate(t.getMember()),
                            (a, b) -> a));

            List<OrderPurchase> orderPurchases = orderService.retrieveOrderByOrderIds(
                    tickets.stream()
                            .map(x -> x.getOrderSalesProduct().getOrder().getId())
                            .collect(Collectors.toSet()));

            Map<Long, OrderTemplate> orders = orderPurchases.stream()
                    .collect(Collectors.toMap(OrderPurchase::getId, payloadFactory::orderTemplate, (a, b) -> a));

            return SettlementAdjustDetailPayload.builder()
                    .tickets(payloadFactory.ticketTemplates(tickets))
                    .order(orders)
                    .member(members)
                    .salesEvents(ticketsWithProducts.getSalesEvents())
                    .salesProductVersions(ticketsWithProducts.getSalesProductVersions())
                    .build();
        });
    }

    public SettlementAdjustPayload registerSettlementAdjust(SettlementAdjustMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SettlementAdjustPayload payload = settlementService.insertSettlementAdjust(request);

            return registerAdminMemo(payload);
        });
    }

    public SettlementAdjustPayload modifySettlementAdjustStatus(long settlementAdjustId, AdjustStatus status) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SettlementAdjustPayload payload = settlementService.updateSettlementAdjustStatus(settlementAdjustId, status);

            return registerAdminMemo(payload);
        });
    }

    private SettlementAdjustPayload registerAdminMemo(SettlementAdjustPayload payload) {
        AdminMemoMutationRequest memo = AdminMemoMutationRequest.WithCommit.builder()
                .content(payload.getSettlementAdjust().getStatus().getDescription())
                .subContent(payload.getSettlementAdjust().getStatus().name())
                .refId(payload.getSettlementAdjust().getId())
                .secretYn(YN.N)
                .build();

        AdminMemoPayload adminMemoPayload = adminMemoService.registerAdminMemo(AdminMemoType.SETTLEMENT_ADJUST, memo);
        payload.addAdminMemos(Collections.singletonList(adminMemoPayload.getMemo()));

        return payload;
    }

    public SettlementPgFeePageablePayload retrievePgFees(SettlementPgFeeFilterRequest request) {
        Long hospitalId = DiagnosticContext.currentHospitalId().orElse(null);
        return transactionTemplate.executeMainReadableTransaction(
                () -> settlementService.retrieveSettlementPgFees(request.toWhereCondition(hospitalId)));
    }

    public SettlementPgFeePayload retrievePgFee(PgFeeDto pgFee) {
        return transactionTemplate.executeMainReadableTransaction(() -> settlementService.retrievePgFee(pgFee));
    }

    public LatestFixedPayAtPayload retrieveLatestExpectStatusPayAt() {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ZonedDateTime payAt = settlementService.retrieveLatestExpectStatusSettlementPgReport()
                    .map(SettlementPgReport::getPayAt)
                    .map(DateUtil::convertFrom)
                    .orElse(null);

            return LatestFixedPayAtPayload.builder()
                    .fixedPayAt(DateTimeTemplate.builder().id(-1L).at(payAt).build())
                    .build();
        });
    }

    public File retrieveAgencyRequestContent(SettlementFilterRequest request, boolean fixPayAt, LocalDate payAt) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            // 지급대행 목록은 EXPECT 상태가 필수
            SettlementFilterRequest rebuiltRequest = request.toBuilder()
                    .status(List.of(SettlementStatus.EXPECT))
                    .hospitalIds(null)
                    .pageable(PageableRequest.builder().page(0).size(Integer.MAX_VALUE).build())
                    .build();

            SettlementWhereCondition whereCondition = rebuiltRequest.toWhereCondition(null);

            Set<Long> excludeHospitalIds = hospitalService.fetchAllHospital(HospitalWhereCondition.builder()
                            .testYn(YN.Y)
                            .pageable(PageRequest.of(0, Integer.MAX_VALUE))
                            .build())
                    .getHospitals()
                    .stream()
                    .map(HospitalTemplate::getId)
                    .collect(Collectors.toSet());

            List<SettlementReportTemplate> settlementReports = settlementService.retrieveSettlements(whereCondition)
                    .getSettlementReports();
            List<Long> settlementReportIds = settlementReports.stream()
                    .map(SettlementReportTemplate::getId)
                    .collect(Collectors.toList());

            Map<Long, List<SettlementPgReportDto>> pgReportsBySettlementId = settlementService
                    .retrieveSettlementPgReportsBySettlementReportIds(settlementReportIds);

            List<Long> expectSettlementReportList = new ArrayList<>();
            List<Long> expectSettlementPgReportList = new ArrayList<>();
            for (var settlementReport : settlementReports) {
                List<SettlementPgReportDto> pgReports = pgReportsBySettlementId.getOrDefault(settlementReport.getId(),
                        Collections.emptyList());
                // 테스트병원, 정산금액 0원 이하, PG별 정산금액 0원이하 제외
                if (excludeHospitalIds.contains(settlementReport.getHospitalId())
                        || settlementReport.getSettlePrice() <= 0
                        || !pgReports.stream().allMatch(x -> x.getSettlementPrice() >= 0)) {
                    continue;
                }
                expectSettlementReportList.add(settlementReport.getId());
                pgReports.stream()
                        .filter(x -> x.getStatus() == SettlementStatus.EXPECT && x.getSettlementPrice() > 0)
                        .forEach(x -> expectSettlementPgReportList.add(x.getId()));
            }

            LocalDateTime now = LocalDateTime.now();

            if (fixPayAt) {
                // 지급예정, 지급완료인 정산내역에 지급일 지정
                LocalDateTime payAtDateTime = payAt == null ? now : payAt.atTime(LocalTime.MIN);
                int updatedCount = settlementService.fixPayAt(expectSettlementPgReportList, payAtDateTime);

                if (updatedCount != expectSettlementPgReportList.size()) {
                    throw new SettlementException(SettlementCode.SETTLEMENT_PAY_AT_NOT_FIXED);
                }
            }

            List<ExportResult> exportResults = null;
            try {
                String tempPath = applicationProps.getExport().getXlsx().getTempPath();
                exportResults = uploadFileDelegators.stream()
                        .map(d -> d.generateUploadFile(expectSettlementReportList, now))
                        .collect(Collectors.toList());

                List<String> filenames = exportResults.stream()
                        .map(x -> x.getExportedFile().getAbsolutePath())
                        .collect(Collectors.toList());

                String zipFilename = MessageUtils.format("{}/압축본_지급요청용_{}_{}.zip",
                        tempPath,
                        DateUtil.yyyyMMdd(now),
                        DateUtil.HHmmss(now.toLocalTime()));

                return ZipUtils.zip(filenames, zipFilename, true)
                        .orElseThrow(() -> new SettlementException(CommonCode.ERROR));
            } catch (Exception e) {
                log.error("It's failed to generate upload files.", e);
                throw new SettlementException(CommonCode.ERROR);
            } finally {
                if (CollectionUtils.isNotEmpty(exportResults)) {
                    for (ExportResult exportResult : exportResults) {
                        try {
                            exportResult.close();
                        } catch (IOException e) {
                            log.error(e.getMessage(), e);
                        }
                    }
                }
            }
        });
    }

    public SettlementSchedulePageablePayload retrieveSettlementSchedules(SettlementScheduleFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> settlementService.retrieveSettlementSchedules(request));
    }

    public RevisionPayload retrieveSettlementLogs(long settlementReportId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Map<Long, List<SettlementPgReportDto>> pgReports = settlementService.retrieveSettlementPgReportsBySettlementReportIds(
                    List.of(settlementReportId));

            List<RevisionPayload> logs = new ArrayList<>();
            logs.add(revisionService.retrieveRevisions(settlementReportId, SettlementReport.class, false));
            if (MapUtils.isNotEmpty(pgReports)) {
                pgReports.values()
                        .stream()
                        .flatMap(List::stream)
                        .map(pgReport -> revisionService.retrieveRevisions(pgReport.getId(), SettlementPgReport.class, false))
                        .forEach(logs::add);
            }

            List<CommitInfoTemplate> commits = new ArrayList<>();
            Map<Long, AdminShortTemplate> admins = new HashMap<>();
            Map<Long, MemberShortTemplate> members = new HashMap<>();
            for (var log : logs) {
                commits.addAll(log.getCommits());
                admins.putAll(log.getAdmins());
                members.putAll(log.getMembers());
            }

            commits.sort(Comparator.comparing(CommitInfoTemplate::getCommitAt).reversed());

            return RevisionPayload.builder()
                    .commits(commits)
                    .admins(admins)
                    .members(members)
                    .build();
        });
    }

    List<NhnKakaoAlimTalkNotificationContext> makeAlimTalkNotificationContexts(List<SettlementReport> changedSettlementReports) {
        Set<Long> hospitalIds = changedSettlementReports.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        Map<Long, List<HospitalManagementContactContext>> contactContexts = hospitalManagementContactService
                .fetchAllByHospitalIds(HospitalManagementContactType.CALCULATION, hospitalIds)
                .stream()
                .collect(Collectors.groupingBy(HospitalManagementContactContext::getHospitalId));

        Map<String, List<HospitalManagementContactContext>> notificationTargets = new HashMap<>();
        for (var settlementReport : changedSettlementReports) {
            String key = MessageUtils.format("{}-{}-{}-{}",
                    settlementReport.getSettlementYear(),
                    settlementReport.getSettlementMonth(),
                    settlementReport.getSettlementRound(),
                    settlementReport.getStatus());

            List<HospitalManagementContactContext> targets = notificationTargets.computeIfAbsent(key, k -> new ArrayList<>());
            Optional.ofNullable(contactContexts.get(settlementReport.getHospital().getId())).ifPresent(targets::addAll);
        }

        List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = new ArrayList<>();
        for (var key : notificationTargets.keySet()) {
            if (notificationTargets.get(key).isEmpty()) {
                continue;
            }

            String[] parts = key.split("-");
            SettlementStatus status = SettlementStatus.valueOf(parts[3]);
            int year = Integer.parseInt(parts[0]);
            int month = Integer.parseInt(parts[1]);
            SettlementRound round = SettlementRound.valueOf(parts[2]);

            notificationTargets.get(key)
                    .stream()
                    .map(x -> alimTalkTemplateFactory.settlementStatusChange(status, year, month, round, x))
                    .filter(Optional::isPresent)
                    .map(Optional::get)
                    .forEach(alimTalkContexts::add);
        }

        return alimTalkContexts;
    }

    public Optional<File> exportSettlementTicketDetails(SettlementFilterRequest request) {
        Set<SettlementRound> rounds = Optional.ofNullable(request.getSettlementRound())
                .map(EnumSet::copyOf)
                .orElse(null);
        List<SettlementSchedule> settlementSchedules = transactionTemplate.executeMainReadableTransaction(
                () -> settlementService.retrieveSettlementScheduleBySettleAt(request.getSettledAt(), rounds)
                .stream()
                .sorted(Comparator.comparing(SettlementSchedule::getCompleteAt, LocalDateTime::compareTo))
                .collect(Collectors.toList()));

        String tempPath = applicationProps.getExport().getXlsx().getTempPath();
        FileUtils.makeDirs(tempPath);
        String downloadDatetime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String filenameTemplate = tempPath + "/티켓정산_매출상세_{}_{}.xlsx";

        List<File> files = new ArrayList<>();
        for (SettlementSchedule settlementSchedule : settlementSchedules) {
            String key = MessageUtils.format("{}/{}/{}/{}/settlement_ticket_report.xlsx",
                    applicationProps.getMedia().getBucket().getPrivateAccessible().getSettlement().getBucketPath(),
                    settlementSchedule.getSettlementYear(),
                    settlementSchedule.getSettlementMonth(),
                    settlementSchedule.getSettlementRound());

            String thisRound = MessageUtils.format("{}년_{}월{}",
                    settlementSchedule.getSettlementYear(),
                    settlementSchedule.getSettlementMonth(),
                    settlementSchedule.getSettlementRound().getDescription());
            String bucketName = applicationProps.getMedia().getBucket().getPrivateAccessible().getSettlement().getBucketName();
            String downloadFilename = MessageUtils.format(filenameTemplate, thisRound, downloadDatetime);
            s3Template.download(bucketName, key, downloadFilename).ifPresent(files::add);
        }

        if (files.isEmpty()) {
            return Optional.empty();
        } else if (files.size() > 1) {
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy.MM.dd");
            String from = InvokeSupporters.getOrDefaultIfNull(
                    () -> DateUtil.convertFrom(request.getSettledAt().getFrom()).format(dateFormatter),
                    settlementSchedules.get(0).getCompleteAt().format(dateFormatter)
            );
            String to = InvokeSupporters.getOrDefaultIfNull(
                    () -> DateUtil.convertFrom(request.getSettledAt().getTo()).format(dateFormatter),
                    settlementSchedules.get(settlementSchedules.size() - 1).getCompleteAt().format(dateFormatter)
            );
            List<String> paths = files.stream().map(File::getAbsolutePath).collect(Collectors.toList());
            String zipFilename = MessageUtils.format("{}/티켓정산_매출상세_{}~{}_{}.zip", tempPath, from, to, downloadDatetime);
            Optional<File> zipFIle = ZipUtils.zip(paths, zipFilename, true);

            files.forEach(FileUtils::deleteFile);

            return zipFIle;
        } else {
            return Optional.of(files.get(0));
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/VatReportUseCase.java
================================================
package kr.co.yeoshin.admin.settlement.usecase;

import java.io.File;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.stereotype.MainReadableTransactional;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.settlement.controller.model.VatReportFilterRequest;
import kr.co.yeoshin.admin.settlement.controller.model.VatReportType;
import kr.co.yeoshin.admin.settlement.service.VatReportService;
import kr.co.yeoshin.admin.settlement.service.model.VatReportPageablePayload;
import kr.co.yeoshin.common.settlement.type.VatRound;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class VatReportUseCase {

    private final VatReportService vatReportService;
    private final TransactionTemplate transactionTemplate;

    @MainReadableTransactional
    public VatReportPageablePayload retrieveVatReport(VatReportFilterRequest request) {
        long hospitalId = DiagnosticContext.currentHospitalId()
                .orElseThrow(() -> new AuthenticationException(HospitalCode.HOSPITAL_NOT_ACCESSIBLE));
        return transactionTemplate.executeMainReadableTransaction(
                () -> vatReportService.retrieveVatReport(request.toWhereCondition(hospitalId)));
    }

    public File downloadVatExcel(int year, VatRound vatRound, VatReportType vatReportType) {
        return vatReportService.downloadVatExcel(year, vatRound, vatReportType);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/model/LatestFixedPayAtPayload.java
================================================
package kr.co.yeoshin.admin.settlement.usecase.model;

import kr.co.yeoshin.admin.common.model.template.DateTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class LatestFixedPayAtPayload {

    private DateTimeTemplate fixedPayAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/model/SettlementPageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.hospital.entity.HospitalPartnership;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementPageablePayload implements PlusAccessible {

    private List<SettlementReportTemplate> settlementReports;
    private List<SettlementScheduleTemplate> settlementSchedules;
    private Map<Long, HospitalPartnershipTemplate> hospitalPartnership;
    private Map<Long, PaymentNicepayConfigTemplate> paymentNicepayConfig;
    private Map<Long, HospitalShortTemplate> hospitals;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/model/SettlementPayload.java
================================================
package kr.co.yeoshin.admin.settlement.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementPayload implements PlusAccessible {

    private SettlementReportTemplate settlementReport;
    private HospitalPartnershipTemplate hospitalPartnership;
    private PaymentNicepayConfigTemplate paymentNicepayConfig;
    private List<SettlementSalesTemplate> settlementOrders;
    private List<SettlementAdjustTemplate> adjusts;
    private List<DepositTemplate> deposits;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/model/SettlementPgFeePayload.java
================================================
package kr.co.yeoshin.admin.settlement.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SettlementPgFeePayload {

    private List<TicketTemplate> tickets;
    private Map<Long, OrderTemplate> orders;
    private Map<Long, SalesProductVersionTemplate> salesProducts;
    private Map<Long, PgFeeTemplate> pgFees;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/settlement/usecase/model/SettlementSchedulePageablePayload.java
================================================
package kr.co.yeoshin.admin.settlement.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.SettlementScheduleTemplate;
import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Getter
@Builder
public class SettlementSchedulePageablePayload implements SystemAccessible {

    private List<SettlementScheduleTemplate> schedules;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/service/model/AppVersionListPayload.java
================================================
package kr.co.yeoshin.admin.setup.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.AppVersionTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AppVersionListPayload {

    private List<AppVersionTemplate> appVersions;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/service/model/AppVersionPayload.java
================================================
package kr.co.yeoshin.admin.setup.service.model;

import kr.co.yeoshin.admin.common.model.template.AppVersionTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AppVersionPayload {

    AppVersionTemplate appVersion;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/service/model/CpaPriceTagPayload.java
================================================
package kr.co.yeoshin.admin.setup.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.AdminTemplate;
import kr.co.yeoshin.admin.common.model.template.SalesEventConsultationPriceTagTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CpaPriceTagPayload {

    private List<SalesEventConsultationPriceTagTemplate> progressPriceTags;
    private List<SalesEventConsultationPriceTagTemplate> waitPriceTags;
    private List<AdminTemplate> progressUpdaters;
    private List<AdminTemplate> waitUpdaters;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/service/model/SplashCheckPayload.java
================================================
package kr.co.yeoshin.admin.setup.service.model;

import com.fasterxml.jackson.annotation.JsonGetter;
import kr.co.yeoshin.admin.common.model.template.SplashTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SplashCheckPayload {

    private boolean isConflict;
    private SplashTemplate conflictSplash;

    @JsonGetter("isConflict")
    public boolean isConflict() {
        return isConflict;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/service/model/SplashPageablePayload.java
================================================
package kr.co.yeoshin.admin.setup.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.ImageTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.SplashTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SplashPageablePayload {

    private List<SplashTemplate> splashes;
    private Map<Long, ImageTemplate> imagesByMediaStatusId;
    private Map<Long, AdminShortTemplate> adminsByAdminId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/service/model/SplashPayload.java
================================================
package kr.co.yeoshin.admin.setup.service.model;

import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.model.template.ImageTemplate;
import kr.co.yeoshin.admin.common.model.template.SplashTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SplashPayload {

    private SplashTemplate splash;
    private ImageTemplate backgroundImage;
    private ImageTemplate foregroundImage;
    private AdminShortTemplate creator;
    private AdminShortTemplate updater;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/setup/usecase/SetupUseCase.java
================================================
package kr.co.yeoshin.admin.setup.usecase;

import co.elastic.clients.util.TriConsumer;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.auth.service.AuthService;
import kr.co.yeoshin.admin.auth.service.TokenService.TokenType;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.SetupCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.SalesEventConsultationPriceTagTemplate;
import kr.co.yeoshin.admin.common.model.template.SplashTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.TokenProps;
import kr.co.yeoshin.admin.config.props.TokenProps.AdminTokenProps;
import kr.co.yeoshin.admin.config.props.component.PropertyProvider;
import kr.co.yeoshin.admin.exception.SetupException;
import kr.co.yeoshin.admin.media.service.MediaService;
import kr.co.yeoshin.admin.media.service.model.MediaRegisterStatusMutation;
import kr.co.yeoshin.admin.product.service.SalesEventConsultationService;
import kr.co.yeoshin.admin.setup.controller.model.*;
import kr.co.yeoshin.admin.setup.controller.model.TokenExpireTimeUpdateRequest.Channel;
import kr.co.yeoshin.admin.setup.service.SetupService;
import kr.co.yeoshin.admin.setup.service.model.*;
import kr.co.yeoshin.admin.utils.ImmutableSet;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationPriceTag;
import kr.co.yeoshin.common.type.DeviceType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.utils.UUIDUtils;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.io.FilenameUtils;

@UseCase
@RequiredArgsConstructor
public class SetupUseCase {

    private final SetupService setupService;
    private final MediaService mediaService;
    private final SalesEventConsultationService consultationService;
    private final TransactionTemplate transactionTemplate;
    private final SalesEventConsultationService salesEventConsultationService;
    private final AdminService adminService;
    private final AuthService authService;
    private final PropertyProvider propertyProvider;
    private final PayloadFactory payloadFactory;


    public AppVersionListPayload retrieveAppVersions(DeviceType deviceType) {
        return transactionTemplate.executeMainReadableTransaction(() -> setupService.retrieveAppVersions(deviceType));
    }

    public AppVersionPayload registerAppVersion(DeviceType deviceType, AppVersionMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> setupService.registerAppVersion(deviceType, request));
    }

    public BoolPayload removeAppVersion(DeviceType deviceType, long appVersionId) {
        return transactionTemplate.executeMainWritableTransaction(() -> setupService.removeAppVersion(deviceType, appVersionId));
    }

    public SplashPageablePayload retrieveSplashes(SplashFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> setupService.retrieveSplashes(request.toWhereCondition()));
    }

    public SplashPayload retrieveSplash(long splashId) {
        return transactionTemplate.executeMainReadableTransaction(() -> setupService.retrieveSplash(splashId));
    }

    public SplashPayload registerSplash(SplashMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SplashPayload splashPayload = setupService.registerSplash(request, getMediaStatuses(request));

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.SPLASH)
                    .appliedMediaFileNames(Collections.emptySet())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(request.getBackgroundImage())
                            .add(request.getForegroundImage())
                            .build())
                    .build());

            return splashPayload;
        });
    }

    public SplashPayload modifySplash(long splashId, SplashMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SplashPayload splashPayload = setupService.retrieveSplash(splashId);
            SplashTemplate splashTemplate = splashPayload.getSplash();

            SplashPayload modifiedSplashPayload = setupService.updateSplash(splashId, request, getMediaStatuses(request));
            SplashTemplate modifiedSplashTemplate = modifiedSplashPayload.getSplash();

            mediaService.modifyRegisterYnStatuses(MediaRegisterStatusMutation.builder()
                    .media(MediaType.IMAGE)
                    .accessible(MediaAccessibleType.PUBLIC)
                    .domain(MediaDomainType.SPLASH)
                    .appliedMediaFileNames(ImmutableSet.<String>builder()
                            .add(FilenameUtils.getName(splashTemplate.getBackgroundImage()))
                            .add(FilenameUtils.getName(splashTemplate.getForegroundImage()))
                            .build())
                    .newMediaFileNames(ImmutableSet.<String>builder()
                            .add(FilenameUtils.getName(modifiedSplashTemplate.getBackgroundImage()))
                            .add(FilenameUtils.getName(modifiedSplashTemplate.getForegroundImage()))
                            .build())
                    .build());

            return modifiedSplashPayload;
        });
    }

    public SplashCheckPayload checkPeriodConflict(SplashMutationRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> setupService.checkPeriodConflictSplash(request)
        );
    }

    private Map<String, MediaStatus> getMediaStatuses(SplashMutationRequest request) {
        List<String> imageNames = List.of(request.getBackgroundImage(), request.getForegroundImage());
        List<MediaStatus> mediaStatuses = mediaService.findStatusesByFileNames(imageNames);

        if (CollectionUtils.size(imageNames) != mediaStatuses.size()) {
            throw new SetupException(SetupCode.SETUP_SPLASH_IMAGE_NAME_VALID_NOT);
        }

        return mediaStatuses.stream()
                .collect(Collectors.toMap(MediaStatus::getFileName, Function.identity(), (a, b) -> a));
    }


    public CpaPriceTagPayload retrieveCpaPriceTags() {
        return transactionTemplate.executeMainReadableTransaction(() -> {

            List<SalesEventConsultationPriceTag> progressPriceTags = salesEventConsultationService.findConsultationPriceTagsByStatus(
                    ProgressStatus.PROGRESS);
            List<SalesEventConsultationPriceTag> waitPriceTags = salesEventConsultationService.findConsultationPriceTagsByStatus(
                    ProgressStatus.WAIT);

            List<SalesEventConsultationPriceTagTemplate> progressPriceTagTemplates = new ArrayList<>();
            List<SalesEventConsultationPriceTagTemplate> waitPriceTagTemplates = new ArrayList<>();

            List<Long> progressAdminIds = new ArrayList<>();
            List<Long> waitAdminIds = new ArrayList<>();

            for (var tag : progressPriceTags) {
                progressPriceTagTemplates.add(payloadFactory.salesEventConsultationPriceTagTemplate(tag));
                progressAdminIds.add(tag.getUpdater().getId());
            }

            for (var tag : waitPriceTags) {
                waitPriceTagTemplates.add(payloadFactory.salesEventConsultationPriceTagTemplate(tag));
                waitAdminIds.add(tag.getUpdater().getId());
            }

            return CpaPriceTagPayload.builder()
                    .progressPriceTags(
                            progressPriceTags.stream().map(payloadFactory::salesEventConsultationPriceTagTemplate).collect(
                                    Collectors.toList()))
                    .waitPriceTags(waitPriceTags.stream().map(payloadFactory::salesEventConsultationPriceTagTemplate)
                            .collect(Collectors.toList()))
                    .progressUpdaters(adminService.findAllAdminsByAdminIds(progressAdminIds))
                    .waitUpdaters(adminService.findAllAdminsByAdminIds(waitAdminIds))
                    .build();
        });
    }

    public BoolPayload modifyCpaPriceTags(CpaPriceTagsMutationRequest request) {
        boolean isImmediateApply = request.isImmediateApply();
        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            List<SalesEventConsultationPriceTag> savedWaitPriceTags = salesEventConsultationService.findConsultationPriceTagsByStatus(
                    ProgressStatus.WAIT);

            if (CollectionUtils.isNotEmpty(savedWaitPriceTags)) {
                salesEventConsultationService.deleteConsultationPriceTags(savedWaitPriceTags);
            }

            List<SalesEventConsultationPriceTag> priceTags = request.getPriceTags().stream()
                    .map(x -> SalesEventConsultationPriceTag.builder()
                            .salesProductPriceRangeMinKo(x.getSalesProductPriceRangeMin())
                            .salesProductPriceRangeMaxKo(x.getSalesProductPriceRangeMax())
                            .salesProductPriceRangeMinEn(x.getSalesProductPriceRangeMin())
                            .salesProductPriceRangeMaxEn(x.getSalesProductPriceRangeMax())
                            .salesProductPriceRangeMinZh(x.getSalesProductPriceRangeMin())
                            .salesProductPriceRangeMaxZh(x.getSalesProductPriceRangeMax())
                            .salesProductPriceRangeMinJa(x.getSalesProductPriceRangeMin())
                            .salesProductPriceRangeMaxJa(x.getSalesProductPriceRangeMax())
                            .priceKo(x.getPrice())
                            .priceEn(x.getPrice())
                            .priceZh(x.getPrice())
                            .priceJa(x.getPrice())
                            .status(isImmediateApply ? ProgressStatus.PROGRESS : ProgressStatus.WAIT)
                            .build())
                    .collect(Collectors.toList());

            if (isImmediateApply) {
                salesEventConsultationService.findConsultationPriceTagsByStatus(ProgressStatus.PROGRESS)
                        .forEach(x -> x.changeStatus(ProgressStatus.STOP));
            }

            salesEventConsultationService.saveConsultationPriceTags(priceTags);

            return true;
        });

        return BoolPayload.builder().result(result).build();
    }

    public BoolPayload changeTokenExpireTime(TokenExpireTimeUpdateRequest request) {
        TriConsumer<AdminTokenProps, TokenType, Long> setValue = (prop, type, value) -> {
            switch (type) {
                case ACCESS_TOKEN:
                    prop.setAccessTokenExpiresSeconds(value);
                    break;
                case REFRESH_TOKEN:
                    prop.setRefreshTokenExpiresSeconds(value);
                    break;
            }
        };

        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            TokenProps currentTokenProps = propertyProvider.getTokenProps();
            TokenProps copy = currentTokenProps.copy();

            EnumSet<Channel> forceRefreshTargets = EnumSet.noneOf(Channel.class);

            for (TokenExpireTimeUpdateRequest.Request r : request.getRequests()) {
                switch (r.getChannel()) {
                    case SYSTEM:
                        setValue.accept(copy.getSystemAdmin(), r.getTokenType(), r.getExpiresSeconds());
                        Optional.of(r.isForceRefresh()).filter(x -> x)
                                .ifPresent(x -> forceRefreshTargets.add(Channel.SYSTEM));
                        break;
                    case PLUS:
                        setValue.accept(copy.getPlusAdmin(), r.getTokenType(), r.getExpiresSeconds());
                        Optional.of(r.isForceRefresh()).filter(x -> x)
                                .ifPresent(x -> forceRefreshTargets.add(Channel.PLUS));
                        break;
                    case THIRD_PARTY:
                        setValue.accept(copy.getThirdParty(), r.getTokenType(), r.getExpiresSeconds());
                        Optional.of(r.isForceRefresh()).filter(x -> x)
                                .ifPresent(x -> forceRefreshTargets.add(Channel.THIRD_PARTY));
                        break;
                }
            }

            TokenProps updated = propertyProvider.updateTokenProps(copy);

            for (Channel c : forceRefreshTargets) {
                if (c == Channel.SYSTEM && !updated.getSystemAdmin().equals(currentTokenProps.getSystemAdmin())) {
                    authService.modifyAllAdminSignature(EnumSet.of(LevelGroup.SYSTEM), UUIDUtils.shortUUID());
                } else if (c == Channel.PLUS && !updated.getPlusAdmin().equals(currentTokenProps.getPlusAdmin())) {
                    authService.modifyAllAdminSignature(EnumSet.of(LevelGroup.PLUS_ADMIN), UUIDUtils.shortUUID());
                } else if (c == Channel.THIRD_PARTY && !updated.getThirdParty().equals(currentTokenProps.getThirdParty())) {
                    // ignore
                }
            }

            return true;
        });

        return BoolPayload.of(result);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/SystemCashReportUseCase.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashReportTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.systemcash.service.SystemCashReportService;
import kr.co.yeoshin.admin.systemcash.usecase.model.SystemCashReportPayload;
import kr.co.yeoshin.common.payment.type.SystemCashType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class SystemCashReportUseCase {

    private final SystemCashReportService systemCashReportService;
    private final TransactionTemplate transactionTemplate;

    public SystemCashReportPayload retrieveSystemCashDailyReport(LocalDate to, Set<SystemCashType> types) {
        List<SystemCashReportTemplate> dailyReportTemplates = transactionTemplate.executeMainReadableTransaction(() -> {
            List<SystemCashReportTemplate> dailyReports = systemCashReportService.retrieveSystemCashDailyReports(to, types)
                    .stream()
                    .map(SystemCashReportTemplate::of)
                    .collect(Collectors.toList());

            var compareSet = CollectionUtils.isEmpty(types) ? SystemCashType.allTypes() : types;
            if (dailyReports.size() != compareSet.size()) {
                Set<SystemCashType> existingTypes = dailyReports.stream()
                        .map(SystemCashReportTemplate::getCashType)
                        .collect(Collectors.toSet());
                Set<SystemCashType> missingTypes = compareSet.stream()
                        .filter(x -> !existingTypes.contains(x))
                        .collect(Collectors.toSet());

                missingTypes.stream()
                        .map(type ->
                            systemCashReportService.retrieveLatestSystemCashDailyReport(to, type)
                                    .map(SystemCashReportTemplate::of)
                                    .orElseGet(() -> SystemCashReportTemplate.empty(type))
                        )
                        .forEach(dailyReports::add);
            }

            return dailyReports;
        });

        return SystemCashReportPayload.builder()
                .at(to)
                .reports(dailyReportTemplates.stream()
                        .collect(Collectors.toMap(SystemCashReportTemplate::getCashType, Function.identity())))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/SystemCashUseCase.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase;

import java.time.LocalDateTime;
import java.util.Set;
import kr.co.yeoshin.admin.common.Profile;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.SystemCashCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.SystemCashRefundStatusTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.config.props.NicepayProps;
import kr.co.yeoshin.admin.exception.MemberException;
import kr.co.yeoshin.admin.exception.SystemCashException;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.order.service.RefundRemittanceContainer;
import kr.co.yeoshin.admin.payment.service.RemittanceService;
import kr.co.yeoshin.admin.payment.service.model.MerchantInfoContext;
import kr.co.yeoshin.admin.systemcash.controller.model.SystemCashFilterRequest;
import kr.co.yeoshin.admin.systemcash.controller.model.SystemCashRefundAccountMutationRequest;
import kr.co.yeoshin.admin.systemcash.controller.model.SystemCashRefundFilterRequest;
import kr.co.yeoshin.admin.systemcash.service.SystemCashService;
import kr.co.yeoshin.admin.systemcash.service.model.SystemCashRefundContext;
import kr.co.yeoshin.admin.systemcash.usecase.model.*;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.payment.entity.PaymentNicepayRemittance;
import kr.co.yeoshin.common.payment.entity.SystemCash;
import kr.co.yeoshin.common.payment.entity.SystemCashRefundAccount;
import kr.co.yeoshin.common.payment.entity.SystemCashRefundStatus;
import kr.co.yeoshin.common.payment.type.*;
import kr.co.yeoshin.common.type.DomainType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.core.env.Environment;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class SystemCashUseCase {

    private final SystemCashService systemCashService;
    private final RemittanceService remittanceService;
    private final MemberService memberService;
    private final TransactionTemplate transactionTemplate;
    private final Environment environment;
    private final ApplicationProps applicationProps;
    private final PayloadFactory payloadFactory;

    public SystemCashPageablePayload retrieveSystemCashes(SystemCashFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> systemCashService.retrieveSystemCashes(request));
    }

    public SystemCashRefundStatusPageablePayload retrieveSystemCashRefundSatuses(SystemCashRefundFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> systemCashService.retrieveSystemCashRefundStatues(request));
    }

    public SystemCashRefundStatusPayload completeSystemCashRefundStatus(long id) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            SystemCashRefundStatus systemCashRefundStatus = systemCashService.retrieveSystemCashRefundStatus(id);

            if (systemCashRefundStatus.getStatus() != RefundStatus.WAIT) {
                throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_CAN_NOT_COMPLETE);
            }

            return SystemCashRefundStatusPayload.builder()
                    .systemCashRefundStatus(refundByBankAccount(systemCashRefundStatus))
                    .build();
        });
    }

    public BoolPayload refundAccount(long memberId, SystemCashRefundAccountMutationRequest request) {
        Member member = memberService.findMemberByMemberId(memberId)
                .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));
        if (!StringUtils.equalsIgnoreCase(request.getAccountHolder(), member.getName())) {
            log.info("system cash refund account member name({}/{}-{}) is not matched", request.getAccountHolder(),
                    member.getId(), member.getName());
            throw new SystemCashException(SystemCashCode.SYSTEM_CASH_NOT_MATCH_ACCOUNT_HOLDER);
        }

        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            systemCashService.findAllRefundAccounts(memberId).stream()
                    .findFirst()
                    .ifPresentOrElse(account -> account.changeAccount(request.getAccount())
                                    .changeEncryptAccount(request.getAccount())
                                    .changeAccountHolder(request.getAccountHolder())
                                    .changeBank(request.getBank()),
                            () -> systemCashService.registerRefundAccount(member, request));

            return true;
        });

        return BoolPayload.of(result);
    }

    private SystemCashRefundStatusTemplate refundByBankAccount(SystemCashRefundStatus systemCashRefundStatus) {
        String profile = Profile.getActiveProfile(environment);
        if (!Set.of(Profile.STAGE.getValue(), Profile.PROD.getValue()).contains(profile)) {
            systemCashRefundStatus.changeStatus(RefundStatus.ADMIN_COMPLETE)
                    .changeCompleteAt(LocalDateTime.now());

            return payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus);
        }

        if (systemCashRefundStatus.getRefundCash() == 0) {
            return payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus);
        }

        // 환불 계좌 정보 체크
        SystemCashRefundAccount account = systemCashService.findAllRefundAccounts(systemCashRefundStatus.getMember().getId())
                .stream()
                .findFirst().orElseThrow(
                        () -> new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_REQUIRE_BANK_ACCOUNT));

        RefundRemittanceContainer refundRemittanceContainer = RefundRemittanceContainer.builder()
                .refType(DomainType.SYSTEM_CASH_MONEY)
                .refId(systemCashRefundStatus.getId())
                .bankType(account.getBank())
                .accountNumber(account.getAccount())
                .accountHolder(account.getAccountHolder())
                .refundAmount(systemCashRefundStatus.getRefundCash())
                .at(systemCashRefundStatus.getCreated())
                .build();

        NicepayProps nicepayProps = applicationProps.getPayment().getNicePay();
        MerchantInfoContext merchantInfoContext = MerchantInfoContext.builder()
                .merchantId(nicepayProps.getRemittanceCashRefundMerchantId())
                .merchantKey(nicepayProps.getRemittanceCashRefundMerchantKey())
                .build();

        int balance = remittanceService.retrieveBalance(systemCashRefundStatus.getId(), refundRemittanceContainer.getAt(),
                merchantInfoContext);
        if (balance < refundRemittanceContainer.getRefundAmount()) {
            // 송금 잔액 부족
            systemCashRefundStatus.changeStatus(RefundStatus.WAIT)
                    .changeReason(RefundStatusReasonType.REMITTANCE_ACCOUNT_BALANCE_INSUFFICIENT);

            return payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus);
        }

        PaymentNicepayRemittance remittance = remittanceService.remit(refundRemittanceContainer, merchantInfoContext);
        if (remittance.getResult() == NicepayRemittanceResultType.RECEIVING_RESULT_DELAYED) {
            // TODO 이체 송금 실패했을 때 재요청 시 해당 API 사용 고려 되어야 할 듯
            NicepayRemittanceResultType result =
                    remittanceService.retrieveRemittanceResult(remittance.getTransactionId(), refundRemittanceContainer.getAt(),
                            merchantInfoContext);
            remittance.changeRemittanceResult(result);
            systemCashRefundStatus.changeStatus(RefundStatus.DELAY)
                    .changeReason(RefundStatusReasonType.REMITTANCE_ACCOUNT_BALANCE_INSUFFICIENT);

            return payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus);
        }

        if (remittance.getResult() == NicepayRemittanceResultType.INCORRECT_ACCOUNT_HOLDER
                || remittance.getResult() == NicepayRemittanceResultType.INCORRECT_ACCOUNT_NUMBER) {
            // 계좌 정보 불일치
            throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_INVALID_BANK_ACCOUNT);
        } else if (remittance.getResult() == NicepayRemittanceResultType.LACK_OF_BALANCE) {
            // 송금 잔액 부족
            systemCashRefundStatus.changeStatus(RefundStatus.WAIT)
                    .changeReason(RefundStatusReasonType.REMITTANCE_ACCOUNT_BALANCE_INSUFFICIENT);
            return payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus);
        } else if (remittance.getResult() != NicepayRemittanceResultType.SUCCESS) {
            // 그냥 오류
            throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_BY_BANK_ACCOUNT_FAILURE);
        }

        return payloadFactory.systemCashRefundStatusTemplate(
                systemCashRefundStatus.getStatus() == RefundStatus.WAIT ? systemCashRefundStatus.changeStatus(
                        RefundStatus.ADMIN_COMPLETE).changeCompleteAt(LocalDateTime.now()) :
                        systemCashRefundStatus.changeStatus(RefundStatus.COMPLETE).changeCompleteAt(LocalDateTime.now()));
    }

    public MemberSystemCashRefundPayload refundMemberSystemCash(long memberId, boolean dryRun) {
        SystemCashRefundAccount refundAccount = systemCashService.findAllRefundAccounts(memberId).stream().findFirst()
                .orElseThrow(() -> new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_REQUIRE_BANK_ACCOUNT));

        SystemCashRefundSummary refundSummary = systemCashService.refundSummary(memberId);

        if (dryRun) {
            return MemberSystemCashRefundPayload.builder()
                    .systemCashRefundSummary(refundSummary)
                    .systemCashRefundAccount(payloadFactory.systemCashRefundAccountTemplate(refundAccount))
                    .build();
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (refundSummary.getRefundableSystemCash() <= 0) {
                throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUNDABLE_PRICE_ZERO);
            }

            SystemCash systemCash = systemCashService.refundCash(memberId, SystemCashRefundContext.builder()
                            .action(SystemCashAction.MONEY)
                            .cash(refundSummary.getRefundableSystemCash())
                            .publishType(PublishType.CS)
                            .type(SystemCashStatus.MONEY)
                            .bank(refundAccount.getBank())
                            .accountHolder(refundAccount.getAccountHolder())
                            .account(refundAccount.getAccount())
                            .build())
                    .getSystemCash();

            SystemCashRefundStatus systemCashRefundStatus = systemCashService.findSystemCashRefundStatusBySystemCashId(
                            systemCash.getId())
                    .orElseThrow(() -> new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_NOT_EXIST));

            SystemCashRefundStatusTemplate systemCashRefundStatusTemplate = refundByBankAccount(systemCashRefundStatus);

            return MemberSystemCashRefundPayload.builder()
                    .systemCashRefundSummary(refundSummary)
                    .systemCashRefundAccount(payloadFactory.systemCashRefundAccountTemplate(refundAccount))
                    .systemCash(payloadFactory.systemCashTemplate(systemCash))
                    .systemCashRefundStatus(systemCashRefundStatusTemplate)
                    .isRemitted(systemCashRefundStatusTemplate.getStatus().isRemitted())
                    .build();
        });

    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/SystemCashVoucherUseCase.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.common.Constant.Entity;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.SystemCashCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.SystemCashException;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.systemcash.controller.model.*;
import kr.co.yeoshin.admin.systemcash.service.SystemCashService;
import kr.co.yeoshin.admin.systemcash.service.SystemCashVoucherService;
import kr.co.yeoshin.admin.systemcash.service.model.VoucherDryRunResult;
import kr.co.yeoshin.admin.systemcash.usecase.model.*;
import kr.co.yeoshin.admin.systemcash.usecase.model.SystemCashVoucherDryRunPayload.DryRunResultTemplate;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.payment.entity.*;
import kr.co.yeoshin.common.payment.model.SystemCashVoucherStat;
import kr.co.yeoshin.common.payment.type.SystemCashVoucherCodeGenerationType;
import kr.co.yeoshin.common.type.DomainType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class SystemCashVoucherUseCase {

    private final SystemCashVoucherService systemCashVoucherService;
    private final AdminService adminService;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;
    private final SystemCashService systemCashService;
    private final MemberService memberService;

    public SystemCashVoucherConfigPageablePayload voucherConfigs(SystemCashVoucherConfigFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<SystemCashVoucherConfig> configs =
                    systemCashVoucherService.retrieveSystemCashConfigs(request.toWhereCondition());

            Set<Long> configIds = configs.stream()
                    .map(SystemCashVoucherConfig::getId)
                    .collect(Collectors.toSet());

            Map<Long, SystemCashVoucherStat> statsByConfigId =
                    systemCashVoucherService.retrieveSystemCashVoucherStats(configIds)
                            .stream()
                            .collect(Collectors.toMap(SystemCashVoucherStat::getSystemCashVoucherConfigId, Function.identity()));

            List<SystemCashVoucherExtraBenefit> extraBenefits =
                    systemCashVoucherService.retrieveSystemCashVoucherExtraBenefits(configIds);

            List<SystemCashVoucherPartnership> partnerships =
                    systemCashVoucherService.retrieveSystemCashVoucherPartnerships(configs.stream()
                            .map(SystemCashVoucherConfig::getSystemCashVoucherPartnershipId)
                            .filter(it -> !Objects.equals(it, Entity.NOT_EXIST_ID))
                            .collect(Collectors.toSet()));

            List<AdminShortTemplate> admins = adminService.retrieveAdmins(Stream.concat(
                            configs.stream().map(it -> it.getCreator().getId()),
                            configs.stream().map(it -> it.getUpdater().getId()))
                    .collect(Collectors.toSet()));

            return SystemCashVoucherConfigPageablePayload.builder()
                    .systemCashVoucherConfigs(configs.getContent().stream()
                            .map(payloadFactory::systemCashVoucherConfigTemplate)
                            .collect(Collectors.toList()))
                    .statsBySystemCashVoucherConfigId(configs.stream()
                            .map(it -> payloadFactory.systemCashVoucherStatTemplate(
                                    statsByConfigId.getOrDefault(it.getId(), SystemCashVoucherStat.empty(it.getId())), it))
                            .collect(Collectors.toMap(SystemCashVoucherStatTemplate::getSystemCashVoucherConfigId,
                                    Function.identity())))
                    .extraBenefitsBySystemCashVoucherConfigId(extraBenefits.stream()
                            .map(payloadFactory::systemCashVoucherExtraBenefitTemplate)
                            .collect(Collectors.groupingBy(SystemCashVoucherExtraBenefitTemplate::getSystemCashVoucherConfigId)))
                    .partnerships(partnerships.stream()
                            .map(payloadFactory::systemCashVoucherPartnershipTemplate)
                            .collect(Collectors.toMap(SystemCashVoucherPartnershipTemplate::getId, Function.identity())))
                    .admins(admins.stream()
                            .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity())))
                    .pageable(payloadFactory.pageableTemplate(configs))
                    .build();
        });
    }

    public SystemCashVoucherConfigPayload registerVoucherConfig(SystemCashVoucherConfigMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!request.isValid()) {
                throw new SystemCashException(CommonCode.BAD_REQUEST);
            }

            SystemCashVoucherConfig config = systemCashVoucherService.registerVoucherConfig(request);

            systemCashVoucherService.upsertExtraBenefits(config.getId(), request.getExtraBenefits());

            if (request.getCodeGenerationType() == SystemCashVoucherCodeGenerationType.AUTO) {
                systemCashVoucherService.registerVouchers(config.getId(), request.getCodeCount(), request.getCodeLength());
                return retrieveVoucherConfig(config.getId());
            }

            VoucherDryRunResult result =
                    systemCashVoucherService.registerCodesDryRun(request.getCodes(), request.getCodeLength());

            if (!result.isSuccess()) {
                throw new SystemCashException(CommonCode.BAD_REQUEST);
            }

            systemCashVoucherService.registerVouchers(config.getId(), result.getSuccessCodes());

            return retrieveVoucherConfig(config.getId());
        });
    }

    public BoolPayload modifyVoucherConfig(long systemCashVoucherConfigId, SystemCashVoucherConfigMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!request.isValid()) {
                throw new SystemCashException(CommonCode.BAD_REQUEST);
            }

            SystemCashVoucherConfig config = systemCashVoucherService.retrieveVoucherConfig(systemCashVoucherConfigId)
                    .orElseThrow(() -> new SystemCashException(SystemCashCode.SYSTEM_CASH_VOUCHER_CONFIG_NOT_EXIST));

            SystemCashVoucherConfig modified = systemCashVoucherService.modifyVoucherConfig(config.getId(), request);

            systemCashVoucherService.upsertExtraBenefits(modified.getId(), request.getExtraBenefits());

            return BoolPayload.of(true);
        });
    }

    public BoolPayload removeVoucherConfig(long systemCashVoucherConfigId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            List<SystemCashVoucherExtraBenefit> benefits =
                    systemCashVoucherService.retrieveSystemCashVoucherExtraBenefits(Set.of(systemCashVoucherConfigId));

            boolean result = systemCashVoucherService.removeVoucherConfig(systemCashVoucherConfigId);

            if (result) {
                systemCashVoucherService.removeExtraBenefits(benefits.stream()
                        .map(SystemCashVoucherExtraBenefit::getId)
                        .collect(Collectors.toSet()));
            }

            return BoolPayload.of(result);
        });
    }

    public SystemCashVoucherConfigPayload retrieveVoucherConfig(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            SystemCashVoucherConfig config = systemCashVoucherService.retrieveVoucherConfig(id)
                    .orElseThrow(() -> new SystemCashException(SystemCashCode.SYSTEM_CASH_VOUCHER_CONFIG_NOT_EXIST));

            SystemCashVoucherStat stat = systemCashVoucherService.retrieveSystemCashVoucherStats(Set.of(config.getId()))
                    .stream()
                    .findFirst()
                    .orElse(SystemCashVoucherStat.empty(config.getId()));

            List<SystemCashVoucherExtraBenefit> benefits =
                    systemCashVoucherService.retrieveSystemCashVoucherExtraBenefits(Set.of(config.getId()));

            SystemCashVoucherPartnershipTemplate partnership = Optional.ofNullable(config.getSystemCashVoucherPartnershipId())
                    .flatMap(systemCashVoucherService::retrieveSystemCashVoucherPartnership)
                    .map(payloadFactory::systemCashVoucherPartnershipTemplate)
                    .orElse(null);

            return SystemCashVoucherConfigPayload.builder()
                    .systemCashVoucherConfig(payloadFactory.systemCashVoucherConfigTemplate(config))
                    .stat(payloadFactory.systemCashVoucherStatTemplate(stat, config))
                    .extraBenefits(benefits.stream()
                            .map(payloadFactory::systemCashVoucherExtraBenefitTemplate)
                            .collect(Collectors.toList()))
                    .partnership(partnership)
                    .admins(Stream.of(config.getCreator(), config.getUpdater())
                            .collect(Collectors.toMap(Admin::getId, payloadFactory::adminShortTemplate, (a, b) -> a)))
                    .build();
        });
    }

    public SystemCashVoucherPageablePayload retrieveSystemCashVouchers(SystemCashVoucherFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Page<SystemCashVoucher> vouchers =
                    systemCashVoucherService.retrieveSystemCashVouchers(request.toWhereCondition());

            List<SystemCashVoucherConfig> systemCashVoucherConfigs =
                    systemCashVoucherService.retrieveVoucherConfigs(vouchers.stream()
                            .map(it -> it.getSystemCashVoucherConfig().getId())
                            .collect(Collectors.toSet()));

            Map<Long, SystemCashVoucherConfig> systemCashVoucherConfigsById =
                    systemCashVoucherConfigs.stream()
                            .collect(Collectors.toMap(SystemCashVoucherConfig::getId, Function.identity()));

            List<SystemCashVoucherPartnership> partnerships =
                    systemCashVoucherService.retrieveSystemCashVoucherPartnerships(systemCashVoucherConfigs.stream()
                            .map(SystemCashVoucherConfig::getSystemCashVoucherPartnershipId)
                            .filter(Objects::nonNull)
                            .collect(Collectors.toSet()));

            List<SystemCash> cashes = systemCashService.retrieveSystemCashes(DomainType.SYSTEM_CASH_VOUCHER, vouchers.stream()
                    .map(SystemCashVoucher::getId)
                    .collect(Collectors.toSet()));

            List<MemberTemplate> members =
                    memberService.retrieveMembers(cashes.stream()
                            .map(it -> it.getMember().getId())
                            .collect(Collectors.toSet()));

            return SystemCashVoucherPageablePayload.builder()
                    .systemCashVouchers(vouchers.getContent()
                            .stream()
                            .filter(it -> systemCashVoucherConfigsById.containsKey(it.getSystemCashVoucherConfig().getId()))
                            .map(it -> payloadFactory.systemCashVoucherTemplate(
                                    systemCashVoucherConfigsById.get(it.getSystemCashVoucherConfig().getId()),
                                    it))
                            .collect(Collectors.toList()))
                    .systemCashVoucherConfigs(systemCashVoucherConfigs.stream()
                            .map(payloadFactory::systemCashVoucherConfigTemplate)
                            .collect(Collectors.toMap(SystemCashVoucherConfigTemplate::getId, Function.identity())))
                    .systemCashVoucherPartnerships(partnerships.stream()
                            .map(payloadFactory::systemCashVoucherPartnershipTemplate)
                            .collect(Collectors.toMap(SystemCashVoucherPartnershipTemplate::getId, Function.identity())))
                    .systemCashesByVoucherId(cashes.stream()
                            .collect(Collectors.toMap(SystemCash::getRefId, payloadFactory::systemCashTemplate)))
                    .members(members.stream()
                            .collect(Collectors.toMap(MemberTemplate::getId, MemberTemplate::toShortTemplate)))
                    .pageable(payloadFactory.pageableTemplate(vouchers))
                    .build();
        });
    }

    public BoolPayload modifyStatus(long voucherConfigId, SystemCashVoucherConfigStatusMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            systemCashVoucherService.modifyVoucherConfig(voucherConfigId, request);

            return BoolPayload.of(true);
        });
    }


    public BoolPayload modifyVoucherExpiration(long voucherConfigId, SystemCashVoucherConfigExpirationMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!request.isValid()) {
                throw new SystemCashException(CommonCode.BAD_REQUEST);
            }

            systemCashVoucherService.modifyVoucherExpiration(voucherConfigId, request);

            return BoolPayload.of(true);
        });
    }

    public BoolPayload modifyVoucherStatus(SystemCashVoucherStatusMutationRequest request) {
        if (!request.isValid()) {
            throw new SystemCashException(CommonCode.BAD_REQUEST);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            systemCashVoucherService.modifyVoucherStatus(
                    request.getSystemCashVoucherConfigId(),
                    request.getSystemCashVoucherCodes(),
                    request.getSystemCashVoucherStatus());

            return BoolPayload.of(true);
        });
    }

    public SystemCashVoucherPartnershipsPayload retrievePartnerships() {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<SystemCashVoucherPartnership> partnerships = systemCashVoucherService.retrieveSystemCashVoucherPartnerships();

            return SystemCashVoucherPartnershipsPayload.builder()
                    .systemCashVoucherPartnerships(partnerships.stream()
                            .map(payloadFactory::systemCashVoucherPartnershipTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public SystemCashVoucherDryRunPayload registerCodesDryRun(SystemCashVoucherCodeDryRunRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            VoucherDryRunResult result =
                    systemCashVoucherService.registerCodesDryRun(request.getCodes(), request.getCodeLength());

            return SystemCashVoucherDryRunPayload.builder()
                    .result(DryRunResultTemplate.builder()
                            .successCodes(result.getSuccessCodes())
                            .failReasonsByCode(result.getFailCodes())
                            .build())
                    .build();
        });
    }

    public BoolPayload registerCodes(SystemCashVoucherCodeRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            if (!request.isValid()) {
                throw new SystemCashException(CommonCode.BAD_REQUEST);
            }

            SystemCashVoucherConfig config =
                    systemCashVoucherService.retrieveVoucherConfig(request.getSystemCashVoucherConfigId())
                            .orElseThrow(() -> new SystemCashException(SystemCashCode.SYSTEM_CASH_VOUCHER_CONFIG_NOT_EXIST));

            if (request.getCodeGenerationType() == SystemCashVoucherCodeGenerationType.AUTO) {
                systemCashVoucherService.registerVouchers(config.getId(), request.getCodeCount(), request.getCodeLength());
                return BoolPayload.of(true);
            }

            VoucherDryRunResult result =
                    systemCashVoucherService.registerCodesDryRun(request.getCodes(), request.getCodeLength());
            if (!result.isSuccess()) {
                throw new SystemCashException(CommonCode.BAD_REQUEST);
            }

            systemCashVoucherService.registerVouchers(config.getId(), result.getSuccessCodes());

            return BoolPayload.of(true);
        });
    }

    public BoolPayload modifySettlement(SystemCashVoucherSettlementRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            systemCashVoucherService.modifyVoucherSettlement(request);

            return BoolPayload.of(true);
        });
    }

    public SystemCashVoucherDryRunPayload modifySettlementDryRun(SystemCashVoucherSettlementDryRunRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            VoucherDryRunResult result = systemCashVoucherService.modifyVoucherSettlementDryRun(request);

            return SystemCashVoucherDryRunPayload.builder()
                    .result(DryRunResultTemplate.builder()
                            .successCodes(result.getSuccessCodes())
                            .failReasonsByCode(result.getFailCodes())
                            .build())
                    .build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/MemberSystemCashRefundPayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import kr.co.yeoshin.admin.common.model.template.SystemCashRefundAccountTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashRefundStatusTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberSystemCashRefundPayload {

    private SystemCashRefundAccountTemplate systemCashRefundAccount;
    private SystemCashRefundSummary systemCashRefundSummary;
    private SystemCashTemplate systemCash;
    private SystemCashRefundStatusTemplate systemCashRefundStatus;
    @JsonProperty("isRemitted")
    @Builder.Default
    private boolean isRemitted = false;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashPageablePayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashPageablePayload {

    private List<SystemCashTemplate> systemCashes;
    private Map<Long, MemberShortTemplate> members;
    private Map<Long, OrderTemplate> orders;
    private Map<Long, SystemCashVoucherConfigTemplate> systemCashVoucherConfigsBySystemCashVoucherId;
    private Map<Long, SystemCashRefundStatusTemplate> systemCashRefundStatusBySystemCashId;
    private Map<Long, SystemCashRefundAccountTemplate> systemCashRefundAccountsByMemberId;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashRefundStatusPageablePayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashRefundStatusTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashRefundStatusPageablePayload {

    private List<SystemCashRefundStatusTemplate> systemCashRefundStatuses;
    private Map<Long, SystemCashTemplate> systemCashes;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashRefundStatusPayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashRefundStatusTemplate;
import kr.co.yeoshin.admin.common.model.template.SystemCashTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashRefundStatusPayload {

    private SystemCashRefundStatusTemplate systemCashRefundStatus;
    private SystemCashTemplate systemCash;
    private MemberShortTemplate member;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashReportPayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.time.LocalDate;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.SystemCashReportTemplate;
import kr.co.yeoshin.common.payment.type.SystemCashType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashReportPayload {
    private LocalDate at;
    private Map<SystemCashType, SystemCashReportTemplate> reports;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashVoucherConfigPageablePayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherConfigPageablePayload {

    private List<SystemCashVoucherConfigTemplate> systemCashVoucherConfigs;
    private Map<Long, SystemCashVoucherStatTemplate> statsBySystemCashVoucherConfigId;
    private Map<Long, List<SystemCashVoucherExtraBenefitTemplate>> extraBenefitsBySystemCashVoucherConfigId;
    private Map<Long, SystemCashVoucherPartnershipTemplate> partnerships;
    private Map<Long, AdminShortTemplate> admins;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashVoucherConfigPayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherConfigPayload {

    private SystemCashVoucherConfigTemplate systemCashVoucherConfig;
    private SystemCashVoucherStatTemplate stat;
    private List<SystemCashVoucherExtraBenefitTemplate> extraBenefits;
    private SystemCashVoucherPartnershipTemplate partnership;
    private Map<Long, AdminShortTemplate> admins;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashVoucherDryRunPayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.systemcash.service.model.VoucherDryRunErrorReason;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherDryRunPayload {

    private DryRunResultTemplate result;

    @Getter
    @Builder
    public static class DryRunResultTemplate {

        private List<String> successCodes;
        private Map<String, List<VoucherDryRunErrorReason>> failReasonsByCode;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashVoucherPageablePayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherPageablePayload {

    private List<SystemCashVoucherTemplate> systemCashVouchers;
    private Map<Long, SystemCashVoucherConfigTemplate> systemCashVoucherConfigs;
    private Map<Long, SystemCashTemplate> systemCashesByVoucherId;
    private Map<Long, SystemCashVoucherPartnershipTemplate> systemCashVoucherPartnerships;
    private Map<Long, MemberShortTemplate> members;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/systemcash/usecase/model/SystemCashVoucherPartnershipsPayload.java
================================================
package kr.co.yeoshin.admin.systemcash.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.SystemCashVoucherPartnershipTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashVoucherPartnershipsPayload {

    private List<SystemCashVoucherPartnershipTemplate> systemCashVoucherPartnerships;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/controller/model/SmartDoctorCrmReservationIdPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.controller.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SmartDoctorCrmReservationIdPayload implements CrmAccessible {

    private long reservationId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/controller/model/SmartDoctorCrmSalesProductMutationRequestPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.controller.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;


@Getter
@Builder
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public class SmartDoctorCrmSalesProductMutationRequestPayload {

    @JsonProperty("productId")
    private String crmHospitalId;

    @JsonProperty("chunneung-product-key")
    private String crmSalesProductId;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/controller/model/SmartDoctorCrmSalesProductPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.controller.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SmartDoctorCrmSalesProductPayload implements CrmAccessible {

    @JsonValue
    private List<SmartDoctorCrmSalesProduct> salesProducts;

    @Getter
    @Builder
    public static class SmartDoctorCrmSalesProduct implements CrmAccessible {

        @JsonProperty("agencyHospitalId")
        private String hospitalId;

        @JsonProperty("agencyProductId")
        private String salesProductId;

        private String name;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/fray/component/model/MemberRequestPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.fray.component.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.util.List;
import kr.co.yeoshin.admin.common.Constant.Api;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberRequestPayload {

    @JsonProperty("customerName")
    private String name;

    @JsonProperty("countryCode")
    private String countryCode;

    @JsonProperty("countryCallingCode")
    private String countryCallingCode;

    @JsonProperty("customerPhoneNo")
    private String cellPhone;

    @JsonFormat(pattern = Api.DATE_FORMAT)
    @JsonProperty("customerBirthdate")
    private LocalDate birthdate;

    @JsonProperty("agreements")
    private List<ThirdPartyAgreementTermsType> agreements;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/fray/component/model/MemberResponsePayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.fray.component.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import lombok.*;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class MemberResponsePayload {

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonProperty("phoneNo")
    private String cellPhone;

    @JsonProperty("birthdate")
    private LocalDate birthdate;

    @JsonProperty("chartNo")
    private String chartNumber;

    @JsonProperty("cid")
    private Integer cid;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/fray/service/model/FrayMemberPageablePayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.fray.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayMemberPageablePayload {

    private List<FrayMemberTemplate> frayMembers;
    private Map<String, MemberShortTemplate> membersByCellPhone;
    private Map<Long, List<MemberTermsAgreeLogTemplate<ThirdPartyAgreementTermsType>>> termsByFrayMemberId;
    private Map<Long, DateTimeTemplate> latestImageSaveAtsByFrayMemberId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/fray/service/model/FrayMemberPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.fray.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import lombok.Builder;
import lombok.Getter;
import org.javers.core.metamodel.annotation.DiffIgnore;

@Getter
@Builder
public class FrayMemberPayload {

    private FrayMemberTemplate frayMember;
    @DiffIgnore
    private MemberShortTemplate member;
    @DiffIgnore
    private MemberShortTemplate memberByCellPhone;
    private List<MemberTermsAgreeLogTemplate<ThirdPartyAgreementTermsType>> terms;
    @DiffIgnore
    private DateTimeTemplate latestImageSaveAt;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/fray/usecase/FrayUseCase.java
================================================
package kr.co.yeoshin.admin.thirdparty.fray.usecase;

import static kr.co.yeoshin.common.fray.entity.QFrayMember.frayMember;

import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.template.FrayMemberTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberTermsAgreeLogTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.MemberException;
import kr.co.yeoshin.admin.notification.component.model.NhnSmsNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.NotificationSmsIdType;
import kr.co.yeoshin.admin.notification.component.model.SmsRecipient;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventMessage;
import kr.co.yeoshin.admin.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.revision.service.RevisionService;
import kr.co.yeoshin.admin.revision.service.model.InstantLogContext;
import kr.co.yeoshin.admin.search.service.DomainSearchService;
import kr.co.yeoshin.admin.search.service.model.FrayMemberFilterResult;
import kr.co.yeoshin.admin.thirdparty.fray.component.model.MemberRequestPayload;
import kr.co.yeoshin.admin.thirdparty.fray.controller.model.FrayMemberFilterRequest;
import kr.co.yeoshin.admin.thirdparty.fray.controller.model.FrayMemberMutationRequest;
import kr.co.yeoshin.admin.thirdparty.fray.service.FrayApiService;
import kr.co.yeoshin.admin.thirdparty.fray.service.FrayService;
import kr.co.yeoshin.admin.thirdparty.fray.service.model.FrayMemberPageablePayload;
import kr.co.yeoshin.admin.thirdparty.fray.service.model.FrayMemberPayload;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.admin.utils.JaversUtils;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.javers.core.diff.Diff;
import org.javers.core.diff.changetype.ValueChange;
import org.javers.core.diff.changetype.map.EntryAdded;
import org.javers.core.diff.changetype.map.EntryRemoved;
import org.javers.core.diff.changetype.map.EntryValueChange;
import org.javers.core.diff.changetype.map.MapChange;
import org.springframework.data.util.Pair;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class FrayUseCase {

    private final FrayService frayService;
    private final FrayApiService frayApiService;
    private final DomainSearchService searchService;
    private final RevisionService revisionService;
    private final SqsQueueMessagePublisher sqsQueueMessagePublisher;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessagePublisherTemplate queueMessagePublisherTemplate;

    public FrayMemberPageablePayload retrieveFrayMembers(FrayMemberFilterRequest request) {
        Set<Long> memberIdsByMemberInfo = StringUtils.isBlank(request.getMemberQuery())
                ? null
                : searchService.searchFrayMember(request.getMemberQuery(), List.of("name", "cell_phone"))
                        .getResults()
                        .stream()
                        .filter(r -> StringUtils.contains(r.getName(), request.getMemberQuery())
                                || StringUtils.contains(r.getCellPhone(), request.getMemberQuery()))
                        .map(FrayMemberFilterResult::getId)
                        .collect(Collectors.toSet());

        Set<Long> memberIdsByHospitalName = StringUtils.isBlank(request.getHospitalQuery())
                ? null
                : searchService.searchFrayMember(request.getHospitalQuery(), List.of("hospital_name"))
                        .getResults()
                        .stream()
                        .filter(r -> StringUtils.contains(r.getHospitalName(), request.getHospitalQuery()))
                        .map(FrayMemberFilterResult::getId)
                        .collect(Collectors.toSet());

        Set<Long> memberIds = ObjectUtils.allNull(memberIdsByMemberInfo, memberIdsByHospitalName)
                ? null
                : SetUtils.intersection(
                        Optional.ofNullable(memberIdsByMemberInfo).orElse(memberIdsByHospitalName),
                        Optional.ofNullable(memberIdsByHospitalName).orElse(memberIdsByMemberInfo)
                );

        return transactionTemplate.executeMainReadableTransaction(
                () -> frayService.retrieveFrayMembers(request.toWhereCondition(memberIds)));
    }

    public FrayMemberPayload retrieveFrayMember(long frayMemberId) {
        return transactionTemplate.executeMainReadableTransaction(() -> frayService.retrieveFrayMember(frayMemberId));
    }

    public FrayMemberPayload updateFrayMemberInfo(long frayMemberId, FrayMemberMutationRequest request, boolean onlyYs) {
        Pair<FrayMemberPayload, FrayMemberPayload> result = transactionTemplate.executeMainWritableTransaction(() -> {
            FrayMemberPayload before = frayService.retrieveFrayMember(frayMemberId);

            List<ThirdPartyAgreementTermsType> agreements = new ArrayList<>(request.getAgreements());
            if (onlyYs) {
                agreements.remove(ThirdPartyAgreementTermsType.PERSONAL_INFORMATION_SYNC);
            } else if (!agreements.contains(ThirdPartyAgreementTermsType.PERSONAL_INFORMATION_SYNC)) {
                agreements.add(ThirdPartyAgreementTermsType.PERSONAL_INFORMATION_SYNC);
            }
            FrayMemberMutationRequest modifiedRequest = request.toBuilder().agreements(agreements).build();

            if (!onlyYs) {
                MemberRequestPayload frayApiPayload = MemberRequestPayload.builder()
                        .name(modifiedRequest.getName())
                        .countryCode(modifiedRequest.getCountryCode())
                        .countryCallingCode(modifiedRequest.getCountryCallingCode())
                        .cellPhone(modifiedRequest.getCellPhone())
                        .birthdate(modifiedRequest.getBirthdate())
                        .agreements(modifiedRequest.getAgreements())
                        .build();
                frayApiService.updateFrayMember(before.getFrayMember().getFrayMemberKey(), frayApiPayload)
                        .orElseThrow(() -> new MemberException(CommonCode.BAD_REQUEST));
            }

            frayService.updateFrayMember(frayMemberId, modifiedRequest);

            FrayMemberPayload after = frayService.retrieveFrayMember(frayMemberId);

            Optional.ofNullable(makeChangeMessage(before, after))
                    .ifPresent(logMessage -> revisionService.registerInstantLog(InstantLogContext.builder()
                            .refType(DomainType.FRAY_MEMBER)
                            .refId(frayMemberId)
                            .message(logMessage)
                            .build()));

            return Pair.of(before, after);
        });

        log.debug("FRAY member information is changed.");

        if (!onlyYs) {
            FrayMemberPayload before = result.getFirst();
            FrayMemberPayload after = result.getSecond();

            boolean shouldSendNotification = shouldSendNotification(before, after);
            ZonedDateTime agreeAt = after.getTerms()
                    .stream()
                    .filter(t -> t.getTermsType() == ThirdPartyAgreementTermsType.PERSONAL_INFORMATION_SYNC)
                    .map(MemberTermsAgreeLogTemplate::getRecentChangeAt)
                    .findFirst()
                    .orElse(null);

            if (shouldSendNotification && personalInfoIsChanged(before.getFrayMember(), after.getFrayMember())) {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy년 M월 d일");
                Map<String, Object> templateParam = Map.of(
                        "hospitalName", after.getFrayMember().getHospitalName(),
                        "agreeAt", formatter.format(InvokeSupporters.getOrDefaultIfNull(() -> agreeAt, ZonedDateTime.now()))
                );

                NhnSmsNotificationContext context = NhnSmsNotificationContext.builder(
                                List.of(SmsRecipient.builder().recipientNo(request.getCellPhone()).build()),
                                NotificationSmsIdType.FRAY_PERSONAL_INFO_SYNC)
                        .templateParams(templateParam)
                        .build();
                NotificationPayload notificationPayload = NotificationPayload.builder()
                        .sms(context)
                        .build();

                sqsQueueMessagePublisher.publishNotification(NotificationMessage.of(notificationPayload));
                log.debug("Sending personal info sync terms notification. frayMemberId: {}", after.getFrayMember().getId());
            } else {
                log.debug("Skip notification because personal info is not changed or notification is already sent. frayMemberId: {}",
                        after.getFrayMember().getId());
            }
        }
        queueMessagePublisherTemplate.publishDomainEvent(DomainEventMessage.of(DomainEventType.FRAY_MEMBER_UPDATE, frayMemberId));
        log.debug("FRAY_MEMBER_UPDATE domain event is published.");

        return result.getSecond();
    }

    String makeChangeMessage(FrayMemberPayload before, FrayMemberPayload after) {
        Function<FrayMemberPayload, Map<String, Boolean>> extractTerms = frayMemberPayload -> frayMemberPayload.getTerms()
                .stream()
                .collect(Collectors.toMap(t -> t.getTermsType().getDescription(), MemberTermsAgreeLogTemplate::isAgree));

        Diff memberDiff = JaversUtils.compare(before.getFrayMember(), after.getFrayMember());
        Diff termsDiff = JaversUtils.compare(extractTerms.apply(before), extractTerms.apply(after));

        String logMessage = Stream.concat(memberDiff.getChanges().stream(), termsDiff.getChanges().stream())
                .map(this::makeChangeMessage)
                .collect(Collectors.joining("\n"));

        return StringUtils.isBlank(logMessage) ? null : logMessage;
    }

    private String makeChangeMessage(Object c) {
        Map<String, String> fieldNameReplacement = Map.of(
                frayMember.name.getMetadata().getName(), "이름",
                frayMember.countryCode.getMetadata().getName(), "국가코드",
                frayMember.countryCallingCode.getMetadata().getName(), "국가번호",
                frayMember.cellPhone.getMetadata().getName(), "휴대전화번호",
                frayMember.birthdate.getMetadata().getName(), "생년월일"
        );

        if (c instanceof ValueChange) {
            var vc = (ValueChange) c;
            return MessageUtils.format("- {} ({} -> {})", fieldNameReplacement.get(vc.getPropertyName()),
                    vc.getLeft(), vc.getRight());
        } else if (c instanceof MapChange) {
            var lc = (MapChange<?>) c;
            return lc.getEntryChanges().stream()
                    .map(this::makeChangeMessage)
                    .collect(Collectors.joining("\n"));
        } else if (c instanceof EntryAdded) {
            var ea = (EntryAdded) c;
            return MessageUtils.format("- {} (미동의 -> 동의)", ea.getKey());
        } else if (c instanceof EntryValueChange) {
            var ec = (EntryValueChange) c;
            if (ec.getRightValue().equals(Boolean.TRUE)) {
                return MessageUtils.format("- {} (미동의 -> 동의)", ec.getKey());
            } else {
                return MessageUtils.format("- {} (동의 -> 미동의)", ec.getKey());
            }
        } else if (c instanceof EntryRemoved) {
            var er = (EntryRemoved) c;
            return MessageUtils.format("- {} (동의 -> 미동의)", er.getKey());
        } else {
            return "";
        }
    }

    boolean personalInfoIsChanged(FrayMemberTemplate before, FrayMemberTemplate after) {
        return !(before.getName().equals(after.getName())
                && before.getCellPhone().equals(after.getCellPhone())
                && before.getBirthdate().equals(after.getBirthdate()));
    }

    boolean shouldSendNotification(FrayMemberPayload before, FrayMemberPayload after) {
        var beforeTerms = Optional.ofNullable(before.getTerms())
                .orElse(Collections.emptyList())
                .stream()
                .filter(t -> t.getTermsType() == ThirdPartyAgreementTermsType.PERSONAL_INFORMATION_SYNC && t.isAgree())
                .findFirst();
        var afterTerms = Optional.ofNullable(after.getTerms())
                .orElse(Collections.emptyList())
                .stream()
                .filter(t -> t.getTermsType() == ThirdPartyAgreementTermsType.PERSONAL_INFORMATION_SYNC && t.isAgree())
                .findFirst();

        if (afterTerms.isEmpty()) {
            return false;
        } else {
            return beforeTerms.isEmpty();
        }
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/CrmReservationUseCase.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.auth.model.RegisteredCrmAdmin;
import kr.co.yeoshin.admin.auth.model.Token;
import kr.co.yeoshin.admin.auth.model.TokenClaims;
import kr.co.yeoshin.admin.auth.service.TokenService;
import kr.co.yeoshin.admin.common.Constant.Admin;
import kr.co.yeoshin.admin.common.component.CrmPayloadFactory;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.LocalDateTimeRange;
import kr.co.yeoshin.admin.common.model.api.code.*;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmReservationTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.CrmDiagnosticContext;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.exception.MemberException;
import kr.co.yeoshin.admin.exception.ReservationException;
import kr.co.yeoshin.admin.exception.ThirdPartyException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.insurance.service.InsuranceService;
import kr.co.yeoshin.admin.member.service.MemberMetaService;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationCancelRequest;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationCloseDateTimeMutationRequest.CloseDateTime;
import kr.co.yeoshin.admin.reservation.service.ReservationConfigService;
import kr.co.yeoshin.admin.reservation.service.ReservationReadableService;
import kr.co.yeoshin.admin.reservation.service.ReservationValidationService;
import kr.co.yeoshin.admin.reservation.service.ReservationWritableService;
import kr.co.yeoshin.admin.reservation.service.model.ReservationRegister;
import kr.co.yeoshin.admin.reservation.service.model.ValidatedTickets;
import kr.co.yeoshin.admin.reservation.usecase.model.ReservationContext;
import kr.co.yeoshin.admin.reservation.usecase.model.ReservationNotificationContext;
import kr.co.yeoshin.admin.reservation.usecase.model.ReservationProgress;
import kr.co.yeoshin.admin.review.service.TreatmentReviewService;
import kr.co.yeoshin.admin.settlement.service.SettlementService;
import kr.co.yeoshin.admin.thirdparty.controller.model.*;
import kr.co.yeoshin.admin.thirdparty.service.CrmThirdPartyReservationService;
import kr.co.yeoshin.admin.thirdparty.service.model.ThirdPartyReservationPageableContext;
import kr.co.yeoshin.admin.thirdparty.usecase.model.*;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.TicketsWithProducts;
import kr.co.yeoshin.admin.utils.CollectionFunctionalUtils;
import kr.co.yeoshin.admin.utils.InvokeSupporters;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.insurance.type.InsuranceTicketStatus;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.reservation.entity.*;
import kr.co.yeoshin.common.reservation.type.HospitalOperationStatus;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.reservation.type.ReservationType;
import kr.co.yeoshin.common.type.TimeInterval;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils.AES;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.UUIDUtils;
import kr.co.yeoshin.common.utils.UUIDUtils.Secured;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class CrmReservationUseCase {

    private final AdminService adminService;
    private final CrmThirdPartyReservationService crmThirdPartyReservationService;
    private final HospitalService hospitalService;
    private final TokenService tokenService;
    private final TicketService ticketService;
    private final OrderService orderService;
    private final InsuranceService insuranceService;
    private final TreatmentReviewService treatmentReviewService;
    private final ReservationValidationService reservationValidationService;
    private final ReservationReadableService reservationReadableService;
    private final ReservationWritableService reservationWritableService;
    private final ReservationConfigService reservationConfigService;
    private final MemberMetaService memberMetaService;
    private final SettlementService settlementService;
    private final PayloadFactory payloadFactory;
    private final CrmPayloadFactory crmPayloadFactory;
    private final TransactionTemplate transactionTemplate;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SqsQueueMessagePublisher sqsQueueMessagePublisher;

    public CrmTokenPayload authenticate(String service, CrmTokenSignInRequest request) {
        // fetch config
        CrmConfig config = crmThirdPartyReservationService.findConfigByService(service);

        if (!StringUtils.equalsIgnoreCase(service, config.getService())) {
            throw new ThirdPartyException(ThirdPartyCode.THIRD_PARTY_IS_NOT_AUTHENTICATE);
        }
        if (!StringUtils.equalsIgnoreCase(request.getApiKey(), config.getApiKey())) {
            throw new ThirdPartyException(ThirdPartyCode.THIRD_PARTY_IS_NOT_AUTHENTICATE);
        }

        // create token
        Token token = tokenService.createToken(config.getId(), AuthProvider.SYSTEM, config.getSecretKey(),
                config.getTokenExpiresInSeconds(), config.getTokenExpiresInSeconds());

        return CrmTokenPayload.builder()
                .token(token)
                .build();
    }

    public BoolPayload verifyToken() {
        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public RegisteredCrmAdmin findRegisteredCrmService(String token) {
        if (StringUtils.isBlank(token)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is blank");
        }

        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is invalid");
        }

        RegisteredCrmAdmin registeredCrmMember = transactionTemplate.executeMainReadableTransaction(() -> {
            CrmConfig config = crmThirdPartyReservationService.findCrmConfigByClaims(claims);

            kr.co.yeoshin.common.administrator.entity.Admin admin = adminService.findById(Admin.VIRTUAL_HOSPITAL_OWNER_ID);

            return RegisteredCrmAdmin.of(config, admin, AuthProvider.SYSTEM);
        });

        if (registeredCrmMember == null) {
            throw new AuthenticationException(ThirdPartyCode.THIRD_PARTY_NOT_EXIST, "third party is not exist");
        }

        if (!tokenService.verifyToken(token, registeredCrmMember)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token verify failed");
        }

        return registeredCrmMember;
    }


    public CrmReservationPageablePayload list(CrmSearchRequest request) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Pageable pageable = crmThirdPartyReservationService.pageable(request.getNext());
            Page<Reservation> reservationPage = crmThirdPartyReservationService.retrieveReservations(request, pageable);

            if (reservationPage.isEmpty()) {
                return CrmReservationPageablePayload.empty();
            }

            List<Long> reservationIds = reservationPage.stream().map(Reservation::getId).collect(Collectors.toList());

            List<ReservationAsTicket> reservationAsTickets = crmThirdPartyReservationService.retrieveReservationAsTicketByReservationIds(
                    reservationIds);

            Map<Long, List<Long>> ticketIdsGroupByReservationId = reservationAsTickets.stream().collect(
                    Collectors.groupingBy(reservationAsTicket -> reservationAsTicket.getReservation().getId(),
                            Collectors.mapping(reservationAsTicket -> reservationAsTicket.getTicket().getId(),
                                    Collectors.toList())));

            List<Member> members = reservationPage.stream()
                    .map(Reservation::getMember)
                    .distinct()
                    .collect(Collectors.toList());

            List<Hospital> hospitals = reservationPage.stream()
                    .map(Reservation::getHospital)
                    .distinct()
                    .collect(Collectors.toList());

            Map<Long, HospitalPartnershipTemplate> hospitalPartnerships = hospitalService.retrieveHospitalPartnerships(
                            hospitals.stream()
                                    .map(Hospital::getId)
                                    .collect(Collectors.toSet())
                    )
                    .stream()
                    .collect(Collectors.toMap(HospitalPartnershipTemplate::getHospitalId, Function.identity()));

            List<CrmReservationTemplate> reservations = reservationPage.stream()
                    .map(reservation -> crmPayloadFactory.crmReservationTemplate(reservation,
                            ticketIdsGroupByReservationId.getOrDefault(reservation.getId(),
                                    Collections.emptyList()),
                            hospitalPartnerships.get(reservation.getHospital().getId())
                    )).collect(Collectors.toList());

            List<ReservationDoctorTemplate> reservationDoctors = crmThirdPartyReservationService.findReservationDoctors(
                    reservationPage.stream()
                            .map(Reservation::getReservationDoctorId)
                            .collect(Collectors.toSet())
            );

            List<Long> ticketIds = reservationAsTickets.stream()
                    .map(reservationAsTicket -> reservationAsTicket.getTicket().getId())
                    .collect(Collectors.toList());

            List<Ticket> tickets = ticketService.fetchAllTicketsByIds(ticketIds);

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderIds(tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getOrder().getId())
                    .collect(Collectors.toList()));

            List<SalesProductVersion> salesProductVersions = orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesProductVersion)
                    .collect(Collectors.toList());

            List<SalesEvent> salesEvents = tickets.stream()
                    .map(Ticket::getSalesEvent)
                    .collect(Collectors.toList());

            String nextToken = reservationPage.isLast() ? StringUtils.EMPTY : AES.encrypt(
                    ThirdPartyReservationPageableContext.builder()
                            .page(reservationPage.getPageable().getPageNumber() + 1)
                            .size(pageable.getPageSize())
                            .build()
            );

            return CrmReservationPageablePayload.builder()
                    .reservations(reservations)
                    .hospitals(crmPayloadFactory.crmHospitalTemplates(hospitals, hospitalPartnerships))
                    .doctors(crmPayloadFactory.crmHospitalDoctorTemplates(reservationDoctors))
                    .members(crmPayloadFactory.crmMemberTemplates(members))
                    .tickets(crmPayloadFactory.crmTicketTemplatesByTickets(
                            tickets,
                            salesEvents,
                            orderSalesProducts,
                            salesProductVersions))
                    .pageable(crmPayloadFactory.scrollablePageTemplate(reservationPage, nextToken))
                    .build();
        });

    }

    public CrmReservationPayload retrieveReservation(String encryptedReservationId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            long reservationId = Secured.decrypt(encryptedReservationId)
                    .orElseThrow(() -> new ThirdPartyException(ThirdPartyCode.THIRD_PARTY_IS_NOT_AUTHENTICATE));

            Reservation reservation = crmThirdPartyReservationService.retrieveReservation(reservationId);
            Map<Long, List<Long>> ticketIdsGroupByReservationId = crmThirdPartyReservationService.retrieveReservationAsTicketByReservationIds(
                    List.of(reservation.getId())).stream().collect(
                    Collectors.groupingBy(reservationAsTicket -> reservationAsTicket.getReservation().getId(),
                            Collectors.mapping(reservationAsTicket -> reservationAsTicket.getTicket().getId(),
                                    Collectors.toList())));

            List<Ticket> tickets = ticketService.fetchAllTicketsByIds(
                    ticketIdsGroupByReservationId.getOrDefault(reservation.getId(), Collections.emptyList()));

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderIds(tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getOrder().getId())
                    .collect(Collectors.toList()));

            List<SalesProductVersion> salesProductVersions = orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesProductVersion)
                    .collect(Collectors.toList());

            List<SalesEvent> salesEvents = tickets.stream()
                    .map(Ticket::getSalesEvent)
                    .collect(Collectors.toList());

            HospitalPartnershipTemplate hospitalPartnershipTemplate = hospitalService.retrievePartnership(
                    reservation.getHospital().getId()).orElse(HospitalPartnershipTemplate.builder().build());

            Optional<ReservationDoctorTemplate> reservationDoctor = crmThirdPartyReservationService.findReservationDoctor(
                    Optional.ofNullable(reservation.getReservationDoctorId()).orElse(-1L));

            return CrmReservationPayload.builder()
                    .reservation(crmPayloadFactory.crmReservationTemplate(reservation,
                            ticketIdsGroupByReservationId.getOrDefault(reservation.getId(), Collections.emptyList()),
                            hospitalPartnershipTemplate))
                    .hospital(crmPayloadFactory.crmHospitalTemplate(reservation.getHospital(),
                            hospitalPartnershipTemplate))
                    .doctor(reservationDoctor.map(crmPayloadFactory::crmHospitalDoctorTemplate).orElse(null))
                    .member(crmPayloadFactory.crmMemberTemplate(reservation.getMember()))
                    .tickets(crmPayloadFactory.crmTicketTemplatesByTickets(
                            tickets, salesEvents, orderSalesProducts, salesProductVersions))
                    .build();
        });
    }

    public BoolPayload configMobileReservation(boolean config) {
        transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationHospitalConfig reservationHospitalConfig = crmThirdPartyReservationService.findReservationHospitalConfig()
                    .orElseThrow(() -> new ThirdPartyException(HospitalCode.HOSPITAL_NOT_ACCESSIBLE));

            // TODO badge
            return reservationHospitalConfig.changeMobileReservationYn(YN.of(config));
        });

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public CrmHospitalPayload retrieveEntryHospital() {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

            Hospital hospital = hospitalService.findHospitalByHospitalId(crmAsHospital.getHospitalId());
            HospitalPartnershipTemplate hospitalPartnershipTemplate = hospitalService.retrievePartnership(hospital.getId())
                    .orElse(HospitalPartnershipTemplate.builder().build());

            List<ReservationDoctorTemplate> reservationDoctorTemplates = reservationReadableService.retrieveReservationDoctors(
                    hospital.getId());

            return CrmHospitalPayload.builder()
                    .hospital(crmPayloadFactory.crmHospitalTemplate(hospital, hospitalPartnershipTemplate))
                    .doctors(reservationDoctorTemplates.stream()
                            .filter(ReservationDoctorTemplate::isActivated)
                            .map(crmPayloadFactory::crmHospitalDoctorTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public CrmMemberPayload retrieveMember(String countryCallingCode, String cellPhone) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Member member = crmThirdPartyReservationService.findMemberByNameAndCellPhone(countryCallingCode, cellPhone)
                    .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            return CrmMemberPayload.builder()
                    .member(crmPayloadFactory.crmMemberTemplate(member))
                    .build();
        });
    }

    public CrmTicketPayload retrieveTickets(long memberId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();
            List<Ticket> tickets = ticketService.fetchAllTicketsByMemberIdAndHospitalId(memberId, crmAsHospital.getHospitalId(),
                    Collections.singletonList(TicketStatus.UNUSED));

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderIds(tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getOrder().getId())
                    .collect(Collectors.toList()));

            List<SalesProductVersion> salesProductVersions = orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesProductVersion)
                    .collect(Collectors.toList());

            List<SalesEvent> salesEvents = tickets.stream()
                    .map(Ticket::getSalesEvent)
                    .collect(Collectors.toList());

            return CrmTicketPayload.builder()
                    .tickets(crmPayloadFactory.crmTicketTemplatesByTickets(
                            tickets, salesEvents, orderSalesProducts, salesProductVersions))
                    .build();
        });
    }

    public void isGrantedHospital() {
        boolean isGranted = crmThirdPartyReservationService.hasGrantedHospital();

        if (!isGranted) {
            throw new ThirdPartyException(HospitalCode.HOSPITAL_NOT_ACCESSIBLE);
        }

    }

    public CrmReservationPayload registerReservation(CrmReservationRegisterRequest request) {
        long memberId = UUIDUtils.Secured.decrypt(request.getMemberId())
                .orElseThrow(() -> new ThirdPartyException(AuthCode.AUTH_MEMBER_NOT_EXIST));

        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        Set<Long> ticketIds = request.getTicketIds().stream()
                .map(ticket -> Secured.decrypt(ticket)
                        .orElseThrow(() -> new ThirdPartyException(TicketCode.TICKET_NOT_EXIST)))
                .collect(Collectors.toSet());

        if (reservationValidationService.isDuplicateReservation(memberId, crmAsHospital.getHospitalId())) {
            throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                    MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                            DiagnosticContext.adminHospitalRole().getAdminId(), crmAsHospital.getHospitalId(),
                            request.getMemberId()));
        }

        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            MemberServiceSummary serviceSummary = memberMetaService.fetchMemberServiceSummaryByMemberId(memberId)
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            if (!reservationValidationService.validateReservableHospital(memberId, crmAsHospital.getHospitalId(),
                    serviceSummary.getReservationDuplicateAllowYn().toBoolean())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL);
            }

            ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(
                    crmAsHospital.getHospitalId());

            if (!reservationConfigService.hasReservableTimeSchedule(crmAsHospital.getHospitalId(),
                    DateUtil.convertFrom(request.getStartAt()), config)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_RESERVE_TIME_SCHEDULE);
            }

            TicketsWithProducts tickets = ticketService.retrieveTickets(ticketIds);
            if (!reservationValidationService.validateReservableTickets(memberId, crmAsHospital.getHospitalId(),
                    tickets.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            ReservationDoctorTemplate reservationDoctor = Optional.ofNullable(request.getReservationDoctorId())
                    .flatMap(Secured::decrypt)
                    .map(doctorId ->
                            reservationReadableService.retrieveReservationDoctor(crmAsHospital.getHospitalId(), doctorId)
                                    .filter(ReservationDoctorTemplate::isActivated)
                                    .orElseThrow(
                                            () -> new ReservationException(ReservationCode.RESERVATION_DOCTOR_NOT_EXIST)))
                    .orElse(null);

            Reservation registeredReservation = reservationWritableService.registerReservation(ReservationRegister.builder()
                    .memberId(memberId)
                    .hospitalId(crmAsHospital.getHospitalId())
                    .startAt(DateUtil.convertFrom(request.getStartAt())
                            .truncatedTo(ChronoUnit.MINUTES))
                    .endAt(DateUtil.convertFrom(request.getStartAt())
                            .truncatedTo(ChronoUnit.MINUTES)
                            .plusMinutes(TimeInterval.HALF_HOUR.getMinutes()))
                    .status(ReservationStatus.CONFIRM)
                    .type(ReservationType.DIRECT)
                    .source(CrmDiagnosticContext.fetchCrmAdmin().getReservationSource())
                    .crmType(crmAsHospital.getCrmType())
                    .reservationDoctorId(InvokeSupporters.getOrNullIfNull(() -> reservationDoctor.getId()))
                    .supportTodayReservation(config.getTodayReservationYn().toBoolean())
                    .hospitalMemo(request.getHospitalMemo())
                    .build());

            reservationWritableService.registerReservationTickets(registeredReservation.getId(), ticketIds);

            ticketService.modifyTicketStatus(ticketIds, TicketStatus.RESERVED);

            reservationWritableService.upsertReservationLatestStatus(
                    registeredReservation.getId(),
                    registeredReservation.getMember().getId(),
                    registeredReservation.getHospital().getId());

            return reservationReadableService.fetchContext(registeredReservation.getId());
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationConfirmed(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return crmPayloadFactory.crmReservationPayload(context, crmAsHospital);
    }

    public CrmReservationPayload modifyReservation(long reservationId, CrmReservationMutationRequest request) {
        Set<Long> ticketIds = request.getTicketIds().stream()
                .map(ticket -> Secured.decrypt(ticket)
                        .orElseThrow(() -> new ThirdPartyException(TicketCode.TICKET_NOT_EXIST)))
                .collect(Collectors.toSet());

        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        Pair<ReservationContext, ReservationNotificationContext> reservationNotificationStatusContext = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

                    if (reservationValidationService.isDuplicateReservation(reservation.getMemberId(),
                            reservation.getHospitalId())) {
                        throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                                MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                        DiagnosticContext.adminHospitalRole().getAdminId(), reservation.getHospitalId(),
                                        reservation.getMemberId()));
                    }

                    if (ReservationProgress.isImmutableStatus(reservation.getReservationStatus())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_STATUS);
                    }

                    ValidatedTickets validatedTickets = reservationValidationService.validateReservationTickets(
                            reservation.getMemberId(), reservation.getHospitalId(),
                            reservation.getTicketIds(), ticketIds);

                    ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(
                            reservation.getHospitalId());

                    if (!reservation.getReservationStartAt().isEqual(request.getStartAt()) &&
                            !reservationConfigService.hasReservableTimeSchedule(reservation.getHospitalId(),
                                    DateUtil.convertFrom(request.getStartAt()), config)) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_RESERVE_TIME_SCHEDULE);
                    }
                    Optional<Long> hospitalDoctorId = StringUtils.isBlank(request.getDoctorId()) ? Optional.empty()
                            : Secured.decrypt(request.getDoctorId());

                    ReservationDoctorTemplate reservationDoctor =
                            hospitalDoctorId.isEmpty() ? null
                                    : reservationReadableService.retrieveReservationDoctor(reservation.getHospitalId(),
                                                    hospitalDoctorId.get())
                                            .filter(ReservationDoctorTemplate::isActivated)
                                            .orElseThrow(
                                                    () -> new ReservationException(ReservationCode.RESERVATION_DOCTOR_NOT_EXIST));

                    List<ReservationAsTicket> reservationAsTickets = reservationWritableService.modifyReservationTickets(
                            reservationId,
                            validatedTickets.getAddedTicketIds(), validatedTickets.getExcludedTicketIds());

                    ticketService.modifyTicketStatus(validatedTickets.getAddedTicketIds(), TicketStatus.RESERVED);
                    ticketService.modifyTicketStatus(validatedTickets.getExcludedTickets().stream()
                            .filter(it -> !it.isExpired())
                            .map(TicketTemplate::getId)
                            .collect(Collectors.toList()), TicketStatus.UNUSED);
                    ticketService.modifyTicketStatus(validatedTickets.getExcludedTickets().stream()
                            .filter(TicketTemplate::isExpired)
                            .map(TicketTemplate::getId)
                            .collect(Collectors.toList()), TicketStatus.EXPIRED);

                    LocalDateTime reservationAt = DateUtil.convertFrom(request.getStartAt());
                    boolean reservationAtChanged = !DateUtil.convertFrom(reservation.getReservationStartAt())
                            .isEqual(reservationAt);
                    boolean ticketChanged =
                            CollectionUtils.isNotEmpty(validatedTickets.getAddedTicketIds()) ||
                                    CollectionUtils.isNotEmpty(validatedTickets.getExcludedTicketIds());

                    // https://fastlane.atlassian.net/wiki/spaces/YR/pages/1612218525/04.#01-7.-%EC%98%88%EC%95%BD-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0
                    // https://fastlane.atlassian.net/browse/PM-1165?focusedCommentId=38434
                    // 예약시간이 변경되었거나 티켓이 변경 된 경우에만 예약 상태 변경
                    ReservationStatus status = reservationAtChanged || ticketChanged
                            ? ReservationProgress.findStatusByReservationAt(reservation.getReservationStatus(), reservationAt)
                            : reservation.getReservationStatus();

                    Reservation modified = reservationWritableService.modifyReservation(reservation.getReservationId(),
                            ReservationRegister.builder()
                                    .memberId(reservation.getMemberId())
                                    .hospitalId(reservation.getHospitalId())
                                    .startAt(reservationAt)
                                    .endAt(reservationAt.plusMinutes(
                                            reservation.getHospitalConfig().getSlotTimeInterval().getMinutes()))
                                    .status(status)
                                    .type(reservation.getReservationType())
                                    .source(CrmDiagnosticContext.fetchCrmAdmin().getReservationSource())
                                    .hospitalMemo(request.getHospitalMemo())
                                    .reservationDoctorId(hospitalDoctorId.orElse(null))
                                    .supportTodayReservation(config.getTodayReservationYn().toBoolean())
                                    .build());

                    reservationWritableService.upsertReservationLatestStatus(reservationId,
                            reservation.getMemberId(), reservation.getHospitalId());

                    ReservationTemplate modifiedReservation = payloadFactory.reservationTemplate(modified);

                    boolean confirmed = reservation.getReservationStatus() == ReservationStatus.WAIT_CONFIRM
                            && modifiedReservation.getStatus() != ReservationStatus.WAIT_CONFIRM;

                    ReservationContext modifiedReservationContext = reservation.toBuilder()
                            .reservation(modifiedReservation)
                            .tickets(validatedTickets.getProgressTickets())
                            .orders(orderService.retrieveOrderByOrderIds(validatedTickets.getProgressTicketIds()).stream()
                                    .map(payloadFactory::orderTemplate)
                                    .collect(Collectors.toList()))
                            .reservationDoctor(reservationDoctor)
                            .salesEvents(validatedTickets.getSalesEvents())
                            .build();

                    ReservationNotificationContext notificationContext = ReservationNotificationContext.EMPTY;
                    if (confirmed || reservationAtChanged || ticketChanged) {
                        notificationContext = ReservationNotificationContext.builder()
                                .notificationContext(alimTalkTemplateFactory.reservationConfirmed(modifiedReservation,
                                        reservation.getMember(),
                                        reservation.getHospital(),
                                        validatedTickets.getProgressTickets()))
                                .build();
                    }

                    return Pair.of(modifiedReservationContext, notificationContext);
                });

        reservationNotificationStatusContext.getRight()
                .getContext()
                .ifPresent(this::sendAlimTalk);

        return crmPayloadFactory.crmReservationPayload(
                reservationNotificationStatusContext.getLeft(),
                crmAsHospital);
    }

    public CrmReservationPayload cancelReservation(long reservationId, ReservationCancelRequest request) {
        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        ReservationContext context = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

                    /*
                        [취소 불가 예약 상태]
                        - 통합관리자 : 취소
                        - 플러스관리자 : 취소, 방문확정대기, 방문완료
                    */
                    if (!ReservationProgress.isCancellableStatus(reservation.getReservationStatus())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CANCEL_STATUS);
                    }

                    /*
                        - 통합관리자 : 사용완료된 티켓 취소 가능
                        - 플러스관리자 : 예약중 티켓만 취소 가능
                     */
                    if (!reservationValidationService.validateReservableOrderStatus(reservation.getOrders())) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_CANCELED_ORDER_TICKET_STATUS);
                    }

                    /*
                        방문 완료 상태에서 취소된 경우 정산, 보험 처리 반영
                     */
                    if (reservation.getReservationStatus() == ReservationStatus.VISIT_COMPLETE) {
                        settlementService.revertSettlement(reservation.getTicketIds(), LocalDateTime.now());
                        insuranceService.modifyInsuranceTicketStatus(reservation.getTicketIds(), InsuranceTicketStatus.UNUSED);
                    }

                    Reservation canceledReservation = reservationWritableService.cancelReservation(
                            reservation.getReservationId(),
                            reservation.getMemberId(),
                            ReservationStatus.CANCEL_BY_ADMIN,
                            request);

                    reservationWritableService.upsertReservationLatestStatus(reservation.getReservationId(),
                            reservation.getMemberId(), reservation.getHospitalId());

                    ticketService.modifyTicketStatus(reservation.getTickets().stream()
                            .filter(TicketTemplate::isExpired)
                            .map(TicketTemplate::getId)
                            .collect(Collectors.toSet()), TicketStatus.EXPIRED);

                    ticketService.modifyTicketStatus(reservation.getTickets().stream()
                            .filter(it -> !it.isExpired())
                            .map(TicketTemplate::getId)
                            .collect(Collectors.toSet()), TicketStatus.UNUSED);

                    treatmentReviewService.removeTreatmentReviews(reservation.getMemberId(), reservation.getReservationId());

                    return reservation.toBuilder()
                            .reservation(payloadFactory.reservationTemplate(canceledReservation))
                            .tickets(ticketService.retrieveTickets(reservation.getTicketIds()).getTickets())
                            .build();
                });

        sendAlimTalk(alimTalkTemplateFactory.reservationCanceled(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return crmPayloadFactory.crmReservationPayload(context, crmAsHospital);
    }

    public CrmReservationPayload askVisitComplete(long reservationId) {
        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);

            if (!EnumSet.of(ReservationStatus.VISIT_EXPECTED_TODAY, ReservationStatus.VISIT_DELAYED)
                    .contains(reservation.getReservationStatus())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_VISIT_COMPLETE_ASKABLE_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservation.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation modifiedReservation =
                    reservationWritableService.modifyVisitCompleteAskableStatus(reservation.getReservationId(),
                            ReservationStatus.WAIT_VISIT_COMPLETE);

            return reservation.toBuilder()
                    .reservation(payloadFactory.reservationTemplate(modifiedReservation))
                    .build();
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationWaitVisitComplete(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return crmPayloadFactory.crmReservationPayload(context, crmAsHospital);
    }

    public CrmReservationPayload registerTheVeryDayReservation(CrmTheVeryDayReservationRequest request) {
        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            long memberId = Secured.decrypt(request.getMemberId())
                    .orElseThrow(() -> new ThirdPartyException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            Set<Long> ticketIds = request.getTicketIds().stream()
                    .map(ticket -> Secured.decrypt(ticket)
                            .orElseThrow(() -> new ThirdPartyException(TicketCode.TICKET_NOT_EXIST)))
                    .collect(Collectors.toSet());

            if (reservationValidationService.isDuplicateReservation(memberId, crmAsHospital.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(), crmAsHospital.getHospitalId(),
                                memberId));
            }

            MemberServiceSummary serviceSummary = memberMetaService.fetchMemberServiceSummaryByMemberId(
                            memberId)
                    .orElseThrow(() -> new MemberException(AuthCode.AUTH_MEMBER_NOT_EXIST));

            if (!reservationValidationService.validateReservableHospital(memberId, crmAsHospital.getHospitalId(),
                    serviceSummary.getReservationDuplicateAllowYn().toBoolean())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL);
            }

            TicketsWithProducts tickets = ticketService.retrieveTickets(ticketIds);
            if (!reservationValidationService.validateReservableTickets(memberId, crmAsHospital.getHospitalId(),
                    tickets.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            ReservationDoctorTemplate reservationDoctor = Optional.ofNullable(request.getReservationDoctorId())
                    .flatMap(Secured::decrypt)
                    .map(doctorId ->
                            reservationReadableService.retrieveReservationDoctor(crmAsHospital.getHospitalId(), doctorId)
                                    .filter(ReservationDoctorTemplate::isActivated)
                                    .orElseThrow(
                                            () -> new ReservationException(ReservationCode.RESERVATION_DOCTOR_NOT_EXIST)))
                    .orElse(null);

            ReservationHospitalConfigTemplate hospitalConfig =
                    reservationReadableService.retrieveReservationHospitalConfig(crmAsHospital.getHospitalId())
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_HOSPITAL_CONFIG_NOT_EXIST));

            LocalDateTime reservationDateTime =
                    DateUtil.floor(LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES),
                            hospitalConfig.getSlotTimeInterval().getMinutes());

            Reservation reservation = reservationWritableService.registerTheDayReservation(ReservationRegister.builder()
                    .memberId(memberId)
                    .hospitalId(crmAsHospital.getHospitalId())
                    .startAt(reservationDateTime)
                    .endAt(reservationDateTime.plusMinutes(hospitalConfig.getSlotTimeInterval().getMinutes()))
                    .status(ReservationStatus.WAIT_VISIT_COMPLETE)
                    .type(ReservationType.THE_DAY)
                    .source(CrmDiagnosticContext.fetchCrmAdmin().getReservationSource())
                    .crmType(crmAsHospital.getCrmType())
                    .reservationDoctorId(InvokeSupporters.getOrNullIfNull(() -> reservationDoctor.getId()))
                    .hospitalMemo(request.getHospitalMemo())
                    .supportTodayReservation(hospitalConfig.isReservableOnToday())
                    .build());

            reservationWritableService.registerReservationTickets(reservation.getId(), ticketIds);

            ticketService.modifyTicketStatus(ticketIds, TicketStatus.RESERVED);

            reservationWritableService.upsertReservationLatestStatus(reservation.getId(), reservation.getMember().getId(),
                    reservation.getHospital().getId());

            return reservationReadableService.fetchContext(reservation.getId());
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationWaitVisitComplete(
                context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return crmPayloadFactory.crmReservationPayload(context, crmAsHospital);
    }

    public CrmReservationPayload confirmReservation(long reservationId, CrmReservationConfirmRequest request) {
        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        ReservationContext context = transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationContext reservationContext = reservationReadableService.fetchContext(reservationId);

            if (reservationValidationService.isDuplicateReservation(reservationContext.getMemberId(),
                    reservationContext.getHospitalId())) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATED_HOSPITAL,
                        MessageUtils.format("admin(id: {}) try to reserve too many. (hospital id: {} member id: {})",
                                DiagnosticContext.adminHospitalRole().getAdminId(), reservationContext.getHospitalId(),
                                reservationContext.getMemberId()));
            }

            if (reservationContext.getReservationStatus() != ReservationStatus.WAIT_CONFIRM) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CONFIRM_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservationContext.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation confirmedReservation =
                    reservationWritableService.confirmReservation(reservationContext.getReservationId(),
                            reservationContext.getMemberId(), request.toReservationConfirmRequest());

            reservationWritableService.upsertReservationLatestStatus(confirmedReservation.getId(),
                    confirmedReservation.getMember().getId(), confirmedReservation.getHospital().getId());

            ReservationTemplate modifiedReservation = payloadFactory.reservationTemplate(confirmedReservation);

            ReservationContext reservation = reservationContext.toBuilder()
                    .reservation(modifiedReservation)
                    .build();

            return reservation;
        });

        sendAlimTalk(alimTalkTemplateFactory.reservationConfirmed(context.getReservation(),
                context.getMember(),
                context.getHospital(),
                context.getTickets()));

        return crmPayloadFactory.crmReservationPayload(context, crmAsHospital);
    }

    public CrmReservationCloseDateTimesPayload retrieveReservationCloseDateTimes(ZonedDateTime from, ZonedDateTime to) {

        return transactionTemplate.executeMainReadableTransaction(() -> {
            CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

            List<ReservationTemporaryOperationTimeTemplate> reservationCloseDateTimes =
                    reservationConfigService.retrieveTemporaryOperationTimes(
                            crmAsHospital.getHospitalId(),
                            DateUtil.convertFrom(from),
                            DateUtil.convertFrom(to),
                            Set.of(HospitalOperationStatus.CLOSED));

            return CrmReservationCloseDateTimesPayload.builder()
                    .reservationCloseDateTimes(reservationCloseDateTimes.stream()
                            .map(crmPayloadFactory::crmReservationCloseDateTimeTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public CrmReservationCloseDateTimeMutationResultPayload modifyCloseDateTimes(
            CrmReservationCloseDateTimeMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

            Set<Long> removedCloseDateTimeIds = request.getRemovedCloseDateTimeIds().stream()
                    .flatMap(x -> Secured.decrypt(x).stream())
                    .filter(Objects::nonNull).collect(Collectors.toSet());

            if (CollectionUtils.isNotEmpty(removedCloseDateTimeIds)) {
                reservationConfigService.removeTemporaryOperationTimes(
                        crmAsHospital.getHospitalId(),
                        removedCloseDateTimeIds,
                        HospitalOperationStatus.CLOSED);
            }

            if (reservationConfigService.hasDuplicateTemporaryOperationTimeRange(crmAsHospital.getHospitalId(),
                    request.getAddedCloseDateTimes().stream()
                            .map(CloseDateTime::toLocalDateTimeRange)
                            .collect(Collectors.toList()),
                    Set.of(HospitalOperationStatus.CLOSED))) {
                throw new ReservationException(ReservationCode.RESERVATION_CLOSE_DATE_TIME_MUTATION_ERROR);
            }

            List<LocalDateTimeRange> requestAddedCloseDateTimes =
                    CollectionFunctionalUtils.mapToUnmodifiableListOrEmpty(request.getAddedCloseDateTimes(),
                            CloseDateTime::toLocalDateTimeRange);

            List<ReservationTemporaryOperationTime> addedCloseDateTimes = CollectionUtils.isNotEmpty(requestAddedCloseDateTimes)
                    ? reservationConfigService.registerTemporaryOperationTimes(crmAsHospital.getHospitalId(),
                    requestAddedCloseDateTimes, HospitalOperationStatus.CLOSED)
                    : Collections.emptyList();

            return CrmReservationCloseDateTimeMutationResultPayload.builder()
                    .addedReservationCloseDateTimes(CollectionFunctionalUtils.mapToUnmodifiableListOrEmpty(addedCloseDateTimes,
                            crmPayloadFactory::crmReservationCloseDateTimeTemplate))
                    .removedReservationCloseDateTimeIds(request.getRemovedCloseDateTimeIds())
                    .build();
        });
    }

    private void sendAlimTalk(NhnKakaoAlimTalkNotificationContext notificationContext) {
        NotificationMessage notificationMessage =
                NotificationMessage.of(NotificationPayload.builder()
                        .alimTalk(notificationContext)
                        .build());

        sqsQueueMessagePublisher.publishNotification(notificationMessage);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/CrmSalesEventQuestionUseCase.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.CrmPayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.template.HospitalPartnershipTemplate;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmSalesEventQuestionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.ApplicationProps;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.member.service.MemberMetaService;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.notification.component.template.FirebaseTemplateFactory;
import kr.co.yeoshin.admin.product.service.SalesEventQuestionService;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.thirdparty.controller.model.CrmSalesEventQuestionReplyMutationRequest;
import kr.co.yeoshin.admin.thirdparty.controller.model.CrmSearchRequest;
import kr.co.yeoshin.admin.thirdparty.service.CrmSalesEventQuestionService;
import kr.co.yeoshin.admin.thirdparty.service.CrmThirdPartyReservationService;
import kr.co.yeoshin.admin.thirdparty.service.model.ThirdPartyReservationPageableContext;
import kr.co.yeoshin.admin.thirdparty.usecase.model.CrmSalesEventQuestionPageablePayload;
import kr.co.yeoshin.admin.thirdparty.usecase.model.CrmSalesEventQuestionPayload;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.reservation.entity.CrmAsHospital;
import kr.co.yeoshin.common.review.entity.SalesEventQuestion;
import kr.co.yeoshin.common.review.entity.SalesEventQuestionReply;
import kr.co.yeoshin.common.setup.entity.DeviceToken;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils.AES;
import kr.co.yeoshin.common.utils.UUIDUtils.Secured;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class CrmSalesEventQuestionUseCase {

    private final ApplicationProps applicationProps;
    private final CrmSalesEventQuestionService crmSalesEventQuestionService;
    private final CrmThirdPartyReservationService crmThirdPartyReservationService;
    private final SalesEventQuestionService salesEventQuestionService;
    private final MemberMetaService memberMetaService;
    private final MemberService memberService;
    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final FirebaseTemplateFactory firebaseTemplateFactory;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final TransactionTemplate transactionTemplate;
    private final CrmPayloadFactory crmPayloadFactory;

    public CrmSalesEventQuestionPageablePayload list(CrmSearchRequest request) {
        Pageable pageable = crmSalesEventQuestionService.pageable(request.getNext());
        Page<SalesEventQuestion> salesEventQuestionPage = crmSalesEventQuestionService.retrieveSalesEventQuestions(request,
                pageable);

        if (salesEventQuestionPage.isEmpty()) {
            return CrmSalesEventQuestionPageablePayload.empty();
        }

        Set<Long> memberIds = salesEventQuestionPage.stream()
                .map(question -> question.getMember().getId())
                .collect(Collectors.toSet());

        List<Member> members = memberService.findMembersByMemberIds(memberIds);

        Set<Long> hospitalIds = salesEventQuestionPage.stream()
                .map(question -> question.getHospital().getId())
                .collect(Collectors.toSet());

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(hospitalIds);

        Map<Long, HospitalPartnershipTemplate> hospitalPartnerships = hospitalService.retrieveHospitalPartnerships(hospitalIds)
                .stream()
                .collect(Collectors.toMap(HospitalPartnershipTemplate::getHospitalId, Function.identity()));

        List<Long> salesEventIds = salesEventQuestionPage.stream()
                .map(SalesEventQuestion::getSalesEventId)
                .distinct()
                .collect(Collectors.toList());

        Map<Long, SalesEvent> salesEvents = salesEventService.findBySalesEventIdIn(salesEventIds).stream()
                .collect(Collectors.toMap(SalesEvent::getId, Function.identity()));

        List<CrmSalesEventQuestionTemplate> questions = salesEventQuestionPage.stream()
                .map(question -> crmPayloadFactory.crmSalesEventQuestionTemplate(question,
                        salesEvents.getOrDefault(question.getSalesEventId(), SalesEvent.builder().build())))
                .collect(Collectors.toList());

        List<SalesEventQuestionReply> replies = crmSalesEventQuestionService.fetchAllQuestionReplyByQuestionIds(
                salesEventQuestionPage.stream()
                        .map(SalesEventQuestion::getId)
                        .collect(Collectors.toList())
        );

        String nextToken = salesEventQuestionPage.isLast() ? StringUtils.EMPTY : AES.encrypt(
                ThirdPartyReservationPageableContext.builder()
                        .page(salesEventQuestionPage.getPageable().getPageNumber() + 1)
                        .size(pageable.getPageSize())
                        .build()
        );

        return CrmSalesEventQuestionPageablePayload.builder()
                .salesEventQuestions(questions)
                .hospitals(crmPayloadFactory.crmHospitalTemplates(hospitals, hospitalPartnerships))
                .members(crmPayloadFactory.crmMemberTemplates(members))
                .salesEventQuestionReplies(crmPayloadFactory.crmSalesEventQuestionReplyTemplates(replies))
                .pageable(crmPayloadFactory.scrollablePageTemplate(salesEventQuestionPage, nextToken))
                .build();
    }

    public CrmSalesEventQuestionPayload retrieveSalesEventQuestion(String salesEventQuestionId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> {
                    CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();
                    return crmSalesEventQuestionService.retrieveSalesEventQuestion(salesEventQuestionId,
                            crmAsHospital.getHospitalId());
                });
    }

    public CrmSalesEventQuestionPayload registerSalesEventQuestionReply(String salesEventQuestionId,
            CrmSalesEventQuestionReplyMutationRequest request) {
        CrmAsHospital crmAsHospital = crmThirdPartyReservationService.findCrmAsHospital();

        CrmSalesEventQuestionPayload crmSalesEventQuestionPayload = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    CrmSalesEventQuestionPayload payload = crmSalesEventQuestionService.registerSalesEventQuestionReply(
                            salesEventQuestionId, crmAsHospital.getHospitalId(), request.getContent());

                    Secured.decrypt(payload.getSalesEventQuestion().getMemberId())
                            .flatMap(memberMetaService::fetchMemberServiceSummaryByMemberId)
                            .ifPresent(member -> member.changeLatestSalesEventQuestionReplyYn(YN.Y));

                    return payload;
                });

        Secured.decrypt(crmSalesEventQuestionPayload.getSalesEventQuestion().getMemberId())
                .flatMap(memberId -> transactionTemplate.executeMainReadableTransaction(
                        () -> memberService.findMemberByMemberId(memberId)))
                .ifPresent(member -> {
                    if (applicationProps.getSalesEventQuestion().isNotificationAlimtalk()) {
                        messagePublisher.publishNotification(NotificationMessage.of(
                                NotificationPayload.builder()
                                        .alimTalk(alimTalkTemplateFactory.salesEventQuestionReply(member))
                                        .build()
                        ));
                    } else {
                        List<DeviceToken> deviceTokens = transactionTemplate.executeMainReadableTransaction(
                                () -> memberMetaService.findDeviceTokenByMemberId(member.getId()));
                        if (CollectionUtils.isNotEmpty(deviceTokens)) {
                            messagePublisher.publishNotification(NotificationMessage.of(
                                    NotificationPayload.builder()
                                            .firebase(firebaseTemplateFactory.salesEventQuestionReply(member,
                                                    deviceTokens))
                                            .build()));
                        }
                    }
                });

        return crmSalesEventQuestionPayload;

    }

    public CrmSalesEventQuestionPayload modifySalesEventQuestionReply(String salesEventQuestionReplyId,
            CrmSalesEventQuestionReplyMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> crmSalesEventQuestionService.modifySalesEventQuestionReply(salesEventQuestionReplyId,
                        request.getContent()));
    }

    public CrmSalesEventQuestionPayload deleteSalesEventQuestionReply(String salesEventQuestionReplyId) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> crmSalesEventQuestionService.deleteSalesEventQuestionReply(salesEventQuestionReplyId));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/DrPaletteUseCase.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.ReservationCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.CrmReservationException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.reservation.service.CrmReservationService;
import kr.co.yeoshin.admin.thirdparty.controller.model.DrPaletteLinkUpRequest;
import kr.co.yeoshin.admin.thirdparty.service.DrPaletteService;
import kr.co.yeoshin.common.hospital.entity.HospitalPartnership;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class DrPaletteUseCase {

    private final HospitalService hospitalService;
    private final CrmReservationService crmReservationService;
    private final DrPaletteService drPaletteService;
    private final TransactionTemplate transactionTemplate;

    public BoolPayload linkUp(DrPaletteLinkUpRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            HospitalPartnership hospitalPartnership = hospitalService.findHospitalPartnershipByHiraId(request.getHiraId())
                    .orElseThrow(() -> new CrmReservationException(ReservationCode.RESERVATION_CRM_NOT_LINKED));

            crmReservationService.retrieveCrmDevices(hospitalPartnership.getHospital().getId())
                    .stream()
                    .filter(x -> x.getType() == CrmDevice.DR_PALETTE)
                    .findFirst()
                    .orElseThrow(() -> new CrmReservationException(ReservationCode.RESERVATION_CRM_NOT_LINKED));

            drPaletteService.linkUp(
                    request.getHiraId(),
                    request.getScheduleId(),
                    request.getHospitalName(),
                    request.getToken());

            return BoolPayload.success();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/SmartDoctorCrmUseCase.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase;

import java.time.LocalDateTime;
import java.util.EnumSet;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.code.ReservationCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.CrmReservationTemplate;
import kr.co.yeoshin.admin.common.model.template.ReservationTemplate;
import kr.co.yeoshin.admin.common.model.template.TicketTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.CrmDiagnosticContext;
import kr.co.yeoshin.admin.exception.CrmReservationVegasException;
import kr.co.yeoshin.admin.exception.ReservationException;
import kr.co.yeoshin.admin.exception.ThirdPartyException;
import kr.co.yeoshin.admin.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.admin.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.admin.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationMessage;
import kr.co.yeoshin.admin.queue.model.notificationevent.NotificationPayload;
import kr.co.yeoshin.admin.reservation.component.crm.CrmReservationAction.ActionType;
import kr.co.yeoshin.admin.reservation.component.crm.SmartDoctorCrmReservationActionListener;
import kr.co.yeoshin.admin.reservation.component.crm.model.SmartDoctorCrmReservationStatus;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationCancelRequest;
import kr.co.yeoshin.admin.reservation.controller.model.ReservationConfirmRequest;
import kr.co.yeoshin.admin.reservation.service.*;
import kr.co.yeoshin.admin.reservation.service.model.CrmReservationActionLogRegister;
import kr.co.yeoshin.admin.reservation.service.model.ReservationRegister;
import kr.co.yeoshin.admin.reservation.usecase.model.ReservationContext;
import kr.co.yeoshin.admin.reservation.usecase.model.ReservationProgress;
import kr.co.yeoshin.admin.thirdparty.controller.model.*;
import kr.co.yeoshin.admin.thirdparty.controller.model.SmartDoctorCrmSalesProductPayload.SmartDoctorCrmSalesProduct;
import kr.co.yeoshin.admin.thirdparty.service.CrmThirdPartyReservationService;
import kr.co.yeoshin.admin.thirdparty.service.SmartDoctorCrmService;
import kr.co.yeoshin.admin.thirdparty.service.model.CrmSalesProductRegister;
import kr.co.yeoshin.admin.thirdparty.usecase.model.ReservationNotificationContext;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.reservation.entity.CrmAsHospital;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalConfig;
import kr.co.yeoshin.common.reservation.model.CrmReservationRegister;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import kr.co.yeoshin.common.reservation.type.ReservationCancelType;
import kr.co.yeoshin.common.reservation.type.ReservationSource;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class SmartDoctorCrmUseCase {

    private static final String SMART_DOCTOR_CRM_DEFAULT_SALES_PRODUCT_NAME = "여신티켓";

    private final SmartDoctorCrmService smartDoctorCrmService;
    private final CrmThirdPartyReservationService crmThirdPartyService;
    private final CrmReservationService crmReservationService;
    private final ReservationReadableService reservationReadableService;
    private final ReservationWritableService reservationWritableService;
    private final ReservationConfigService reservationConfigService;
    private final ReservationValidationService reservationValidationService;
    private final TicketService ticketService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SqsQueueMessagePublisher sqsQueueMessagePublisher;
    private final SmartDoctorCrmReservationActionListener crmReservationActionListener;

    public SmartDoctorCrmSalesProductPayload retrieveSalesProducts() {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            CrmAsHospital crmAsHospital = retrieveCrmAsHospital();

            return SmartDoctorCrmSalesProductPayload.builder()
                    .salesProducts(List.of(SmartDoctorCrmSalesProduct.builder()
                            .hospitalId(crmAsHospital.getCrmHospitalId())
                            .salesProductId(crmAsHospital.getCrmHospitalId())
                            .name(SMART_DOCTOR_CRM_DEFAULT_SALES_PRODUCT_NAME)
                            .build()))
                    .build();
        });
    }

    public BoolPayload modifyCrmSalesProducts(List<SmartDoctorCrmSalesProductMutationRequestPayload> payload) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            CrmAsHospital crmAsHospital = retrieveCrmAsHospital();

            List<CrmSalesProductRegister> crmSalesProducts =
                    CollectionUtils.emptyIfNull(payload)
                            .stream()
                            .map(it -> CrmSalesProductRegister.builder()
                                    .crmSalesProductId(it.getCrmSalesProductId())
                                    .build())
                            .collect(Collectors.toList());

            if (!smartDoctorCrmService.validateCrmSalesProducts(crmAsHospital.getHospitalId(),
                    CrmDevice.SMART_DOCTOR_CRM, crmSalesProducts)) {
                throw new CrmReservationVegasException(CommonCode.BAD_REQUEST);
            }

            smartDoctorCrmService.upsertCrmSalesProduct(crmAsHospital.getHospitalId(), crmSalesProducts.get(0));

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public BoolPayload askVisitComplete(long reservationId) {
        ReservationNotificationContext notification = transactionTemplate.executeMainWritableTransaction(() -> {
            CrmAsHospital crmAsHospital = retrieveCrmAsHospital();

            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);
            if (crmAsHospital.getHospitalId() != reservation.getHospitalId()) {
                throw new ThirdPartyException(CommonCode.BAD_REQUEST);
            }

            if (SmartDoctorCrmReservationStatus.COMPLETED ==
                    SmartDoctorCrmReservationStatus.findByStatus(reservation.getReservationStatus())) {
                log.warn("smart doctor crm reservation({}) is already completed.", reservation.getReservationId());
                return ReservationNotificationContext.EMPTY;
            }

            if (!EnumSet.of(ReservationStatus.VISIT_EXPECTED_TODAY, ReservationStatus.VISIT_DELAYED)
                    .contains(reservation.getReservationStatus())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_VISIT_COMPLETE_ASKABLE_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservation.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation modifiedReservation =
                    reservationWritableService.modifyVisitCompleteAskableStatus(reservation.getReservationId(),
                            ReservationStatus.WAIT_VISIT_COMPLETE);

            crmReservationService.registerCrmReservationActionLog(CrmReservationActionLogRegister.builder()
                    .reservationId(modifiedReservation.getId())
                    .reservationStatus(modifiedReservation.getStatus())
                    .crmType(CrmDevice.SMART_DOCTOR_CRM)
                    .actionType(ActionType.PATCH_STATUS)
                    .completeYn(YN.Y)
                    .actionSource(ReservationSource.SMART_DOCTOR_CRM)
                    .content(StringUtils.EMPTY)
                    .build());

            ReservationContext context = reservation.toBuilder()
                    .reservation(payloadFactory.reservationTemplate(modifiedReservation))
                    .build();

            return ReservationNotificationContext.builder()
                    .notificationContext(alimTalkTemplateFactory.reservationWaitVisitComplete(
                            context.getReservation(),
                            context.getMember(),
                            context.getHospital(),
                            context.getTickets()))
                    .build();
        });

        notification.getContext().ifPresent(this::sendAlimTalk);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public SmartDoctorCrmReservationIdPayload modifyReservation(long reservationId,
            SmartDoctorCrmReservationMutationRequest request) {
        ReservationNotificationContext notificationContext = transactionTemplate.executeMainWritableTransaction(() -> {
            CrmAsHospital crmAsHospital = retrieveCrmAsHospital();

            ReservationContext reservationContext = reservationReadableService.fetchContext(reservationId);

            CrmReservationTemplate crmReservation =
                    crmReservationService.retrieveCrmReservationByReservationIdAndCrmType(
                                    reservationId, CrmDevice.SMART_DOCTOR_CRM)
                            .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_CRM_RESERVATION_NOT_EXIST));

            if (crmAsHospital.getHospitalId() != reservationContext.getHospitalId()) {
                throw new ThirdPartyException(CommonCode.BAD_REQUEST);
            }

            if (ReservationProgress.isImmutableStatus(reservationContext.getReservationStatus())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_MODIFY_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservationContext.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            ReservationHospitalConfig config = reservationConfigService.findReservationHospitalConfig(
                    reservationContext.getHospitalId());

            LocalDateTime previousReservationStartAt = DateUtil.convertFrom(reservationContext.getReservationStartAt());
            LocalDateTime reservationStartAt = DateUtil.convertFrom(request.getReservationStartAt());
            boolean reservationAtChanged = !previousReservationStartAt.isEqual(reservationStartAt);
            boolean timeScheduleValidation = !request.isForceSchedule() && reservationAtChanged;
            if (timeScheduleValidation &&
                    !reservationConfigService.hasReservableTimeSchedule(
                            reservationContext.getHospitalId(), reservationStartAt, config)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_RESERVE_TIME_SCHEDULE);
            }

            boolean maintainWaitConfirmStatus =
                    reservationContext.getReservationStatus() == ReservationStatus.WAIT_CONFIRM
                            && !request.isAutoConfirmReservation();

            ReservationStatus status = maintainWaitConfirmStatus
                    ? reservationContext.getReservationStatus()
                    : ReservationStatus.findReservationInProgressStatus(reservationStartAt, request.isAutoConfirmReservation());

            Reservation modified = reservationWritableService.modifyReservation(reservationContext.getReservationId(),
                    ReservationRegister.builder()
                            .memberId(reservationContext.getMemberId())
                            .hospitalId(reservationContext.getHospitalId())
                            .startAt(reservationStartAt)
                            .endAt(reservationStartAt.plusMinutes(
                                    reservationContext.getHospitalConfig().getSlotTimeInterval().getMinutes()))
                            .status(status)
                            .type(reservationContext.getReservationType())
                            .hospitalMemo(reservationContext.getReservation().getHospitalMemo())
                            .reservationDoctorId(reservationContext.getReservationDoctorId())
                            .supportTodayReservation(config.getTodayReservationYn().toBoolean())
                            .build());

            reservationWritableService.upsertReservationLatestStatus(reservationId,
                    reservationContext.getMemberId(), reservationContext.getHospitalId());

            ReservationTemplate modifiedReservation = payloadFactory.reservationTemplate(modified);

            ReservationContext modifiedReservationContext = reservationContext.toBuilder()
                    .reservation(modifiedReservation)
                    .build();

            crmReservationService.upsertCrmReservation(CrmReservationRegister.builder()
                    .reservationId(modifiedReservation.getId())
                    .hospitalId(modifiedReservation.getHospitalId())
                    .reservationAt(DateUtil.convertFrom(modifiedReservation.getStartAt()))
                    .crmDeviceType(CrmDevice.SMART_DOCTOR_CRM)
                    .crmAccessId(crmAsHospital.getCrmHospitalId())
                    .crmDoctorId(modifiedReservation.getReservationDoctorId())
                    .crmReservationId(crmReservation.getCrmReservationId())
                    .build());

            if (!maintainWaitConfirmStatus || reservationAtChanged) {
                return ReservationNotificationContext.builder()
                        .notificationContext(alimTalkTemplateFactory.reservationConfirmed(
                                modifiedReservation,
                                reservationContext.getMember(),
                                reservationContext.getHospital(),
                                modifiedReservationContext.getTickets()))
                        .build();
            }

            return ReservationNotificationContext.EMPTY;
        });

        notificationContext.getContext()
                .ifPresent(this::sendAlimTalk);

        return SmartDoctorCrmReservationIdPayload.builder()
                .reservationId(reservationId)
                .build();
    }

    public BoolPayload modifyReservationStatus(long reservationId, SmartDoctorCrmReservationStatusMutationRequest request) {
        SmartDoctorCrmReservationStatus crmReservationStatus =
                SmartDoctorCrmReservationStatus.findByName(request.getReservationStatus(), true)
                        .orElseThrow(() -> new ReservationException(CommonCode.BAD_REQUEST));

        switch (crmReservationStatus) {
            case APPROVED:
                return confirmReservation(reservationId, ReservationConfirmRequest.empty());
            case CANCELED:
                return cancelReservation(reservationId, ReservationCancelRequest.builder()
                        .cancelReason(ReservationCancelType.ETC)
                        .hospitalMemo(request.getCancelReason())
                        .build());
            case NOSHOW:
                return cancelReservation(reservationId, ReservationCancelRequest.builder()
                        .cancelReason(ReservationCancelType.NO_SHOW)
                        .hospitalMemo(request.getCancelReason())
                        .build());
            default:
                throw new ReservationException(CommonCode.BAD_REQUEST);
        }
    }

    private BoolPayload confirmReservation(long reservationId, ReservationConfirmRequest request) {
        ReservationNotificationContext notification = transactionTemplate.executeMainWritableTransaction(() -> {
            CrmAsHospital crmAsHospital = retrieveCrmAsHospital();

            ReservationContext reservationContext = reservationReadableService.fetchContext(reservationId);

            if (SmartDoctorCrmReservationStatus.APPROVED ==
                    SmartDoctorCrmReservationStatus.findByStatus(reservationContext.getReservationStatus())) {
                log.warn("smart doctor crm reservation({}) is already confirmed.", reservationContext.getReservationId());
                return ReservationNotificationContext.EMPTY;
            }

            CrmReservationTemplate crmReservation = crmReservationService.retrieveCrmReservationByReservationIdAndCrmType(
                            reservationId, CrmDevice.SMART_DOCTOR_CRM)
                    .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_CRM_RESERVATION_NOT_EXIST));

            if (crmAsHospital.getHospitalId() != reservationContext.getHospitalId()) {
                throw new ReservationException(CommonCode.BAD_REQUEST);
            }

            if (reservationContext.getReservationStatus() != ReservationStatus.WAIT_CONFIRM) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CONFIRM_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservationContext.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation confirmedReservation =
                    reservationWritableService.confirmReservation(
                            reservationContext.getReservationId(),
                            reservationContext.getMemberId(),
                            request);

            reservationWritableService.upsertReservationLatestStatus(confirmedReservation.getId(),
                    confirmedReservation.getMember().getId(), confirmedReservation.getHospital().getId());

            ReservationTemplate modifiedReservation = payloadFactory.reservationTemplate(confirmedReservation);

            crmReservationService.upsertCrmReservation(CrmReservationRegister.builder()
                    .reservationId(modifiedReservation.getId())
                    .hospitalId(modifiedReservation.getHospitalId())
                    .reservationAt(DateUtil.convertFrom(modifiedReservation.getStartAt()))
                    .crmDeviceType(CrmDevice.SMART_DOCTOR_CRM)
                    .crmAccessId(crmAsHospital.getCrmHospitalId())
                    .crmDoctorId(modifiedReservation.getReservationDoctorId())
                    .crmReservationId(crmReservation.getCrmReservationId())
                    .build());

            ReservationContext modifiedReservationContext = reservationContext.toBuilder()
                    .reservation(modifiedReservation)
                    .build();

            return ReservationNotificationContext.builder()
                    .notificationContext(alimTalkTemplateFactory.reservationConfirmed(
                            modifiedReservationContext.getReservation(),
                            modifiedReservationContext.getMember(),
                            modifiedReservationContext.getHospital(),
                            modifiedReservationContext.getTickets()))
                    .build();
        });

        notification.getContext().ifPresent(this::sendAlimTalk);

        return BoolPayload.of(true);
    }

    private BoolPayload cancelReservation(long reservationId, ReservationCancelRequest request) {
        ReservationNotificationContext notification = transactionTemplate.executeMainWritableTransaction(() -> {
            CrmAsHospital crmAsHospital = retrieveCrmAsHospital();

            ReservationContext reservation = reservationReadableService.fetchContext(reservationId);
            if (SmartDoctorCrmReservationStatus.CANCELED == SmartDoctorCrmReservationStatus.findByStatus(
                    reservation.getReservationStatus())) {
                log.warn("smart doctor crm reservation({}) is already canceled.", reservation.getReservationId());
                return ReservationNotificationContext.EMPTY;
            }

            CrmReservationTemplate crmReservation = crmReservationService.retrieveCrmReservationByReservationIdAndCrmType(
                            reservationId, CrmDevice.SMART_DOCTOR_CRM)
                    .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_CRM_RESERVATION_NOT_EXIST));

            if (crmAsHospital.getHospitalId() != reservation.getHospitalId()) {
                throw new ReservationException(CommonCode.BAD_REQUEST);
            }

            if (ReservationProgress.isImmutableStatus(reservation.getReservationStatus())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CANCEL_STATUS);
            }

            if (!reservationValidationService.validateReservedTickets(reservation.getTickets())) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_CANCEL_STATUS);
            }

            Reservation canceledReservation = reservationWritableService.cancelReservation(
                    reservation.getReservationId(),
                    reservation.getMemberId(),
                    reservation.getReservationStatus(),
                    request);

            reservationWritableService.upsertReservationLatestStatus(reservation.getReservationId(),
                    reservation.getMemberId(), reservation.getHospitalId());

            ticketService.modifyTicketStatus(reservation.getTickets().stream()
                    .filter(TicketTemplate::isExpired)
                    .map(TicketTemplate::getId)
                    .collect(Collectors.toSet()), TicketStatus.EXPIRED);

            ticketService.modifyTicketStatus(reservation.getTickets().stream()
                    .filter(it -> !it.isExpired())
                    .map(TicketTemplate::getId)
                    .collect(Collectors.toSet()), TicketStatus.UNUSED);

            crmReservationService.upsertCrmReservation(CrmReservationRegister.builder()
                    .reservationId(canceledReservation.getId())
                    .hospitalId(canceledReservation.getHospital().getId())
                    .reservationAt(canceledReservation.getStartAt())
                    .crmDeviceType(CrmDevice.SMART_DOCTOR_CRM)
                    .crmAccessId(crmAsHospital.getCrmHospitalId())
                    .crmDoctorId(canceledReservation.getReservationDoctorId())
                    .crmReservationId(crmReservation.getCrmReservationId())
                    .build());

            ReservationContext canceledReservationContext = reservation.toBuilder()
                    .reservation(payloadFactory.reservationTemplate(canceledReservation))
                    .build();

            return ReservationNotificationContext.builder().notificationContext(alimTalkTemplateFactory.reservationCanceled(
                            canceledReservationContext.getReservation(),
                            canceledReservationContext.getMember(),
                            canceledReservationContext.getHospital(),
                            canceledReservationContext.getTickets()))
                    .build();
        });

        notification.getContext().ifPresent(this::sendAlimTalk);

        return BoolPayload.of(true);
    }

    private CrmAsHospital retrieveCrmAsHospital() {
        String crmHospitalId = CrmDiagnosticContext.currentCrmHospitalId()
                .orElseThrow(() -> new ThirdPartyException(HospitalCode.HOSPITAL_NOT_ACCESSIBLE));

        return crmThirdPartyService.findCrmAsHospital(CrmDevice.SMART_DOCTOR_CRM, crmHospitalId);
    }

    private void sendAlimTalk(NhnKakaoAlimTalkNotificationContext notificationContext) {
        NotificationMessage notificationMessage =
                NotificationMessage.of(NotificationPayload.builder()
                        .alimTalk(notificationContext)
                        .build());

        sqsQueueMessagePublisher.publishNotification(notificationMessage);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/ThirdPartyUseCase.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase;

import kr.co.yeoshin.admin.auth.model.RegisteredThirdPartyAdmin;
import kr.co.yeoshin.admin.auth.model.Token;
import kr.co.yeoshin.admin.auth.model.TokenClaims;
import kr.co.yeoshin.admin.auth.service.TokenService;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.code.ThirdPartyCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.config.props.component.PropertyProvider;
import kr.co.yeoshin.admin.exception.AuthenticationException;
import kr.co.yeoshin.admin.exception.ThirdPartyException;
import kr.co.yeoshin.admin.thirdparty.controller.model.ThirdPartyTokenSignInRequest;
import kr.co.yeoshin.admin.thirdparty.service.ThirdPartyService;
import kr.co.yeoshin.admin.thirdparty.service.model.ThirdPartyTokenClaim;
import kr.co.yeoshin.admin.thirdparty.usecase.model.ThirdPartyTokenPayload;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.thirdpaty.entity.ThirdPartyConfig;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class ThirdPartyUseCase {

    private final ThirdPartyService thirdPartyService;
    private final TokenService tokenService;
    private final TransactionTemplate transactionTemplate;
    private final PropertyProvider propertyProvider;

    public ThirdPartyTokenPayload authenticate(String service, ThirdPartyTokenSignInRequest request) {
        ThirdPartyTokenClaim tokenClaim = thirdPartyService.parseThirdPartyTokenClaims(request.getToken());
        ThirdPartyConfig config = thirdPartyService.retrieveThirdPartyConfig(service);

        if ((tokenClaim.getCellPhone().isEmpty() && config.getClaimCellPhoneYn().toBoolean()) ||
                (tokenClaim.getEmail().isEmpty() && config.getClaimEmailYn().toBoolean()) ||
                (tokenClaim.getName().isEmpty() && config.getClaimNameYn().toBoolean())) {
            throw new ThirdPartyException(ThirdPartyCode.THIRD_PARTY_IS_NOT_AUTHENTICATE);
        }

        thirdPartyService.tokenReview(config.getAuthenticateUrl(), request);

        Token token = tokenService.createToken(config.getId(),
                AuthProvider.SYSTEM,
                config.getSecretKey(),
                propertyProvider.getTokenProps().getThirdParty());
        return ThirdPartyTokenPayload.builder()
                .token(token)
                .build();
    }


    public RegisteredThirdPartyAdmin findRegisteredThirdPartyService(String token) {
        if (StringUtils.isBlank(token)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is blank");
        }

        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is invalid");
        }

        RegisteredThirdPartyAdmin registeredThirdPartyMember = transactionTemplate.executeMainReadableTransaction(() -> {
            ThirdPartyConfig config = thirdPartyService.findThirdPartyServiceByClaims(claims);

            return RegisteredThirdPartyAdmin.of(config, AuthProvider.SYSTEM);
        });

        if (registeredThirdPartyMember == null) {
            throw new AuthenticationException(ThirdPartyCode.THIRD_PARTY_NOT_EXIST, "third party is not exist");
        }

        if (!tokenService.verifyToken(token, registeredThirdPartyMember)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token verify failed");
        }

        return registeredThirdPartyMember;
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmHospitalPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmHospitalDoctorTemplate;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmHospitalTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmHospitalPayload implements CrmAccessible {

    private CrmHospitalTemplate hospital;
    private List<CrmHospitalDoctorTemplate> doctors;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmMemberPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmMemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmMemberPayload implements CrmAccessible {

    private CrmMemberTemplate member;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmReservationCloseDateTimeMutationResultPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.List;
import java.util.Set;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmReservationCloseDateTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationCloseDateTimeMutationResultPayload implements CrmAccessible {

    private List<CrmReservationCloseDateTimeTemplate> addedReservationCloseDateTimes;
    private Set<String> removedReservationCloseDateTimeIds;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmReservationCloseDateTimesPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmReservationCloseDateTimeTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationCloseDateTimesPayload implements CrmAccessible {

    private List<CrmReservationCloseDateTimeTemplate> reservationCloseDateTimes;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmReservationPageablePayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationPageablePayload implements CrmAccessible {

    private List<CrmReservationTemplate> reservations;
    private List<CrmHospitalTemplate> hospitals;
    private List<CrmHospitalDoctorTemplate> doctors;
    private List<CrmMemberTemplate> members;
    private List<CrmTicketTemplate> tickets;
    private CrmScrollablePageTemplate pageable;

    public static CrmReservationPageablePayload empty() {
        return CrmReservationPageablePayload.builder()
                .reservations(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .members(Collections.emptyList())
                .doctors(Collections.emptyList())
                .tickets(Collections.emptyList())
                .pageable(CrmScrollablePageTemplate.empty())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmReservationPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmReservationPayload implements CrmAccessible {

    private CrmReservationTemplate reservation;
    private CrmHospitalTemplate hospital;
    private CrmHospitalDoctorTemplate doctor;
    private CrmMemberTemplate member;
    private List<CrmTicketTemplate> tickets;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmSalesEventQuestionPageablePayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmSalesEventQuestionPageablePayload implements CrmAccessible {

    private List<CrmSalesEventQuestionTemplate> salesEventQuestions;
    private List<CrmMemberTemplate> members;
    private List<CrmHospitalTemplate> hospitals;
    private List<CrmSalesEventQuestionReplyTemplate> salesEventQuestionReplies;
    private CrmScrollablePageTemplate pageable;

    public static CrmSalesEventQuestionPageablePayload empty() {
        return CrmSalesEventQuestionPageablePayload.builder()
                .salesEventQuestions(Collections.emptyList())
                .members(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEventQuestionReplies(Collections.emptyList())
                .pageable(CrmScrollablePageTemplate.empty())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmSalesEventQuestionPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmHospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmMemberTemplate;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmSalesEventQuestionReplyTemplate;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmSalesEventQuestionTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmSalesEventQuestionPayload implements CrmAccessible {

    private CrmSalesEventQuestionTemplate salesEventQuestion;
    private CrmMemberTemplate member;
    private CrmHospitalTemplate hospital;
    private List<CrmSalesEventQuestionReplyTemplate> salesEventQuestionReplies;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmTicketPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import kr.co.yeoshin.admin.common.model.template.thirdparty.CrmTicketTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmTicketPayload implements CrmAccessible {

    private List<CrmTicketTemplate> tickets;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/CrmTokenPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import kr.co.yeoshin.admin.auth.model.Token;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CrmTokenPayload implements CrmAccessible {

    private Token token;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/thirdparty/usecase/model/ThirdPartyTokenPayload.java
================================================
package kr.co.yeoshin.admin.thirdparty.usecase.model;

import kr.co.yeoshin.admin.auth.model.Token;
import kr.co.yeoshin.admin.common.model.api.payload.level.CrmAccessible;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ThirdPartyTokenPayload implements CrmAccessible {

    private Token token;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/service/model/CountPayload.java
================================================
package kr.co.yeoshin.admin.ticket.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.NumberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CountPayload implements PlusAccessible {

    private NumberTemplate count;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/service/model/TicketPageablePayload.java
================================================
package kr.co.yeoshin.admin.ticket.service.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder(toBuilder = true)
public class TicketPageablePayload implements PlusAccessible {

    private List<Long> groupIds;
    private List<TicketTemplate> tickets;
    private Map<Long, List<TicketTemplate>> ticketsByGroupId;
    private Map<Long, MemberShortTemplate> members;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, SalesEventShortTemplate> salesEvents;
    private Map<Long, SalesProductVersionTemplate> salesProductVersions;
    @Deprecated
    @Builder.Default
    private Map<Long, Boolean> isOrderCancelsByOrderId = Collections.emptyMap();
    private Map<Long, OrderTemplate> orders;
    private PageableTemplate pageable;

    public static TicketPageablePayload empty() {
        return TicketPageablePayload.builder()
                .groupIds(Collections.emptyList())
                .tickets(Collections.emptyList())
                .ticketsByGroupId(Collections.emptyMap())
                .members(Collections.emptyMap())
                .hospitals(Collections.emptyMap())
                .salesEvents(Collections.emptyMap())
                .salesProductVersions(Collections.emptyMap())
                .orders(Collections.emptyMap())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/service/model/TicketPayload.java
================================================
package kr.co.yeoshin.admin.ticket.service.model;

import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketPayload implements PlusAccessible {

    private TicketTemplate ticket;
    private List<TicketTemplate> groupTickets;
    private TicketGroupPriceTemplate ticketGroupPrice;
    private PriceTemplate refundPrice;
    private PriceTemplate settlementPrice;
    private MemberShortTemplate member;
    private OrderTemplate order;
    private String pgNumber;
    private SalesEventShortTemplate salesEvent;
    private SalesProductVersionTemplate salesProductVersion;
    private HospitalShortTemplate hospital;
    private GiftOrderTemplate giftOrder;
    private TicketPaymentContext ticketPaymentContext;

    public boolean isEmpty() {
        return Objects.isNull(ticket);
    }

    public boolean isWholeCanceledGroup() {
        return Stream.concat(Stream.of(this.ticket), this.groupTickets.stream())
                .allMatch(it -> it.getStatus() == TicketStatus.CANCEL);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/usecase/TicketInquiryUseCase.java
================================================
package kr.co.yeoshin.admin.ticket.usecase;

import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.TicketCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.*;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.TicketException;
import kr.co.yeoshin.admin.insurance.service.InsuranceService;
import kr.co.yeoshin.admin.member.model.MemberTicketMinusStat;
import kr.co.yeoshin.admin.member.service.MemberService;
import kr.co.yeoshin.admin.order.service.OrderService;
import kr.co.yeoshin.admin.reservation.service.ReservationReadableService;
import kr.co.yeoshin.admin.reservation.service.ReservationWritableService;
import kr.co.yeoshin.admin.review.service.TreatmentReviewService;
import kr.co.yeoshin.admin.settlement.service.SettlementService;
import kr.co.yeoshin.admin.ticket.controller.model.TicketRestorationInquiryConfirmationRequest;
import kr.co.yeoshin.admin.ticket.controller.model.TicketRestorationInquiryFilterRequest;
import kr.co.yeoshin.admin.ticket.controller.model.TicketRestorationInquiryMutationRequest;
import kr.co.yeoshin.admin.ticket.service.TicketRestorationInquiryService;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.TicketRestorationInquiryPage;
import kr.co.yeoshin.admin.ticket.usecase.model.TicketRestorationInquiryPageablePayload;
import kr.co.yeoshin.admin.ticket.usecase.model.TicketRestorationInquiryPayload;
import kr.co.yeoshin.common.insurance.type.InsuranceTicketStatus;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.entity.TicketRestorationInquiry;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicket;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicketLog;
import kr.co.yeoshin.common.reservation.model.ReservationAsTicketLogAction;
import kr.co.yeoshin.common.type.UserType;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@UseCase
public class TicketInquiryUseCase {

    private final TicketRestorationInquiryService ticketRestorationInquiryService;
    private final ReservationReadableService reservationReadableService;
    private final ReservationWritableService reservationWritableService;
    private final SettlementService settlementService;
    private final InsuranceService insuranceService;
    private final TicketService ticketService;
    private final TreatmentReviewService treatmentReviewService;
    private final MemberService memberService;
    private final OrderService orderService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public TicketRestorationInquiryPageablePayload listInquiries(UserType type,
            TicketRestorationInquiryFilterRequest request) {
        TicketRestorationInquiryPage inquiryPage = transactionTemplate.executeMainReadableTransaction(
                () -> ticketRestorationInquiryService.fetchAll(request.toWhereCondition(type)));

        List<MemberTemplate> members = inquiryPage.getMembers();
        List<HospitalTemplate> hospitals = inquiryPage.getHospitals();
        List<ReservationShortTemplate> reservations = inquiryPage.getReservations();

        return TicketRestorationInquiryPageablePayload.builder()
                .inquiries(inquiryPage.getInquiries())
                .members(members.stream()
                        .collect(Collectors.toMap(MemberTemplate::getId, Function.identity(), (a, b) -> a)))
                .hospital(hospitals.stream()
                        .collect(Collectors.toMap(HospitalTemplate::getId, Function.identity(), (a, b) -> a)))
                .reservation(reservations.stream()
                        .collect(Collectors.toMap(ReservationShortTemplate::getId, Function.identity(), (a, b) -> a)))
                .pageable(inquiryPage.getPageable())
                .build();
    }

    public BoolPayload registerInquiry(TicketRestorationInquiryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationTemplate reservation =
                    reservationReadableService.retrieveReservation(request.getReservationId());

            if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(reservation.getHospitalId())) {
                throw new TicketException(TicketCode.TICKET_RESTORATION_INQUIRY_MUTATION_INVALID,
                        MessageUtils.format("admin (id: {}) has no authority for ticket inquiry of hospital (id: {}) ",
                                DiagnosticContext.adminHospitalRole().getAdminId(), reservation.getHospitalId()));
            }

            TicketRestorationInquiry ticketRestorationInquiry = ticketRestorationInquiryService.registerInquiry(request);
            ticketRestorationInquiryService.registerReservationAsTicketLog(request, ticketRestorationInquiry.getId());

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public TicketRestorationInquiryPayload confirmInquiry(TicketRestorationInquiryConfirmationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            TicketRestorationInquiry inquiry =
                    ticketRestorationInquiryService.confirmInquiry(request.getInquiryId(), UserType.ADMIN);

            return TicketRestorationInquiryPayload.builder()
                    .inquiry(payloadFactory.ticketRestorationInquiryTemplate(inquiry))
                    .hospital(payloadFactory.hospitalTemplate(inquiry.getHospital()))
                    .member(payloadFactory.memberTemplate(inquiry.getReservationMember()))
                    .build();
        });
    }

    public ReservationAsTicketLogTemplate cancelTicket(long reservationAsTicketLogId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            ReservationAsTicketLog reservationAsTicketLog = ticketRestorationInquiryService.cancelInquiryTicket(
                    reservationAsTicketLogId);
            Long ticketId = reservationAsTicketLog.getTicket().getId();

            TicketTemplate ticket = ticketService.findTicketById(ticketId);
            TicketStatus ticketStatus = ticket.isExpired() ? TicketStatus.EXPIRED : TicketStatus.UNUSED;

            List<ReservationAsTicket> reservationAsTickets = reservationReadableService.findReservationAsTicketByReservationId(
                    Set.of(reservationAsTicketLog.getReservation().getId()));

            boolean existSalesEvent = reservationAsTickets.stream()
                    .filter(reservationAsTicket -> !Objects.equals(reservationAsTicket.getTicket().getId(),
                            reservationAsTicketLog.getTicket().getId()))
                    .anyMatch(reservationAsTicket -> Objects.equals(reservationAsTicket.getSalesEvent().getId(),
                            reservationAsTicketLog.getSalesEvent().getId()));

            List<Ticket> modifiedTickets =
                    ticketService.modifyTicketStatus(Collections.singletonList(ticket.getId()), ticketStatus);

            // 예약에 사용된 티켓 삭제
            ReservationAsTicket reservationAsTicket = reservationReadableService.findReservationAsTicketByReservationIdAndTicketId(
                    reservationAsTicketLog.getReservation().getId(), reservationAsTicketLog.getTicket().getId());

            reservationWritableService.deleteReservationAsTickets(List.of(reservationAsTicket));
            // 정산, 보험 처리 반영
            settlementService.revertSettlement(Collections.singletonList(ticketId), LocalDateTime.now());
            insuranceService.modifyInsuranceTicketStatus(Collections.singletonList(ticketId), InsuranceTicketStatus.UNUSED);

            // 티켓 선택 취소시 해당 예약에 취소하는 티켓의 이벤트가 없을 경우 작성가능한 리뷰 삭제
            if (!existSalesEvent) {
                treatmentReviewService.findAllByMemberId(ticket.getMemberId())
                        .stream()
                        .filter(review -> Objects.equals(review.getReservation().getId(),
                                reservationAsTicketLog.getReservation().getId()))
                        .filter(review -> Objects.equals(review.getSalesEvent().getId(),
                                reservationAsTicketLog.getSalesEvent().getId()))
                        .findAny()
                        .ifPresentOrElse(
                                review -> treatmentReviewService.deleteTreatmentReview(review.getId()),
                                () -> {
                                    ReservationTemplate reservationTemplate = reservationReadableService.retrieveReservation(
                                            reservationAsTicketLog.getReservation().getId());

                                    treatmentReviewService.removeWritableTreatmentReview(reservationTemplate,
                                            reservationAsTicketLog.getSalesEvent().getId());
                                });
            }

            memberService.applyStat(MemberTicketMinusStat.builder()
                    .tickets(modifiedTickets)
                    .orderSalesProducts(orderService.fetchAllOrderSalesProductsByIds(modifiedTickets.stream()
                            .map(it -> it.getOrderSalesProduct().getId())
                            .collect(Collectors.toList())))
                    .at(LocalDateTime.now())
                    .build());

            return payloadFactory.reservationAsTicketLogTemplate(reservationAsTicketLog);
        });
    }

    public BoolPayload deleteInquiryTickets(long inquiryId) {
        Boolean result = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    ticketRestorationInquiryService.confirmInquiry(inquiryId, UserType.ADMIN);
                    ticketRestorationInquiryService.deleteInquiryTickets(
                            ReservationAsTicketLogAction.TICKET_RESTORATION_INQUIRY, inquiryId);

                    return true;
                });

        return BoolPayload.of(result);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/usecase/TicketUseCase.java
================================================
package kr.co.yeoshin.admin.ticket.usecase;

import io.micrometer.core.instrument.util.StringUtils;
import java.util.Collections;
import java.util.Optional;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.AuthCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.api.request.PageableRequest;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.AuthorizationException;
import kr.co.yeoshin.admin.reservation.usecase.model.TicketsPayload;
import kr.co.yeoshin.admin.ticket.controller.model.TicketFilterRequest;
import kr.co.yeoshin.admin.ticket.service.TicketService;
import kr.co.yeoshin.admin.ticket.service.model.CountPayload;
import kr.co.yeoshin.admin.ticket.service.model.TicketPageablePayload;
import kr.co.yeoshin.admin.ticket.service.model.TicketPayload;
import kr.co.yeoshin.common.jpa.model.OrderTable;
import kr.co.yeoshin.common.jpa.model.PathOrder;
import kr.co.yeoshin.common.jpa.model.TicketTable;
import kr.co.yeoshin.common.payment.model.TicketWhereCondition;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;

@UseCase
@RequiredArgsConstructor
public class TicketUseCase {

    private final TicketService ticketService;
    private final TransactionTemplate transactionTemplate;

    public TicketPageablePayload retrieveGroupTickets(TicketFilterRequest request, boolean skipTotalCount) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);

            // canceledAt or usedAt 이나 groupId 로만 정렬
            Sort sort = Optional.ofNullable(request.getPageable())
                    .map(PageableRequest::getSort)
                    .flatMap(st -> st.stream()
                            .filter(s -> OrderTable.order.canceledAt.getMetadata().getName().equals(s.getProperty())
                                    || TicketTable.ticket.usedAt.getMetadata().getName().equals(s.getProperty()))
                            .findFirst())
                    .map(s -> Sort.by(
                            PathOrder.desc(s.getProperty(),
                                    OrderTable.order.canceledAt.getMetadata().getName().equals(s.getProperty())
                                            ? OrderTable.order : TicketTable.ticket),
                            PathOrder.desc(TicketTable.ticket.groupId.getMetadata().getName(), TicketTable.ticket)))
                    .orElse(null);

            if (sort == null) {
                // 성능 이슈로 sort 강제
                String groupId = TicketTable.ticket.groupId.getMetadata().getName();
                sort = Sort.by(Order.desc(groupId));
            }

            TicketWhereCondition whereCondition =
                    request.toWhereCondition(currentHospitalId, null, sort, DiagnosticContext.isPlusAdmin(), skipTotalCount);

            // 특정 티켓을 검색하는 것이 아닌 경우
            if (StringUtils.isBlank(request.getTicketCode())) {
                return ticketService.retrieveAllGroupTickets(whereCondition);
            }

            // 티켓을 특정하여 code로 조회 시 해당 티켓이 포함된 group의 취소 상태 확인하여 조회
            TicketPayload ticketPayload =
                    ticketService.retrieveGroupTickets(request.getTicketCode(),
                            request.getOrderStatuses(),
                            request.excludeWholeCanceledGroup());

            if (ticketPayload.isEmpty()) {
                return TicketPageablePayload.empty();
            }

            return ticketService.retrieveAllGroupTickets(whereCondition.toBuilder()
                    .orderStatuses(Collections.emptyList())
                    .statuses(Collections.emptyList())
                    .ticketId(ticketPayload.getTicket().getId())
                    .build());
        });
    }

    public TicketPageablePayload retrieveTickets(TicketFilterRequest request, boolean group, boolean skipTotalCount) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            if (group) {
                return retrieveGroupTickets(request, skipTotalCount);
            }

            Long currentHospitalId = DiagnosticContext.currentHospitalId().orElse(null);

            TicketWhereCondition whereCondition =
                    request.toWhereCondition(currentHospitalId, null, null, DiagnosticContext.isPlusAdmin(), skipTotalCount);

            return ticketService.retrieveAllTickets(whereCondition);
        });
    }

    public TicketPayload retrieveTicket(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> ticketService.retrieveTicket(id));
    }

    public BoolPayload updateMemo(long id, String memo) {
        return transactionTemplate.executeMainWritableTransaction(() -> ticketService.updateMemo(id, memo));
    }

    public TicketsPayload extendExpiration(long id, boolean group) {
        if (group) {
            return transactionTemplate.executeMainWritableTransaction(() -> ticketService.extendGroupExpiration(id));
        } else {
            return transactionTemplate.executeMainWritableTransaction(() -> ticketService.extendExpiration(id));
        }
    }

    public CountPayload countDelayedVisitConfirmations(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> ticketService.countDelayedVisitConfirmations(hospitalId));
    }

    public BoolPayload existTicketsByStatus(long hospitalId, TicketStatus status) {
        if (!DiagnosticContext.adminHospitalRole().hasAuthorityFor(hospitalId)) {
            throw new AuthorizationException(AuthCode.AUTH_ADMIN_HOSPITAL_ROLE_INVALID);
        }

        return transactionTemplate.executeMainReadableTransaction(
                () -> BoolPayload.builder()
                        .result(ticketService.existByStatus(hospitalId, status))
                        .build());
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/usecase/model/TicketRestorationInquiryPageablePayload.java
================================================
package kr.co.yeoshin.admin.ticket.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketRestorationInquiryPageablePayload implements SystemAccessible {

    private List<TicketRestorationInquiryTemplate> inquiries;
    private Map<Long, MemberTemplate> members;
    private Map<Long, HospitalTemplate> hospital;
    private Map<Long, ReservationShortTemplate> reservation;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/ticket/usecase/model/TicketRestorationInquiryPayload.java
================================================
package kr.co.yeoshin.admin.ticket.usecase.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.HospitalTemplate;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.TicketRestorationInquiryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TicketRestorationInquiryPayload implements SystemAccessible {

    private TicketRestorationInquiryTemplate inquiry;
    private HospitalTemplate hospital;
    private MemberTemplate member;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tosspayments/model/TossPaymentsPaymentPayload.java
================================================
package kr.co.yeoshin.admin.tosspayments.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class TossPaymentsPaymentPayload {

    // https://docs.tosspayments.com/reference#payment-%EA%B0%9D%EC%B2%B4
    @JsonProperty("mId")
    private String merchantId;

    @JsonProperty("orderId")
    private String orderId;

    @JsonProperty("status")
    private String status;

    @JsonProperty("type")
    private String type;

    @JsonProperty("paymentKey")
    private String paymentKey;

    @JsonProperty("method")
    private String method;

    @JsonProperty("totalAmount")
    private int totalAmount;

    @JsonProperty("card")
    private TossPaymentsCardContext card;

    @JsonProperty("virtualAccount")
    private TossPaymentsVirtualAccountContext virtualAccount;

    @JsonProperty("discount")
    private TossPaymentsDiscount discount;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tosspayments/model/TossPaymentsRegisterSellerRequestPayload.java
================================================
package kr.co.yeoshin.admin.tosspayments.model;

import java.util.EnumSet;
import java.util.Map;
import kr.co.yeoshin.common.hospital.entity.HospitalPartnership;
import kr.co.yeoshin.common.hospital.type.HospitalBusinessType;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;

@Getter
@Builder(access = AccessLevel.PRIVATE)
public class TossPaymentsRegisterSellerRequestPayload {

    private String refSellerId;
    private TossPaymentsBusinessType businessType;
    private Company company;
    private BankAccount account;
    private Map<String, String> metadata;

    public static TossPaymentsRegisterSellerRequestPayload of(HospitalPartnership hospitalPartnership, String subMerchantId) {
        return TossPaymentsRegisterSellerRequestPayload.builder()
                .refSellerId(subMerchantId)
                .businessType(TossPaymentsBusinessType.findBy(hospitalPartnership.getBusinessType()))
                .company(Company.builder()
                        .name(hospitalPartnership.getBusinessRegistrationName())
                        .representativeName(hospitalPartnership.getRepresentativeName())
                        .businessRegistrationNumber(StringUtils.replace(hospitalPartnership.getBusinessRegistrationNumber(),
                                "-", StringUtils.EMPTY))
                        .phone(StringUtils.replace(hospitalPartnership.getPaymentAgentPhoneNumber(), "-", StringUtils.EMPTY))
                        .email(hospitalPartnership.getPaymentAgentEmails().stream().findFirst().orElse(null))
                        .build())
                .account(BankAccount.builder()
                        .bankCode(hospitalPartnership.getBankType().getCode())
                        .accountNumber(StringUtils.replace(hospitalPartnership.getAccountNumber(), "-", StringUtils.EMPTY))
                        .holderName(hospitalPartnership.getDepositorName())
                        .build())
                .metadata(Map.of())
                .build();
    }

    @Getter
    @Builder
    public static class Company {

        private String name;
        private String representativeName;
        private String businessRegistrationNumber;
        private String email;
        private String phone;
    }

    @Getter
    @Builder
    public static class BankAccount {

        private String bankCode;
        private String accountNumber;
        private String holderName;
    }

    @RequiredArgsConstructor
    enum TossPaymentsBusinessType {
        INDIVIDUAL_BUSINESS(HospitalBusinessType.INDIVIDUAL),    // 개인사업자
        CORPORATE(HospitalBusinessType.CORPORATE);       // 법인사업자

        private final HospitalBusinessType hospitalBusinessType;

        public static TossPaymentsBusinessType findBy(HospitalBusinessType hospitalBusinessType) {
            return EnumSet.allOf(TossPaymentsBusinessType.class).stream()
                    .filter(it -> it.hospitalBusinessType == hospitalBusinessType)
                    .findFirst()
                    .orElse(null);
        }
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tosspayments/model/TossPaymentsRegisterSellerSuccessPayload.java
================================================
package kr.co.yeoshin.admin.tosspayments.model;

import lombok.Getter;

/**
 * {
 *   "version": "2022-11-16",
 *   "traceId": "123fd1b012345e1fdf0123a012dcee5c",
 *   "entityType": "seller",
 *   "entityBody": {
 *     "id": "seller-1",
 *     "refSellerId": "my-seller-1",
 *     "businessType": "INDIVIDUAL_BUSINESS",
 *     "company": {
 *       "name": "테스트 상호",
 *       "representativeName": "김토스",
 *       "businessRegistrationNumber": "1234567890",
 *       "email": "toss@sample.com",
 *       "phone": "01012345678"
 *     },
 *     "individual": null,
 *     "account": {
 *       "bankCode": "092",
 *       "accountNumber": "123*****90123",
 *       "holderName": "김토스"
 *     },
 *     "status": "APPROVAL_REQUIRED",
 *     "metadata": {
 *       "key1": "value1",
 *       "key2": "value2"
 *     }
 *   }
 * }
 */
@Getter
public class TossPaymentsRegisterSellerSuccessPayload {

    private String version;
    private String traceId;
    private String entityType;
    private TossPaymentsSellerResponsePayload entityBody;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tosspayments/model/TossPaymentsSellerApiErrorPayload.java
================================================
package kr.co.yeoshin.admin.tosspayments.model;

import kr.co.yeoshin.admin.hospital.service.model.SubMerchantApiErrorCode;
import kr.co.yeoshin.admin.order.usecase.model.PgType;
import lombok.Getter;

/**
 * { "version": "2022-11-16", "traceId": "{traceId}", "error": { "code": "{CODE}", "message": "{MESSAGE}", } }
 */
@Getter
public class TossPaymentsSellerApiErrorPayload {

    private String version;
    private String traceId;
    private Error error;

    @Getter
    public static class Error {

        private String code;
        private String message;
    }

    public SubMerchantApiErrorCode getErrorCode() {
        return SubMerchantApiErrorCode.findByCode(PgType.TOSS_PAYMENTS, this.error.code);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tosspayments/model/TossPaymentsSellerResponsePayload.java
================================================
package kr.co.yeoshin.admin.tosspayments.model;

import lombok.Getter;

@Getter
public class TossPaymentsSellerResponsePayload {

    private String id;
    private String refSellerId;
    private String businessType;
    private Company company;
    private String individual;
    private BankAccount account;
    private String status;

    @Getter
    public static class Company {

        private String name;
        private String representativeName;
        private String businessRegistrationNumber;
        private String email;
        private String phone;
    }

    @Getter
    public static class BankAccount {

        private String bankCode;
        private String accountNumber;
        private String holderName;
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/translation/service/model/TranslatorPayload.java
================================================
package kr.co.yeoshin.admin.translation.service.model;

import kr.co.yeoshin.admin.common.model.template.TranslatorTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TranslatorPayload {

    private TranslatorTemplate translatorText;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/translation/usecase/MultiLanguageUseCase.java
================================================
package kr.co.yeoshin.admin.translation.usecase;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.common.component.CacheTemplate;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.component.type.CacheKey;
import kr.co.yeoshin.admin.common.component.type.CacheType;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.localetext.MultiLanguage;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.translation.service.MultiLanguageService;
import kr.co.yeoshin.admin.translation.usecase.model.KeywordReplacedText;
import kr.co.yeoshin.admin.translation.usecase.model.KeywordReplacementItem;
import kr.co.yeoshin.common.translation.type.KeywordDomainType;
import kr.co.yeoshin.common.type.Language;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;

@UseCase
@RequiredArgsConstructor
public class MultiLanguageUseCase {

    private final MultiLanguageService multiLanguageService;
    private final TransactionTemplate transactionTemplate;
    private final CacheTemplate cacheTemplate;


    public List<MultiLanguage> retrieveKeywords(KeywordDomainType domainType, Language language) {
        return loadMultiLanguageKeywords(domainType, language);
    }

    public List<KeywordReplacedText> replaceKeywords(KeywordDomainType domainType, List<KeywordReplacementItem> request) {
        return request.stream()
                .map(it -> KeywordReplacedText.builder()
                        .source(it.getText())
                        .result(replaceKeyword(domainType, it.getText(), it.getSource(), it.getTarget()))
                        .build())
                .collect(Collectors.toList());
    }

    public String replaceKeyword(KeywordDomainType domainType, String text, Language sourceLanguage, Language targetLanguage) {
        return replaceKeyword(text, sourceLanguage, targetLanguage, loadMultiLanguageKeywords(domainType, sourceLanguage));
    }

    String replaceKeyword(String text, Language sourceLanguage, Language targetLanguage,
            List<MultiLanguage> keywordList) {
        if (StringUtils.isBlank(text)) {
            return text;
        }

        return keywordList.stream()
                .filter(k -> StringUtils.containsIgnoreCase(text, k.get(sourceLanguage)))
                .findFirst()
                .map(k -> {
                    String keyword = k.get(sourceLanguage);
                    int start = StringUtils.indexOfIgnoreCase(text, keyword);
                    int end = start + keyword.length();

                    return replaceKeyword(text.substring(0, start), sourceLanguage, targetLanguage, keywordList)
                            + StringUtils.replaceIgnoreCase(text.substring(start, end), k.get(sourceLanguage),
                            k.get(targetLanguage), 1)
                            + replaceKeyword(text.substring(end), sourceLanguage, targetLanguage, keywordList);
                })
                .orElse(text);
    }

    public List<MultiLanguage> registerKeywords(KeywordDomainType domainType, List<MultiLanguage> keywords) {
        return transactionTemplate.executeMainWritableTransaction(() ->
                multiLanguageService.registerKeywords(domainType, keywords)
                        .stream()
                        .map(k -> MultiLanguage.builder().ko(k.getKo()).en(k.getEn()).zh(k.getZh()).ja(k.getJa()).build())
                        .collect(Collectors.toList())
        );
    }

    public BoolPayload deleteKeywords(KeywordDomainType domainType, List<String> keywords) {
        transactionTemplate.executeMainWritableTransaction(() -> multiLanguageService.deleteKeywords(domainType, keywords));

        return BoolPayload.of(true);
    }

    private List<MultiLanguage> loadMultiLanguageKeywords(KeywordDomainType domainType, Language language) {
        var cacheKey = CacheKey.of(CacheType.Service.ADMIN_SALES_PRODUCT_ATTRIBUTE, "multiLanguageKeywords_" + domainType);
        return cacheTemplate.local(cacheKey, () -> transactionTemplate.executeMainReadableTransaction(
                        () -> multiLanguageService.retrieveKeywords(domainType)).stream()
                .map(k -> MultiLanguage.builder().ko(k.getKo()).en(k.getEn()).zh(k.getZh()).ja(k.getJa()).build())
                .sorted(Comparator.comparingInt((MultiLanguage k) -> k.get(language).length())
                        .reversed()
                        .thenComparing(k -> k.get(language)))
                .collect(Collectors.toUnmodifiableList()));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/translation/usecase/TranslationUseCase.java
================================================
package kr.co.yeoshin.admin.translation.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.CommonCode;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.TranslationException;
import kr.co.yeoshin.admin.translation.controller.model.TranslatorRequest;
import kr.co.yeoshin.admin.translation.service.TranslationService;
import kr.co.yeoshin.admin.translation.service.model.TranslatorPayload;
import kr.co.yeoshin.common.translation.type.DeeplLangType;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class TranslationUseCase {

    private final TranslationService translationService;
    private final TransactionTemplate transactionTemplate;

    public TranslatorPayload translate(TranslatorRequest request) {
        if (!translationService.isTranslatable()) {
            throw new TranslationException(CommonCode.BAD_REQUEST, "Too many requests");
        }

        DeeplLangType langType = DeeplLangType.from(request.getTranslationLanguage());
        if (langType == null) {
            throw new TranslationException(CommonCode.BAD_REQUEST,
                    MessageUtils.format("language({}) is not supported.",
                            request.getTranslationLanguage()));
        }

        TranslatorPayload cachedPayload = transactionTemplate.executeMainReadableTransaction(
                () -> translationService.retrieveTranslation(
                        request.getSourceText(),
                        langType.getLocale()));
        if (cachedPayload != null) {
            return cachedPayload;
        }

        TranslatorPayload translatePayload = translationService.translate(
                request.getSourceText(), langType);
        if (translatePayload == null || translatePayload.getTranslatorText() == null) {
            throw new TranslationException(CommonCode.ERROR, "deepl translate fail.");
        }

        if (!request.isCacheable()) {
            return translatePayload;
        }

        return transactionTemplate.executeMainWritableTransaction(
                () -> translationService.registerTranslation(
                        request.getSourceText(),
                        langType.getLocale().getLanguage(),
                        translatePayload.getTranslatorText().getTranslationText()));
    }

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/service/model/TreatmentLibraryPageablePayload.java
================================================
package kr.co.yeoshin.admin.treatment.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentLibraryShortTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class TreatmentLibraryPageablePayload implements SystemAccessible {

    private List<TreatmentLibraryShortTemplate> treatmentLibraries;
    private Map<Long, TreatmentTemplate> treatments;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/service/model/TreatmentLibraryPayload.java
================================================
package kr.co.yeoshin.admin.treatment.service.model;

import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.TreatmentLibraryTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentPrincipleTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentLibraryPayload {

    private TreatmentLibraryTemplate treatmentLibrary;
    private Map<Long, TreatmentPrincipleTemplate> treatmentPrinciples;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/service/model/TreatmentPrinciplePageablePayload.java
================================================
package kr.co.yeoshin.admin.treatment.service.model;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.SystemAccessible;
import kr.co.yeoshin.admin.common.model.api.request.PageableRequest;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentPrincipleTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentPrinciplePageablePayload implements SystemAccessible {

    private List<TreatmentPrincipleTemplate> principles;
    private PageableTemplate pageable;

    public static TreatmentPrinciplePageablePayload empty(PageableRequest pageableRequest) {
        return TreatmentPrinciplePageablePayload.builder()
                .principles(Collections.emptyList())
                .pageable(PageableTemplate.of(pageableRequest, 0))
                .build();
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/service/model/TreatmentPrinciplePayload.java
================================================
package kr.co.yeoshin.admin.treatment.service.model;

import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.TreatmentPrincipleTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentPrinciplePayload implements PlusAccessible {

    private TreatmentPrincipleTemplate treatmentPrinciple;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/usecase/TreatmentLibraryUseCase.java
================================================
package kr.co.yeoshin.admin.treatment.usecase;

import java.util.List;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.TextIconTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentLibraryTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.treatment.controller.model.TreatmentLibraryFilterRequest;
import kr.co.yeoshin.admin.treatment.controller.model.TreatmentLibraryMutationRequest;
import kr.co.yeoshin.admin.treatment.service.TreatmentLibraryService;
import kr.co.yeoshin.admin.treatment.service.TreatmentPrincipleService;
import kr.co.yeoshin.admin.treatment.service.model.TreatmentLibraryPageablePayload;
import kr.co.yeoshin.admin.treatment.service.model.TreatmentLibraryPayload;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleUsageType;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class TreatmentLibraryUseCase {

    private final TreatmentLibraryService treatmentLibraryService;
    private final TreatmentPrincipleService treatmentPrincipleService;
    private final TransactionTemplate transactionTemplate;

    public TreatmentLibraryPageablePayload retrieveTreatmentLibraries(TreatmentLibraryFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentLibraryService.retrieveTreatmentLibraries(request, true));
    }

    public TreatmentLibraryPayload retrieveTreatmentLibrary(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> treatmentLibraryService.retrieveTreatmentLibrary(id));
    }

    public TreatmentLibraryPayload registerTreatmentLibrary(TreatmentLibraryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            TreatmentLibraryTemplate template = treatmentLibraryService.registerTreatmentLibrary(request);
            treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                    TreatmentPrincipleUsageType.TREATMENT_LIBRARY,
                    template.getId(),
                    request.getTreatmentPrincipleIds()
            );

            return treatmentLibraryService.retrieveTreatmentLibrary(template.getId());
        });
    }

    public TreatmentLibraryPayload updateTreatmentLibrary(long treatmentLibraryId, TreatmentLibraryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {

            treatmentPrincipleService.upsertTreatmentPrincipleUsage(
                    TreatmentPrincipleUsageType.TREATMENT_LIBRARY,
                    treatmentLibraryId,
                    request.getTreatmentPrincipleIds()
            );

            treatmentLibraryService.updateTreatmentLibrary(treatmentLibraryId, request);

            return treatmentLibraryService.retrieveTreatmentLibrary(treatmentLibraryId);
        });
    }

    public BoolPayload deleteTreatmentLibrary(long treatmentLibraryId) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            treatmentLibraryService.deleteTreatmentLibrary(treatmentLibraryId);
            treatmentPrincipleService.deleteAllTreatmentPrincipleUsages(
                    TreatmentPrincipleUsageType.TREATMENT_LIBRARY, treatmentLibraryId);
            return BoolPayload.builder().result(true).build();
        });
    }

    public List<TextIconTemplate> retrieveSuggestionTargets() {
        return transactionTemplate.executeMainReadableTransaction(treatmentLibraryService::retrieveSuggestionTargets);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/usecase/TreatmentPrincipleUseCase.java
================================================
package kr.co.yeoshin.admin.treatment.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.treatment.controller.model.TreatmentPrincipleFilterRequest;
import kr.co.yeoshin.admin.treatment.controller.model.TreatmentPrincipleMutationRequest;
import kr.co.yeoshin.admin.treatment.service.TreatmentPrincipleService;
import kr.co.yeoshin.admin.treatment.service.model.TreatmentPrinciplePageablePayload;
import kr.co.yeoshin.admin.treatment.service.model.TreatmentPrinciplePayload;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class TreatmentPrincipleUseCase {

    private final TreatmentPrincipleService treatmentPrincipleService;
    private final TransactionTemplate transactionTemplate;

    public TreatmentPrinciplePageablePayload retrieveTreatmentPrinciples(TreatmentPrincipleFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentPrincipleService.retrieveTreatmentPrinciples(request, true));
    }

    public TreatmentPrinciplePayload retrieveTreatmentPrinciple(long id) {
        return transactionTemplate.executeMainReadableTransaction(() -> treatmentPrincipleService.retrieveTreatmentPrinciple(id));
    }

    public TreatmentPrinciplePayload registerTreatmentPrinciple(TreatmentPrincipleMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentPrincipleService.registerTreatmentPrinciple(request));
    }

    public TreatmentPrinciplePayload updateTreatmentPrinciple(long id, TreatmentPrincipleMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> treatmentPrincipleService.updateTreatmentPrinciple(id, request));
    }

    public BoolPayload deleteTreatmentPrinciple(long id) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            boolean success = treatmentPrincipleService.deleteTreatmentPrinciple(id);
            return BoolPayload.builder().result(success).build();
        });
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/usecase/TreatmentUseCase.java
================================================
package kr.co.yeoshin.admin.treatment.usecase;

import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.treatment.controller.model.TreatmentFilterRequest;
import kr.co.yeoshin.admin.treatment.controller.model.TreatmentMutationRequest;
import kr.co.yeoshin.admin.treatment.service.TreatmentService;
import kr.co.yeoshin.admin.treatment.usecase.model.TreatmentPageablePayload;
import kr.co.yeoshin.admin.treatment.usecase.model.TreatmentPayload;
import kr.co.yeoshin.common.product.entity.Treatment;
import lombok.RequiredArgsConstructor;

@UseCase
@RequiredArgsConstructor
public class TreatmentUseCase {

    private final TreatmentService treatmentService;
    private final TransactionTemplate transactionTemplate;

    public TreatmentPageablePayload retrieveTreatments(TreatmentFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> treatmentService.findAllTreatments(request.toWhereCondition()));
    }

    public TreatmentPayload retrieveTreatment(long id, boolean includeAllLibraries) {
        return transactionTemplate.executeMainReadableTransaction(() -> treatmentService.findByTreatmentId(id, includeAllLibraries));
    }

    public TreatmentPayload registerTreatment(TreatmentMutationRequest request) {
        Treatment treatment = transactionTemplate.executeMainWritableTransaction(() -> treatmentService.registerTreatment(request));

        return retrieveTreatment(treatment.getId(), false);
    }

    public TreatmentPayload updateTreatment(long id, TreatmentMutationRequest request) {
        Treatment treatment = transactionTemplate.executeMainWritableTransaction(() -> treatmentService.updateTreatment(id, request));

        return retrieveTreatment(treatment.getId(), false);
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/usecase/model/TreatmentPageablePayload.java
================================================
package kr.co.yeoshin.admin.treatment.usecase.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentPageablePayload implements PlusAccessible {

    private List<TreatmentTemplate> treatments;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/treatment/usecase/model/TreatmentPayload.java
================================================
package kr.co.yeoshin.admin.treatment.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.api.payload.level.PlusAccessible;
import kr.co.yeoshin.admin.common.model.template.TreatmentLibraryTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentPrincipleTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentPayload implements PlusAccessible {

    private TreatmentTemplate treatment;
    private List<TreatmentLibraryTemplate> treatmentLibraries;
    private Map<Long, TreatmentPrincipleTemplate> treatmentPrinciples;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/service/model/CategoryTypeListPayload.java
================================================
package kr.co.yeoshin.admin.tv.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.CategoryTemplate;
import kr.co.yeoshin.admin.common.model.template.TagTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CategoryTypeListPayload {

    private List<CategoryTemplate> troubleBodyParts;
    private List<CategoryTemplate> troubleTypes;
    private List<CategoryTemplate> troubleSubTypes;
    private List<TagTemplate> solutionTags;
    private List<TreatmentTemplate> treatments;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/service/model/TvCategoryPayload.java
================================================
package kr.co.yeoshin.admin.tv.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.TvCategoryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvCategoryPayload {

    List<TvCategoryTemplate> activeCategories;
    List<TvCategoryTemplate> bookCategories;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/service/model/TvHidePayload.java
================================================
package kr.co.yeoshin.admin.tv.service.model;

import java.util.List;
import kr.co.yeoshin.admin.common.model.template.ExplorerThemeShortTemplate;
import kr.co.yeoshin.admin.common.model.template.TreatmentFocusTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvHidePayload {

    private boolean isHidable;
    private List<TreatmentFocusTemplate> tvUseTreatmentFocuses;
    private List<ExplorerThemeShortTemplate> tvUseExplorerTheme;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/service/model/TvReplyPageablePayload.java
================================================
package kr.co.yeoshin.admin.tv.service.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.MemberTemplate;
import kr.co.yeoshin.admin.common.model.template.PageableTemplate;
import kr.co.yeoshin.admin.common.model.template.TvReplyTemplate;
import kr.co.yeoshin.admin.common.model.template.TvShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvReplyPageablePayload {

    private List<TvReplyTemplate> tvReplies;
    private Map<Long, TvShortTemplate> tvs;
    private Map<Long, MemberTemplate> members;
    private PageableTemplate pageable;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/usecase/TvUseCase.java
================================================
package kr.co.yeoshin.admin.tv.usecase;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.admin.administrator.service.AdminService;
import kr.co.yeoshin.admin.common.component.PayloadFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.HospitalCode;
import kr.co.yeoshin.admin.common.model.api.code.TvCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.model.template.AdminShortTemplate;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.exception.TvException;
import kr.co.yeoshin.admin.hospital.service.HospitalService;
import kr.co.yeoshin.admin.product.service.SalesEventService;
import kr.co.yeoshin.admin.treatment.service.TreatmentService;
import kr.co.yeoshin.admin.tv.controller.model.*;
import kr.co.yeoshin.admin.tv.service.TvService;
import kr.co.yeoshin.admin.tv.service.model.CategoryTypeListPayload;
import kr.co.yeoshin.admin.tv.service.model.TvCategoryPayload;
import kr.co.yeoshin.admin.tv.service.model.TvHidePayload;
import kr.co.yeoshin.admin.tv.service.model.TvReplyPageablePayload;
import kr.co.yeoshin.admin.tv.usecase.model.TvPageablePayload;
import kr.co.yeoshin.admin.tv.usecase.model.TvPayload;
import kr.co.yeoshin.admin.tv.usecase.model.TvReplyPayload;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.Treatment;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.tv.entity.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
@UseCase
public class TvUseCase {

    private final TvService tvService;
    private final SalesEventService salesEventService;
    private final TreatmentService treatmentService;
    private final HospitalService hospitalService;
    private final TransactionTemplate transactionTemplate;
    private final AdminService adminService;
    private final PayloadFactory payloadFactory;

    public TvPageablePayload retrieveTvs(TvFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> tvService.retrieveTvs(request.toWhereCondition()));
    }

    public TvPayload retrieveTv(long tvId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Tv tv = tvService.findTvById(tvId).orElseThrow(
                    () -> new TvException(TvCode.TV_NOT_EXIST));

            TvStat tvStat = tvService.findTvStatsByTvId(tv.getId())
                    .orElse(TvStat.builder().build());

            List<TvAsTreatment> tvAsTreatments = tvService.fetchTvAsTreatmentsByTvId(tvId);

            List<Treatment> treatments = tvAsTreatments.stream().map(TvAsTreatment::getTreatment)
                    .collect(Collectors.toList());

            List<TvAsSalesEvent> tvAsSalesEvents = tvService.fetchTvAsSalesEventsByTvId(tvId);

            List<SalesEvent> salesEvents = tvAsSalesEvents.stream()
                    .map(TvAsSalesEvent::getSalesEvent)
                    .collect(Collectors.toList());

            TvAsHospital tvAsHospital = tvService.fetchTvAsHospitalByTvId(tvId);
            Hospital tvPlayHospital = tvAsHospital != null ? tvAsHospital.getHospital() : null;

            List<Long> adminIds = new ArrayList<>();
            Optional.ofNullable(tv.getCreator()).map(Admin::getId).filter(id -> id > 0).ifPresent(adminIds::add);
            Optional.ofNullable(tv.getUpdater()).map(Admin::getId).filter(id -> id > 0).ifPresent(adminIds::add);
            Map<Long, AdminShortTemplate> admins = adminService.retrieveAdmins(adminIds)
                    .stream()
                    .collect(Collectors.toMap(AdminShortTemplate::getId, Function.identity()));

            return TvPayload.builder()
                    .tv(payloadFactory.tvTemplate(tv))
                    .tvStat(payloadFactory.tvStatTemplate(tvStat))
                    .treatments(treatments.stream().map(payloadFactory::treatmentTemplate)
                            .collect(Collectors.toList())
                    )
                    .salesEvents(salesEvents.stream().map(payloadFactory::salesEventTemplate)
                            .collect(Collectors.toList())
                    )
                    .tvPlayHospital(payloadFactory.hospitalShortTemplate(tvPlayHospital))
                    .admins(admins)
                    .build();
        });
    }

    public TvPayload registerTv(TvMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            Tv tv = tvService.registerTv(request);
            TvStat tvStat = tvService.registerTvStat(tv);

            List<Treatment> treatments = treatmentService.findByTreatmentIdIn(
                    request.getTreatmentIds());
            tvService.registerTvAsTreatments(treatments, tv);

            List<SalesEvent> salesEvents = salesEventService.findBySalesEventIdIn(
                    request.getSalesEventIds());
            tvService.registerTvAsSalesEvents(salesEvents, tv);

            Hospital tvPlayHospital = null;
            if (request.getTvPlayHospitalId() != null) {
                tvPlayHospital = hospitalService.fetchHospitalByHospitalId(
                                request.getTvPlayHospitalId())
                        .orElse(null);

                tvService.registerTvAsHospital(tvPlayHospital, tv);
            }

            return retrieveTv(tv.getId());
        });
    }

    public TvPayload updateTv(long tvId, TvMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            Tv tv = tvService.findTvById(tvId).orElseThrow(
                    () -> new TvException(TvCode.TV_NOT_EXIST));

            boolean isHidable = tvService.checkHideTv(tv, request.isVisible()).isHidable();
            if (!isHidable) {
                throw new TvException(TvCode.TV_UNABLE_TO_HIDE);
            }

            List<TvAsTreatment> tvAsTreatments = tvService.fetchTvAsTreatmentsByTvId(tvId);
            tvService.deleteTvAsTreatmentByIds(
                    tvAsTreatments.stream().map(TvAsTreatment::getId).collect(Collectors.toList()));

            List<TvAsSalesEvent> tvAsSalesEvents = tvService.fetchTvAsSalesEventsByTvId(tvId);
            tvService.deleteTvAsSalesEventByIds(
                    tvAsSalesEvents.stream().map(TvAsSalesEvent::getId)
                            .collect(Collectors.toList()));

            TvAsHospital tvAsHospital = tvService.fetchTvAsHospitalByTvId(tvId);
            if (tvAsHospital != null) {
                tvService.deleteTvAsHospital(tvAsHospital);
            }

            Tv updatedTv = tvService.updateTv(tvId, request);

            List<Treatment> treatments = treatmentService.findByTreatmentIdIn(
                    request.getTreatmentIds());
            tvService.registerTvAsTreatments(treatments, updatedTv);

            List<SalesEvent> salesEvents = salesEventService.findBySalesEventIdIn(
                    request.getSalesEventIds());
            tvService.registerTvAsSalesEvents(salesEvents, updatedTv);

            if (request.getTvPlayHospitalId() != null) {
                Hospital tvPlayHospital = hospitalService.fetchHospitalByHospitalId(request.getTvPlayHospitalId())
                        .orElseThrow(() -> new TvException(HospitalCode.HOSPITAL_NOT_EXIST));

                tvService.registerTvAsHospital(tvPlayHospital, updatedTv);
            }

            return retrieveTv(tvId);
        });
    }

    public BoolPayload deleteTv(long tvId) {
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    Tv tv = tvService.findTvById(tvId).orElseThrow(
                            () -> new TvException(TvCode.TV_NOT_EXIST));

                    boolean isHidable = tvService.checkHideTv(tv, false).isHidable();
                    if (!isHidable) {
                        throw new TvException(TvCode.TV_UNABLE_TO_HIDE);
                    }

                    List<TvAsTreatment> tvAsTreatments = tvService.fetchTvAsTreatmentsByTvId(tvId);

                    tvService.deleteTvAsTreatmentByIds(
                            tvAsTreatments.stream().map(TvAsTreatment::getId)
                                    .collect(Collectors.toList()));

                    List<TvAsSalesEvent> tvAsSalesEvents = tvService.fetchTvAsSalesEventsByTvId(
                            tvId);

                    tvService.deleteTvAsSalesEventByIds(
                            tvAsSalesEvents.stream().map(TvAsSalesEvent::getId)
                                    .collect(Collectors.toList()));

                    TvAsHospital tvAsHospital = tvService.fetchTvAsHospitalByTvId(tvId);

                    if (tvAsHospital != null) {
                        tvService.deleteTvAsHospital(tvAsHospital);
                    }

                    tvService.findTvStatsByTvId(tvId).ifPresent(x -> tvService.deleteTvStat(x));

                    tvService.deleteTv(tv);

                    return true;
                })).build();
    }

    public TvReplyPageablePayload retrieveTvReplies(TvReplyFilterRequest request) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> tvService.fetchAllTvReply(request.toWhereCondition()));
    }

    public TvReplyPayload retrieveTvReply(long tvReplyId) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> tvService.retrieveTvReply(tvReplyId)
        );
    }

    public TvReplyPayload updateTvReply(long tvReplyId, TvReplyMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> tvService.updateTvReply(tvReplyId, request)
        );
    }


    public BoolPayload deleteTvReply(long tvReplyId) {
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    TvReply tvReply = tvService.findTvReplyById(tvReplyId)
                            .orElseThrow(() -> new TvException(TvCode.TV_REPLY_NOT_EXIST));

                    tvService.deleteTvReply(tvReply);

                    return true;
                })
        ).build();
    }


    public TvCategoryPayload tvCategoryList() {
        return transactionTemplate.executeMainReadableTransaction(tvService::tvCategoryList);
    }

    public TvCategoryPayload registerTvCategory(TvCategoryMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(
                () -> tvService.registerTvCategory(request)
        );
    }

    public CategoryTypeListPayload findCategoryTypeList() {
        return transactionTemplate.executeMainReadableTransaction(tvService::findCategoryTypeList);
    }

    public TvHidePayload checkHideTv(long tvId, TvMutationRequest request) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
            Tv tv = tvService.findTvById(tvId).orElseThrow(
                    () -> new TvException(TvCode.TV_NOT_EXIST));

            return tvService.checkHideTv(tv, request.isVisible());
        });
    }

    public BoolPayload updateAdminMemo(long id, String adminMemo) {
        return transactionTemplate.executeMainWritableTransaction(() -> tvService.updateAdminMemo(id, adminMemo));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/usecase/model/TvPageablePayload.java
================================================
package kr.co.yeoshin.admin.tv.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvPageablePayload {

    private List<TvShortTemplate> tvs;
    private Map<Long, TvStatTemplate> tvStats;
    private Map<Long, HospitalShortTemplate> hospitals;
    private Map<Long, List<TreatmentTemplate>> treatmentsByTvId;
    private PageableTemplate pageable;
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/usecase/model/TvPayload.java
================================================
package kr.co.yeoshin.admin.tv.usecase.model;

import java.util.List;
import java.util.Map;
import kr.co.yeoshin.admin.common.model.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvPayload {

    private TvTemplate tv;
    private TvStatTemplate tvStat;
    private List<TreatmentTemplate> treatments;
    private List<SalesEventTemplate> salesEvents;
    private HospitalShortTemplate tvPlayHospital;
    private Map<Long, AdminShortTemplate> admins;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/tv/usecase/model/TvReplyPayload.java
================================================
package kr.co.yeoshin.admin.tv.usecase.model;

import kr.co.yeoshin.admin.common.model.template.MemberShortTemplate;
import kr.co.yeoshin.admin.common.model.template.TvReplyTemplate;
import kr.co.yeoshin.admin.common.model.template.TvShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvReplyPayload {

    private TvReplyTemplate tvReply;
    private MemberShortTemplate member;
    private TvShortTemplate tv;

}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/validator/usecase/ValidationUseCase.java
================================================
package kr.co.yeoshin.admin.validator.usecase;

import kr.co.yeoshin.admin.validator.model.model.ValidateResult;
import kr.co.yeoshin.admin.common.component.ResponseFactory;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.ApiResponse;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.validator.model.Validator;
import kr.co.yeoshin.admin.validator.service.ValidatorService;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@UseCase
public class ValidationUseCase {

    private final ValidatorService validatorService;
    private final TransactionTemplate transactionTemplate;
    private final ResponseFactory responseFactory;

    public ApiResponse<ValidateResult> validate(Validator validator, String value) {
        return transactionTemplate.executeMainReadableTransaction(
                () -> responseFactory.success(ValidateResult.builder()
                        .valid(validatorService.validate(validator, value))
                        .build()));
    }
}



================================================
File: admin/src/main/java/kr/co/yeoshin/admin/verify/usecase/VerificationUseCase.java
================================================
package kr.co.yeoshin.admin.verify.usecase;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.admin.audit.service.AdminAuditService;
import kr.co.yeoshin.admin.audit.service.model.AdminSignInAuditContext;
import kr.co.yeoshin.admin.auth.model.RegisteredSmsVerification;
import kr.co.yeoshin.admin.auth.service.AuthService;
import kr.co.yeoshin.admin.common.Constant.Auth;
import kr.co.yeoshin.admin.common.component.TransactionTemplate;
import kr.co.yeoshin.admin.common.model.api.code.NotificationCode;
import kr.co.yeoshin.admin.common.model.api.code.ValidatorCode;
import kr.co.yeoshin.admin.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.admin.common.stereotype.UseCase;
import kr.co.yeoshin.admin.context.DiagnosticContext;
import kr.co.yeoshin.admin.exception.VerificationException;
import kr.co.yeoshin.admin.notification.component.model.NhnSmsNotificationContext;
import kr.co.yeoshin.admin.notification.component.model.NotificationResult;
import kr.co.yeoshin.admin.notification.component.model.NotificationSmsIdType;
import kr.co.yeoshin.admin.notification.component.model.SmsRecipient;
import kr.co.yeoshin.admin.notification.service.NotificationService;
import kr.co.yeoshin.admin.verify.controller.model.*;
import kr.co.yeoshin.admin.verify.service.VerificationService;
import kr.co.yeoshin.admin.verify.service.model.SmsVerificationCheck;
import kr.co.yeoshin.admin.verify.service.model.SmsVerificationRegister;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.ValidationUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class VerificationUseCase {

    private final AuthService authService;
    private final VerificationService verificationService;
    private final NotificationService notificationService;
    private final AdminAuditService adminAuditService;
    private final TransactionTemplate transactionTemplate;

    public SmsVerificationSendResult sendSms(
            SmsVerificationSendRequest request) {
        SmsVerificationRegister verificationRegister = SmsVerificationRegister.of(
                request,
                Auth.SMS.AUTH_SMS_VERIFICATION_CODE_NUMBER_OF_DIGITS);
        if (!verificationRegister.getTo().isValid()) {
            log.debug("auth sms send request({}) invalid", request);
            throw new VerificationException(
                    ValidatorCode.VALIDATOR_CELL_PHONE_INVALID,
                    MessageUtils.format("invalid cell phone:{}", request.getTo())
            );
        }

        // TODO check retryable time sms send using redis

        boolean canSend = transactionTemplate.executeMainReadableTransaction(
                () -> verificationRegister.getTo().canSendToCellPhone(authService));
        if (!canSend) {
            throw new VerificationException(NotificationCode.NOTIFICATION_SMS_SEND_ERROR,
                    MessageUtils.format("sms send condition not fulfilled : {}", verificationRegister));
        }

        RegisteredSmsVerification registeredSmsVerification = verificationService.registerAuthVerificationSms(
                verificationRegister);

        // TODO conf + i18n
        NotificationResult notificationResult = notificationService.sendToOne(
                List.of(NhnSmsNotificationContext
                        .builder(Collections.singletonList(SmsRecipient.builder()
                                        .recipientNo(registeredSmsVerification.getCellPhone())
                                        .countryCode(registeredSmsVerification.getCountryCallingCode())
                                        .build()),
                                NotificationSmsIdType.SMS_VERIFICATION)
                        .templateParams(Collections.singletonMap("authNumber", registeredSmsVerification.getCode()))
                        .build()));
        if (CollectionUtils.isEmpty(notificationResult.getSuccess())) {
            throw new VerificationException(NotificationCode.NOTIFICATION_SMS_SEND_ERROR,
                    "auth verification sms send failed");
        }

        return SmsVerificationSendResult.builder()
                .expiresInSeconds(Auth.SMS.AUTH_SMS_VERIFICATION_EXPIRES_IN_SECOND)
                .retryAfterSeconds(Auth.SMS.AUTH_SMS_SEND_RETRY_AFTER_SECONDS)
                .build();
    }

    public SmsVerificationCheckResult checkSmsCode(
            SmsVerificationCheckRequest request) {
        SmsVerificationCheck verificationCheck = SmsVerificationCheck.of(request);
        if (!ValidationUtils.isValidCellPhone(verificationCheck.getCountryCallingCode(), verificationCheck.getCellPhone())) {
            log.debug("auth sms check request({}) invalid", request);
            throw new VerificationException(
                    ValidatorCode.VALIDATOR_CELL_PHONE_INVALID,
                    MessageUtils.format("invalid cell phone:{}, countryCallingCode:{}", request.getCellPhone(),
                            request.getCountryCallingCode())
            );
        }

        return SmsVerificationCheckResult.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> verificationService.checkAuthVerificationSmsCode(verificationCheck,
                                Auth.SMS.AUTH_SMS_VERIFICATION_EXPIRES_IN_SECOND)))
                .build();
    }

    public BoolPayload checkOtpCode(OtpVerificationCheckRequest request) {
        long adminId = DiagnosticContext.fetchAdminId();
        return transactionTemplate.executeMainWritableTransaction(() -> {
            boolean result = verificationService.checkAuthVerificationOtpCode(adminId, request);

            if (!result) {
                adminAuditService.writeAdminActivity(AdminSignInAuditContext.builder()
                        .adminId(adminId)
                        .successYn(YN.N)
                        .verbose(AdminSignInAuditContext.Verbose.INVALID_OTP)
                        .build());
            }

            return BoolPayload.builder().result(result).build();
        });
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/auth/component/retrofit/model/FacebookDebugTokenPayload.java
================================================
package kr.co.yeoshin.backend.auth.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class FacebookDebugTokenPayload {

    @JsonProperty("user_id")
    private String userId;
    @JsonProperty("app_id")
    private String appId;
    @JsonProperty("is_valid")
    private boolean valid;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/auth/component/retrofit/model/LineIdTokenPayload.java
================================================
package kr.co.yeoshin.backend.auth.component.retrofit.model;

import java.util.List;
import lombok.Data;

@Data
public class LineIdTokenPayload {

    private String iss;
    private String sub;
    private String aud;
    private long exp;
    private long iat;
    private String nonce;
    private List<String> amr;
    private String name;
    private String picture;
    private String email;
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/auth/usecase/AuthUseCase.java
================================================
package kr.co.yeoshin.backend.auth.usecase;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.backend.auth.controller.model.*;
import kr.co.yeoshin.backend.auth.model.*;
import kr.co.yeoshin.backend.auth.service.AuthService;
import kr.co.yeoshin.backend.auth.service.ResignService;
import kr.co.yeoshin.backend.auth.service.TokenService;
import kr.co.yeoshin.backend.auth.service.model.*;
import kr.co.yeoshin.backend.common.Constant.Auth;
import kr.co.yeoshin.backend.common.Constant.Auth.Validation;
import kr.co.yeoshin.backend.common.Constant.Point;
import kr.co.yeoshin.backend.common.Constant.Verification.Channel;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType.Service;
import kr.co.yeoshin.backend.common.model.api.code.AuthCode;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.ValidatorCode;
import kr.co.yeoshin.backend.common.model.api.code.VerificationCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.common.stereotype.transactional.MainReadableTransactional;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.context.Header;
import kr.co.yeoshin.backend.context.model.UserAgent;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.CouponMeta;
import kr.co.yeoshin.backend.exception.AuthenticationException;
import kr.co.yeoshin.backend.exception.MemberException;
import kr.co.yeoshin.backend.exception.ReservationException;
import kr.co.yeoshin.backend.exception.ValidatorException;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.notification.component.template.MailTemplateFactory;
import kr.co.yeoshin.backend.notification.service.NotificationService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.point.service.model.MemberPointMinusContext;
import kr.co.yeoshin.backend.point.service.model.MemberPointUsageReport;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.setup.model.DeviceTokenContext;
import kr.co.yeoshin.backend.setup.service.DeviceTokenService;
import kr.co.yeoshin.backend.systemcash.service.SystemCashService;
import kr.co.yeoshin.backend.terms.service.TermsService;
import kr.co.yeoshin.backend.thirdparty.service.ThirdPartyService;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.backend.validator.service.ValidatorService;
import kr.co.yeoshin.backend.validator.service.model.ValidateResignMember;
import kr.co.yeoshin.backend.verify.service.VerificationService;
import kr.co.yeoshin.backend.verify.service.model.VerificationEmailContext;
import kr.co.yeoshin.backend.verify.service.model.VerificationSmsContext;
import kr.co.yeoshin.common.Constant;
import kr.co.yeoshin.common.audit.context.JaversContextHolder;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.member.entity.DormantMember;
import kr.co.yeoshin.common.member.entity.MemberAccount;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.member.type.AgreementTermsType;
import kr.co.yeoshin.common.member.type.MemberStatusType;
import kr.co.yeoshin.common.payment.entity.SystemCashRefundStatus;
import kr.co.yeoshin.common.payment.type.RefundStatus;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.terms.entity.Terms;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyServiceType;
import kr.co.yeoshin.common.type.CountryCode;
import kr.co.yeoshin.common.type.DeviceType;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import kr.co.yeoshin.common.utils.UUIDUtils;
import kr.co.yeoshin.common.utils.model.Version;
import kr.co.yeoshin.common.verify.type.VerificationType;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.oauth2.client.registration.ClientRegistration;

@Slf4j
@AllArgsConstructor
@UseCase
public class AuthUseCase {

    private static final String KAKAO_SYNC_VERSION = "3.4.0";

    private final ApplicationProps applicationProps;
    private final AuthService authService;
    private final TermsService termsService;
    private final MemberService memberService;
    private final CouponService couponService;
    private final ValidatorService validatorService;
    private final VerificationService verificationService;
    private final MemberPointService memberPointService;
    private final TokenService tokenService;
    private final ResignService resignService;
    private final TicketService ticketService;
    private final SystemCashService systemCashService;
    private final DeviceTokenService deviceTokenService;
    private final NotificationService notificationService;
    private final ThirdPartyService thirdPartyService;
    private final QuestService questService;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final MailTemplateFactory mailTemplateFactory;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final QueueMessageDomainEventContext domainEventContext;
    private final TransactionTemplate transactionTemplate;
    private final GlobalCacheTemplate cacheTemplate;
    private final PayloadFactory payloadFactory;

    private List<AuthValidatorHandler> validatorHandlers;
    private List<AuthAccessibleNotificationHandler> accessibleNotificationHandlers;

    @AllArgsConstructor
    @SuppressWarnings("InnerClassMayBeStatic")
    private class AuthValidatorHandler {

        private Predicate<AuthRegister> support;
        private List<Predicate<AuthRegister>> validators;

        public boolean validate(AuthRegister authRegister) {
            if (!support.test(authRegister)) {
                return true;
            }
            for (Predicate<AuthRegister> predicate : validators) {
                if (!predicate.test(authRegister)) {
                    return false;
                }
            }

            return true;
        }
    }

    @AllArgsConstructor
    @SuppressWarnings("InnerClassMayBeStatic")
    private class AuthAccessibleNotificationHandler {

        private Predicate<AuthProtectContext> support;
        private BiConsumer<AuthProtectContext, UserAgent> notificator;
    }

    @PostConstruct
    public void init() {
        this.validatorHandlers = new ArrayList<>();

        validatorHandlers.add(new AuthValidatorHandler(
                (a) -> a.getProvider() != AuthProvider.APPLE,
                Arrays.asList(
                        (a) -> validatorService.validateEmail(a.getEmail()),
                        (a) -> validatorService.validateName(a.getName()),
                        (a) -> validatorService.validateAvailableCellPhone(a.getCountryCallingCode(), a.getCellPhone()),
                        (a) -> validatorService.validateBirthdate(a.getBirthdate()
                                .map(x -> x.format(DateTimeFormatter.ofPattern(Validation.VALIDATION_BIRTHDATE_FORMAT)))
                                .orElse(StringUtils.EMPTY)),
                        (a) -> {
                            if (useKakaoSync(a)) {
                                return true;
                            }

                            VerificationSmsContext verification = new VerificationSmsContext();
                            verification.setCountryCallingCode(a.getCountryCallingCode());
                            verification.setCellPhone(a.getCellPhone());

                            return verificationService.verified(verification, VerificationType.AUTH_SIGN_UP);
                        }
                )
        ));
        validatorHandlers.add(new AuthValidatorHandler(
                (a) -> a.getProvider() == AuthProvider.SYSTEM,
                Arrays.asList(
                        (a) -> validatorService.validateProviderId(a.getProvider(), a.getAccessKey()),
                        (a) -> validatorService.validatePassword(a.getSecretKey())
                )
        ));

        this.accessibleNotificationHandlers = new ArrayList<>();
        accessibleNotificationHandlers.add(new AuthAccessibleNotificationHandler(
                (c) -> StringUtils.equals(c.getMember().getCountryCallingCode(), Auth.DEFAULT_COUNTRY_CALLING_CODE)
                        && c.getStatus() == MemberStatusType.LOCK,
                (c, u) -> messagePublisher.publishNotification(
                        NotificationMessageUtils.notificationMessage(
                                alimTalkTemplateFactory.authLock(c.getMember(), u, c.getAccessCountry())))));
        accessibleNotificationHandlers.add(new AuthAccessibleNotificationHandler(
                (c) -> StringUtils.equals(c.getMember().getCountryCallingCode(), Auth.DEFAULT_COUNTRY_CALLING_CODE)
                        && c.getStatus() == MemberStatusType.BLOCK,
                (c, u) -> messagePublisher.publishNotification(
                        NotificationMessageUtils.notificationMessage(
                                alimTalkTemplateFactory.authBlock(c.getMember(), u, c.getAccessCountry())))));
        accessibleNotificationHandlers.add(new AuthAccessibleNotificationHandler(
                (c) -> !StringUtils.equals(c.getMember().getCountryCallingCode(), Auth.DEFAULT_COUNTRY_CALLING_CODE)
                        && c.getStatus() == MemberStatusType.LOCK,
                (c, u) -> messagePublisher.publishNotification(
                        NotificationMessageUtils.notificationMessage(
                                mailTemplateFactory.authLock(c.getMember(), u, c.getAccessCountry())))));
        accessibleNotificationHandlers.add(new AuthAccessibleNotificationHandler(
                (c) -> !StringUtils.equals(c.getMember().getCountryCallingCode(), Auth.DEFAULT_COUNTRY_CALLING_CODE)
                        && c.getStatus() == MemberStatusType.BLOCK,
                (c, u) -> messagePublisher.publishNotification(
                        NotificationMessageUtils.notificationMessage(
                                mailTemplateFactory.authBlock(c.getMember(), u, c.getAccessCountry())))));
    }

    private boolean useKakaoSync(AuthRegister authRegister) {
        AuthProvider provider = authRegister.getProvider();
        String currentVersion = DiagnosticContext.header().clientVersion();
        boolean greaterThanKakaoSyncVersion = new Version(currentVersion).isBiggerThanOrEqualTo(KAKAO_SYNC_VERSION);
        return provider == AuthProvider.KAKAO && greaterThanKakaoSyncVersion;
    }

    public SignUpPayload signUp(AuthRegister authRegister) {
        AuthCredential authCredential = AuthCredential.of(authRegister);
        AuthProfile authProfile = authService.findProfile(authCredential);

        Header header = DiagnosticContext.header();

        AuthContext authContext = AuthContext.builder()
                .locale(DiagnosticContext.header().locale())
                .device(DiagnosticContext.header().devicePlatform())
                .ip(DiagnosticContext.fetchClientIp())
                .clientVersion(header.clientVersion())
                .clientId(header.clientId())
                .build();

        transactionTemplate.executeMainReadableTransaction(() -> {
            for (AuthValidatorHandler validatorHandler : validatorHandlers) {
                if (!validatorHandler.validate(authRegister)) {
                    return false;
                }
            }
            return true;
        });

        List<AgreementTermsType> agreeServiceTerms = authService.findProviderAgreeServiceTerms(authCredential);

        List<Terms> termsByRequest = termsService.findAllTermsByTermsIds(authRegister.getTermsIds());
        List<Terms> termsByAgreementType = termsService.findAllTermsByTermsType(agreeServiceTerms);
        List<Terms> terms = Stream.concat(termsByRequest.stream(), termsByAgreementType.stream())
                .distinct()
                .collect(Collectors.toList());

        ValidateResignMember validateResignMember = validatorService.validateResignMember(
                LocalDateTime.now(), authRegister.getCellPhone());

        kr.co.yeoshin.common.member.entity.Member registeredMember = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    kr.co.yeoshin.common.member.entity.Member member = authService.registerMember(
                            authContext, authRegister, authProfile, terms, validateResignMember);
                    JaversContextHolder.putAuthorIfAbsent(member.getId());

                    long memberId = member.getId();

                    deviceTokenService.upsertDeviceToken(
                            memberId,
                            DeviceTokenContext.builder()
                                    .pushToken(authRegister.getPushToken())
                                    .clientId(header.clientId())
                                    .deviceType(header.devicePlatform())
                                    .appsflyerId(authRegister.getAppsflyerId())
                                    .idfv(authRegister.getIdfv())
                                    .build()
                    );

                    notificationService.registerDefaultNotificationConfig(memberId, terms);

                    if (authCredential.getProvider() == AuthProvider.APPLE || validateResignMember.isRecommendable()) {
                        couponService.issueMemberCoupons(
                                memberId,
                                CouponIssueConditionType.NEW_MEMBER,
                                CouponMeta.builder().build());

                        int expireDays = Math.max(
                                StringUtils.equals(
                                        StringUtils.getIfBlank(
                                                authRegister.getCountryCallingCode(),
                                                () -> Auth.DEFAULT_COUNTRY_CALLING_CODE),
                                        Auth.DEFAULT_COUNTRY_CALLING_CODE)
                                        ? Constant.Point.REWARD_SIGN_UP_EXPIRE_DAYS_DEFAULT
                                        : Constant.Point.REWARD_SIGN_UP_EXPIRE_DAYS_EXTRA,
                                authCredential.getProvider() != AuthProvider.APPLE
                                        || member.getSignUpCountryCode() == CountryCode.KR
                                        || member.getSignUpCountryCode() == CountryCode.ZZ
                                        ? Constant.Point.REWARD_SIGN_UP_EXPIRE_DAYS_DEFAULT
                                        : Constant.Point.REWARD_SIGN_UP_EXPIRE_DAYS_EXTRA);

                        memberPointService.registerPoint(
                                memberId,
                                MemberPointAddContext.builder()
                                        .title(Action.REWARD_SIGN_UP.getTitleKo())
                                        .action(Action.REWARD_SIGN_UP)
                                        .publishType(PublishType.SYSTEM)
                                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                .expireAt(PointUtils.expireAt(expireDays))
                                                .point(Point.REGISTER_REWARD_SIGN_UP)
                                                .build()))
                                        .point(Point.REGISTER_REWARD_SIGN_UP)
                                        .type(MemberPointType.REWARD)
                                        .build());
                    }

                    return member;
                });
        if (registeredMember == null) {
            throw new AuthenticationException(
                    CommonCode.ERROR,
                    MessageUtils.format("register member({}) failed", authRegister));
        }

        long memberId = registeredMember.getId();

        Token token = tokenService.createToken(
                memberId, MemberStatusType.ACTIVE, authProfile.getProvider(), registeredMember.getSignature());

        if (registeredMember.hasCellPhone()) {
            notificationService.send(
                    validateResignMember.isRecommendable() ?
                            alimTalkTemplateFactory.authSignUp(registeredMember, registeredMember.getName())
                            : alimTalkTemplateFactory.authSignUpAgain(registeredMember, registeredMember.getName()));
        }

        domainEventContext.addDomainEvent(DomainEventType.MEMBER_CREATE, memberId);

        return SignUpPayload.builder()
                .member(payloadFactory.memberTemplate(registeredMember))
                .token(token)
                .recommendable(validateResignMember.isRecommendable())
                .build();
    }

    public BoolPayload signUpVerificationDryRun(SignUpVerificationRequest request) {
        VerificationSmsContext verification = new VerificationSmsContext();
        verification.setCountryCallingCode(request.getCountryCallingCode());
        verification.setCellPhone(request.getCellPhone());

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainReadableTransaction(() -> {
                    verificationService.verified(verification, VerificationType.AUTH_SIGN_UP);
                    return validatorService.validateAvailableCellPhone(request.getCountryCallingCode(), request.getCellPhone());
                }))
                .build();
    }

    public SignInPayload signIn(AuthCredential authCredential) {
        AuthProfile authProfile = authService.findProfile(authCredential);

        RegisteredMemberAccount registeredMemberAccount = transactionTemplate.executeMainReadableTransaction(
                () -> authService.findRegisteredMemberAccount(authCredential, authProfile));
        if (registeredMemberAccount == null) {
            throw new AuthenticationException(
                    AuthCode.AUTH_MEMBER_NOT_EXIST,
                    MessageUtils.format("member({}) not exist", authCredential));
        }

        long memberId = registeredMemberAccount.getMemberId();

        UserAgent userAgent = DiagnosticContext.header().parseUserAgent();

        AuthProtectContext protectContext = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    AuthProtectContext c = authService.protectAccessContext(memberId, authCredential.getProvider());
                    if (!c.accessibleAccount()) {
                        if (notificationService.existMemberStatusNotification(memberId, c.getStatus())) {
                            return c;
                        }
                        accessibleNotificationHandlers.stream()
                                .filter(x -> x.support.test(c))
                                .findFirst()
                                .ifPresent(x -> {
                                    x.notificator.accept(c, userAgent);
                                    notificationService.registerMemberStatusNotification(memberId, c.getStatus());
                                });

                        return c;
                    }

                    Header header = DiagnosticContext.header();
                    authService.adjustMemberAccountSecret(authCredential, registeredMemberAccount);
                    deviceTokenService.upsertDeviceToken(
                            memberId,
                            DeviceTokenContext.builder()
                                    .pushToken(authCredential.getPushToken())
                                    .clientId(header.clientId())
                                    .deviceType(header.devicePlatform())
                                    .appsflyerId(authCredential.getAppsflyerId())
                                    .idfv(authCredential.getIdfv())
                                    .build()
                    );

                    return c;
                });
        if (!protectContext.accessibleAccount()) {
            // 앱 하위 버전을 위해 임시 처리
            Header header = DiagnosticContext.header();
            if (header.devicePlatform() == DeviceType.AOS || header.devicePlatform() == DeviceType.IOS) {
                if (new Version(header.getCommonHeader().getClientVersion()).isLessThan("3.9.8")) {
                    if (protectContext.getStatus() == MemberStatusType.BLOCK) {
                        throw new AuthenticationException(AuthCode.AUTH_BLOCK_UNSUPPORT_DEVICE);
                    } else {
                        throw new AuthenticationException(AuthCode.AUTH_LOCK_UNSUPPORT_DEVICE);
                    }
                }
            }
        }

        domainEventContext.addDomainEvent(DomainEventType.MARKETING_USER_PROPERTIES_UPDATE, memberId);
        Token token = tokenService.createToken(
                memberId, protectContext.getStatus(), authProfile.getProvider(), registeredMemberAccount.getSignature());

        return SignInPayload.builder()
                .dormant(registeredMemberAccount.isDormant())
                .status(protectContext.getStatus())
                .token(token).build();
    }

    public BoolPayload signInDryRun(AuthCredential authCredential) {
        AuthProfile authProfile = authService.findProfile(authCredential);

        log.info("sign-in dry-run find profile({}) from credential({}).", authCredential, authProfile);

        RegisteredMemberAccount registeredMemberAccount = transactionTemplate.executeMainReadableTransaction(
                () -> authService.findRegisteredMemberAccount(authCredential, authProfile));
        if (registeredMemberAccount == null) {
            throw new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST);
        }

        return BoolPayload.builder()
                .result(true)
                .build();
    }


    public SignInPayload virtualIn() {
        Token token = tokenService.createVirtualToken(TokenConfigure.builder()
                .supportAccessToken(true)
                .supportRefreshToken(true)
                .build());

        return SignInPayload.builder()
                .dormant(false)
                .token(token).build();
    }


    public SignInPayload virtualIn(boolean supportAccessToken, boolean supportRefreshToken) {
        Token token = tokenService.createVirtualToken(TokenConfigure.builder()
                .supportAccessToken(supportAccessToken)
                .supportRefreshToken(supportRefreshToken)
                .build());

        return SignInPayload.builder()
                .dormant(false)
                .token(token).build();
    }

    public DormantPayload dormants() {
        long memberId = DiagnosticContext.fetchMemberId();

        DormantMember dormantMember = authService.findDormantMemberByMemberId(memberId);
        MemberServiceSummary serviceSummary = memberService.findMemberServiceSummaryByMemberId(memberId);

        return DormantPayload.builder()
                .dormantAt(DateUtil.convertFrom(dormantMember.getCreated()))
                .lastAccessAt(DateUtil.convertFrom(serviceSummary.getRecentAccessAt()))
                .build();
    }

    public SignInPayload wakeUpDormants() {
        long memberId = DiagnosticContext.fetchMemberId();
        AuthProvider provider = DiagnosticContext.fetchProvider();

        RegisteredMember registeredMember = transactionTemplate.executeMainWritableTransaction(
                () -> authService.wakeUpDormantMember(memberId, provider));
        if (registeredMember == null) {
            throw new AuthenticationException(
                    AuthCode.AUTH_MEMBER_NOT_EXIST,
                    MessageUtils.format("dormant member({}) not exist", memberId));
        }

        Token token = tokenService.createToken(registeredMember.getId().orElseThrow(
                () -> new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST)
        ), MemberStatusType.ACTIVE, provider, registeredMember.getSignature());

        return SignInPayload.builder()
                .dormant(registeredMember.isDormant())
                .token(token).build();
    }

    public boolean isVirtualMember(String token) {
        if (StringUtils.isBlank(token)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is blank");
        }

        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is invalid");
        }

        return claims.isVirtual();
    }

    public VirtualMember findVirtualMember(String token) {
        if (StringUtils.isBlank(token)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "virtual token is blank");
        }

        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null || !claims.isValid()) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "virtual token is invalid");
        }

        String signature = tokenService.findVirtualTokenSignature(token);
        if (StringUtils.isBlank(signature)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "virtual token verify failed");
        }

        return VirtualMember.builder()
                .id(Optional.empty())
                .signature(signature)
                .build();
    }

    @MainReadableTransactional
    public RegisteredMember findRegisteredMember(String token) {
        if (StringUtils.isBlank(token)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is blank");
        }

        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null || !claims.isValid()) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is invalid");
        }

        RegisteredMember registeredMember = authService.findRegisteredMemberByClaim(claims);
        if (registeredMember == null) {
            throw new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST, "member is not exist");
        }

        if (!tokenService.verifyToken(token, registeredMember.getSignature())) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token verify failed");
        }

        return registeredMember;
    }


    @MainReadableTransactional
    public RegisteredMember findRegisteredMember(AuthAccount authAccount) {
        RegisteredMember registeredMember = authService.findRegisteredMemberByAccount(
                authAccount.getProvider(), authAccount.getProviderId(), authAccount.getSecret());
        if (registeredMember == null) {
            throw new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST, "member is not exist");
        }

        return registeredMember;
    }


    public BoolPayload registerRecommendCode(RecommendCodeRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (cacheTemplate.increaseValue(new CacheKey(Service.AUTH_RECOMMEND_CODE, String.valueOf(memberId)),
                2,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to recommend too many.", memberId);
            throw new ReservationException(CommonCode.TOO_MANY_REQUESTS);
        }

        kr.co.yeoshin.common.member.entity.Member member = memberService.findMember(memberId);
        boolean recommendable = StringUtils.isBlank(member.getCellPhone())
                || validatorService.validateRecommendableByCellPhone(LocalDateTime.now(), member.getCellPhone());
        if (!recommendable) {
            log.error("memberId({}) is not in recommendable", member);
            throw new ValidatorException(CommonCode.ERROR);
        }

        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            MemberServiceSummary serviceSummary = memberService.findMemberServiceSummaryByMemberId(memberId);
            if (StringUtils.isNotBlank(serviceSummary.getRecommendCode())) {
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_ALREADY_REGISTERED,
                        MessageUtils.format("memberId({}) already has a recommendCode", memberId));
            }
            if (StringUtils.equalsIgnoreCase(serviceSummary.getInviteCode(), request.getRecommendCode())) {
                log.info("memberId({}) recommends with own invite code", memberId);
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_DOES_NOT_EXIST);
            }

            MemberServiceSummary inviterSummary = authService.fetchInviterByRecommendCode(request.getRecommendCode())
                    .orElseThrow(() -> new MemberException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_DOES_NOT_EXIST));
            if (!inviterSummary.getMember().hasCellPhone()) {
                log.info("memberId({}) recommends invalid cell-phone inviter({}) ", memberId, inviterSummary.getMember().getId());
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_INVALID);
            }

            if (!validatorService.validateRecommendCode(LocalDateTime.now(), request.getRecommendCode())) {
                log.info("memberId({}) recommends with invalid invite code({})", memberId, request.getRecommendCode());
                throw new ValidatorException(ValidatorCode.VALIDATOR_RECOMMEND_CODE_DOES_NOT_EXIST);
            }

            serviceSummary.changeRecommendCode(inviterSummary.getInviteCode());

            if (applicationProps.getReward().isActivateSignUpRecommendPoint()) {
                memberPointService.registerPoint(
                        memberId,
                        MemberPointAddContext.builder()
                                .title(MessageUtils.format(Action.REWARD_INVITE_FRIEND.getTitleKo(),
                                        inviterSummary.getInviteCode()))
                                .action(Action.REWARD_INVITE_FRIEND)
                                .publishType(PublishType.SYSTEM)
                                .compositions(Collections.singletonList(MemberPointComposition.builder()
                                        .expireAt(PointUtils.expireAt(StringUtils.equals(
                                                StringUtils.getIfBlank(
                                                        member.getCountryCallingCode(),
                                                        () -> Auth.DEFAULT_COUNTRY_CALLING_CODE),
                                                Auth.DEFAULT_COUNTRY_CALLING_CODE)
                                                ? Constant.Point.REWARD_SIGN_UP_RECOMMEND_EXPIRE_DAYS_DEFAULT
                                                : Constant.Point.REWARD_SIGN_UP_RECOMMEND_EXPIRE_DAYS_EXTRA))
                                        .point(Point.REGISTER_REWARD_INVITE_FRIEND)
                                        .build()))
                                .point(Point.REGISTER_REWARD_INVITE_FRIEND)
                                .type(MemberPointType.REWARD)
                                .build());
            } else {
                couponService.issueMemberCoupons(
                        memberId, CouponIssueConditionType.RECOMMEND_MEMBER, CouponMeta.builder()
                                // TODO message
                                .nameSuffix(MessageUtils.format("(추천인 코드: {})", request.getRecommendCode()))
                                .build());
            }

            MemberPointUsageReport memberPointUsageReport = memberPointService.registerPoint(
                    inviterSummary.getMember().getId(),
                    MemberPointAddContext.builder()
                            .title(MessageUtils.format(Action.REWARD_INVITE_FRIEND.getTitleKo(),
                                    serviceSummary.getInviteCode()))
                            .action(Action.REWARD_INVITE_FRIEND)
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(PointUtils.expireAt(StringUtils.equals(
                                            StringUtils.getIfBlank(
                                                    inviterSummary.getMember().getCountryCallingCode(),
                                                    () -> Auth.DEFAULT_COUNTRY_CALLING_CODE),
                                            Auth.DEFAULT_COUNTRY_CALLING_CODE)
                                            ? Constant.Point.REWARD_SIGN_UP_RECOMMEND_EXPIRE_DAYS_DEFAULT
                                            : Constant.Point.REWARD_SIGN_UP_RECOMMEND_EXPIRE_DAYS_EXTRA))
                                    .point(Point.REGISTER_REWARD_INVITE_FRIEND)
                                    .build()))
                            .point(Point.REGISTER_REWARD_INVITE_FRIEND)
                            .type(MemberPointType.REWARD)
                            .build());

            if (memberPointUsageReport != null) {
                questService.registerInvitationRecord(inviterSummary.getMember().getId(),
                        1,
                        0,
                        Point.REGISTER_REWARD_INVITE_FRIEND,
                        memberPointUsageReport.getMemberPoint().getCreated());
            }

            return memberPointUsageReport != null;
        });

        return BoolPayload.builder()
                .result(result)
                .build();
    }

    public TokenCreatePayload createToken(TokenCreateRequest request) {
        String refreshToken = request.getRefreshToken();

        RegisteredMember registeredMember = findRegisteredMember(refreshToken);

        long memberId = registeredMember.getId().orElseThrow(
                () -> new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST));

        VerificationSmsContext verificationContext = new VerificationSmsContext();
        verificationContext.setCountryCallingCode(registeredMember.getCountryCallingCode());
        verificationContext.setCellPhone(registeredMember.getCellPhone());

        if (registeredMember.getMemberStatus() == MemberStatusType.BLOCK) {
            Header header = DiagnosticContext.header();
            // 앱 하위 버전을 위해 임시 처리
            if (header.devicePlatform() == DeviceType.AOS || header.devicePlatform() == DeviceType.IOS) {
                if (new Version(header.getCommonHeader().getClientVersion()).isLessThan("3.9.8")) {
                    throw new AuthenticationException(AuthCode.AUTH_BLOCK_UNSUPPORT_DEVICE);
                }
            }

            throw new AuthenticationException(AuthCode.AUTH_BLOCK_TOKEN);
        }

        if (registeredMember.getTokenStatus() == MemberStatusType.LOCK) {
            if (verificationService.verified(verificationContext, VerificationType.AUTH_LOCK)) {
                Token token = tokenService.createToken(
                        memberId,
                        MemberStatusType.ACTIVE,
                        registeredMember.getAuthProvider(),
                        registeredMember.getSignature());

                transactionTemplate.executeMainWritableTransaction(() ->
                        authService.modifyAccessContext(memberId, registeredMember.getAuthProvider()));

                domainEventContext.addDomainEvent(DomainEventType.MARKETING_USER_PROPERTIES_UPDATE, memberId);

                return TokenCreatePayload.builder()
                        .dormant(registeredMember.isDormant())
                        .token(token)
                        .build();
            } else {
                Token token = tokenService.createToken(
                        memberId,
                        registeredMember.getTokenStatus(),
                        registeredMember.getAuthProvider(),
                        registeredMember.getSignature());

                return TokenCreatePayload.builder()
                        .dormant(registeredMember.isDormant())
                        .token(token)
                        .build();
            }
        }

        if (registeredMember.getTokenStatus() == MemberStatusType.ACTIVE) {
            Token token = tokenService.createToken(
                    memberId,
                    registeredMember.getTokenStatus(),
                    registeredMember.getAuthProvider(),
                    registeredMember.getSignature());

            transactionTemplate.executeMainWritableTransaction(() ->
                    authService.modifyAccessContext(memberId, registeredMember.getAuthProvider()));

            domainEventContext.addDomainEvent(DomainEventType.MARKETING_USER_PROPERTIES_UPDATE, memberId);

            return TokenCreatePayload.builder()
                    .dormant(registeredMember.isDormant())
                    .token(token)
                    .build();
        }

        return TokenCreatePayload.empty();
    }

    public Map<String, Object> verifyToken() {
        DiagnosticContext.member()
                .filter(x -> x.getId().orElse(-1L) > 0)
                .filter(x -> !x.isVirtual())
                .ifPresent(x -> {
                    long memberId = x.getId().orElse(-1L);
                    AuthProvider authProvider = x.getAuthProvider();
                    transactionTemplate.executeMainWritableTransaction(() ->
                            authService.modifyAccessContext(memberId, authProvider));
                    domainEventContext.addDomainEvent(DomainEventType.MARKETING_USER_PROPERTIES_UPDATE, memberId);
                });
        return Collections.emptyMap();
    }

    public AuthCode invalidateToken() {
        Member member = DiagnosticContext.member()
                .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_LOGIN_REQUIRED));

        RegisteredMember registeredMember = transactionTemplate.executeMainWritableTransaction(
                () -> authService.modifyMemberSignature(
                        member.getId().orElseThrow(
                                () -> new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST)
                        ),
                        UUIDUtils.shortUUID()));
        if (registeredMember == null) {
            throw new AuthenticationException(
                    AuthCode.AUTH_MEMBER_NOT_EXIST,
                    MessageUtils.format("revoke member({}) signature failed", registeredMember));
        } else {
            return AuthCode.AUTH_TOKEN_INVALIDATE_SUCCESS;
        }
    }

    public BoolPayload resign(ResignRequest request) {
        Member member = DiagnosticContext.member()
                .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_LOGIN_REQUIRED));

        long memberId = DiagnosticContext.fetchMemberId();

        boolean existsResignedMember = resignService.existsResignedMember(memberId);
        if (existsResignedMember) {
            throw new AuthenticationException(AuthCode.AUTH_RESIGNED_MEMBER_ALREADY_EXIST,
                    MessageUtils.format("member(id: {}) has already resigned", member.getId()));
        }

        if (!resignService.verify(member.getAuthProvider(), memberId)) {
            throw new AuthenticationException(VerificationCode.VERIFICATION_NOT_COMPLETED);
        }

        if (CollectionUtils.isNotEmpty(ticketService.fetchAllTicketsByMemberIdAndStatuses(memberId,
                List.of(TicketStatus.UNUSED, TicketStatus.RESERVED)))) {
            throw new AuthenticationException(AuthCode.AUTH_RESIGN_MEMBER_HAS_USABLE_TICKETS);
        }

        if (systemCashService.findTotalCashByMemberId(memberId) > 0) {
            throw new AuthenticationException(AuthCode.AUTH_RESIGN_MEMBER_HAS_USABLE_SYSTEM_CASH);
        }

        List<SystemCashRefundStatus> pendingRefundSystemCashes = systemCashService.findRefundSystemCash(memberId,
                RefundStatus.PENDING_STATUSES);
        if (!pendingRefundSystemCashes.isEmpty()) {
            throw new AuthenticationException(AuthCode.AUTH_RESIGN_MEMBER_HAS_PENDING_SYSTEM_CASH_REFUND);
        }

        MemberServiceSummary serviceSummary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        String recommendCode = serviceSummary.getRecommendCode();
        boolean deductInviteFriendPoint = StringUtils.isNotBlank(recommendCode)
                && LocalDateTime.now()
                .isBefore(serviceSummary.getMember().getCreated().plusDays(Point.DEDUCT_WITHDRAW_INVITED_FRIEND_IN_DAYS));

        transactionTemplate.executeMainWritableTransaction(
                () -> {
                    resignService.resignMember(memberId, request.getReasons());

                    thirdPartyService.unlinkSystemMember(memberId, Set.of(ThirdPartyServiceType.FRAY));

                    if (!deductInviteFriendPoint) {
                        return true;
                    }

                    kr.co.yeoshin.common.member.entity.Member recommendMember
                            = memberService.fetchMemberServiceSummaryByInviteCode(recommendCode).getMember();

                    MemberPointUsageReport memberPointUsageReport = memberPointService.registerPoint(
                            recommendMember.getId(), MemberPointMinusContext.builder()
                                    .action(Action.DEDUCT_WITHDRAW_INVITED_FRIEND)
                                    .publishType(PublishType.SYSTEM)
                                    .title(MessageUtils.format(Action.DEDUCT_WITHDRAW_INVITED_FRIEND.getTitleKo(),
                                            serviceSummary.getInviteCode()))
                                    .type(MemberPointType.DEDUCT)
                                    .point(Point.WITHDRAW_INVITED_FRIEND)
                                    .build());

                    if (memberPointUsageReport != null) {
                        questService.registerInvitationRecord(recommendMember.getId(),
                                -1,
                                0,
                                Point.WITHDRAW_INVITED_FRIEND,
                                memberPointUsageReport.getMemberPoint().getCreated());
                    }

                    return true;
                });

        domainEventContext.addDomainEvent(DomainEventType.MEMBER_DELETE, memberId);

        return BoolPayload.builder()
                .result(true)
                .build();

    }

    public BoolPayload recoverMemberIdDryRun(RecoverIdRequest request) {
        List<MemberAccount> memberAccounts = transactionTemplate.executeMainReadableTransaction(
                () -> {
                    if (request.getVerification() == null) {
                        // TODO remove after app migrate
                        if (request.getChannel() == Channel.EMAIL) {
                            VerificationEmailContext verification = new VerificationEmailContext();
                            verification.setEmail(request.getTo());

                            verificationService.verified(verification, VerificationType.AUTH_RECOVER_ID);
                        } else {
                            VerificationSmsContext verification = new VerificationSmsContext();
                            verification.setCountryCallingCode(Auth.DEFAULT_COUNTRY_CALLING_CODE);
                            verification.setCellPhone(request.getTo());

                            verificationService.verified(verification, VerificationType.AUTH_RECOVER_ID);
                        }
                        return authService.findRegisteredMemberAccounts(
                                request.getChannel(), request.getTo(), request.getName());
                    } else {
                        request.getVerification().verify(verificationService, request);
                        return request.getVerification().findRegisteredMemberAccounts(authService, request);
                    }
                });

        return BoolPayload.builder()
                .result(CollectionUtils.isNotEmpty(memberAccounts))
                .build();
    }

    public MemberAccountsPayload recoverMemberId(RecoverIdRequest request) {
        List<MemberAccount> memberAccounts = transactionTemplate.executeMainReadableTransaction(
                () -> {
                    if (request.getVerification() == null) {
                        // TODO remove after app migrate
                        if (request.getChannel() == Channel.EMAIL) {
                            VerificationEmailContext verification = new VerificationEmailContext();
                            verification.setEmail(request.getTo());

                            verificationService.verified(verification, VerificationType.AUTH_RECOVER_ID);
                        } else {
                            VerificationSmsContext verification = new VerificationSmsContext();
                            verification.setCountryCallingCode(Auth.DEFAULT_COUNTRY_CALLING_CODE);
                            verification.setCellPhone(request.getTo());

                            verificationService.verified(verification, VerificationType.AUTH_RECOVER_ID);
                        }

                        return authService.findRegisteredMemberAccounts(
                                request.getChannel(), request.getTo(), request.getName());
                    } else {
                        request.getVerification().verify(verificationService, request);
                        return request.getVerification().findRegisteredMemberAccounts(authService, request);
                    }

                });
        if (CollectionUtils.isEmpty(memberAccounts)) {
            throw new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST);
        }

        return MemberAccountsPayload.builder()
                .accounts(payloadFactory.memberAccountTemplates(memberAccounts, false))
                .build();
    }

    public BoolPayload resetPasswordDryRun(ResetPasswordRequest request) {
        if (request.getVerification() == null) {
            // TODO remove after app migreate
            if (request.getChannel() == Channel.EMAIL) {
                VerificationEmailContext verification = new VerificationEmailContext();
                verification.setEmail(request.getTo());

                verificationService.verified(verification, VerificationType.AUTH_RECOVER_PASSWORD);
            } else {
                VerificationSmsContext verification = new VerificationSmsContext();
                verification.setCountryCallingCode(Auth.DEFAULT_COUNTRY_CALLING_CODE);
                verification.setCellPhone(request.getTo());

                verificationService.verified(verification, VerificationType.AUTH_RECOVER_PASSWORD);
            }
        } else {
            if (!request.getVerification().verify(verificationService, request)) {
                throw new AuthenticationException(VerificationCode.VERIFICATION_NOT_COMPLETED);
            }
        }

        return BoolPayload.builder()
                .result(validatorService.validatePassword(request.getPassword()))
                .build();
    }

    public BoolPayload resetPassword(ResetPasswordRequest request) {
        if (request.getVerification() == null) {
            // TODO remove after app migreate
            if (request.getChannel() == Channel.EMAIL) {
                VerificationEmailContext verification = new VerificationEmailContext();
                verification.setEmail(request.getTo());

                if (!verificationService.verified(verification, VerificationType.AUTH_RECOVER_PASSWORD, request.getCode())) {
                    throw new AuthenticationException(VerificationCode.VERIFICATION_NOT_COMPLETED);
                }
            } else {
                VerificationSmsContext verification = new VerificationSmsContext();
                verification.setCountryCallingCode(Auth.DEFAULT_COUNTRY_CALLING_CODE);
                verification.setCellPhone(request.getTo());

                if (!verificationService.verified(verification, VerificationType.AUTH_RECOVER_PASSWORD, request.getCode())) {
                    throw new AuthenticationException(VerificationCode.VERIFICATION_NOT_COMPLETED);
                }
            }
        } else {
            if (!request.getVerification().verify(verificationService, request)) {
                throw new AuthenticationException(VerificationCode.VERIFICATION_NOT_COMPLETED);
            }
        }

        return BoolPayload.builder()
                .result(validatorService.validatePassword(request.getPassword())
                        && authService.modifyMemberPasswordByProviderId(request.getId(), request.getPassword()))
                .build();
    }

    public BoolPayload blockResetPassword(ResetBlockPasswordRequest request) {
        if (!request.getVerification().verify(verificationService, request)) {
            throw new AuthenticationException(VerificationCode.VERIFICATION_NOT_COMPLETED);
        }

        return BoolPayload.builder()
                .result(validatorService.validatePassword(request.getPassword())
                        && authService.modifyMemberPassword(request.getPassword()))
                .build();
    }

    public BoolPayload verifyPassword(VerifyPasswordRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainReadableTransaction(
                        () -> authService.verifyMemberPassword(memberId, request.getPassword())))
                .build();
    }

    public SignInTempPayload modifyPassword(PasswordRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        validatorService.validatePassword(request.getNewPassword());

        kr.co.yeoshin.common.member.entity.Member member = transactionTemplate.executeMainWritableTransaction(
                () -> authService.modifyMemberPasswordByMemberId(
                        memberId, request.getCurrentPassword(), request.getNewPassword()));

        domainEventContext.addDomainEvent(DomainEventType.MARKETING_USER_PROPERTIES_UPDATE, memberId);

        Token token = tokenService.createToken(memberId, MemberStatusType.ACTIVE, AuthProvider.SYSTEM, member.getSignature());

        return SignInTempPayload.builder()
                .result(true)
                .dormant(false)
                .token(token).build();
    }

    public MemberAccountsPayload findAccounts() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberAccount> memberAccounts = transactionTemplate.executeMainReadableTransaction(
                () -> authService.findAccounts(memberId));

        return MemberAccountsPayload.builder()
                .accounts(payloadFactory.memberAccountTemplates(memberAccounts, false))
                .build();
    }

    public MemberAccountsPayload findSnsAccounts() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberAccount> memberAccounts = transactionTemplate.executeMainReadableTransaction(
                () -> authService.findSnsAccounts(memberId));

        return MemberAccountsPayload.builder()
                .accounts(payloadFactory.memberAccountTemplates(memberAccounts, false))
                .build();
    }

    public MemberAccountPayload registerSnsAccounts(SnsAccountRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        AuthCredential authCredential = AuthCredential.of(request);
        AuthProfile authProfile = authService.findProfile(authCredential);

        MemberAccount memberAccount = transactionTemplate.executeMainWritableTransaction(
                () -> authService.registerMemberAccount(memberId, authCredential, authProfile));

        return MemberAccountPayload.builder()
                .account(payloadFactory.memberAccountTemplate(memberAccount, false))
                .build();
    }

    public BoolPayload removeSnsAccount(long accountId) {
        Member member = DiagnosticContext.member()
                .orElseThrow(() -> new AuthenticationException(AuthCode.AUTH_LOGIN_REQUIRED));
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberAccount> accounts = transactionTemplate.executeMainReadableTransaction(
                () -> authService.findAccountsByMemberId(memberId));

        // 2 - SNS 연동 계정 삭제 이후 최소 한개 이상의 계정이 남아야 하므로 현재 보유중인 계정이 둘 이상인지 확인
        if (accounts.size() < 2) {
            throw new MemberException(CommonCode.ERROR,
                    MessageUtils.format("member(id: {}) has not enough accounts to delete sns account",
                            memberId));
        }

        MemberAccount account = accounts.stream()
                .filter(x -> x.getId() == accountId)
                .findFirst()
                .orElseThrow(() -> new MemberException(CommonCode.ERROR,
                        MessageUtils.format("member(id: {}) has not account({}) to delete sns account",
                                memberId, accountId)));

        boolean deleted = transactionTemplate.executeMainWritableTransaction(
                () -> authService.removeSnsAccount(account, member.getAuthProvider()));
        if (!deleted) {
            throw new MemberException(CommonCode.ERROR,
                    MessageUtils.format("member(id: {}) delete account({]) failed", memberId, account));
        }

        return BoolPayload.builder()
                .result(deleted)
                .build();
    }

    public TokenCreatePayload exchangeToken(TokenExchangeRequest request) {
        RegisteredMember registeredMember = authService.findRegisteredMemberByToken(request.getType(), request.getToken());

        long memberId = registeredMember.getId().orElseThrow(
                () -> new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST));

        Token token = tokenService.createToken(
                memberId, MemberStatusType.ACTIVE, registeredMember.getAuthProvider(), registeredMember.getSignature());

        transactionTemplate.executeMainWritableTransaction(() ->
                authService.modifyAccessContext(memberId, registeredMember.getAuthProvider()));

        return TokenCreatePayload.builder()
                .dormant(registeredMember.isDormant())
                .token(token)
                .build();
    }

    public OAuthRegistrationPayload appleClientSecret() {
        String clientSecret = authService.clientRegistration("apple")
                .map(ClientRegistration::getClientSecret)
                .orElse(StringUtils.EMPTY);

        return OAuthRegistrationPayload.builder()
                .clientSecret(clientSecret)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/board/usecase/BannerUseCase.java
================================================
package kr.co.yeoshin.backend.board.usecase;

import java.util.*;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.board.model.BannerCode;
import kr.co.yeoshin.backend.board.service.BannerService;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.payload.BannersPayload;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.utils.BannerUtils;
import kr.co.yeoshin.common.banner.entity.Banner;
import kr.co.yeoshin.common.banner.type.BannerLocation;
import kr.co.yeoshin.common.type.DomainType;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class BannerUseCase {

    private final BannerService bannerService;
    private final QuestService questService;
    private final PayloadFactory payloadFactory;

    public BannersPayload list(BannerLocation location) {
        List<Banner> banners = bannerService.findAllExposureBanners(location);
        if (CollectionUtils.isEmpty(banners)) {
            return BannersPayload.empty();
        }

        Set<DomainType> completeQuests = new HashSet<>();
        if (DiagnosticContext.fetchLocale() != Locale.KOREAN) {
            completeQuests.add(DomainType.QUEST_PAYMENT_SYSTEM_EASY_CARD);
        }

        completeQuests.addAll(DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                questService::findAllCompleteQuests));

        Locale locale = DiagnosticContext.fetchLocale();

        Map<BannerCode, List<Banner>> bannersByCode = banners.stream()
                .filter(x -> BannerUtils.isExposurable(x, completeQuests))
                .filter(x -> BannerUtils.isExposurable(x, locale))
                .filter(x -> Optional.ofNullable(BannerCode.findCode(x.getLocation(), x.getPosition())).isPresent())
                .collect(Collectors.groupingBy(x -> BannerCode.findCode(x.getLocation(), x.getPosition())));

        Random random = new Random();
        List<Banner> exposureBanners = bannersByCode.entrySet().stream()
                .flatMap(x -> x.getValue().stream()
                        .sorted(Comparator.comparing((Banner b) -> BannerUtils.getPriority(b, locale))
                                .thenComparingInt(c -> random.nextInt(100)))
                        .limit(x.getKey().getMaxCount()))
                .collect(Collectors.toList());

        return BannersPayload.builder()
                .banners(payloadFactory.bannerTemplates(exposureBanners))
                .build();
    }

    public BannersPayload list(List<BannerCode> codes) {
        List<Banner> banners = bannerService.findAllExposureBanners(
                codes.stream()
                        .map(BannerCode::getLocation)
                        .collect(Collectors.toSet()),
                codes.stream()
                        .map(BannerCode::getPosition)
                        .collect(Collectors.toSet()));
        if (CollectionUtils.isEmpty(banners)) {
            return BannersPayload.empty();
        }

        Set<DomainType> completeQuests = new HashSet<>();
        if (DiagnosticContext.fetchLocale() != Locale.KOREAN) {
            completeQuests.add(DomainType.QUEST_PAYMENT_SYSTEM_EASY_CARD);
        }

        completeQuests.addAll(DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                questService::findAllCompleteQuests));

        Locale locale = DiagnosticContext.fetchLocale();

        Map<BannerCode, List<Banner>> bannersByCode = banners.stream()
                .filter(x -> BannerUtils.isExposurable(x, completeQuests))
                .filter(x -> BannerUtils.isExposurable(x, locale))
                .filter(x -> Optional.ofNullable(BannerCode.findCode(x.getLocation(), x.getPosition())).isPresent())
                .collect(Collectors.groupingBy(x -> BannerCode.findCode(x.getLocation(), x.getPosition())));

        Random random = new Random();
        List<Banner> exposureBanners = bannersByCode.entrySet().stream()
                .flatMap(x -> x.getValue().stream()
                        .sorted(Comparator.comparing((Banner b) -> BannerUtils.getPriority(b, locale))
                                .thenComparingInt(c -> random.nextInt(100)))
                        .limit(x.getKey().getMaxCount()))
                .collect(Collectors.toList());

        return BannersPayload.builder()
                .banners(payloadFactory.bannerTemplates(exposureBanners))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/board/usecase/PopupUseCase.java
================================================
package kr.co.yeoshin.backend.board.usecase;

import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.board.service.PopupService;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.payload.PopupsPayload;
import kr.co.yeoshin.common.popup.entity.Popup;
import kr.co.yeoshin.common.popup.type.PopupExposureTarget;
import kr.co.yeoshin.common.popup.type.PopupPosition;
import kr.co.yeoshin.common.type.YN;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class PopupUseCase {

    private final PopupService popupService;
    private final PayloadFactory payloadFactory;

    public PopupsPayload list(PopupPosition position) {
        //todo popup position 미정이라 정해지면 수정
        List<Popup> popupList = popupService.findAllExposurePopups(position, PopupExposureTarget.ALL)
                .stream().filter(x -> x.getViewYn() == YN.Y).collect(Collectors.toList());
        if (CollectionUtils.isEmpty(popupList)) {
            return PopupsPayload.empty();
        }

        return PopupsPayload.builder()
                .popups(payloadFactory.popupTemplates(popupList))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/board/usecase/PromotionUseCase.java
================================================
package kr.co.yeoshin.backend.board.usecase;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.board.controller.model.PromotionApplyRequest;
import kr.co.yeoshin.backend.board.controller.model.PromotionReplyContentsRequest;
import kr.co.yeoshin.backend.board.controller.model.PromotionReplyRequest;
import kr.co.yeoshin.backend.board.service.PromotionService;
import kr.co.yeoshin.backend.board.service.model.*;
import kr.co.yeoshin.backend.board.usecase.model.PromotionPageableContext;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType.Service;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.PromotionCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.CouponContainer;
import kr.co.yeoshin.backend.exception.PromotionException;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.PromotionRewardGroupTemplate;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.queue.model.cpm.CpmEventType;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventScrapService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventBadgeContainer;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.common.board.entity.*;
import kr.co.yeoshin.common.board.type.PromotionParticipationType;
import kr.co.yeoshin.common.board.type.PromotionRewardType;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.point.entity.MemberPointSpec;
import kr.co.yeoshin.common.product.entity.SalesEventScrap;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class PromotionUseCase {

    private final ApplicationProps applicationProps;
    private final PromotionService promotionService;
    private final CouponService couponService;
    private final MemberPointService memberPointService;
    private final ReportService reportService;
    private final RecommendService recommendService;
    private final SalesEventService salesEventService;
    private final SalesProductService salesProductService;
    private final SalesEventScrapService salesEventScrapService;
    private final HospitalService hospitalService;
    private final PayloadFactory payloadFactory;
    private final GlobalCacheTemplate cacheTemplate;
    private final TransactionTemplate transactionTemplate;

    public PromotionsPayload list(PromotionPageableContext pageableContext) {
        Pageable pageable = promotionService.getPromotionPageable(pageableContext);
        Page<Promotion> promotionList = promotionService.findAllByProgress(pageable, pageableContext.isProgress());

        String nextToken = promotionList.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                PromotionPageableContext.builder()
                        .progress(pageableContext.isProgress())
                        .page(promotionList.getPageable().getPageNumber() + 1)
                        .build());

        return PromotionsPayload.builder()
                .promotions(payloadFactory.promotionTemplates(promotionList.getContent()))
                .pageable(payloadFactory.pageableTemplate(promotionList, nextToken))
                .build();
    }

    public PromotionPayload promotion(long promotionId) {
        Promotion promotion = promotionService.findPromotion(promotionId);

        return PromotionPayload.builder()
                .promotion(payloadFactory.promotionTemplate(promotion))
                .build();
    }

    public PromotionRewardPayload promotionRewards(long promotionId) {
        List<PromotionParticipationConfig> promotionParticipationConfigs = promotionService.fetchParticipationConfigs(
                promotionId);

        Promotion promotion = promotionParticipationConfigs.stream()
                .findFirst()
                .map(PromotionParticipationConfig::getPromotion)
                .orElseThrow(() -> new PromotionException(CommonCode.ERROR));

        List<PromotionReward> promotionRewards = promotionService.fetchPromotionRewards(promotionId);
        List<PromotionRewardGroup> promotionRewardGroups = promotionRewards.stream()
                .map(PromotionReward::getPromotionRewardGroup)
                .distinct()
                .collect(Collectors.toList());

        List<CouponContainer> coupons = couponService.findAllCouponsByIds(promotionRewards.stream()
                .filter(x -> x.getRewardType() == PromotionRewardType.COUPON)
                .map(PromotionReward::getRewardValue)
                .collect(Collectors.toList()));

        List<MemberPointSpec> memberPointSpecs = memberPointService.findMemberPointSpecsByIds(
                promotionRewards.stream()
                        .filter(x -> x.getRewardType() == PromotionRewardType.POINT)
                        .map(PromotionReward::getRewardValue)
                        .collect(Collectors.toList()));

        List<PromotionRewardGroupTemplate> promotionRewardGroupTemplates = new ArrayList<>();
        for (PromotionParticipationConfig config : promotionParticipationConfigs) {
            List<PromotionRewardGroup> rewardGroups = promotionRewardGroups.stream()
                    .filter(x -> x.getParticipationCondition().getParticipationType() == config.getType())
                    .collect(Collectors.toList());

            promotionRewardGroupTemplates.addAll(
                    payloadFactory.promotionRewardGroupTemplates(promotion, config, rewardGroups));
        }

        return PromotionRewardPayload.builder()
                .promotion(payloadFactory.promotionTemplate(promotion))
                .promotionRewardGroups(promotionRewardGroupTemplates)
                .promotionRewards(payloadFactory.promotionRewardTemplates(promotionRewards))
                .couponRewards(payloadFactory.couponTemplates(coupons.stream()
                        .map(CouponContainer::getCoupon)
                        .collect(Collectors.toList())))
                .pointRewards(payloadFactory.pointTemplatesByMemberPointSpec(memberPointSpecs))
                .build();
    }

    public PromotionApplyableRewardGroupPayload applyablePromotionRewardGroups(long promotionId) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationApplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        PromotionRewardGroupState applyableState = promotionService.findPromotionRewardGroupState(
                memberId, promotion, promotionParticipationConfig);

        return PromotionApplyableRewardGroupPayload.builder()
                .promotion(payloadFactory.promotionTemplate(promotion))
                .applyablePromotionRewardGroups(
                        payloadFactory.promotionRewardGroupTemplates(
                                promotion, promotionParticipationConfig, applyableState.getApplyableRewardGroups()))
                .conditioinalPromotionRewardGroups(
                        payloadFactory.promotionRewardGroupTemplates(
                                promotion, promotionParticipationConfig, applyableState.getConditionalRewardGroups()))
                .build();
    }

    public PromotionReplyableRewardGroupPayload replyablePromotionRewardGroups(long promotionId) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationReplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        PromotionRewardGroupState applyableState = promotionService.findPromotionRewardGroupState(
                memberId, promotion, promotionParticipationConfig);

        return PromotionReplyableRewardGroupPayload.builder()
                .promotion(payloadFactory.promotionTemplate(promotion))
                .replyablePromotionRewardGroups(
                        payloadFactory.promotionRewardGroupTemplates(
                                promotion, promotionParticipationConfig, applyableState.getApplyableRewardGroups()))
                .conditioinalPromotionRewardGroups(
                        payloadFactory.promotionRewardGroupTemplates(
                                promotion, promotionParticipationConfig, applyableState.getConditionalRewardGroups()))
                .build();
    }


    public PromotionApplyPayload promotionApply(long promotionId, PromotionApplyRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationApplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        if (promotion.getStatus() != ProgressStatus.PROGRESS
                || promotionParticipationConfig.getType() != PromotionParticipationType.APPLY) {
            throw new PromotionException(CommonCode.ERROR);
        }

        if (cacheTemplate.increaseValue(new CacheKey(Service.PROMOTION,
                        MessageUtils.format("{}.APPLY.{}", promotion.getId(), memberId)),
                2,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to apply promotion({}) too many.", memberId, promotion.getId());
            throw new PromotionException(CommonCode.TOO_MANY_REQUESTS);
        }

        Optional<PromotionReward> promotionReward = transactionTemplate.executeMainWritableTransaction(() ->
                promotionService.applyPromotion(memberId, promotion, promotionParticipationConfig, request.getRewardGroupId()));

        return PromotionApplyPayload.builder()
                .promotionRewards(promotionReward.map(
                                x -> payloadFactory.promotionRewardTemplates(Collections.singletonList(x)))
                        .orElse(Collections.emptyList()))
                .build();
    }

    public PromotionReplyPayload promotionReply(long promotionId, PromotionReplyRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationReplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        if (promotion.getStatus() != ProgressStatus.PROGRESS
                || promotionParticipationConfig.getType() != PromotionParticipationType.REPLY) {
            throw new PromotionException(CommonCode.ERROR);
        }

        if (cacheTemplate.increaseValue(new CacheKey(Service.PROMOTION,
                        MessageUtils.format("{}.REPLY.{}", promotion.getId(), memberId)),
                2,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to reply promotion({}) too many.", memberId, promotion.getId());
            throw new PromotionException(CommonCode.TOO_MANY_REQUESTS);
        }

        if (!promotionService.validateReplyRegistrable(memberId)) {
            throw new PromotionException(PromotionCode.PROMOTION_REPLY_WRITABLE_QUOTA_EXCEED);
        }

        PromotionReplyRewardContainer replyRewardContainer = transactionTemplate.executeMainWritableTransaction(() ->
                promotionService.replyPromotion(
                        memberId,
                        promotion,
                        promotionParticipationConfig,
                        request.getRewardGroupId(),
                        PromotionReplyContext.builder()
                                .secret(request.isSecret())
                                .contents(request.getContents())
                                .build()));
        if (replyRewardContainer.isEmpty()) {
            log.info("member({}) reply promotion({}). but ", memberId, promotion.getId());
            throw new PromotionException(CommonCode.ERROR);
        }

        return PromotionReplyPayload.builder()
                .promotion(payloadFactory.promotionTemplate(promotion))
                .promotionReply(replyRewardContainer.getPromotionReply()
                        .map(x -> payloadFactory.promotionReplyTemplate(memberId, x, Collections.emptySet()))
                        .orElse(null))
                .promotionRewards(replyRewardContainer.getPromotionReward()
                        .map(x -> payloadFactory.promotionRewardTemplates(Collections.singletonList(x)))
                        .orElse(Collections.emptyList()))
                .build();
    }

    public PromotionReplyPayload modifyPromotionReply(
            long promotionId, long promotionReplyId, PromotionReplyContentsRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationReplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        if (promotion.getStatus() != ProgressStatus.PROGRESS
                || promotionParticipationConfig.getType() != PromotionParticipationType.REPLY) {
            throw new PromotionException(CommonCode.ERROR);
        }

        PromotionReply reply = transactionTemplate.executeMainWritableTransaction(() -> {
            PromotionReply promotionReply = promotionService.fetchPromotionReply(promotionReplyId);
            if (promotionReply.getMember().getId() != memberId) {
                throw new PromotionException(CommonCode.ERROR);
            }
            promotionReply.changeSecretYn(YN.of(request.isSecret()))
                    .changeContents(request.getContents());

            return promotionReply;
        });

        return PromotionReplyPayload.builder()
                .promotion(payloadFactory.promotionTemplate(promotion))
                .promotionReply(payloadFactory.promotionReplyTemplate(memberId, reply, Collections.emptySet()))
                .promotionRewards(Collections.emptyList())
                .build();
    }

    public BoolPayload removePromotionReply(long promotionId, long promotionReplyId) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationReplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        if (promotion.getStatus() != ProgressStatus.PROGRESS
                || promotionParticipationConfig.getType() != PromotionParticipationType.REPLY) {
            throw new PromotionException(CommonCode.ERROR);
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            PromotionReply promotionReply = promotionService.findPromotionReply(promotionReplyId);
            if (promotionReply.getMember().getId() != memberId) {
                throw new PromotionException(CommonCode.ERROR);
            }

            promotionService.removePromotionReply(promotionReplyId);

            return true;
        });

        return BoolPayload.success();
    }

    public PromotionReplyPageablePayload promotionRepliesByMe(PromotionMemberReplyPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = promotionService.getPromotionMemberReplyPageable(pageableContext);

        Page<PromotionReply> promotionReplies = promotionService.fetchAllByMemberId(memberId, pageable);
        if (promotionReplies.isEmpty()) {
            return PromotionReplyPageablePayload.empty();
        }

        String nextToken = promotionReplies.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                PromotionMemberReplyPageableContext.builder()
                        .page(promotionReplies.getPageable().getPageNumber() + 1)
                        .build());

        return PromotionReplyPageablePayload.builder()
                .promotions(payloadFactory.promotionTemplates(promotionReplies.stream()
                        .map(PromotionReply::getPromotion)
                        .collect(Collectors.toList())))
                .promotionReplies(payloadFactory.promotionReplyTemplates(
                        memberId, promotionReplies.getContent(), Collections.emptySet()))
                .pageable(payloadFactory.pageableTemplate(promotionReplies, nextToken))
                .build();
    }


    public PromotionReplyPageablePayload promotionReplies(PromotionReplyPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId(() -> -1L);

        Pageable pageable = promotionService.getPromotionReplyPageable(pageableContext);

        Page<PromotionReply> promotionReplies = promotionService.fetchAllByPromotionid(
                pageableContext.getPromotionId(), pageable);
        if (promotionReplies.isEmpty()) {
            return PromotionReplyPageablePayload.empty();
        }

        Page<PromotionReply> excludePromotionRepliesPage = reportService.excludeReportedMember(
                reply -> reply.getMember().getId(), promotionReplies);

        Set<Long> reportIds = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                (m) -> reportService.findReportContents(
                        m, ContentType.PROMOTION_REPLY, excludePromotionRepliesPage.stream()
                                .map(PromotionReply::getId)
                                .collect(Collectors.toList())));

        String nextToken = excludePromotionRepliesPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                PromotionReplyPageableContext.builder()
                        .promotionId(pageableContext.getPromotionId())
                        .page(promotionReplies.getPageable().getPageNumber() + 1)
                        .build());

        return PromotionReplyPageablePayload.builder()
                .promotions(payloadFactory.promotionTemplates(promotionReplies.stream()
                        .map(PromotionReply::getPromotion)
                        .collect(Collectors.toList())))
                .promotionReplies(payloadFactory.promotionReplyTemplates(
                        memberId, excludePromotionRepliesPage.getContent(), reportIds))
                .pageable(payloadFactory.pageableTemplate(promotionReplies, nextToken))
                .build();
    }

    public BoolPayload promotionKakaoShareStatus(long promotionId) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionParticipationConfig promotionParticipationConfig = promotionService.fetchParticipationApplyConfig(
                promotionId);

        Promotion promotion = promotionParticipationConfig.getPromotion();

        return BoolPayload.builder()
                .result(promotionService.existPromotionKakaoShares(memberId, promotion, promotionParticipationConfig))
                .build();
    }

    public SalesEventsPayload promotionSalesEvents(long promotionId) {
        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                promotionService.findPromotionAsSalesEvents(promotionId)
                        .stream()
                        .map(PromotionAsSalesEvent::getSalesEventId)
                        .collect(Collectors.toList()),
                Collections.singletonList(SalesProductType.REPRESENTATIVE));
        if (CollectionUtils.isEmpty(salesEventContainers)) {
            return SalesEventsPayload.empty();
        }

        List<Long> salesEventIds = salesEventContainers.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> hospitalIds = salesEventContainers.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> badgeContainers = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.SALES_EVENT_AT_HOSPITAL)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(badgeContainers))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public BoolPayload promotionReset(long promotionId) {
        if (!applicationProps.getPromotion().isActivateReset()) {
            return BoolPayload.fail();
        }

        long memberId = DiagnosticContext.fetchMemberId();

        transactionTemplate.executeMainWritableTransaction(
                () -> promotionService.resetPromotionParticipation(memberId, promotionId));

        return BoolPayload.success();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/board/usecase/ThemeUseCase.java
================================================
package kr.co.yeoshin.backend.board.usecase;

import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.board.service.ThemeService;
import kr.co.yeoshin.backend.board.usecase.model.ThemePageableContext;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.payload.ThemePayload;
import kr.co.yeoshin.backend.payload.ThemeShortPageablePayload;
import kr.co.yeoshin.common.board.entity.ExplorerTheme;
import kr.co.yeoshin.common.board.entity.ExplorerThemeAsTreatment;
import kr.co.yeoshin.common.board.entity.ExplorerThemeTreatmentAsTv;
import kr.co.yeoshin.common.utils.CryptUtils;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@RequiredArgsConstructor
@UseCase
public class ThemeUseCase {

    private final ThemeService themeService;
    private final PayloadFactory payloadFactory;

    public ThemePayload theme(long themeId) {
        ExplorerTheme theme = themeService.findByThemeId(themeId);
        List<ExplorerThemeAsTreatment> themeAsTreatments = themeService.fetchExplorerThemeAsTreatments(themeId);
        List<ExplorerThemeTreatmentAsTv> themeTreatmentsAsTvs = themeService.fetchExplorerThemeTreatmentsAsTv(
                themeAsTreatments.stream()
                        .map(ExplorerThemeAsTreatment::getId)
                        .collect(Collectors.toList()));

        return ThemePayload.builder()
                .theme(payloadFactory.themeTemplate(theme))
                .themeTreatments(payloadFactory.themeTreatmentsTemplates(themeAsTreatments, themeTreatmentsAsTvs))
                .build();
    }

    public ThemeShortPageablePayload list(ThemePageableContext pageableContext) {
        Pageable pageable = themeService.pageable(pageableContext);
        Page<ExplorerTheme> explorerThemePage = themeService.findAllActivatedThemes(pageableContext.getType(), pageable);

        String nextToken = explorerThemePage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                ThemePageableContext.builder()
                        .type(pageableContext.getType())
                        .page(explorerThemePage.getPageable().getPageNumber() + 1)
                        .build());

        return ThemeShortPageablePayload.builder()
                .themes(payloadFactory.themeShortTemplates(explorerThemePage.getContent()))
                .pageable(payloadFactory.pageableTemplate(explorerThemePage, nextToken))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/braze/usecase/BrazeUseCase.java
================================================
package kr.co.yeoshin.backend.braze.usecase;

import java.time.LocalDateTime;
import java.util.*;
import java.util.Map.Entry;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.braze.controller.model.BrazeExtensionCouponRequest;
import kr.co.yeoshin.backend.braze.controller.model.BrazeExtensionMemberPoint;
import kr.co.yeoshin.backend.braze.controller.model.BrazeExtensionNotificationRawRequest;
import kr.co.yeoshin.backend.braze.controller.model.BrazeExtensionNotificationTemplateRequest;
import kr.co.yeoshin.backend.braze.service.BrazeService;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.CouponContainer;
import kr.co.yeoshin.backend.exception.CommonException;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.*;
import kr.co.yeoshin.backend.notification.service.NotificationService;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.utils.NotificationUtils;
import kr.co.yeoshin.common.coupon.entity.Coupon;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.notification.type.NotificationNhnKakaoAlimTalkIdType;
import kr.co.yeoshin.common.notification.type.NotificationType;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@UseCase
@RequiredArgsConstructor
public class BrazeUseCase {

    private final BrazeService brazeService;
    private final MemberService memberService;
    private final MemberPointService memberPointService;
    private final CouponService couponService;
    private final NotificationService notificationService;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final TransactionTemplate transactionTemplate;

    public BoolPayload notifications(String authorization, BrazeExtensionNotificationTemplateRequest extension) {
        brazeService.validateApiKey(authorization);

        LocalDateTime now = LocalDateTime.now();
        if (NotificationUtils.isInDisturbTime(now)) {
            return BoolPayload.fail();
        }

        Member member = memberService.findMember(extension.getMemberId());

        Map<NotificationType, Supplier<NotificationContext<?>>> notificationContexts = new HashMap<>();
        notificationContexts.put(NotificationType.NHN_SMS, () -> NhnSmsNotificationContext.builder(
                        Collections.singletonList(
                                SmsRecipient.builder()
                                        .recipientNo(member.getCellPhone())
                                        .build()),
                        NotificationSmsIdType.valueOf(extension.getTemplateId()))
                .templateParams(extension.getTemplateParams().entrySet().stream()
                        .collect(Collectors.toMap(Map.Entry::getKey, Entry::getValue)))
                .build());
        notificationContexts.put(NotificationType.NHN_KAKAO_ALIMTALK, () -> NhnKakaoAlimTalkNotificationContext.builder(
                        Collections.singletonList(AlimTalkRecipient.builder()
                                .recipientNo(member.getCellPhone())
                                .build()),
                        NotificationNhnKakaoAlimTalkIdType.valueOf(extension.getTemplateId()))
                .templateParams(extension.getTemplateParams())
                .build());

        Supplier<NotificationContext<?>> notificationContext = notificationContexts.get(extension.getNotificationType());
        if (notificationContext == null) {
            log.error("braze notification({}) is not supported. extension:{}", extension.getNotificationType(), extension);
            throw new CommonException(CommonCode.ERROR);
        }

        Optional.ofNullable(notificationContext.get()).ifPresent(notificationService::send);

        return BoolPayload.success();
    }


    public BoolPayload notifications(String authorization, BrazeExtensionNotificationRawRequest extension) {
        brazeService.validateApiKey(authorization);

        Map<NotificationType, Supplier<NotificationContext<?>>> notificationContexts = new HashMap<>();
        notificationContexts.put(NotificationType.NHN_KAKAO_FRIENDTALK,
                () -> NhnKakaoFriendTalkNotificationContext.builder(extension.getPayload())
                        .build());

        Supplier<NotificationContext<?>> notificationContext = notificationContexts.get(extension.getNotificationType());
        if (notificationContext == null) {
            log.error("braze notification({}) is not supported. extension:{}", extension.getNotificationType(), extension);
            throw new CommonException(CommonCode.ERROR);
        }

        notificationService.send(notificationContext.get());

        return BoolPayload.success();
    }

    public BoolPayload memberPoints(String authorization, BrazeExtensionMemberPoint extension) {
        brazeService.validateApiKey(authorization);

        memberPointService.registerPoint(extension.getMemberId(),
                MemberPointAddContext.builder()
                        .title(extension.getTitle())
                        .point(extension.getPoint())
                        .publishType(PublishType.SYSTEM)
                        .action(Action.REWARD_CS)
                        .type(MemberPointType.REWARD)
                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                .expireAt(PointUtils.expireAt(extension.getExpireDays()))
                                .point(extension.getPoint())
                                .build()))
                        .build());

        return BoolPayload.success();
    }

    public BoolPayload coupons(String authorization, BrazeExtensionCouponRequest extension) {
        brazeService.validateApiKey(authorization);

        List<CouponContainer> couponContainers = couponService.findAllCouponsByIds(
                Collections.singletonList(extension.getCouponId()));
        if (CollectionUtils.isEmpty(couponContainers)) {
            return BoolPayload.fail();
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            couponContainers.forEach(x -> {
                couponService.isRegistrableCoupon(x);
                couponService.validateCouponIssuer(extension.getMemberId(), x);
                Coupon coupon = x.getCoupon();
                if (coupon.isPointCoupon()) {
                    memberPointService.registerPoint(extension.getMemberId(), MemberPointAddContext.builder()
                            .title(MessageUtils.format(Action.REWARD_REGISTER_POINT_COUPON.getTitleKo(), coupon.getName()))
                            .action(Action.REWARD_REGISTER_POINT_COUPON)
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(coupon.calculateUsableEndAtFromNow())
                                    .point(coupon.getValue())
                                    .build()))
                            .point(coupon.getValue())
                            .type(MemberPointType.REWARD)
                            .refType(DomainType.COUPON)
                            .refId(coupon.getId())
                            .build());
                }

                MemberCoupon memberCoupon = couponService.registerMemberCoupon(extension.getMemberId(), coupon);
                queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_COUPON_CREATE, memberCoupon.getId());
            });

            return true;
        });

        return BoolPayload.success();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/browser/usecase/BrowserUseCase.java
================================================
package kr.co.yeoshin.backend.browser.usecase;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import kr.co.yeoshin.backend.browser.model.parameter.BrowserContext;
import kr.co.yeoshin.backend.browser.service.BrowserService;
import kr.co.yeoshin.backend.browser.service.model.BrowserCollectionTemplatePriority;
import kr.co.yeoshin.backend.common.Constant.Template;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.locale.LocaleEnText;
import kr.co.yeoshin.backend.common.model.locale.LocaleJaText;
import kr.co.yeoshin.backend.common.model.locale.LocaleKoText;
import kr.co.yeoshin.backend.common.model.locale.LocaleZhText;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.interesting.service.model.InterestingContainer;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.BrowserTemplatesPayload;
import kr.co.yeoshin.backend.payload.template.BrowserTemplate;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.salesproduct.service.model.TroubleCategory;
import kr.co.yeoshin.backend.utils.LocaleUtils;
import kr.co.yeoshin.common.browser.model.BrowserLibraryTemplate;
import kr.co.yeoshin.common.browser.type.BrowserLocationType;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.MemberCouponStatus;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.utils.ListUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@AllArgsConstructor
@UseCase
public class BrowserUseCase {

    private final MemberService memberService;
    private final BrowserService browserService;
    private final CouponService couponService;
    private final SalesProductService salesProductService;
    private final InterestingService interestingService;
    private final RecommendService recommendService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public BrowserTemplatesPayload template(BrowserLocationType location) {
        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        InterestingContainer interestingContainer = DiagnosticContext.ifVirtualMemberOrElse(
                () -> InterestingContainer.empty(-1, false),
                interestingService::findInteresting);

        BrowserContext browserContext = transactionTemplate.executeMainReadableTransaction(() -> {
            TroubleCategory troubleCategory = recommendService.getRecommendableTroubleCategory(
                            recommendFacade, attributeFacade, interestingContainer)
                    .orElse(ListUtils.takeRandomElement(attributeFacade.findAllTroubleCategories()));

            Optional<MemberServiceSummary> memberServiceSummary = DiagnosticContext.ifVirtualMemberOrElse(
                    Optional::empty,
                    (memberId) -> Optional.of(memberService.fetchMemberServiceSummaryByMemberId(memberId)));

            String profileId = memberServiceSummary
                    .map(MemberServiceSummary::getMember)
                    .map(Member::getProfileId)
                    .orElse(StringUtils.EMPTY);

            LocalDateTime firstOrderAt = memberServiceSummary
                    .map(MemberServiceSummary::getFirstOrderAt)
                    .orElse(null);

            boolean hasFrayHospitalCoupon = DiagnosticContext.ifVirtualMemberOrElse(
                    () -> false,
                    (memberId) -> couponService.existMemberCoupon(
                            memberId,
                            Collections.singleton(CouponIssueConditionType.FRAY_HOSPITAL_ID),
                            Collections.singletonList(MemberCouponStatus.UNUSED)
                    ));

            return BrowserContext.builder()
                    .profileId(profileId)
                    .recommendFacade(recommendFacade)
                    .recommendableTroubleCategory(troubleCategory)
                    .firstOrderAt(firstOrderAt)
                    .hasFrayHospitalCoupon(hasFrayHospitalCoupon)
                    .build();
        });

        Optional<BrowserCollectionTemplatePriority> browserCollectionTemplate = browserService.findTemplates(
                browserContext, location);

        List<BrowserLibraryTemplate> libraryTemplates = browserCollectionTemplate
                .map(x -> x.getTemplate().getBrowserLibraries())
                .orElse(Collections.emptyList());

        return BrowserTemplatesPayload.builder()
                .browserCollectionId(browserCollectionTemplate
                        .map(BrowserCollectionTemplatePriority::getCollectionId)
                        .orElse(Template.NOT_EXIST_ID))
                .templates(IntStream.range(0, CollectionUtils.size(libraryTemplates))
                        .filter(i -> {
                            BrowserLibraryTemplate libraryTemplate = libraryTemplates.get(i);
                            return browserService.visibleLibraryTemplate(browserContext, libraryTemplate);
                        })
                        .mapToObj(i -> {
                            BrowserLibraryTemplate libraryTemplate = libraryTemplates.get(i);
                            return BrowserTemplate.builder()
                                    .id(i + 1)
                                    .type(libraryTemplate.getType())
                                    .title(browserService.normalizeLibraryTitle(browserContext,
                                            libraryTemplate,
                                            LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                                    List.of(LocaleKoText.of(libraryTemplate.getTitleKo()),
                                                            LocaleEnText.of(libraryTemplate.getTitleEn()),
                                                            LocaleZhText.of(libraryTemplate.getTitleZh()),
                                                            LocaleJaText.of(libraryTemplate.getTitleJa())))))
                                    .subtitle(browserService.normalizeLibrarySubtitle(browserContext,
                                            libraryTemplate,
                                            LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                                    List.of(LocaleKoText.of(libraryTemplate.getSubtitleKo()),
                                                            LocaleEnText.of(libraryTemplate.getSubtitleEn()),
                                                            LocaleZhText.of(libraryTemplate.getSubtitleZh()),
                                                            LocaleJaText.of(libraryTemplate.getSubtitleJa())))))
                                    .image(payloadFactory.imageTemplateByPublic(
                                            MediaDomainType.BROWSER, libraryTemplate.getImage()))
                                    .campaign(StringUtils.isBlank(libraryTemplate.getCampaign()) ? StringUtils.EMPTY
                                            : libraryTemplate.getCampaign())
                                    .parameter(browserService.normalizeLibraryParameter(browserContext, libraryTemplate))
                                    .expandable(browserService.expandableLibrary(browserContext, libraryTemplate))
                                    .build();
                        })
                        .collect(Collectors.toList()))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/callback/usecase/IamPortUseCase.java
================================================
package kr.co.yeoshin.backend.callback.usecase;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.callback.usecase.component.IamportPgProcessor;
import kr.co.yeoshin.backend.callback.usecase.component.model.DeferContext;
import kr.co.yeoshin.backend.callback.usecase.model.CallbackPgProcessContext;
import kr.co.yeoshin.backend.cart.service.CartService;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.exception.OrderException;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.GmailNotificationContext;
import kr.co.yeoshin.backend.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.notification.component.template.MailTemplateFactory;
import kr.co.yeoshin.backend.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.order.usecase.model.ProcessContainer;
import kr.co.yeoshin.backend.order.utils.OrderUtils;
import kr.co.yeoshin.backend.payment.service.PaymentService;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointMinusContext;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.payment.CpmPaymentContext;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.model.Payment;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@UseCase
public class IamPortUseCase {

    private final OrderService orderService;
    private final TicketService ticketService;
    private final CouponService couponService;
    private final SalesEventService salesEventService;
    private final MemberPointService memberPointService;
    private final PaymentService paymentService;
    private final MemberService memberService;
    private final HospitalService hospitalService;
    private final CartService cartService;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final MailTemplateFactory mailTemplateFactory;
    private final SlackTemplateFactory slackTemplateFactory;

    public boolean process(IamportPgProcessor processor) {
        return transactionTemplate.executeMainWritableTransaction(() -> {
                    CallbackPgProcessContext processContext = processor.process(ProcessContainer.builder()
                                    .orderService(orderService)
                                    .paymentService(paymentService)
                                    .messagePublisher(messagePublisher)
                                    .slackTemplateFactory(slackTemplateFactory)
                                    .build())
                            .orElseThrow(() -> {
                                log.error("callback processor is failed.");
                                throw new OrderException(CommonCode.ERROR);
                            });

                    OrderPurchase order = processContext.getOrderPurchase();
                    Payment payment = processContext.getPayment();

                    Member member = memberService.findMember(order.getOrdererId());
                    memberService.modifyFirstOrderAt(member.getId(), Optional.of(LocalDateTime.now()));

                    couponService.registerPaymentCoupons(member.getId(), order.getId(), order.getPaymentCouponIds());

                    if (order.getSalePointPrice() > 0) {
                        memberPointService.registerPoint(member.getId(), MemberPointMinusContext.builder()
                                .action(Action.USE_ORDER_SALES_EVENT_PRODUCT)
                                .publishType(PublishType.NONE)
                                .title(Action.USE_ORDER_SALES_EVENT_PRODUCT.getTitleKo())
                                .type(MemberPointType.USE)
                                .point(order.getSalePointPrice() * -1)
                                .extraHoldMinutes(OrderUtils.getMileageExtraHoldMinutes(
                                        processContext.getOrderRequestAt(), LocalDateTime.now()))
                                .refType(DomainType.ORDER)
                                .refId(order.getId())
                                .build());
                    }
                    List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderId(order.getId());

                    for (OrderSalesProduct orderSalesProduct : orderSalesProducts) {
                        if (!ticketService.createTicket(
                                member.getId(), order, orderSalesProduct, orderSalesProduct.getSalesProductVersion())) {
                            log.error("iamport - orderSalesProduct({}) create ticket failed.", orderSalesProduct);
                            throw new OrderException(CommonCode.ERROR);
                        }

                        cartService.takeCartProduct(
                                member.getId(), orderSalesProduct.getSalesProductVersion(), orderSalesProduct.getQuantity());
                    }

                    List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(orderSalesProducts.stream()
                            .map(OrderSalesProduct::getSalesEvent)
                            .map(x -> x.getHospital().getId())
                            .collect(Collectors.toSet()));

                    salesEventService.increaseSalesCount(orderSalesProducts);

                    messagePublisher.publishCpm(
                            CpmMessageUtils.payment(member.getId(), orderSalesProducts.stream()
                                    .map(x -> CpmPaymentContext.builder()
                                            .salesEventId(x.getSalesEvent().getId())
                                            .amount(x.getSalesProductVersion().getSalesPrice() * x.getQuantity())
                                            .build())
                                    .collect(Collectors.toList())));

                    List<GmailNotificationContext> mailContexts = Collections.singletonList(
                            mailTemplateFactory.orderCompleteTemplate(
                                    member, order, payment, hospitals, orderSalesProducts));
                    List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = new ArrayList<>();
                    alimTalkContexts.add(
                            alimTalkTemplateFactory.orderComplete(member, order, payment,
                                    hospitals, orderSalesProducts));
                    if (order.getInsuranceAgreeYn().toBoolean()) {
                        alimTalkContexts.add(alimTalkTemplateFactory.insuranceAgree(
                                member, order, orderSalesProducts));
                    }

                    messagePublisher.publishNotification(NotificationMessageUtils.orderComplete(
                            mailContexts, alimTalkContexts));
                    MemberServiceSummary memberServiceSummary = memberService.fetchMemberServiceSummaryByMemberId(member.getId());

                    Optional.ofNullable(processContext.getDefer()).ifPresent(x -> {
                        try {
                            x.accept(DeferContext.builder()
                                    .order(order)
                                    .memberServiceSummary(memberServiceSummary)
                                    .orderSalesProducts(orderSalesProducts)
                                    .hospitals(hospitals)
                                    .salesEvents(orderSalesProducts.stream()
                                            .map(OrderSalesProduct::getSalesEvent)
                                            .distinct()
                                            .collect(Collectors.toList()))
                                    .build());
                        } catch (Exception e) {
                            log.error("iamport callback defer error", e);
                        }
                    });

                    queueMessageDomainEventContext.addDomainEvent(DomainEventType.ORDER_CREATE, order.getId());

                    return true;
                }
        );
    }

    /*
# Iamport Payload

* PaymentPayload

        iamportUniqueId=imp_483013437134,
        merchantUniqueId=ORD20180131-1672107013328,
        payMethod=card,
        channel=pc,
        pgProvider=nice,
        embeddedPgProvider=null,
        pgTransactionId=nictest00m01012212271110491555,
        pgId=nictest00m,
        escrow=false,
        applyNumber=30046585,
        bankCode=null,
        bankName=null,
        cardCode=381,
        cardName=국민KB카드,
        cardQuota=0,
        cardNumber=46730979****3039,
        cardType=1,
        virtualBank_code=null,
        virtualBankName=null,
        virtualBankNumber=null,
        virtualBankHolder=null,
        virtualBankDate=0,
        virtualBankIssuedAt=0,
        name="..."
        amount=100,
        cancelAmount=0,
        currency=KRW,
        buyerName="..."
        buyerEmail=gildong@gmail.com,
        buyerTelephone=010-4242-4242,
        buyerAddress="...",
        buyerPostcode=01181,
        customData=null,
        userAgent=Mozilla/5.0,
        status=paid,
        startedAt=1672107013,
        paidAt=1672107049,
        failedAt=0,
        cancelledAt=0,
        failReason=null,
        cancelReason=null,
        receiptUrl=https://npg.nicepay.co.kr/issue/IssueLoader.do?TID=nictest00m01012212271110491555&type=0&InnerWin=Y,
        cancelHistoryList=[],
        cancelReceiptUrls=[],
        cashReceiptIssued=false,
        customerUniqueId=null,
        customerUniqueIdUsage=null)
*/
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/callback/usecase/KakaoUseCase.java
================================================
package kr.co.yeoshin.backend.callback.usecase;

import kr.co.yeoshin.backend.board.model.PromotionRewardGroupRef;
import kr.co.yeoshin.backend.board.service.PromotionService;
import kr.co.yeoshin.backend.callback.controller.model.KakaoShareRequest;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.exception.CommonException;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.CryptUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class KakaoUseCase {

    private final PromotionService promotionService;

    public boolean completeShare(KakaoShareRequest request) {
        /*
            https://developers.kakao.com/docs/latest/ko/message/callback#success-parameter
            MemoChat: 나와의 채팅방
            DirectChat: 다른 사용자와의 1:1 채팅방
            MultiChat: 다른 사용자들과의 그룹 채팅방
            OpenDirectChat: 1:1 오픈채팅방
            OpenMultiChat: 그룹 오픈채팅방
        */
        if (StringUtils.equalsIgnoreCase(request.getChatType(), "MemoChat")) {
            return true;
        }

        /*
            # ref encode

            CryptUtils.AES.encrypt(PromotionRewardGroupRef.builder()
                                .domain(DomainType.PROMOTION)
                                .id(x.getPromotion().getId())
                                .memberId(DiagnosticContext.fetchMemberId())
                                .key(promotion.getParticipationPolicy().participationKey())
                                .promotionRewardGroupId(x.getId())
                                .build()))
        */
        PromotionRewardGroupRef ref = CryptUtils.AES.decrypt(request.getRef(), PromotionRewardGroupRef.class)
                .orElseThrow(() -> new CommonException(CommonCode.ERROR));
        if (ref.getDomain() != DomainType.PROMOTION) {
            throw new CommonException(CommonCode.ERROR);
        }

        promotionService.registerPromotionKakaoShare(ref);

        return true;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/callback/usecase/NhnUseCase.java
================================================
package kr.co.yeoshin.backend.callback.usecase;

import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.callback.controller.model.NhnSmsAbuseConversionRequest;
import kr.co.yeoshin.backend.callback.controller.model.NhnSmsAbuseHook;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.notification.component.template.SlackTemplateFactory;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class NhnUseCase {

    private final QueueMessagePublisherTemplate messagePublisher;
    private final SlackTemplateFactory slackTemplateFactory;

    public boolean process(NhnSmsAbuseConversionRequest request) {
        List<NhnSmsAbuseHook> hooks = request.getHooks();
        if (CollectionUtils.isEmpty(hooks)) {
            return true;
        }

        String countryCodes = hooks.stream()
                .map(NhnSmsAbuseHook::getCountryCode)
                .collect(Collectors.joining(","));
        String at = hooks.stream()
                .map(NhnSmsAbuseHook::getBlockedDateTime)
                .findFirst()
                .orElse("-");

        messagePublisher.publishNotification(NotificationMessageUtils.notificationMessage(
                slackTemplateFactory.nhnSmsAbuserConversion(countryCodes, at)));

        return true;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/cart/usecase/CartUseCase.java
================================================
package kr.co.yeoshin.backend.cart.usecase;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.cart.controller.model.CartProduct;
import kr.co.yeoshin.backend.cart.controller.model.CartProductCountRequest;
import kr.co.yeoshin.backend.cart.controller.model.CartProductsRequest;
import kr.co.yeoshin.backend.cart.service.CartService;
import kr.co.yeoshin.backend.cart.usecase.model.CartProductModify;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.CartException;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.CartProductPayload;
import kr.co.yeoshin.backend.payload.CartProductsPayload;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventLinkable;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.payment.entity.Cart;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;

@AllArgsConstructor
@UseCase
public class CartUseCase {

    private final CartService cartService;
    private final SalesEventService salesEventService;
    private final SalesProductService salesProductService;
    private final OrderService orderService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public CartProductsPayload listCartProducts() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Cart> carts = cartService.fetchAllCartProducts(memberId);
        if (CollectionUtils.isEmpty(carts)) {
            return CartProductsPayload.empty();
        }

        List<Cart> organizedCarts = cartService.organizeCarts(carts);
        if (CollectionUtils.isEmpty(organizedCarts)) {
            return CartProductsPayload.empty();
        }

        List<SalesEventLinkable> salesEventLinks = salesEventService.salesEventsLinkable(organizedCarts.stream()
                        .map(Cart::getSalesEvent)
                        .collect(Collectors.toList()),
                Set.of(CpmAdStatus.PROGRESS, CpmAdStatus.PAUSE));

        List<SalesProductVersion> salesProductVersions = salesProductService.fetchSalesProductVersionsByBySalesProductVersionIds(
                organizedCarts.stream()
                        .map(x -> x.getSalesProductVersion().getId())
                        .collect(Collectors.toList()));

        List<SalesProduct> salesProducts = salesProductVersions.stream()
                .map(SalesProductVersion::getSalesProduct)
                .collect(Collectors.toList());

        return CartProductsPayload.builder()
                .cartProducts(organizedCarts.stream()
                        .map(x -> payloadFactory.cartProductTemplate(x, x.getSalesProductVersion()))
                        .collect(Collectors.toList()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .salesEvents(payloadFactory.salesEventTemplates(organizedCarts.stream()
                        .map(Cart::getSalesEvent)
                        .collect(Collectors.toList()), salesEventLinks, Refer.empty()))
                .hospitals(payloadFactory.hospitalTemplates(organizedCarts.stream()
                        .map(Cart::getHospital)
                        .collect(Collectors.toList())))
                .build();

    }

    public CartProductPayload findCartProduct(long cartProductId) {
        long memberId = DiagnosticContext.fetchMemberId();

        Cart cart = cartService.fetchCartProductByCartProductId(memberId, cartProductId)
                .orElseThrow(() -> new CartException(CommonCode.ERROR));

        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainerBySalesProductIds(
                cart.getSalesEvent().getId(),
                Collections.singletonList(cart.getSalesProductVersion().getSalesProduct().getId()));

        return payloadFactory.cartProductPayload(cart,
                salesEventContainer,
                cart.getSalesProductVersion(),
                cart.getHospital());

    }

    public CartProductsPayload registerCartProduct(CartProductsRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Cart> carts = transactionTemplate.executeMainWritableTransaction(() -> {
            List<Cart> results = new ArrayList<>();
            for (CartProduct cartProduct : request.getProducts()) {
                results.add(cartService.registerCartProduct(memberId, cartProduct));
            }
            return results;
        });

        return CartProductsPayload.builder()
                .cartProducts(payloadFactory.cartProductTemplates(carts, carts.stream()
                        .map(Cart::getSalesProductVersion)
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplates(carts.stream()
                        .map(Cart::getSalesEvent)
                        .collect(Collectors.toList()), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(carts.stream()
                        .map(Cart::getSalesProductVersion)
                        .collect(Collectors.toList())))
                .hospitals(payloadFactory.hospitalTemplates(carts.stream()
                        .map(Cart::getHospital)
                        .collect(Collectors.toList())))
                .build();
    }

    public BoolPayload removeCartProducts(List<Long> cartProductIds) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() ->
                        cartService.removeCartProducts(memberId, cartProductIds)))
                .build();
    }

    public CartProductPayload modifyCartProduct(long cartProductId, CartProductCountRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        return transactionTemplate.executeMainWritableTransaction(() -> {
            Cart cart = cartService.modifyCartProduct(memberId, CartProductModify.builder()
                    .cartProductId(cartProductId)
                    .count(request.getCount())
                    .build());

            SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainerBySalesProductIds(
                    cart.getSalesEvent().getId(),
                    Collections.singletonList(cart.getSalesProductVersion().getSalesProduct().getId()));

            return payloadFactory.cartProductPayload(cart,
                    salesEventContainer,
                    cart.getSalesProductVersion(),
                    cart.getHospital());
        });
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/code/usecase/CodeUseCase.java
================================================
package kr.co.yeoshin.backend.code.usecase;

import java.util.*;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.backend.code.model.AuthResignReasonAttribute;
import kr.co.yeoshin.backend.code.model.CodeAttribute;
import kr.co.yeoshin.backend.code.model.CodeDescription;
import kr.co.yeoshin.backend.code.model.CodeType;
import kr.co.yeoshin.backend.common.model.api.code.Code;
import kr.co.yeoshin.backend.common.model.locale.LocaleEnText;
import kr.co.yeoshin.backend.common.model.locale.LocaleJaText;
import kr.co.yeoshin.backend.common.model.locale.LocaleKoText;
import kr.co.yeoshin.backend.common.model.locale.LocaleZhText;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.props.CodeProps;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.utils.LocaleUtils;
import kr.co.yeoshin.common.auth.type.ResignReasonCode;
import kr.co.yeoshin.common.product.type.TroubleBodyPart;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
import org.springframework.core.type.filter.AssignableTypeFilter;

@AllArgsConstructor
@UseCase
public class CodeUseCase {

    private final ApplicationProps applicationProps;
    private final Map<CodeType, CodeDescriptor> codeDescriptors;

    @PostConstruct
    public void init() {
        Map<CodeType, Supplier<CodeDescriptor>> codeFactories = new HashMap<>();
        codeFactories.put(CodeType.API_RESPONSE, ApiResponseCodeDescriptor::new);
        codeFactories.put(CodeType.AUTH_RESIGN_REASON, AuthResignReasonCodeDescriptor::new);
        codeFactories.put(CodeType.TROUBLE_CATEGORY_BODY_PART, TroubleCategoryBodyPartCodeDescriptor::new);

        CodeProps codeProps = applicationProps.getCode();
        codeFactories.entrySet().stream()
                .filter(x -> CollectionUtils.containsAny(codeProps.getActivated(), x.getKey()))
                .forEach(x -> codeDescriptors.put(x.getKey(), x.getValue().get()));
    }

    public List<CodeDescription> findCodes(CodeType type) {
        CodeDescriptor factory = codeDescriptors.get(type);

        return factory == null ? null : factory.createDescriptions();
    }

    public CodeDescription findCode(CodeType type, String code) {
        CodeDescriptor factory = codeDescriptors.get(type);

        return factory == null ? null : factory.createDescription(code);
    }

    private interface CodeDescriptor {

        List<CodeDescription> createDescriptions();

        CodeDescription createDescription(String code);
    }

    @Slf4j
    private static class ApiResponseCodeDescriptor implements CodeDescriptor {

        private final List<Code> codes;

        public ApiResponseCodeDescriptor() {
            this.codes = new ArrayList<>();

            ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);
            provider.addIncludeFilter(new AssignableTypeFilter(Code.class));

            List<String> codeClasses = provider.findCandidateComponents(Code.class.getPackageName())
                    .stream()
                    .map(BeanDefinition::getBeanClassName)
                    .collect(Collectors.toList());
            for (String codeClass : codeClasses) {
                try {
                    this.codes.addAll(Arrays.stream(provider.getClass().getClassLoader().loadClass(codeClass)
                                    .getEnumConstants())
                            .filter(x -> x instanceof Code)
                            .map(x -> (Code) x)
                            .collect(Collectors.toList()));
                } catch (ClassNotFoundException e) {
                    log.error("load api response code error", e);
                }
            }
        }

        @Override
        public List<CodeDescription> createDescriptions() {
            return codes.stream()
                    .map(x -> CodeDescription.builder()
                            .code(x.name())
                            .displayText(x.getDescription())
                            .attribute(CodeAttribute.builder().build())
                            .build())
                    .collect(Collectors.toList());
        }

        @Override
        public CodeDescription createDescription(String code) {
            return codes.stream()
                    .filter(x -> StringUtils.equalsIgnoreCase(x.name(), code))
                    .map(x -> CodeDescription.builder()
                            .code(x.name())
                            .displayText(x.getDescription())
                            .attribute(CodeAttribute.builder().build())
                            .build())
                    .findFirst()
                    .orElseGet(CodeDescription::empty);
        }
    }

    private static class AuthResignReasonCodeDescriptor implements CodeDescriptor {

        @Override
        public List<kr.co.yeoshin.backend.code.model.CodeDescription> createDescriptions() {

            return Arrays.stream(ResignReasonCode.values())
                    .map(x -> CodeDescription.builder()
                            .code(x.name())
                            .displayText(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                    List.of(LocaleKoText.of(x.getDescriptionKo()),
                                            LocaleEnText.of(x.getDescriptionEn()),
                                            LocaleZhText.of(x.getDescriptionZh()),
                                            LocaleJaText.of(x.getDescriptionJa()))))
                            .attribute(AuthResignReasonAttribute.builder()
                                    .input(x.isInput())
                                    .build())
                            .build())
                    .collect(Collectors.toList());
        }

        @Override
        public CodeDescription createDescription(String code) {
            return Arrays.stream(ResignReasonCode.values())
                    .filter(x -> StringUtils.equalsIgnoreCase(x.name(), code))
                    .map(x -> CodeDescription.builder()
                            .code(x.name())
                            .displayText(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                    List.of(LocaleKoText.of(x.getDescriptionKo()),
                                            LocaleEnText.of(x.getDescriptionEn()),
                                            LocaleZhText.of(x.getDescriptionZh()),
                                            LocaleJaText.of(x.getDescriptionJa()))))
                            .attribute(AuthResignReasonAttribute.builder()
                                    .input(x.isInput())
                                    .build())
                            .build())
                    .findFirst()
                    .orElseGet(CodeDescription::empty);
        }
    }

    private static class TroubleCategoryBodyPartCodeDescriptor implements CodeDescriptor {

        @Override
        public List<CodeDescription> createDescriptions() {
            return Arrays.stream(TroubleBodyPart.values())
                    .map(x -> CodeDescription.builder()
                            .code(x.name())
                            .displayText(x.getDisplayNameKo())
                            .attribute(CodeAttribute.builder().build())
                            .build())
                    .collect(Collectors.toList());
        }

        @Override
        public CodeDescription createDescription(String code) {
            return Arrays.stream(TroubleBodyPart.values())
                    .filter(x -> StringUtils.equalsIgnoreCase(x.name(), code))
                    .map(x -> CodeDescription.builder()
                            .code(x.name())
                            .displayText(x.getDisplayNameKo())
                            .attribute(CodeAttribute.builder().build())
                            .build())
                    .findFirst()
                    .orElseGet(CodeDescription::empty);
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/component/GlobalCacheTemplate.java
================================================
package kr.co.yeoshin.backend.common.component;

import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.reflect.Type;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import kr.co.yeoshin.backend.common.component.type.CacheCallback;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.common.utils.JsonUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Component;

@AllArgsConstructor
@Component
public class GlobalCacheTemplate {

    private final ApplicationProps applicationProps;
    private final StringRedisTemplate redisTemplate;

    public <T> T memoize(CacheKey cacheKey, CacheCallback<T> callback, Class<T> clazz) {
        return memoize(cacheKey, callback, new TypeReference<T>() {
            @Override
            public Type getType() {
                return clazz;
            }
        });
    }

    public <T> T memoize(CacheKey cacheKey, CacheCallback<T> callback, TypeReference<T> typeReference) {
        String key = cacheKey.toString();
        String value = redisTemplate.opsForValue().get(key);
        if (StringUtils.isNotBlank(value)) {
            return JsonUtils.toObject(value, typeReference);
        }

        T result = callback.execute();
        if (result == null) {
            return null;
        }

        redisTemplate.opsForValue().set(key,
                JsonUtils.toJsonString(result),
                applicationProps.getMemoization().getPeriodSeconds(),
                TimeUnit.SECONDS);

        return result;
    }

    public long increaseValue(CacheKey cacheKey, long timeout, TimeUnit timeUnit) {
        String key = cacheKey.toString();
        long result = Optional.ofNullable(redisTemplate.opsForValue().increment(key))
                .orElse(0L);
        if (result == 1) {
            redisTemplate.expire(key, timeout, timeUnit);
        }

        return result;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/component/LocalCacheTemplate.java
================================================
package kr.co.yeoshin.backend.common.component;

import kr.co.yeoshin.backend.common.component.type.CacheCallback;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.stereotype.Memoize;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;

@AllArgsConstructor
@Component
public class LocalCacheTemplate {

    private final ApplicationProps applicationProps;

    @Memoize
    public <T> T memoize(CacheKey cacheKey, CacheCallback<T> callback) {
        return callback.execute();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/component/QueryTemplate.java
================================================
package kr.co.yeoshin.backend.common.component;

import java.util.Map;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.stringtemplate.v4.ST;

@SuppressWarnings("FieldCanBeLocal")
@Slf4j
@RequiredArgsConstructor
@Component
public class QueryTemplate {

    private final QueryMapperLoader queryMapperLoader;

    public Optional<String> build(String namespace, String id, Map<String, Object> params) {
        Optional<String> query = queryMapperLoader.getQuery(namespace, id);
        if (query.isEmpty()) {
            return Optional.empty();
        }

        ST template = new ST(query.get(), '$', '$');
        params.forEach(template::add);

        return Optional.of(template.render());
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/component/TransactionTemplate.java
================================================
package kr.co.yeoshin.backend.common.component;

import kr.co.yeoshin.backend.common.component.type.TransactionCallback;
import kr.co.yeoshin.backend.common.stereotype.transactional.CpmWritableTransactional;
import kr.co.yeoshin.backend.common.stereotype.transactional.MainReadableTransactional;
import kr.co.yeoshin.backend.common.stereotype.transactional.MainWritableTransactional;
import org.springframework.stereotype.Component;

@Component("kr.co.yeoshin.backend.common.component.transactionTemplate")
public class TransactionTemplate {

    @MainWritableTransactional
    public <T> T executeMainWritableTransaction(TransactionCallback<T> callback) {
        return callback.execute();
    }

    @MainReadableTransactional
    public <T> T executeMainReadableTransaction(TransactionCallback<T> callback) {
        return callback.execute();
    }

    @CpmWritableTransactional
    public <T> T executeCpmWritableTransaction(TransactionCallback<T> callback) {
        return callback.execute();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/model/api/payload/BoolPayload.java
================================================
package kr.co.yeoshin.backend.common.model.api.payload;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class BoolPayload {

    private boolean result;

    public static BoolPayload success() {
        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public static BoolPayload fail() {
        return BoolPayload.builder()
                .result(false)
                .build();
    }

    @JsonIgnore
    @JsonGetter(value = "isSuccessful")
    public boolean isSuccessful() {
        return this.result;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/model/api/payload/ListPayload.java
================================================
package kr.co.yeoshin.backend.common.model.api.payload;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ListPayload<T> {

    private List<T> items;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/model/api/payload/TemplatePayload.java
================================================
package kr.co.yeoshin.backend.common.model.api.payload;

import java.util.HashMap;
import java.util.Map;

public class TemplatePayload extends HashMap<String, Object> {

    public TemplatePayload(Map<String, Object> map) {
        super(map);
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/model/api/template/PaymentBenefitTemplate.java
================================================
package kr.co.yeoshin.backend.common.model.api.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.PayMethodFilterType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PaymentBenefitTemplate {

    private long id;
    private String title;
    private String content;
    private String subContent;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private PayMethodFilterType payMethodType;
    private boolean badge;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/model/api/template/ReservationHospitalConfigTemplate.java
================================================
package kr.co.yeoshin.backend.common.model.api.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class ReservationHospitalConfigTemplate {

    private long id;
    private long hospitalId;
    private boolean mobileReservation;
    private boolean todayReservation;
    private boolean immediateReservation;
    private boolean autoConfirmReservation;
    private boolean holidayReservation;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/model/api/template/Template.java
================================================
package kr.co.yeoshin.backend.common.model.api.template;

import kr.co.yeoshin.backend.common.model.api.payload.TemplatePayload;
import kr.co.yeoshin.common.utils.JsonUtils;

public interface Template {

    default TemplatePayload toPayload() {
        return new TemplatePayload(JsonUtils.toMap(this));
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/common/stereotype/UseCase.java
================================================
package kr.co.yeoshin.backend.common.stereotype;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import org.springframework.core.annotation.AliasFor;
import org.springframework.stereotype.Component;

@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface UseCase {

    @AliasFor(annotation = Component.class)
    String value() default "";
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/config/messages/LocaleMessageSourceTemplate.java
================================================
package kr.co.yeoshin.backend.config.messages;

import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Name;
import kr.co.yeoshin.backend.config.locale.LocaleLanguage;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.MDC;
import org.springframework.context.NoSuchMessageException;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class LocaleMessageSourceTemplate {

    private final Map<String, AbstractLocaleMessageSource> messageSources;
    private final LocaleLanguage localeLanguage;
    private final AbstractLocaleMessageSource defaultMessageSource;

    public LocaleMessageSourceTemplate(
            List<AbstractLocaleMessageSource> messageSources,
            LocaleLanguage localeLanguage,
            EnLocaleMessageSource defaultMessageSource) {
        this.messageSources = messageSources.stream()
                .collect(Collectors.toMap(x -> x.locale().getLanguage(), Function.identity()));
        this.localeLanguage = localeLanguage;
        this.defaultMessageSource = defaultMessageSource;
    }

    public String getMessage(String code, Object[] args) {
        String lang = MDC.get(Name.LANGUAGE);
        Locale locale = Locale.forLanguageTag(StringUtils.isBlank(lang)
                ? localeLanguage.getDefaultLocale().getLanguage() : lang);

        try {
            return messageSources.getOrDefault(locale.getLanguage(), defaultMessageSource)
                    .getMessage(
                            code,
                            args,
                            locale);
        } catch (NoSuchMessageException e) {
            log.error("message locale({}) code({}) not defined", locale, code);
            return StringUtils.EMPTY;
        }
    }

    public String getMessage(String code) {
        return this.getMessage(code, new Object[]{});
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/config/security/oauth/registration/OAuthClientRegistrationRepository.java
================================================
package kr.co.yeoshin.backend.config.security.oauth.registration;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;
import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.stereotype.Component;

@Getter
@Component
public class OAuthClientRegistrationRepository implements ClientRegistrationRepository, Iterable<ClientRegistration> {

    private final Map<String, ClientRegistration> registrations = new HashMap<>();
    private final Map<String, OAuthClientRegistrationGenerator> registrationGenerators = new HashMap<>();

    public OAuthClientRegistrationRepository(
            OAuth2ClientProperties properties,
            List<OAuthClientRegistrationGenerator> registrationGenerators) {
        OAuth2ClientPropertiesRegistrationAdapter
                .getClientRegistrations(properties)
                .values()
                .forEach(x -> this.registrations.put(x.getRegistrationId(), x));

        registrationGenerators.forEach(x -> this.registrationGenerators.put(x.provider().name(), x));
    }

    @Override
    public ClientRegistration findByRegistrationId(String registrationId) {
        ClientRegistration clientRegistration = registrations.get(registrationId);
        OAuthClientRegistrationGenerator registrationGenerator = registrationGenerators.get(
                StringUtils.upperCase(registrationId));
        if (registrationGenerator == null) {
            return clientRegistration;
        }

        return registrationGenerator.generateClientSecret(clientRegistration);
    }

    @Override
    public Iterator<ClientRegistration> iterator() {
        return this.registrations.values().iterator();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/config/webclient/WebClientTemplate.java
================================================
package kr.co.yeoshin.backend.config.webclient;

import kr.co.yeoshin.backend.exception.Http4xxException;
import kr.co.yeoshin.backend.exception.Http5xxException;
import lombok.RequiredArgsConstructor;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@Component
@RequiredArgsConstructor
public class WebClientTemplate {

    private final WebClient webClient;

    public <T> T get(String url, Class<T> responseClass) {
        return webClient.method(HttpMethod.GET)
                .uri(url)
                .retrieve()
                .onStatus(HttpStatus::is4xxClientError,
                        clientResponse -> Mono.error(new Http4xxException(clientResponse.statusCode())))
                .onStatus(HttpStatus::is5xxServerError,
                        clientResponse -> Mono.error(new Http4xxException(clientResponse.statusCode())))
                .bodyToMono(responseClass)
                .block();
    }

    public <T> T get(String url, ParameterizedTypeReference<T> responseClass) {
        return webClient.method(HttpMethod.GET)
                .uri(url)
                .retrieve()
                .onStatus(HttpStatus::is4xxClientError,
                        clientResponse -> Mono.error(new Http4xxException(clientResponse.statusCode())))
                .onStatus(HttpStatus::is5xxServerError,
                        clientResponse -> Mono.error(new Http4xxException(clientResponse.statusCode())))
                .bodyToMono(responseClass)
                .block();
    }

    public <T, V> T post(String url, V request, ParameterizedTypeReference<T> responseClass) {
        return webClient.method(HttpMethod.POST)
                .uri(url)
                .accept(MediaType.APPLICATION_JSON)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .retrieve()
                .onStatus(HttpStatus::is4xxClientError,
                        clientResponse -> Mono.error(new Http4xxException(clientResponse.statusCode())))
                .onStatus(HttpStatus::is5xxServerError,
                        clientResponse -> Mono.error(new Http5xxException(clientResponse.statusCode())))
                .bodyToMono(responseClass)
                .block();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/coupon/usecase/CouponUseCase.java
================================================
package kr.co.yeoshin.backend.coupon.usecase;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType.Service;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.props.CouponPresetProp;
import kr.co.yeoshin.backend.config.props.CouponProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.controller.model.CouponRequest;
import kr.co.yeoshin.backend.coupon.controller.model.CouponsRequest;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.CouponAttributeType;
import kr.co.yeoshin.backend.coupon.service.model.CouponContainer;
import kr.co.yeoshin.backend.coupon.service.model.CouponMeta;
import kr.co.yeoshin.backend.coupon.service.model.CouponPresetType;
import kr.co.yeoshin.backend.exception.CouponException;
import kr.co.yeoshin.backend.payload.CouponPayload;
import kr.co.yeoshin.backend.payload.CouponsPayload;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.common.coupon.entity.Coupon;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.type.CouponStatus;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class CouponUseCase {

    private final ApplicationProps applicationProps;
    private final CouponService couponService;
    private final MemberPointService memberPointService;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final GlobalCacheTemplate cacheTemplate;
    private final PayloadFactory payloadFactory;

    public CouponsPayload list(CouponStatus status, List<String> codes) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberCoupon> memberCoupons = couponService.fetchAllMemberCoupons(memberId, status, codes)
                .stream()
                .sorted(Comparator.comparing(MemberCoupon::getUpdated).reversed()
                        .thenComparing(MemberCoupon::getCoupon, (c1, c2) -> {
                            if (c1.getBenefitType().getPriority() > c2.getBenefitType().getPriority()) {
                                return 1;
                            } else if (c1.getBenefitType().getPriority() == c2.getBenefitType().getPriority()) {
                                return c1.getValue() <= c2.getValue() ? 1 : -1;
                            } else {
                                return -1;
                            }
                        }))
                .collect(Collectors.toList());

        List<Coupon> coupons = memberCoupons.stream()
                .map(MemberCoupon::getCoupon)
                .collect(Collectors.toList());

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(coupons.stream()
                .map(Coupon::getId)
                .collect(Collectors.toList()));

        return CouponsPayload.builder()
                .coupons(payloadFactory.couponTemplates(coupons, memberCoupons))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(memberCoupons, couponIssueConditions))
                .build();
    }

    public CouponsPayload downloadable(
            boolean includeIssue, List<CouponAttributeType> attributes, List<CouponPresetType> presets) {
        long memberId = DiagnosticContext.fetchMemberId();

        CouponProps couponProps = applicationProps.getCoupon();

        Set<CouponAttributeType> couponAttributes = CollectionUtils.isEmpty(attributes)
                ? Collections.emptySet() : new HashSet<>(attributes);
        Set<CouponPresetType> couponPresets = CollectionUtils.isEmpty(presets)
                ? Collections.emptySet() : new HashSet<>(presets);

        Set<String> requirePresetCode = couponProps.getPresets()
                .stream()
                .filter(x -> couponPresets.contains(x.getType()))
                .map(CouponPresetProp::getCode)
                .collect(Collectors.toSet());

        List<String> allPresetCodes = couponProps.getPresets()
                .stream()
                .map(CouponPresetProp::getCode)
                .collect(Collectors.toList());

        List<Coupon> publishableCandidateCoupons = couponService.findAllPublishableCoupons(
                        kr.co.yeoshin.common.coupon.type.PublishType.DOWNLOAD)
                .stream()
                .filter(x -> CollectionUtils.isEmpty(requirePresetCode) ?
                        !allPresetCodes.contains(x.getCode()) : requirePresetCode.contains(x.getCode()))
                // TODO 앱 수정 후 롤백
                .filter(x -> CollectionUtils.isNotEmpty(requirePresetCode)
                        || !couponAttributes.contains(CouponAttributeType.BAIT)
                        || x.getBaitYn().toBoolean())
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(publishableCandidateCoupons)) {
            return CouponsPayload.empty();
        }

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(
                publishableCandidateCoupons.stream()
                        .map(Coupon::getId)
                        .collect(Collectors.toList()));

        Map<Long, List<CouponIssueCondition>> couponIssueConditionGroups = couponIssueConditions.stream()
                .collect(Collectors.groupingBy(x -> x.getCoupon().getId()));

        List<Coupon> publishableCoupons = couponService.validateCouponIssuers(memberId, publishableCandidateCoupons.stream()
                        .map(x -> CouponContainer.builder()
                                .coupon(x)
                                .issueConditions(couponIssueConditionGroups.getOrDefault(x.getId(), Collections.emptyList()))
                                .build())
                        .collect(Collectors.toList()), true)
                .stream()
                .map(CouponContainer::getCoupon)
                .collect(Collectors.toList());

        Map<Long, List<MemberCoupon>> issuedCoupons = couponService.findMemberCouponsByCouponIds(
                        memberId,
                        publishableCoupons.stream()
                                .map(Coupon::getId)
                                .collect(Collectors.toList()))
                .stream()
                .collect(Collectors.groupingBy(x -> x.getCoupon().getId()));

        Set<Long> issuedCouponIds = new HashSet<>(issuedCoupons.keySet());

        List<Coupon> downloadableCoupons = publishableCoupons.stream()
                .filter(x -> !issuedCouponIds.contains(x.getId()))
                .collect(Collectors.toList());

        return CouponsPayload.builder()
                .coupons(includeIssue ? publishableCoupons.stream()
                        .map(x -> payloadFactory.couponTemplate(x, issuedCoupons.getOrDefault(x.getId(), Collections.emptyList())
                                .stream()
                                .findFirst()))
                        .collect(Collectors.toList())
                        : downloadableCoupons.stream()
                                .map(payloadFactory::couponTemplate)
                                .collect(Collectors.toList()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(couponIssueConditions))
                .build();
    }


    public CouponPayload register(CouponRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (cacheTemplate.increaseValue(new CacheKey(Service.COUPON,
                        MessageUtils.format("{}.{}", request.getCode(), memberId)),
                2,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to register coupon({}) too many.", memberId, request.getCode());
            throw new CouponException(CommonCode.TOO_MANY_REQUESTS);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            CouponContainer couponContainer = couponService.findCouponByCode(request.getCode());

            Coupon coupon = couponContainer.getCoupon();

            couponService.isRegistrableCoupon(couponContainer);
            couponService.validateCouponIssuer(memberId, couponContainer);

            //포인트쿠폰인경우 포인트로 등록
            if (coupon.isPointCoupon()) {
                memberPointService.registerPoint(memberId, MemberPointAddContext.builder()
                        .title(MessageUtils.format(Action.REWARD_REGISTER_POINT_COUPON.getTitleKo(), coupon.getName()))
                        .action(Action.REWARD_REGISTER_POINT_COUPON)
                        .publishType(PublishType.SYSTEM)
                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                .expireAt(coupon.calculateUsableEndAtFromNow())
                                .point(coupon.getValue())
                                .build()))
                        .point(coupon.getValue())
                        .type(MemberPointType.REWARD)
                        .refType(DomainType.COUPON)
                        .refId(coupon.getId())
                        .build());
            }

            MemberCoupon memberCoupon = couponService.registerMemberCoupon(
                    memberId, coupon, coupon.isPointCoupon() ? CouponMeta.builder()
                            .namePrefix("[포인트 지급]")
                            .build() : CouponMeta.empty());
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_COUPON_CREATE, memberCoupon.getId());

            return CouponPayload.builder()
                    .coupon(payloadFactory.couponTemplate(memberCoupon.getCoupon(), memberCoupon))
                    .build();
        });
    }


    public CouponsPayload register(CouponsRequest request, Optional<Boolean> fallback) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (cacheTemplate.increaseValue(new CacheKey(Service.COUPON,
                        MessageUtils.format("{}", memberId)),
                2,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to register coupons({}) too many.", memberId, request.getCodes());
            throw new CouponException(CommonCode.TOO_MANY_REQUESTS);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            List<CouponContainer> couponContainers = couponService.findCouponByCodes(request.getCodes());

            couponService.isRegistrableCoupons(couponContainers);
            List<CouponContainer> validCouponContainers = couponService.validateCouponIssuers(
                    memberId, couponContainers, fallback.orElse(false));

            List<MemberCoupon> memberCoupons = new ArrayList<>();
            for (CouponContainer couponContainer : validCouponContainers) {
                Coupon coupon = couponContainer.getCoupon();
                //포인트쿠폰인경우 포인트로 등록
                if (coupon.isPointCoupon()) {
                    memberPointService.registerPoint(memberId, MemberPointAddContext.builder()
                            .title(Action.REWARD_REGISTER_POINT_COUPON.getTitleKo())
                            .action(Action.REWARD_REGISTER_POINT_COUPON)
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(coupon.calculateUsableEndAtFromNow())
                                    .point(coupon.getValue())
                                    .build()))
                            .point(coupon.getValue())
                            .type(MemberPointType.REWARD)
                            .build());
                }

                MemberCoupon memberCoupon = couponService.registerMemberCoupon(memberId, coupon);
                queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_COUPON_CREATE, memberCoupon.getId());

                memberCoupons.add(memberCoupon);
            }

            return CouponsPayload.builder()
                    .coupons(payloadFactory.couponTemplates(
                            validCouponContainers.stream()
                                    .map(CouponContainer::getCoupon)
                                    .collect(Collectors.toList()), memberCoupons))
                    .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(
                            validCouponContainers.stream()
                                    .flatMap(x -> x.getIssueConditions().stream())
                                    .collect(Collectors.toList())))
                    .build();
        });
    }

    public BoolPayload registerDryRun(CouponRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        CouponContainer couponContainer = couponService.findCouponByCode(request.getCode());

        return BoolPayload.builder()
                .result(couponService.isRegistrableCoupon(couponContainer) &&
                        CollectionUtils.isNotEmpty(couponService.validateCouponIssuer(memberId, couponContainer)))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/domain/usecase/DomainUseCase.java
================================================
package kr.co.yeoshin.backend.domain.usecase;

import java.util.List;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.member.service.MemberDomainService;
import kr.co.yeoshin.backend.payload.DomainStatusPayload;
import kr.co.yeoshin.common.member.entity.MemberDomainLatestStatus;
import lombok.AllArgsConstructor;

@UseCase
@AllArgsConstructor
public class DomainUseCase {

    private final MemberDomainService memberDomainService;
    private final PayloadFactory payloadFactory;

    public DomainStatusPayload statusLatest() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberDomainLatestStatus> domainStatuses = memberDomainService.findAllStatues(memberId);

        return DomainStatusPayload.builder()
                .domains(payloadFactory.domainTemplates(domainStatuses))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/explorer/usecase/ExplorerUseCase.java
================================================
package kr.co.yeoshin.backend.explorer.usecase;

import java.util.*;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Explorer;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.GeoPosition;
import kr.co.yeoshin.backend.common.model.SortType;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageRestrictionContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.explorer.service.ExplorerService;
import kr.co.yeoshin.backend.explorer.usecase.model.ExplorerHospitalSearchableRadiusContext;
import kr.co.yeoshin.backend.explorer.usecase.model.ExplorerRadiusDistance;
import kr.co.yeoshin.backend.explorer.usecase.model.ExplorerRankingTreatmentPageableContext;
import kr.co.yeoshin.backend.hospital.controller.model.type.DistanceUnitType;
import kr.co.yeoshin.backend.hospital.service.HospitalScrapService;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.payload.ExplorerRankingTreatmentsPageablePayload;
import kr.co.yeoshin.backend.payload.ExplorerSearchableRadiusPayload;
import kr.co.yeoshin.backend.payload.ExplorerSearchableRankingCategoriesPayload;
import kr.co.yeoshin.backend.payload.HospitalShortsPageablePayload;
import kr.co.yeoshin.backend.payload.template.ExplorerSearchCategoryTemplate;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.salesevent.controller.model.SalesEventReservationType;
import kr.co.yeoshin.backend.salesevent.usecase.model.SalesEventSearchableContext;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.common.board.entity.ExplorerRankingCategory;
import kr.co.yeoshin.common.elasticsearch.document.HospitalDocument;
import kr.co.yeoshin.common.elasticsearch.document.SalesEventDocument;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalScrap;
import kr.co.yeoshin.common.product.entity.SolutionTag;
import kr.co.yeoshin.common.product.type.TroubleBodyPart;
import kr.co.yeoshin.common.product.type.TroubleType;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerTreatment;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.GeoUtils;
import kr.co.yeoshin.common.utils.model.GeoPoint;
import kr.co.yeoshin.common.utils.type.GeoUnit;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@AllArgsConstructor
@UseCase
public class ExplorerUseCase {

    private final ExplorerService explorerService;
    private final SalesProductService salesProductService;
    private final SearchService searchService;
    private final HospitalService hospitalService;
    private final HospitalScrapService hospitalScrapService;
    private final RecommendService recommendService;
    private final QueueMessageRestrictionContext restrictionContext;
    private final PayloadFactory payloadFactory;

    public ExplorerSearchableRankingCategoriesPayload searchableRankingCategories() {

        List<ExplorerRankingCategory> rankingCategories = explorerService.fetchAllRankingCategories()
                .stream()
                .sorted(Comparator.comparing(ExplorerRankingCategory::getId))
                .collect(Collectors.toList());

        Map<TroubleType, List<SolutionTag>> solutionTagsByTroubleType = new LinkedHashMap<>();
        Map<TroubleBodyPart, List<SolutionTag>> solutionTagsByBodyPartType = new LinkedHashMap<>();

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        // https://fastlane.atlassian.net/browse/PM-6382?focusedCommentId=62503
        for (ExplorerRankingCategory rankingCategory : rankingCategories) {
            SolutionTag solutionTag = rankingCategory.getSolutionTag();
            if (CollectionUtils.isEmpty(recommendFacade.getRecommendSalesEventIdsBySolutionTagId(solutionTag.getId()))) {
                continue;
            }
            /*
            if (rankingCategory.getBodyPart() == TroubleBodyPart.SKIN) {
                solutionTagsByTroubleType.computeIfAbsent(rankingCategory.getTroubleType(), x -> new ArrayList<>())
                        .add(solutionTag);
            } else {
                solutionTagsByBodyPartType.computeIfAbsent(rankingCategory.getBodyPart(), x -> new ArrayList<>())
                        .add(solutionTag);
            }
            */
            solutionTagsByBodyPartType.computeIfAbsent(rankingCategory.getBodyPart(), x -> new ArrayList<>())
                    .add(solutionTag);
        }

        long troubleId = 1;
        List<ExplorerSearchCategoryTemplate> searchCategoryTemplates = new ArrayList<>();
        for (var entry : solutionTagsByTroubleType.entrySet()) {
            searchCategoryTemplates.add(
                    payloadFactory.recommendSearchCategoryTemplate(
                            troubleId++, entry.getKey(), entry.getValue()));
        }

        for (var entry : solutionTagsByBodyPartType.entrySet()) {
            searchCategoryTemplates.add(
                    payloadFactory.recommendSearchCategoryTemplate(
                            troubleId++, entry.getKey(), entry.getValue()));
        }

        return ExplorerSearchableRankingCategoriesPayload.builder()
                .categories(searchCategoryTemplates)
                .build();
    }

    public ExplorerRankingTreatmentsPageablePayload searchRankingTreatments(
            ExplorerRankingTreatmentPageableContext pageableContext) {

        Pageable pageable = explorerService.pageable(pageableContext);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        List<Long> treatmentIds = attributeFacade.findTreatmentIdsBySolutionTagIds(pageableContext.getSolutionTagIds());

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);
        Page<RecommendExplorerTreatment> recommendExplorerTreatmentsPage = explorerService.fetchAllTreatmentsByTreatmentIds(
                pageable, treatmentIds);

        List<RecommendExplorerTreatment> explorerTreatments = recommendExplorerTreatmentsPage.getContent()
                .stream()
                .filter(x -> CollectionUtils.isNotEmpty(
                        recommendFacade.getRecommendSalesEventIdsByTreatmentId(
                                DiagnosticContext.recommendScope(), x.getTreatment().getId())))
                .collect(Collectors.toList());

        boolean rankingEnded = ((pageableContext.getPage() + 1) * pageableContext.getSize())
                >= Explorer.MAX_TREATMENT_RANKING_COUNT;

        String nextToken = recommendExplorerTreatmentsPage.isLast() || rankingEnded ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                ExplorerRankingTreatmentPageableContext.builder()
                        .size(pageableContext.getSize())
                        .sort(pageableContext.getSort())
                        .page(pageableContext.getPage() + 1)
                        .solutionTagIds(pageableContext.getSolutionTagIds())
                        .build());

        return ExplorerRankingTreatmentsPageablePayload.builder()
                .treatments(explorerTreatments.stream()
                        .map(RecommendExplorerTreatment::getTreatment)
                        .map(payloadFactory::textIconTemplate)
                        .collect(Collectors.toList()))
                .pageable(payloadFactory.pageableTemplate(
                        Math.min(recommendExplorerTreatmentsPage.getTotalElements(), Explorer.MAX_TREATMENT_RANKING_COUNT),
                        pageable.getPageSize(),
                        nextToken))
                .build();

    }

    public ExplorerSearchableRadiusPayload searchableRadius(GeoPosition geoPosition) {
        SearchResult<SalesEventDocument> searchResult = searchService.search(SalesEventSearchableContext.builder()
                .sort(SortType.DISTANCE)
                .reservation(SalesEventReservationType.ALL)
                .geoPosition(geoPosition)
                .build());

        restrictionContext.addGeoPositionUsages(
                geoPosition.getLatitude(),
                geoPosition.getLongitude());

        List<SalesEventDocument> documents = searchResult.getDocuments();
        if (CollectionUtils.isEmpty(documents)) {
            return ExplorerSearchableRadiusPayload.empty();
        }

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(documents.stream()
                .map(SalesEventDocument::getHospitalId)
                .collect(Collectors.toList()));
        if (CollectionUtils.isEmpty(hospitals)) {
            return ExplorerSearchableRadiusPayload.empty();
        }

        TreeMap<Double, Hospital> hospitalsByDistance = new TreeMap<>();
        for (Hospital hospital : hospitals) {
            double distanceKm = GeoUtils.distance(
                    new GeoPoint(geoPosition.getLatitude(), geoPosition.getLongitude()),
                    new GeoPoint(hospital.getLatitude(), hospital.getLongitude()),
                    GeoUnit.KILOMETER);

            hospitalsByDistance.put(distanceKm, hospital);
        }

        double nearestKm = hospitalsByDistance.firstKey();

        // https://fastlane.atlassian.net/wiki/spaces/YR/pages/1578860545/v1.5
        NavigableMap<Double, ExplorerRadiusDistance> distanceNavigable = new TreeMap<>();
        distanceNavigable.put(1D, ExplorerRadiusDistance.builder()
                .defaultDistance(3)
                .distances(List.of(1, 3, 5, 10))
                .build());
        distanceNavigable.put(3D, ExplorerRadiusDistance.builder()
                .defaultDistance(3)
                .distances(List.of(3, 5, 10, 20))
                .build());
        distanceNavigable.put(5D, ExplorerRadiusDistance.builder()
                .defaultDistance(5)
                .distances(List.of(3, 5, 10, 20))
                .build());
        distanceNavigable.put(10D, ExplorerRadiusDistance.builder()
                .defaultDistance(10)
                .distances(List.of(5, 10, 20, 30))
                .build());
        distanceNavigable.put(20D, ExplorerRadiusDistance.builder()
                .defaultDistance(20)
                .distances(List.of(5, 10, 20, 30))
                .build());
        distanceNavigable.put(30D, ExplorerRadiusDistance.builder()
                .defaultDistance(30)
                .distances(List.of(5, 10, 20, 30))
                .build());

        var entry = distanceNavigable.ceilingEntry(nearestKm);
        if (entry == null) {
            return ExplorerSearchableRadiusPayload.empty();
        }

        return ExplorerSearchableRadiusPayload.builder()
                .nearestDistance((int) nearestKm)
                .defaultDistance(entry.getValue().getDefaultDistance())
                .distances(entry.getValue().getDistances())
                .distanceUnit(DistanceUnitType.KM)
                .build();
    }

    public HospitalShortsPageablePayload searchRadius(
            ExplorerHospitalSearchableRadiusContext searchableContext) {
        if (searchableContext.getDistance() < 1) {
            return HospitalShortsPageablePayload.empty();
        }

        restrictionContext.addGeoPositionUsages(
                searchableContext.getGeoPosition().getLatitude(),
                searchableContext.getGeoPosition().getLongitude());

        SearchResult<HospitalDocument> searchResult = searchService.search(searchableContext);
        if (CollectionUtils.isEmpty(searchResult.getDocuments())) {
            return HospitalShortsPageablePayload.empty();
        }

        List<HospitalDocument> hospitalDocuments = searchResult.getDocuments();

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                ExplorerHospitalSearchableRadiusContext.builder()
                        .size(searchableContext.getSize())
                        .sort(searchableContext.getSort())
                        .geoPosition(searchableContext.getGeoPosition())
                        .distance(searchableContext.getDistance())
                        .distanceUnit(searchableContext.getDistanceUnit())
                        .searchAfter(searchResult.getSearchAfter())
                        .build());

        Set<Long> hospitalIds = hospitalDocuments.stream()
                .map(HospitalDocument::getId)
                .collect(Collectors.toSet());

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitalIds);

        List<HospitalScrap> hospitalScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> hospitalScrapService.findHospitalScrapsByHospitalIds(memberId, hospitalIds));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), hospitalStats, recommendFacade);

        return HospitalShortsPageablePayload.builder()
                .places(payloadFactory.placeTemplates(hospitalDocuments.stream()
                        .flatMap(x -> x.getPlaces().stream())
                        .collect(Collectors.toList())))
                .hospitals(payloadFactory.hospitalTemplatesByHospitalDocuments(hospitalDocuments))
                .hospitalScraps(payloadFactory.hospitalScrapTemplates(hospitalScraps))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), nextToken))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/face/component/model/assistant/AssistantThreadPayload.java
================================================
package kr.co.yeoshin.backend.face.component.model.assistant;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class AssistantThreadPayload {

    private String id;
    private String object;
    @JsonProperty("created_at")
    private long createdAt;
    private boolean deleted;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/face/component/model/message/MessagePayload.java
================================================
package kr.co.yeoshin.backend.face.component.model.message;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class MessagePayload {

    private String id;
    private String object;
    @JsonProperty("created_at")
    private long createdAt;
    @JsonProperty("thread_id")
    private String threadId;
    private String role;

    private List<MessageContent> content;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/face/component/model/message/MessagesPayload.java
================================================
package kr.co.yeoshin.backend.face.component.model.message;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class MessagesPayload {

    private String object;
    @JsonProperty("data")
    private List<MessagePayload> messages;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/face/component/model/run/RunPayload.java
================================================
package kr.co.yeoshin.backend.face.component.model.run;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Map;
import java.util.Optional;
import lombok.Data;

@Data
public class RunPayload {

    private String id;
    private String object;
    @JsonProperty("created_at")
    private long createdAt;
    @JsonProperty("assistant_id")
    private String assistantId;
    @JsonProperty("thread_id")
    private String threadId;
    /*
       https://platform.openai.com/docs/api-reference/runs/object#runs/object-status
       - queued, in_progress, requires_action, cancelling, cancelled, failed, completed, incomplete, or expired.
   */
    private String status;
    @JsonProperty("last_error")
    private RunError lastError;
    @JsonProperty("started_at")
    private long startedAt;
    @JsonProperty("cancelled_at")
    private long cancelledAt;
    @JsonProperty("failed_at")
    private long failedAt;
    @JsonProperty("completed_at")
    private long completedAt;
    private String model;
    private String instructions;
    @JsonProperty("metadata")
    private Map<String, Object> meta;
    private RunUsage usage;

    public Optional<LocalDateTime> getStartedAt() {
        return Optional.ofNullable(startedAt)
                .filter(x -> x > 0)
                .map(x -> Instant.ofEpochSecond(x).atZone(ZoneId.systemDefault()).toLocalDateTime());
    }

    public Optional<LocalDateTime> getCancelledAt() {
        return Optional.ofNullable(cancelledAt)
                .filter(x -> x > 0)
                .map(x -> Instant.ofEpochSecond(x).atZone(ZoneId.systemDefault()).toLocalDateTime());
    }

    public Optional<LocalDateTime> getFailedAt() {
        return Optional.ofNullable(failedAt)
                .filter(x -> x > 0)
                .map(x -> Instant.ofEpochSecond(x).atZone(ZoneId.systemDefault()).toLocalDateTime());
    }

    public Optional<LocalDateTime> getCompletedAt() {
        return Optional.ofNullable(completedAt)
                .filter(x -> x > 0)
                .map(x -> Instant.ofEpochSecond(x).atZone(ZoneId.systemDefault()).toLocalDateTime());
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/face/usecase/FaceAnalysisUseCase.java
================================================
package kr.co.yeoshin.backend.face.usecase;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.context.Header;
import kr.co.yeoshin.backend.exception.CommonException;
import kr.co.yeoshin.backend.exception.FaceAnalysisException;
import kr.co.yeoshin.backend.face.component.type.MessageStatus;
import kr.co.yeoshin.backend.face.controller.model.FaceAnalysisReportRequest;
import kr.co.yeoshin.backend.face.service.FaceAnalysisService;
import kr.co.yeoshin.backend.face.service.model.FaceAnalysisAnalyzeReport;
import kr.co.yeoshin.backend.face.service.model.FaceAnalysisAnalyzeStatus;
import kr.co.yeoshin.backend.face.service.model.FaceAnalysisAnalyzeUrl;
import kr.co.yeoshin.backend.face.usecase.model.FaceAnalysisReportPageableContext;
import kr.co.yeoshin.backend.face.usecase.model.FaceAnalysisTokenContext;
import kr.co.yeoshin.backend.media.component.cdn.CdnSignature;
import kr.co.yeoshin.backend.media.service.MediaService;
import kr.co.yeoshin.backend.notification.component.template.FirebasePushTemplateFactory;
import kr.co.yeoshin.backend.payload.FaceAnalysisReportPageablePayload;
import kr.co.yeoshin.backend.payload.FaceAnalysisReportPayload;
import kr.co.yeoshin.backend.payload.FaceAnalysisStatusPayload;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.setup.service.DeviceTokenService;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.face.entity.FaceAnalysisReport;
import kr.co.yeoshin.common.face.entity.FaceAnalysisReportAsSolutionTag;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaDomainType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class FaceAnalysisUseCase {

    private final FaceAnalysisService faceAnalysisService;
    private final SalesProductService salesProductService;
    private final MediaService mediaService;
    private final QuestService questService;
    private final MemberPointService memberPointService;
    private final DeviceTokenService deviceTokenService;
    private final PayloadFactory payloadFactory;
    private final FirebasePushTemplateFactory firebasePushTemplateFactory;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final TransactionTemplate transactionTemplate;

    public BoolPayload analyzeDryRun() {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        return BoolPayload.builder()
                .result(faceAnalysisService.analyzable(memberId))
                .build();
    }

    public FaceAnalysisStatusPayload analyze(int memberAge, List<String> images) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        List<MediaStatus> medias = mediaService.uploadImageComplete(
                memberId, MediaDomainType.FACE_ANALYSIS, images);
        if (CollectionUtils.isEmpty(medias)) {
            throw new CommonException(CommonCode.ERROR);
        }

        MediaStatus media = medias.get(0);

        CdnSignature signature = mediaService.createCdnSignatures(MediaType.IMAGE, MediaAccessibleType.PRIVATE);

        String url = mediaService.retrieveEndpoint(
                        MediaType.IMAGE, MediaAccessibleType.PRIVATE, MediaDomainType.FACE_ANALYSIS, media.getFileName())
                .getRepresentativeUrl() + "?" + signature.getQueryParams();

        FaceAnalysisAnalyzeStatus result = faceAnalysisService.analyze(memberId, FaceAnalysisAnalyzeUrl.builder()
                        .fileName(media.getFileName())
                        .url(url)
                        .build())
                .orElseThrow(() -> new FaceAnalysisException(CommonCode.ERROR));

        String token = CryptUtils.AES.encrypt(FaceAnalysisTokenContext.builder()
                .memberId(memberId)
                .faceAnalysisId(result.getStatusId())
                .timestamp(System.currentTimeMillis())
                .memberAge(memberAge)
                .mediaStatusId(media.getId())
                .doctorId(result.getDoctorId())
                .build());

        return FaceAnalysisStatusPayload.builder()
                .id(result.getStatusId())
                .status(result.getStatus())
                .token(token)
                .retryable(true)
                .build();
    }

    public FaceAnalysisStatusPayload status(long faceAnalysisId, FaceAnalysisTokenContext context) {
        if (faceAnalysisId != context.getFaceAnalysisId()) {
            log.info("face analyze status({}) context({}) invalid", faceAnalysisId, context);
            throw new CommonException(CommonCode.ERROR);
        }

        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        FaceAnalysisAnalyzeStatus result = faceAnalysisService.analyzeStatus(memberId, context.getFaceAnalysisId())
                .orElseThrow(() -> new FaceAnalysisException(CommonCode.ERROR));

        String token = CryptUtils.AES.encrypt(FaceAnalysisTokenContext.builder()
                .memberId(memberId)
                .faceAnalysisId(result.getStatusId())
                .timestamp(System.currentTimeMillis())
                .memberAge(context.getMemberAge())
                .mediaStatusId(context.getMediaStatusId())
                .doctorId(context.getDoctorId())
                .build());

        Header header = DiagnosticContext.header();
        if (header.experimentalFeature()) {
            return FaceAnalysisStatusPayload.builder()
                    .id(result.getStatusId())
                    .status(MessageStatus.FAIL)
                    .token(token)
                    .retryable(false)
                    .build();
        } else {
            return FaceAnalysisStatusPayload.builder()
                    .id(result.getStatusId())
                    .status(result.getStatus())
                    .token(token)
                    .retryable(true)
                    .build();
        }
    }

    public FaceAnalysisReportPayload report(long faceAnalysisId, FaceAnalysisTokenContext context) {
        if (faceAnalysisId != context.getFaceAnalysisId()) {
            log.info("face analyze status({}) context({}) invalid", faceAnalysisId, context);
            throw new CommonException(CommonCode.ERROR);
        }

        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        MediaStatus mediaStatus = mediaService.findStatus(memberId, context.getMediaStatusId());

        FaceAnalysisAnalyzeReport report = faceAnalysisService.analyzeReport(
                        memberId, context.getMemberAge(), context.getFaceAnalysisId(), mediaStatus, attributeFacade)
                .orElseThrow(() -> new FaceAnalysisException(CommonCode.ERROR));

        return FaceAnalysisReportPayload.builder()
                .faceAnalysisReport(payloadFactory.faceAnalysisReportTemplate(report, mediaStatus))
                .build();
    }

    public BoolPayload registerReport(long faceAnalysisId, FaceAnalysisTokenContext context, FaceAnalysisReportRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        faceAnalysisService.registerFaceAnalysisReport(
                context,
                memberId,
                DateUtil.convertFrom(request.getReportAt()),
                request.getSolutionTagIds(),
                request.getReports());

        if (questService.faceAnalysisStatus() == ProgressStatus.PROGRESS) {
            questService.registerFaceAnalysis(memberId)
                    .ifPresent(x -> {
                        memberPointService.registerPoint(
                                memberId, MemberPointAddContext.builder()
                                        .title(Action.QUEST_FACE_ANALYSIS.getTitleKo())
                                        .action(Action.QUEST_FACE_ANALYSIS)
                                        .publishType(PublishType.SYSTEM)
                                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                .expireAt(PointUtils.expireAt(Point.QUEST_FACE_ANALYSIS))
                                                .point(x.getPoint())
                                                .build()))
                                        .point(x.getPoint())
                                        .type(MemberPointType.REWARD)
                                        .refType(DomainType.QUEST_FACE_ANALYSIS)
                                        .refId(x.getId())
                                        .build());

                        firebasePushTemplateFactory.faceAnalysisReportQuest(
                                        deviceTokenService.findAllDeviceToken(memberId))
                                .ifPresent(n -> messagePublisher.publishNotification(
                                        NotificationMessageUtils.notificationMessage(n)));
                    });
        }

        return BoolPayload.success();
    }

    public FaceAnalysisReportPageablePayload listReport(FaceAnalysisReportPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = faceAnalysisService.getFaceAnalysisReportPageable(pageableContext);

        Page<FaceAnalysisReport> reportPage = faceAnalysisService.fetchAll(memberId, pageable);
        List<FaceAnalysisReportAsSolutionTag> relations = faceAnalysisService.findAll(reportPage.getContent().stream()
                .map(FaceAnalysisReport::getId)
                .collect(Collectors.toList()));

        String nextToken = reportPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                FaceAnalysisReportPageableContext.builder()
                        .page(reportPage.getPageable().getPageNumber() + 1)
                        .sort(pageableContext.getSort())
                        .size(pageableContext.getSize())
                        .build());

        return FaceAnalysisReportPageablePayload.builder()
                .faceAnalysisReports(payloadFactory.faceAnalysisReportTemplates(
                        reportPage.getContent(), reportPage.getContent().stream()
                                .map(FaceAnalysisReport::getMediaStatus)
                                .collect(Collectors.toList()), relations))
                .pageable(payloadFactory.pageableTemplate(reportPage, nextToken))
                .build();
    }

    public FaceAnalysisReportPayload report(long reportId) {
        long memberId = DiagnosticContext.fetchMemberId();

        FaceAnalysisReport report = faceAnalysisService.fetchOne(memberId, reportId);
        List<FaceAnalysisReportAsSolutionTag> relations = faceAnalysisService.findAll(Collections.singleton(reportId));

        return FaceAnalysisReportPayload.builder()
                .faceAnalysisReport(payloadFactory.faceAnalysisReportTemplate(
                        report, Optional.ofNullable(report.getMediaStatus()), relations.stream()
                                .map(x -> x.getSolutionTag().getId())
                                .collect(Collectors.toList())))
                .build();
    }

    public BoolPayload removeReports(List<Long> reportIds) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                    List<FaceAnalysisReport> faceAnalysisReports = faceAnalysisService.fetchAll(memberId, reportIds);
                    Collection<String> mediaStatusFileNames = faceAnalysisReports.stream()
                            .map(x -> x.getMediaStatus().getFileName())
                            .collect(Collectors.toList());

                    return faceAnalysisService.removeFaceAnalysisReports(faceAnalysisReports)
                            && mediaService.removeStatus(mediaStatusFileNames);
                }))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/hospital/usecase/HospitalUseCase.java
================================================
package kr.co.yeoshin.backend.hospital.usecase;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.SortType;
import kr.co.yeoshin.backend.common.model.api.code.HospitalCode;
import kr.co.yeoshin.backend.common.model.api.code.ReservationCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.cpm.service.CpmService;
import kr.co.yeoshin.backend.exception.HospitalException;
import kr.co.yeoshin.backend.exception.ReservationException;
import kr.co.yeoshin.backend.hospital.controller.model.HospitalInformationSuggestionRequest;
import kr.co.yeoshin.backend.hospital.controller.model.HospitalOnboardRequest;
import kr.co.yeoshin.backend.hospital.service.HospitalOnboardService;
import kr.co.yeoshin.backend.hospital.service.HospitalScrapService;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalOnbaordConfigure;
import kr.co.yeoshin.backend.hospital.service.model.HospitalOnbaordContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalNameSearchableContext;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalQuestionPageableContext;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalSearchableContext;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.interesting.service.model.InterestingContainer;
import kr.co.yeoshin.backend.notification.component.template.FirebasePushTemplateFactory;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.HospitalOnboardTemplate;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.CpmEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.component.model.RecommendSalesEventMeta;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.reservation.service.ReservationService;
import kr.co.yeoshin.backend.reservation.service.model.OperationDailySchedule;
import kr.co.yeoshin.backend.reservation.service.model.OperationTimeSchedule;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventQuestionService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventScrapService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventUsageService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesevent.service.model.*;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.setup.service.DeviceTokenService;
import kr.co.yeoshin.backend.tv.service.TvScrapService;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.backend.tv.service.model.TvStat;
import kr.co.yeoshin.backend.utils.MonitorUtils;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.cpm.entity.CpmAdConfig;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.elasticsearch.document.HospitalDocument;
import kr.co.yeoshin.common.hospital.entity.*;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalAnesthesiaType;
import kr.co.yeoshin.common.hospital.type.HospitalSuggestSubType;
import kr.co.yeoshin.common.hospital.type.HospitalTreatmentGuideType;
import kr.co.yeoshin.common.hospital.type.PartnershipStatus;
import kr.co.yeoshin.common.place.type.PlaceType;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalConfig;
import kr.co.yeoshin.common.review.entity.SalesEventQuestion;
import kr.co.yeoshin.common.review.entity.SalesEventQuestionReply;
import kr.co.yeoshin.common.tv.entity.TvAsHospital;
import kr.co.yeoshin.common.tv.entity.TvScrap;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@UseCase
@AllArgsConstructor
public class HospitalUseCase {

    private final HospitalService hospitalService;
    private final HospitalScrapService hospitalScrapService;
    private final HospitalOnboardService hospitalOnboardService;
    private final SearchService searchService;
    private final CpmService cpmService;
    private final ReservationService reservationService;
    private final InterestingService interestingService;
    private final SalesEventService salesEventService;
    private final SalesEventScrapService salesEventScrapService;
    private final SalesEventQuestionService salesEventQuestionService;
    private final SalesEventUsageService salesEventUsageService;
    private final ReportService reportService;
    private final TvService tvService;
    private final TvScrapService tvScrapService;
    private final SalesProductService salesProductService;
    private final RecommendService recommendService;
    private final QuestService questService;
    private final MemberPointService memberPointService;
    private final DeviceTokenService deviceTokenService;
    private final TransactionTemplate transactionTemplate;
    private final SettingTemplate settingTemplate;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final FirebasePushTemplateFactory firebasePushTemplateFactory;
    private final PayloadFactory payloadFactory;

    public HospitalPayload hospitalView(long hospitalId) {
        Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId);
        List<HospitalImage> images = hospitalService.findHospitalImagesByHospitalId(hospitalId);

        List<HospitalDoctor> doctors = hospitalService.findHospitalDoctorsByHospitalId(hospitalId);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        HospitalStat stat = hospitalService.findHospitalStatByHospitalId(hospitalId);

        List<HospitalBadgeContainer> badgeContainers = hospitalService.findHospitalBadgeContainers(
                Collections.singletonList(hospitalId),
                hospitalService.getBadges(),
                Collections.singletonList(stat),
                recommendFacade);

        List<HospitalAdditionalInfo> additions = hospitalService.findHospitalAdditionsByHospitalId(hospitalId);

        Optional<CpmAdConfig> cpmAdConfig = cpmService.findCpmAdConfigByHospitalId(hospitalId);

        List<HospitalScrap> hospitalScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> hospitalScrapService.findHospitalScrapsByHospitalIds(
                        memberId, Collections.singletonList(hospitalId)));

        Optional<HospitalOnbaordContainer> onbaordContainer = DiagnosticContext.ifVirtualMemberOrElse(
                () -> hospitalOnboardService.findOnboardContainer(hospital),
                (memberId) -> hospitalOnboardService.findOnboardContainer(memberId, hospital));

        List<TreatmentPrinciple> treatmentPrinciples = hospitalService.findHospitalTreatmentPrinciples(hospitalId).stream()
                .filter(x -> x.getViewYn().toBoolean())
                .collect(Collectors.toList());

        List<HospitalDepartment> hospitalDepartments = hospitalService.findHospitalDepartmentsByHospitalId(hospitalId).stream()
                .filter(x -> x.getViewYn().toBoolean())
                .collect(Collectors.toList());

        List<HospitalTreatment> hospitalTreatments = hospitalService.findHospitalTreatmentsByHospitalId(hospitalId).stream()
                .filter(x -> x.getViewYn().toBoolean())
                .collect(Collectors.toList());

        Optional<HospitalPartnership> hospitalPartnership =
                PartnershipStatus.WAIT == hospital.getPartnershipStatus() ? Optional.empty()
                        : hospitalService.findHospitalPartnershipByHospitalId(hospitalId);

        return HospitalPayload.builder()
                .places(payloadFactory.placeTemplates(CollectionUtils.isEmpty(hospital.getPlaces())
                        ? Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : hospital.getPlaces()))
                .premium(hospital.getPremiumYn().toBoolean())
                .cpmStatus(cpmAdConfig.map(CpmAdConfig::getStatus).orElse(CpmAdStatus.NONE))
                .hospital(payloadFactory.hospitalTemplate(hospital))
                .hospitalScrap(CollectionUtils.isEmpty(hospitalScraps) ?
                        null : payloadFactory.hospitalScrapTemplate(hospitalScraps.get(0)))
                .hospitalStat(payloadFactory.hospitalStatTemplate(stat))
                .hospitalOnboard(onbaordContainer.isEmpty() ? null : onbaordContainer
                        .filter(x -> x.getHospitalOnboard().isPresent())
                        .map(x -> payloadFactory.hospitalOnboardTemplate(
                                x.getHospitalOnboard().get(), x.getHospitalOnboardMember()))
                        .orElseGet(() -> HospitalOnboardTemplate.empty(hospitalId)))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(badgeContainers, false))
                .hospitalImages(payloadFactory.imageTemplates(images))
                .hospitalOperationTime(payloadFactory.hospitalOperationTimeTemplate(hospital))
                .hospitalDoctors(payloadFactory.hospitalDoctorTemplates(doctors))
                .hospitalAdditionProperties(payloadFactory.hospitalAdditionProperties(additions))
                .treatmentPrinciples(payloadFactory.textIconTemplates(treatmentPrinciples))
                .hospitalDepartments(payloadFactory.hospitalDepartmentTemplates(hospitalDepartments))
                .hospitalTreatments(payloadFactory.hospitalTreatmentTemplates(hospitalTreatments))
                .hospitalPartnership(hospitalPartnership.map(payloadFactory::hospitalPartnershipTemplate).orElse(null))
                .build();
    }

    public HospitalShortsPayload hospitals(List<Long> hospitalIds) {
        if (CollectionUtils.isEmpty(hospitalIds)) {
            return HospitalShortsPayload.empty();
        }

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(hospitalIds);
        if (CollectionUtils.isEmpty(hospitals)) {
            return HospitalShortsPayload.empty();
        }

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitalIds);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), hospitalStats, recommendFacade);

        return HospitalShortsPayload.builder()
                .places(payloadFactory.placeTemplates(hospitals.stream()
                        .flatMap(x -> x.getPlaces().stream())
                        .collect(Collectors.toList())))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalBadges))
                .build();
    }

    public HospitalImagesPayload hospitalImages(long hospitalId) {
        Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId);
        List<HospitalImage> images = hospitalService.findHospitalImagesByHospitalId(hospitalId);

        return HospitalImagesPayload.builder()
                .hospitalLogoImage(payloadFactory.imageTemplateByHospital(hospital.getLogo()))
                .hospitalThumbnailImage(payloadFactory.imageTemplateByHospital(hospital.getThumbnail()))
                .hospitalPremiumThumbnailImage(payloadFactory.imageTemplateByHospital(hospital.getPremiumThumbnail()))
                .hospitalImages(payloadFactory.imageTemplates(images))
                .build();
    }


    public HospitalAdditionAnesthesiaPayload hospitalAdditionAnesthesia() {
        return HospitalAdditionAnesthesiaPayload.builder()
                .anesthesia(Arrays.stream(HospitalAdditionalAnesthesiaType.values())
                        .map(payloadFactory::hospitalAdditionAnesthesiaTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public HospitalDoctorsPayload hospitalDoctors(long hospitalId) {
        List<HospitalDoctor> hospitalDoctors = hospitalService.findHospitalDoctorsByHospitalId(hospitalId);

        return HospitalDoctorsPayload.builder()
                .hospitalDoctors(payloadFactory.hospitalDoctorTemplates(hospitalDoctors))
                .build();
    }

    public HospitalDoctorPayload hospitalDoctor(long hospitalDoctorId) {
        HospitalDoctor hospitalDoctor = hospitalService.findHospitalDoctorByHospitalDoctorId(hospitalDoctorId)
                .orElseThrow(() -> new HospitalException(HospitalCode.HOSPITAL_DOCTOR_NOT_EXIST));

        List<HospitalDepartment> hospitalDepartments =
                hospitalService.findHospitalDepartmentsByHospitalDoctorId(hospitalDoctorId);

        List<HospitalTreatment> hospitalTreatments =
                hospitalService.findHospitalTreatmentsByHospitalDoctorId(hospitalDoctorId);

        List<Hospital> hospitals =
                hospitalService.fetchHospitalAsHospitalDoctorsByHospitalDoctorId(hospitalDoctorId)
                        .stream()
                        .sorted(Comparator.comparing(HospitalAsHospitalDoctor::getId).reversed())
                        .map(HospitalAsHospitalDoctor::getHospital)
                        .collect(Collectors.toList());

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toList()));

        return HospitalDoctorPayload.builder()
                .hospitalDoctor(payloadFactory.hospitalDoctorTemplate(hospitalDoctor))
                .hospitalDepartments(payloadFactory.hospitalDepartmentTemplates(hospitalDepartments))
                .hospitalTreatments(payloadFactory.hospitalTreatmentTemplates(hospitalTreatments))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .build();
    }

    public SalesEventsPayload salesEventsByHospital(long hospitalId) {
        List<SalesEvent> salesEvents = salesEventService.findSalesEventsByHospitalId(hospitalId);
        if (CollectionUtils.isEmpty(salesEvents)) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> visibleSalesEventIds = recommendFacade.getRecommendSalesEventMetasByHospitalId(hospitalId)
                .stream()
                .map(RecommendSalesEventMeta::getSalesEventId)
                .collect(Collectors.toSet());

        List<Long> salesEventIds = salesEvents.stream()
                .map(SalesEvent::getId)
                .filter(visibleSalesEventIds::contains)
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds)
                .stream()
                .sorted(Comparator.comparing(SalesEventStat::getOrderCountIn1Month).reversed())
                .collect(Collectors.toList());

        List<Long> orderedSalesEventIds = salesEventStats.stream()
                .map(SalesEventStat::getSalesEventId)
                .collect(Collectors.toList());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                        salesEventIds,
                        Collections.singletonList(SalesProductType.REPRESENTATIVE))
                .stream()
                .sorted(Comparator.comparingInt(x -> orderedSalesEventIds.indexOf(x.getSalesEvent().getId())))
                .collect(Collectors.toList());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> badgeContainers = hospitalService.findHospitalBadgeContainers(
                Collections.singletonList(hospitalId), hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEvents, recommendFacade);

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        messagePublisher.publishCpm(CpmMessageUtils.hospitalSalesEvent(settingTemplate, salesEventContainers.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList())));

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.SALES_EVENT_AT_HOSPITAL)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(badgeContainers))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public HospitalPageablePayload searchHospitals(HospitalSearchableContext searchableContext) {
        SearchResult<HospitalDocument> searchResult = searchService.search(searchableContext);

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                HospitalSearchableContext.builder()
                        .sort(SortType.RECOMMEND)
                        .size(searchableContext.getSize())
                        .query(searchableContext.getQuery())
                        .searchAfter(searchResult.getSearchAfter())
                        .build());

        Set<Long> hospitalIds = searchResult.getDocuments().stream()
                .map(HospitalDocument::getId)
                .collect(Collectors.toSet());

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitalIds);
        List<HospitalScrap> hospitalScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> hospitalScrapService.findHospitalScrapsByHospitalIds(memberId, hospitalIds));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> badgeContainers = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), hospitalStats, recommendFacade);

        MonitorUtils.notEmpty(searchResult.getDocuments(), "hospitals from hospital search are empty.");

        return HospitalPageablePayload.builder()
                .hospitals(payloadFactory.hospitalTemplatesByHospitalDocuments(searchResult.getDocuments()))
                .hospitalScraps(payloadFactory.hospitalScrapTemplates(hospitalScraps))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, badgeContainers))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), nextToken))
                .build();

    }

    public HospitalPageablePayload searchHospitals(HospitalNameSearchableContext searchableContext) {
        SearchResult<HospitalDocument> searchResult = searchService.search(searchableContext);
        if (searchResult.isEmpty()) {
            return HospitalPageablePayload.empty();
        }

        return HospitalPageablePayload.builder()
                .hospitals(payloadFactory.hospitalTemplatesByHospitalDocuments(searchResult.getDocuments()))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), StringUtils.EMPTY))
                .build();
    }

    public TreatmentReviewSummaryPayload treatmentReviewSummaries(long hospitalId) {
        HospitalStat hospitalStat = hospitalService.findHospitalStatByHospitalId(hospitalId);

        return TreatmentReviewSummaryPayload.builder()
                .totalCount(hospitalStat.getReviewCount())
                .starPointAverage(hospitalStat.getStarPointAverageIn365day())
                .evaluations(hospitalStat.getTreatmentReviewEvaluationsIn365day().stream()
                        .map(payloadFactory::countTemplate)
                        .collect(Collectors.toList()))
                .build();

    }

    public SalesEventQuestionAndAnswerPageablePayload questions(HospitalQuestionPageableContext pageableContext) {
        Pageable pageable = hospitalService.pageable(pageableContext);

        Page<SalesEventQuestion> questionPage = salesEventQuestionService.fetchAllQuestionsByHospitalId(
                pageableContext.getHospitalId(), pageable);
        if (questionPage.isEmpty()) {
            return SalesEventQuestionAndAnswerPageablePayload.empty();
        }

        Page<SalesEventQuestion> excludeQuestionPage = reportService.excludeReportedMember(
                question -> question.getMember().getId(), questionPage);

        List<Long> salesEventQuestionIds = excludeQuestionPage.stream()
                .map(SalesEventQuestion::getId)
                .collect(Collectors.toList());

        List<Long> memberIds = excludeQuestionPage.stream()
                .map(x -> x.getMember().getId())
                .collect(Collectors.toList());

        List<SalesEventQuestionReply> replyList = salesEventQuestionService.fetchAllQuestionReplyByQuestionIds(
                salesEventQuestionIds);

        Set<Long> reportIds = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                (memberId) -> reportService.findReportContents(
                        memberId, ContentType.SALES_EVENT_QUESTION, salesEventQuestionIds));

        String nextToken = excludeQuestionPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                HospitalQuestionPageableContext.builder()
                        .page(excludeQuestionPage.getPageable().getPageNumber() + 1)
                        .hospitalId(pageableContext.getHospitalId())
                        .build());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                questionPage.stream()
                        .map(SalesEventQuestion::getSalesEventId)
                        .collect(Collectors.toList()),
                Collections.singletonList(SalesProductType.REPRESENTATIVE));

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<InterestingContainer> interestings = interestingService.findInterestings(memberIds);

        return SalesEventQuestionAndAnswerPageablePayload.builder()
                .questions(payloadFactory.questionTemplates(excludeQuestionPage.getContent(), reportIds))
                .replies(payloadFactory.questionReplyTemplates(replyList))
                .hospitals(payloadFactory.hospitalTemplates(excludeQuestionPage.getContent()
                        .stream()
                        .map(SalesEventQuestion::getHospital)
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .memberSkinTypes(payloadFactory.memberSkinTypeTemplates(interestings))
                .pageable(payloadFactory.pageableTemplate(excludeQuestionPage, nextToken))
                .build();
    }

    public HospitalTvsPayload tvs(long hospitalId) {
        List<TvAsHospital> tvAsHospitals = tvService.fetchTvAsHospitalsByHospitalId(hospitalId);
        if (CollectionUtils.isEmpty(tvAsHospitals)) {
            return HospitalTvsPayload.empty();
        }

        List<Long> tvIds = tvAsHospitals.stream()
                .map(x -> x.getTv().getId())
                .collect(Collectors.toList());

        List<TvScrap> tvScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> tvScrapService.findTvScraps(memberId, tvIds));

        List<TvStat> tvStats = tvService.findStatsByTvIds(tvIds);

        return HospitalTvsPayload.builder()
                .hospital(payloadFactory.hospitalTemplate(tvAsHospitals.get(0).getHospital()))
                .tvs(payloadFactory.tvTemplates(tvAsHospitals.stream()
                        .map(TvAsHospital::getTv)
                        .collect(Collectors.toList())))
                .tvStats(payloadFactory.tvStatTemplates(tvStats))
                .tvScraps(payloadFactory.tvScrapTemplates(tvScraps))
                .build();

    }

    public HospitalDateSchedulesPayload dailySchedules(long hospitalId) {
        final int SCHEDULE_CANDIDATE_DAY_COUNT = 90;

        OperationDailySchedule operationDailySchedule = reservationService.findReservableDailySchedule(
                hospitalId, SCHEDULE_CANDIDATE_DAY_COUNT);

        return HospitalDateSchedulesPayload.builder()
                .openedSchedules(
                        operationDailySchedule.getOpened().stream().map(DateUtil::convertFrom).collect(Collectors.toList()))
                .closedSchedules(
                        operationDailySchedule.getClosed().stream().map(DateUtil::convertFrom).collect(Collectors.toList()))
                .build();
    }

    public HospitalDateTimeSchedulesPayload timeSchedules(long hospitalId, LocalDateTime at) {
        OperationTimeSchedule operationTimeSchedule = reservationService.findReservableTimeSchedule(
                hospitalId, LocalDateTime.now(), at.toLocalDate());

        return HospitalDateTimeSchedulesPayload.builder()
                .openedSchedules(operationTimeSchedule.getOpened()
                        .stream().map(x -> payloadFactory.dateTimeRangeTemplate(x.getFrom(), x.getTo()))
                        .collect(Collectors.toList()))
                .closedSchedules(operationTimeSchedule.getClosed()
                        .stream().map(x -> payloadFactory.dateTimeRangeTemplate(x.getFrom(), x.getTo()))
                        .collect(Collectors.toList()))
                .build();
    }

    public HospitalReservationConfigPayload reservationConfig(long hospitalId) {
        ReservationHospitalConfig reservationHospitalConfig = reservationService.findReservationHospitalConfig(hospitalId)
                .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_UNUSABLE_HOSPITAL));

        return HospitalReservationConfigPayload.builder()
                .reservationHospitalConfig(payloadFactory.reservationHospitalConfigTemplate(reservationHospitalConfig))
                .build();
    }

    public BoolPayload registerHospitalInformationSuggestion(long hospitalId,
            HospitalInformationSuggestionRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (request.getTypes()
                .stream().anyMatch(x -> x == HospitalSuggestSubType.OTHER || x == HospitalSuggestSubType.TREATMENT_INCORRECT)
                && StringUtils.isBlank(request.getDescription())) {
            throw new HospitalException(HospitalCode.HOSPITAL_SUGGEST_DESCRIPTION_INVALID);
        }

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> hospitalService.registerHospitalInformationSuggestion(memberId, hospitalId,
                                request.getTypes(),
                                request.getDescription()))).build();
    }

    public HospitalTreatmentGuidesPayload listTreatmentGuides(long hospitalId) {
        Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId);
        List<SalesEvent> salesEvents = hospital.getPartnershipYn().toBoolean() ?
                salesEventService.findSalesEventsByHospitalId(hospitalId) : Collections.emptyList();

        List<HospitalTreatmentGuide> hospitalTreatmentGuides = hospitalService.findAllTreatmentsByHospitalId(hospitalId);
        if (CollectionUtils.isEmpty(hospitalTreatmentGuides)) {
            return HospitalTreatmentGuidesPayload.empty();
        }

        List<HospitalTreatmentGuideType> types = hospitalTreatmentGuides.stream()
                .map(HospitalTreatmentGuide::getType)
                .distinct()
                .collect(Collectors.toList());

        return HospitalTreatmentGuidesPayload.builder()
                .mobileReservable(CollectionUtils.isNotEmpty(salesEvents))
                .treatments(types.stream().map(payloadFactory::textTemplate).collect(Collectors.toList()))
                .hospitalTreatments(payloadFactory.hospitalTreatmentGuideTemplates(hospitalTreatmentGuides))
                .hospitalTreatmentGuides(payloadFactory.hospitalTreatmentGuideTemplates(hospitalTreatmentGuides))
                .build();
    }

    public BoolPayload onboard(long hospitalId, HospitalOnboardRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId);
        Optional<HospitalOnboard> hospitalOnboard = hospitalOnboardService.registerOnboard(
                memberId, hospital, HospitalOnbaordConfigure.builder()
                        .notification(request.isNotification())
                        .build());

        if (hospitalOnboard.isPresent()
                && questService.hospitalOnboardStatus() == ProgressStatus.PROGRESS) {
            questService.registerHospitalOnboard(memberId, hospitalId)
                    .ifPresent(x -> {
                        memberPointService.registerPoint(
                                memberId, MemberPointAddContext.builder()
                                        .title(Action.QUEST_HOSPITAL_ONBOARD.getTitleKo())
                                        .action(Action.QUEST_HOSPITAL_ONBOARD)
                                        .publishType(PublishType.SYSTEM)
                                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                .expireAt(PointUtils.expireAt(Point.QUEST_HOSPITAL_ONBOARD))
                                                .point(x.getPoint())
                                                .build()))
                                        .point(x.getPoint())
                                        .type(MemberPointType.REWARD)
                                        .refType(DomainType.QUEST_HOSPITAL_ONBOARD)
                                        .refId(x.getId())
                                        .build());

                        firebasePushTemplateFactory.hospitalOnboardQuest(
                                        deviceTokenService.findAllDeviceToken(memberId))
                                .ifPresent(n -> messagePublisher.publishNotification(
                                        NotificationMessageUtils.notificationMessage(n)));
                    });
        }

        return BoolPayload.builder()
                .result(hospitalOnboard.isPresent())
                .build();
    }

    public SalesEventUsagePageablePayload salesEventUsages(SalesEventUsagePageableContext context) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            Pageable pageable = salesEventUsageService.pageable(context);

            Page<SalesEvent> salesEventPage =
                    salesEventService.findAllSalesEventHasSalesEventUsage(context.getHospitalId(), context.getTreatmentId(),
                            pageable);

            List<Long> salesEventIds = salesEventPage.stream()
                    .map(SalesEvent::getId)
                    .collect(Collectors.toList());

            List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                            salesEventIds, Collections.singletonList(SalesProductType.REPRESENTATIVE))
                    .stream()
                    .sorted(Comparator.comparingLong((SalesEventContainer x) -> x.fetchSalesEventId().orElse(Long.MAX_VALUE))
                            .reversed())
                    .collect(Collectors.toList());

            List<SalesProduct> salesProducts = salesEventContainers
                    .stream()
                    .flatMap(x -> x.fetchSalesProducts().stream())
                    .collect(Collectors.toList());

            Hospital hospital = hospitalService.findHospitalByHospitalId(context.getHospitalId());

            SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

            RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

            List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                    Set.of(hospital.getId()), hospitalService.getBadges(), recommendFacade);

            HospitalStat hospitalStat = hospitalService.findHospitalStatByHospitalId(hospital.getId());

            List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                    Collections::emptyList,
                    (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

            List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

            List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                    salesEventContainers.stream()
                            .map(SalesEventContainer::getSalesEvent)
                            .collect(Collectors.toList()), recommendFacade);

            List<SalesEventUsageContainer> usages = salesEventUsageService.findSalesEventUsageContainers(salesEventIds);

            String nextToken = salesEventPage.isLast()
                    ? StringUtils.EMPTY
                    : CryptUtils.AES.encrypt(SalesEventUsagePageableContext.builder()
                            .hospitalId(context.getHospitalId())
                            .treatmentId(context.getTreatmentId())
                            .page(salesEventPage.getPageable().getPageNumber() + 1)
                            .build());

            return SalesEventUsagePageablePayload.builder()
                    .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                    .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                    .hospital(payloadFactory.hospitalTemplate(hospital))
                    .hospitalStat(payloadFactory.hospitalStatTemplate(hospitalStat))
                    .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalBadges))
                    .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                    .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                    .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                    .salesEventUsages(usages.stream()
                            .sorted(Comparator.comparingInt(x -> x.getSalesEventUsage().getPriority()))
                            .map(x -> payloadFactory.salesEventUsageTemplate(
                                    x.getSalesEventUsage(),
                                    x.getSalesEventUsageImages().stream()
                                            .sorted(Comparator.comparingInt(SalesEventUsageImage::getPriority))
                                            .collect(Collectors.toList()),
                                    x.getTags()))
                            .collect(Collectors.toList()))
                    .pageable(payloadFactory.pageableTemplate(salesEventPage, nextToken))
                    .build();
        });
    }

    public TreatmentsPayload representativeTreatments(long hospitalId) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<Treatment> treatments = salesEventUsageService.findAllSalesEventUsageTreatments(hospitalId);

            return TreatmentsPayload.builder()
                    .treatments(payloadFactory.treatmentsTemplate(treatments))
                    .build();
        });
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/iamport/component/retrofit/model/BillingKeyPayload.java
================================================
package kr.co.yeoshin.backend.iamport.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class BillingKeyPayload {

    @JsonProperty("customer_uid")
    private String customerUniqueId;

    @JsonProperty("pg_provider")
    private String pgProvider;

    @JsonProperty("pg_id")
    private String pgId;

    @JsonProperty("card_name")
    private String cardName;

    @JsonProperty("card_code")
    private String cardCode;

    @JsonProperty("card_number")
    private String cardNumber;

    @JsonProperty("card_type")
    private String cardType;

    @JsonProperty("customer_name")
    private String customerName;

    @JsonProperty("customer_tel")
    private String customerTel;

    @JsonProperty("customer_email")
    private String customerEmail;

    @JsonProperty("customer_addr")
    private String customerAddress;

    @JsonProperty("customer_postcode")
    private String customerPostcode;

    @JsonProperty("inserted")
    private int inserted;

    @JsonProperty("updated")
    private int updated;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/iamport/component/retrofit/model/CardPayload.java
================================================
package kr.co.yeoshin.backend.iamport.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class CardPayload {

    @JsonProperty("customer_uid")
    private String customerUniqueId;

    @JsonProperty("pg_provider")
    private String pgProvider;

    @JsonProperty("pg_id")
    private String pgId;

    @JsonProperty("card_name")
    private String cardName;

    @JsonProperty("card_code")
    private String cardCode;

    @JsonProperty("card_number")
    private String cardNumber;

    @JsonProperty("card_type")
    private String cardType;

    @JsonProperty("customer_name")
    private String customerName;

    @JsonProperty("customer_tel")
    private String customerTelephone;

    @JsonProperty("customer_email")
    private String customerEmail;

    @JsonProperty("customer_addr")
    private String customerAddress;

    @JsonProperty("customer_postcode")
    private String customerPostcode;

    @JsonProperty("inserted")
    private int inserted;

    @JsonProperty("updated")
    private int updated;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/iamport/component/retrofit/model/IdentificationPayload.java
================================================
package kr.co.yeoshin.backend.iamport.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import lombok.Data;

@Data
public class IdentificationPayload {

    // https://developers.portone.io/api/rest-v1/type-def#CertificationAnnotation

    @JsonProperty("imp_uid")
    private String iamportUniqueId;

    @JsonProperty("merchant_uid")
    private String merchantUniqueId;

    @JsonProperty("pg_tid")
    private String pgTransactionId;

    private String name;

    private String gender;

    private String birthday;

    @JsonProperty("phone")
    private String cellPhone;

    private boolean foreigner;

    private boolean certified;

    @JsonProperty("unique_key")
    private String uniqueKey; // CI

    @JsonProperty("unique_in_site")
    private String uniqueInSite; // DI

    public LocalDate getBirthday() {
        return LocalDate.parse(this.birthday, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/iamport/component/retrofit/model/PaymentPayload.java
================================================
package kr.co.yeoshin.backend.iamport.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class PaymentPayload {

    @JsonProperty("imp_uid")
    private String iamportUniqueId;

    @JsonProperty("merchant_uid")
    private String merchantUniqueId;

    @JsonProperty("pay_method")
    private String payMethod;

    @JsonProperty("channel")
    private String channel;

    @JsonProperty("pg_provider")
    private String pgProvider;

    @JsonProperty("emb_pg_provider")
    private String embeddedPgProvider;

    @JsonProperty("pg_tid")
    private String pgTransactionId;

    @JsonProperty("pg_id")
    private String pgId;

    @JsonProperty("escrow")
    private boolean escrow;

    @JsonProperty("apply_num")
    private String applyNumber;

    @JsonProperty("bank_code")
    private String bankCode;

    @JsonProperty("bank_name")
    private String bankName;

    @JsonProperty("card_code")
    private String cardCode;

    @JsonProperty("card_name")
    private String cardName;

    @JsonProperty("card_quota")
    private int cardQuota;

    @JsonProperty("card_number")
    private String cardNumber;

    @JsonProperty("card_type")
    private String cardType;

    @JsonProperty("vbank_code")
    private String virtualBank_code;

    @JsonProperty("vbank_name")
    private String virtualBankName;

    @JsonProperty("vbank_num")
    private String virtualBankNumber;

    @JsonProperty("vbank_holder")
    private String virtualBankHolder;

    @JsonProperty("vbank_date")
    private int virtualBankDate;

    @JsonProperty("vbank_issued_at")
    private int virtualBankIssuedAt;

    @JsonProperty("name")
    private String name;

    @JsonProperty("amount")
    private int amount;

    @JsonProperty("cancel_amount")
    private int cancelAmount;

    @JsonProperty("currency")
    private String currency;

    @JsonProperty("buyer_name")
    private String buyerName;

    @JsonProperty("buyer_email")
    private String buyerEmail;

    @JsonProperty("buyer_tel")
    private String buyerTelephone;

    @JsonProperty("buyer_addr")
    private String buyerAddress;

    @JsonProperty("buyer_postcode")
    private String buyerPostcode;

    //json string
    @JsonProperty("custom_data")
    private String customData;

    @JsonProperty("user_agent")
    private String userAgent;

    @JsonProperty("status")
    private PaymentStatus status; // ready:미결제, paid:결제완료, cancelled:결제취소, failed:결제실패

    @JsonProperty("started_at")
    private int startedAt;

    @JsonProperty("paid_at")
    private int paidAt;

    @JsonProperty("failed_at")
    private int failedAt;

    @JsonProperty("cancelled_at")
    private int cancelledAt;

    @JsonProperty("fail_reason")
    private String failReason;

    @JsonProperty("cancel_reason")
    private String cancelReason;

    @JsonProperty("receipt_url")
    private String receiptUrl;

    @JsonProperty("cancel_history")
    private List<CancelHistory> cancelHistoryList;

    @JsonProperty("cancel_receipt_urls")
    private List<String> cancelReceiptUrls;

    @JsonProperty("cash_receipt_issued")
    private boolean cashReceiptIssued;

    @JsonProperty("customer_uid")
    private String customerUniqueId;

    @JsonProperty("customer_uid_usage")
    private String customerUniqueIdUsage;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/iamport/component/retrofit/model/tosspayments/TossPaymentsPaymentPayload.java
================================================
package kr.co.yeoshin.backend.iamport.component.retrofit.model.tosspayments;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class TossPaymentsPaymentPayload {

    // https://docs.tosspayments.com/reference#%EA%B2%B0%EC%A0%9C
    @JsonProperty("mId")
    private String merchantId;

    @JsonProperty("orderId")
    private String orderId;

    @JsonProperty("status")
    private String status;

    @JsonProperty("type")
    private String type;

    @JsonProperty("paymentKey")
    private String paymentKey;

    @JsonProperty("method")
    private String method;

    @JsonProperty("totalAmount")
    private int totalAmount;

    @JsonProperty("card")
    private TossPaymentsCardContext card;

    @JsonProperty("transfer")
    private TossPaymentsTransferContext transfer;

    @JsonProperty("easyPay")
    private TossPaymentsEasyPayContext easyPay;

    @JsonProperty("discount")
    private TossPaymentsDiscount discount;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/insurance/usecase/InsuranceUseCase.java
================================================
package kr.co.yeoshin.backend.insurance.usecase;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.InsuranceCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.props.InsuranceProps;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.InsuranceException;
import kr.co.yeoshin.backend.exception.TicketException;
import kr.co.yeoshin.backend.insurance.controller.model.InsuranceRequest;
import kr.co.yeoshin.backend.insurance.service.InsuranceService;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.NhnSmsNotificationContext;
import kr.co.yeoshin.backend.notification.component.model.NotificationSmsIdType;
import kr.co.yeoshin.backend.notification.component.model.SmsRecipient;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.InsuranceTreatmentPayload;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.insurance.entity.InsuranceClaim;
import kr.co.yeoshin.common.insurance.entity.InsuranceRelation;
import kr.co.yeoshin.common.insurance.type.SideEffectType;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.ValidationUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.util.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class InsuranceUseCase {

    private final InsuranceService insuranceService;
    private final MemberService memberService;
    private final SalesEventService salesEventService;
    private final OrderService orderService;
    private final TicketService ticketService;
    private final PayloadFactory payloadFactory;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final TransactionTemplate transactionTemplate;
    private final ApplicationProps applicationProps;

    public InsuranceTreatmentPayload applicableTickets() {
        long memberId = DiagnosticContext.fetchMemberId();
        List<InsuranceRelation> insuranceRelation = insuranceService.fetchInsuranceHistoryMemberId(memberId);
        if (CollectionUtils.isEmpty(insuranceRelation)) {
            throw new InsuranceException(InsuranceCode.INSURANCE_INAPPLICABLE);
        }

        List<Ticket> tickets = insuranceRelation.stream()
                .map(InsuranceRelation::getTicket)
                .collect(Collectors.toList());

        List<OrderPurchase> orders = insuranceRelation.stream()
                .map(InsuranceRelation::getOrder)
                .collect(Collectors.toList());

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderIds(
                orders.stream().map(OrderPurchase::getId).collect(Collectors.toList()));

        List<SalesProductVersion> salesProductVersions = orderSalesProducts.stream()
                .map(OrderSalesProduct::getSalesProductVersion).collect(Collectors.toList());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                tickets.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList()),
                salesProductVersions.stream()
                        .map(x -> x.getSalesProduct().getId())
                        .collect(Collectors.toList()));

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        return InsuranceTreatmentPayload.builder()
                .tickets(payloadFactory.ticketTemplates(tickets, orderSalesProducts))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(salesProductVersions))
                .sideEffects(Stream.of(SideEffectType.values())
                        .map(payloadFactory::codeTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public BoolPayload applyInsurance(InsuranceRequest insuranceRequest) {
        long memberId = DiagnosticContext.fetchMemberId();

        InsuranceClaim insuranceClaim = transactionTemplate.executeMainWritableTransaction(() -> {
            Ticket ticket = ticketService.findTicketById(insuranceRequest.getTicketId())
                    .orElseThrow(() -> new TicketException(CommonCode.ERROR));

            insuranceService.findInsuranceClaimByTicketCode(ticket.getCode())
                    .ifPresent(x -> {
                        throw new InsuranceException(CommonCode.ERROR);
                    });

            InsuranceClaim claim = insuranceService.addInsuranceCompensation(insuranceRequest, memberId);

            orderService.modifyInsuranceClaimId(claim.getOrderPurchaseId(),
                    claim.getInsuranceCompensationNo());
            insuranceService.updateInsuranceClaim(insuranceRequest.getTicketId(), memberId, YN.Y);

            return claim;
        });

        Member member = memberService.findMember(memberId);

        InsuranceProps insuranceProps = applicationProps.getInsurance();
        String cellPhone = insuranceProps.getManager().getCellPhone(insuranceClaim.getCompanyCode())
                .filter(ValidationUtils::isValidCellPhone)
                .orElse(StringUtils.EMPTY);

        messagePublisher.publishNotification(NotificationMessageUtils.insuranceApply(
                StringUtils.isBlank(cellPhone)
                        ? Collections.emptyList()
                        : Collections.singletonList(NhnSmsNotificationContext.builder(
                                        Collections.singletonList(SmsRecipient.builder()
                                                .recipientNo(cellPhone)
                                                .build()),
                                        NotificationSmsIdType.INSURANCE_COMPANY_MANAGER)
                                .templateParams(Map.of(
                                        "receiptAt", ZonedDateTime.now(ZoneId.of("Asia/Seoul"))
                                                .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
                                        "hospitalName", insuranceClaim.getHospitalName(),
                                        "userName", insuranceClaim.getMemberName())
                                )
                                .build()),
                Collections.singletonList(alimTalkTemplateFactory.insuranceApply(member))));

        messagePublisher.publishNotification(NotificationMessageUtils.notificationMessage(
                alimTalkTemplateFactory.insuranceApply(memberService.findMember(memberId))
        ));

        return BoolPayload.builder()
                .result(true)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/interesting/usecase/InterestingUseCase.java
================================================
package kr.co.yeoshin.backend.interesting.usecase;

import java.util.*;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.model.locale.LocaleEnText;
import kr.co.yeoshin.backend.common.model.locale.LocaleJaText;
import kr.co.yeoshin.backend.common.model.locale.LocaleKoText;
import kr.co.yeoshin.backend.common.model.locale.LocaleZhText;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.interesting.controller.model.InterestingsRequest;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.interesting.service.model.InterestingContainer;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.InterestingPayload;
import kr.co.yeoshin.backend.payload.InterestingPropertyPayload;
import kr.co.yeoshin.backend.payload.template.CodeTemplate;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.utils.LocaleUtils;
import kr.co.yeoshin.common.interesting.entity.Interesting;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.member.type.SkinType;
import kr.co.yeoshin.common.place.type.PlaceType;
import kr.co.yeoshin.common.place.utils.PlaceUtils;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.product.type.TroubleBodyPart;
import kr.co.yeoshin.common.product.type.TroubleSubType;
import kr.co.yeoshin.common.quest.entity.QuestInteresting;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.Version;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@AllArgsConstructor
@UseCase
public class InterestingUseCase {

    private final InterestingService interestingService;
    private final MemberService memberService;
    private final MemberPointService memberPointService;
    private final QuestService questService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public InterestingPropertyPayload properties(Version version) {
        String skinSuffix = StringUtils.lowerCase(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(TroubleBodyPart.SKIN.getDisplayNameKo()),
                        LocaleEnText.of(TroubleBodyPart.SKIN.getDisplayNameEn()),
                        LocaleZhText.of(TroubleBodyPart.SKIN.getDisplayNameZh()),
                        LocaleJaText.of(TroubleBodyPart.SKIN.getDisplayNameJa()))));

        int defaultId = 1000;
        Map<CodeTemplate, List<CodeTemplate>> troubleCategoryProperties = new LinkedHashMap<>();
        troubleCategoryProperties.put(payloadFactory.codeTemplate(TroubleBodyPart.SKIN),
                List.of(
                        payloadFactory.codeTemplate(TroubleSubType.ROUGH_SKIN),
                        payloadFactory.codeTemplate(TroubleSubType.DRY_SKIN),
                        payloadFactory.codeTemplate(TroubleSubType.MOISTURE_LACK),
                        payloadFactory.codeTemplate(TroubleSubType.PORE_ELASTIC),
                        payloadFactory.codeTemplate(TroubleSubType.SKIN_TONE_UP),
                        payloadFactory.codeTemplate(TroubleSubType.PIGMENTATION),
                        payloadFactory.codeTemplate(TroubleSubType.MOLE),
                        payloadFactory.codeTemplate(TroubleSubType.FACE_LINE),
                        payloadFactory.codeTemplate(TroubleSubType.WRINKLE),
                        payloadFactory.codeTemplate(TroubleSubType.SUNKEN_WRINKLE_SKIN),
                        payloadFactory.codeTemplate(TroubleSubType.PIMPLE_SEBUM),
                        payloadFactory.codeTemplate(TroubleSubType.PIMPLE_SCAR),
                        payloadFactory.codeTemplate(TroubleSubType.PIMPLE_INFECTION)));
        troubleCategoryProperties.put(payloadFactory.codeTemplate(TroubleBodyPart.FACE_HAIR),
                List.of(
                        payloadFactory.codeTemplate(TroubleSubType.HAIR_SCALP),
                        payloadFactory.codeTemplate(TroubleSubType.FOREHEAD),
                        payloadFactory.codeTemplate(TroubleSubType.NECK_CHIN),
                        payloadFactory.codeTemplate(TroubleSubType.CONTOUR_FACE_SHAPE),
                        payloadFactory.codeTemplate(TroubleSubType.FACE_FAT),
                        payloadFactory.codeTemplate(TroubleSubType.SEMI_CONSTANT)));

        troubleCategoryProperties.put(CodeTemplate.builder()
                        .id(defaultId++)
                        .code(MessageUtils.format("{}{}{}", TroubleBodyPart.EYES, TroubleBodyPart.NOSE, TroubleBodyPart.LIPS))
                        .value(MessageUtils.format("{}・{}・{}",
                                LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                        List.of(LocaleKoText.of(TroubleBodyPart.EYES.getDisplayNameKo()),
                                                LocaleEnText.of(TroubleBodyPart.EYES.getDisplayNameEn()),
                                                LocaleZhText.of(TroubleBodyPart.EYES.getDisplayNameZh()),
                                                LocaleJaText.of(TroubleBodyPart.EYES.getDisplayNameJa()))),
                                LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                        List.of(LocaleKoText.of(TroubleBodyPart.NOSE.getDisplayNameKo()),
                                                LocaleEnText.of(TroubleBodyPart.NOSE.getDisplayNameEn()),
                                                LocaleZhText.of(TroubleBodyPart.NOSE.getDisplayNameZh()),
                                                LocaleJaText.of(TroubleBodyPart.NOSE.getDisplayNameJa()))),
                                LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                        List.of(LocaleKoText.of(TroubleBodyPart.LIPS.getDisplayNameKo()),
                                                LocaleEnText.of(TroubleBodyPart.LIPS.getDisplayNameEn()),
                                                LocaleZhText.of(TroubleBodyPart.LIPS.getDisplayNameZh()),
                                                LocaleJaText.of(TroubleBodyPart.LIPS.getDisplayNameJa())))
                        ))
                        .build(),
                List.of(
                        payloadFactory.codeTemplate(TroubleSubType.EYES),
                        payloadFactory.codeTemplate(TroubleSubType.VISION),
                        payloadFactory.codeTemplate(TroubleSubType.NOSE),
                        payloadFactory.codeTemplate(TroubleSubType.LIPS),
                        payloadFactory.codeTemplate(TroubleSubType.TOOTH)));

        troubleCategoryProperties.put(CodeTemplate.builder()
                        .id(defaultId++)
                        .code(MessageUtils.format("{}{}", TroubleBodyPart.BODY, TroubleBodyPart.WAXING))
                        .value(MessageUtils.format("{}・{}",
                                LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                        List.of(LocaleKoText.of(TroubleBodyPart.BODY.getDisplayNameKo()),
                                                LocaleEnText.of(TroubleBodyPart.BODY.getDisplayNameEn()),
                                                LocaleZhText.of(TroubleBodyPart.BODY.getDisplayNameZh()),
                                                LocaleJaText.of(TroubleBodyPart.BODY.getDisplayNameJa()))),
                                LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                        List.of(LocaleKoText.of(TroubleBodyPart.WAXING.getDisplayNameKo()),
                                                LocaleEnText.of(TroubleBodyPart.WAXING.getDisplayNameEn()),
                                                LocaleZhText.of(TroubleBodyPart.WAXING.getDisplayNameZh()),
                                                LocaleJaText.of(TroubleBodyPart.WAXING.getDisplayNameJa())))
                        ))
                        .build(),
                List.of(
                        payloadFactory.codeTemplate(TroubleSubType.BODY_LINE),
                        payloadFactory.codeTemplate(TroubleSubType.BODY_FAT),
                        payloadFactory.codeTemplate(TroubleSubType.WAXING)));

        troubleCategoryProperties.put(payloadFactory.codeTemplate(TroubleBodyPart.ETC),
                List.of(
                        payloadFactory.codeTemplate(TroubleSubType.COSMETIC_INJECTION),
                        payloadFactory.codeTemplate(TroubleSubType.EXCESSIVE_SWEATING),
                        payloadFactory.codeTemplate(TroubleSubType.ORIENTAL_MEDICINE),
                        payloadFactory.codeTemplate(TroubleSubType.WOMEN_CONCERNS),
                        payloadFactory.codeTemplate(TroubleSubType.MALE_CONCERNS)));

        return InterestingPropertyPayload.builder()
                .placeProperties(
                        payloadFactory.propertyTemplatesByPlaces(PlaceType.findPlaceTypesByVersion(version), version))
                .skinProperties(payloadFactory.propertyTemplatesBySkins(Arrays.stream(SkinType.values())
                                .filter(x -> x != SkinType.NONE)
                                .collect(Collectors.toList()),
                        (s) -> MessageUtils.format("{} {}",
                                LocaleUtils.text(DiagnosticContext.fetchLocale(),
                                        List.of(LocaleKoText.of(s.getDescriptionKo()),
                                                LocaleEnText.of(s.getDescriptionEn()),
                                                LocaleZhText.of(s.getDescriptionZh()),
                                                LocaleJaText.of(s.getDescriptionJa()))),
                                skinSuffix)))
                .troubleProperties(
                        payloadFactory.propertyTemplatesByTroubles(List.of(TroubleSubType.values())))
                .troubleCategoryProperties(troubleCategoryProperties.entrySet()
                        .stream()
                        .map(x -> payloadFactory.propertyTemplate(x.getKey().getId(), x.getKey(), x.getValue()))
                        .collect(Collectors.toList()))
                .build();
    }

    public BoolPayload registerInterestings(InterestingsRequest request, Version version) {
        long memberId = DiagnosticContext.fetchMemberId();

        // todo : V1 불필요시점 해당 리소스 정리 예정
        // api V1, V2 >> V2 데이터 타입으로 저장, 응답은 버전별로,
        List<PlaceType> places = PlaceType.convertV1ToV2(PlaceUtils.shrink(request.getPlaces(), version));
        List<SkinType> skins = request.getSkins();
        List<TroubleSubType> troubles = request.getTroubles();

        transactionTemplate.executeMainWritableTransaction(() -> {
            Interesting interesting = interestingService.registerInteresting(memberId, places, skins, troubles);

            if (CollectionUtils.isEmpty(places)
                    || CollectionUtils.isEmpty(skins)
                    || CollectionUtils.isEmpty(troubles)) {
                return true;
            }

            MemberServiceSummary serviceSummary = memberService.findMemberServiceSummaryByMemberId(memberId);
            if (serviceSummary.getInterestingYn().toBoolean()) {
                return true;
            }

            if (questService.interestingProgressStatus() != ProgressStatus.PROGRESS) {
                return true;
            }

            Optional<QuestInteresting> quest = questService.registerInteresting(memberId);
            quest.ifPresent(
                    q -> {
                        serviceSummary.changeInterestingYn(YN.Y);
                        memberPointService.registerPoint(memberId, MemberPointAddContext.builder()
                                .title(Action.QUEST_INTERESTING.getTitleKo())
                                .action(Action.QUEST_INTERESTING)
                                .point(q.getPoint())
                                .compositions(Collections.singletonList(MemberPointComposition.builder()
                                        .expireAt(PointUtils.expireAt())
                                        .point(q.getPoint())
                                        .build()))
                                .publishType(PublishType.SYSTEM)
                                .type(MemberPointType.REWARD)
                                .refType(DomainType.QUEST_INTERESTING)
                                .refId(q.getId())
                                .build());
                    }
            );
            return true;
        });

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public InterestingPayload interestings(Version version) {
        long memberId = DiagnosticContext.fetchMemberId();

        InterestingContainer interesting = interestingService.findInteresting(memberId, version);

        return InterestingPayload.builder()
                .registered(interesting.isRegistered())
                .places(payloadFactory.placeTemplates(interesting.getPlaces()))
                .skins(payloadFactory.codeTemplatesBySkins(interesting.getSkins()))
                .troubles(payloadFactory.codeTemplatesByTrouble(interesting.getTroubles()))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/like/usecase/LikeUseCase.java
================================================
package kr.co.yeoshin.backend.like.usecase;

import java.util.Collections;
import java.util.Optional;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.TreatmentReviewCode;
import kr.co.yeoshin.backend.common.model.api.code.TvCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.TreatmentReviewException;
import kr.co.yeoshin.backend.exception.TvException;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewLikeService;
import kr.co.yeoshin.backend.tv.service.TvLikeService;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.quest.entity.QuestTreatmentReviewLike;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.review.entity.TreatmentReviewLike;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@UseCase
public class LikeUseCase {

    private final TreatmentReviewLikeService treatmentReviewLikeService;
    private final TvLikeService tvLikeService;
    private final QuestService questService;
    private final MemberPointService memberPointService;
    private final TransactionTemplate transactionTemplate;

    public BoolPayload registerReviewLike(long treatmentReviewId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (treatmentReviewLikeService.existLike(memberId, treatmentReviewId)) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_LIKE_DUPLICATE_NOT_EXIST);
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            TreatmentReviewLike treatmentReviewLike = treatmentReviewLikeService.registerLike(memberId, treatmentReviewId);
            if (questService.treatmentReviewLikeProgressStatus() != ProgressStatus.PROGRESS
                    || treatmentReviewLike.getTreatmentReview().getMember().getId() == memberId) {
                return true;
            }

            TreatmentReview treatmentReview = treatmentReviewLike.getTreatmentReview();
            Optional<QuestTreatmentReviewLike> quest = questService.likeTreatmentReview(
                    memberId, treatmentReview);
            quest.ifPresent(x -> memberPointService.registerPoint(
                    treatmentReview.getMember().getId(), MemberPointAddContext.builder()
                            .title(Action.QUEST_TREATMENT_REVIEW_LIKE.getTitleKo())
                            .action(Action.QUEST_TREATMENT_REVIEW_LIKE)
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(PointUtils.expireAt(Point.QUEST_TREATMENT_REVIEW_LIKE_EXPIRE_DAYS))
                                    .point(x.getPoint())
                                    .build()))
                            .point(x.getPoint())
                            .type(MemberPointType.REWARD)
                            .refType(DomainType.QUEST_TREATMENT_REVIEW_LIKE)
                            .refId(x.getId())
                            .build()));

            return true;
        });

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload removeReviewLike(long treatmentReviewId) {
        long memberId = DiagnosticContext.fetchMemberId();

        treatmentReviewLikeService.removeLike(memberId, treatmentReviewId);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload registerTvLike(long tvId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (tvLikeService.existTvLike(memberId, tvId)) {
            throw new TvException(TvCode.TV_DUPLICATED_LIKE);
        }

        tvLikeService.registerTvLike(memberId, tvId);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload removeTvLike(long tvId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                    tvLikeService.removeTvLike(memberId, tvId);
                    return true;
                })).build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/log/usecase/LogUseCase.java
================================================
package kr.co.yeoshin.backend.log.usecase;

import ch.qos.logback.classic.Level;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;
import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.CommonHeader;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.common.utils.CryptUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.jboss.logging.MDC;

@Slf4j
@UseCase
public class LogUseCase {

    public BoolPayload publish(String service, String level, String key, String message) {
        Set<String> supportLogService = Set.of("mobile", "web");
        if (!supportLogService.contains(service)) {
            return BoolPayload.fail();
        }

        CommonHeader commonHeader = DiagnosticContext.header().getCommonHeader();

        final int SECOND_DELTA = 5;
        LocalDateTime utc = LocalDateTime.now(ZoneOffset.UTC);
        Set<String> keys = new HashSet<>();
        for (int i = 0; i < SECOND_DELTA; i++) {
            keys.add(CryptUtils.SHA256.encrypt(
                    commonHeader.getClientId()
                            + "."
                            + utc.minusSeconds(i).format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"))));
        }

        if (!keys.contains(key)) {
            return BoolPayload.fail();
        }

        MDC.put(Constant.Name.SERVICE, service);

        if (StringUtils.equalsIgnoreCase(level, Level.INFO.levelStr)) {
            log.info(message);
        } else if (StringUtils.equalsIgnoreCase(level, Level.WARN.levelStr)) {
            log.warn(message);
        } else if (StringUtils.equalsIgnoreCase(level, Level.ERROR.levelStr)) {
            log.error(message);
        }

        return BoolPayload.success();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/map/usecase/MapUseCase.java
================================================
package kr.co.yeoshin.backend.map.usecase;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageRestrictionContext;
import kr.co.yeoshin.backend.map.model.MapPlaceType;
import kr.co.yeoshin.backend.map.model.RadiusType;
import kr.co.yeoshin.backend.map.service.MapService;
import kr.co.yeoshin.backend.map.service.model.Cluster;
import kr.co.yeoshin.backend.map.usecase.model.MapHospitalClusterContext;
import kr.co.yeoshin.backend.payload.MapHospitalClusterPayload;
import kr.co.yeoshin.backend.payload.MapPlacesPayload;
import kr.co.yeoshin.backend.payload.MapSearchableHospitalClusterPayload;
import kr.co.yeoshin.backend.payload.template.HospitalLocationTemplate;
import kr.co.yeoshin.backend.payload.template.MapClusterTemplate;
import kr.co.yeoshin.backend.search.model.HospitalLocationDocument;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.common.type.Version;
import kr.co.yeoshin.common.utils.model.GeoPoint;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;

@AllArgsConstructor
@UseCase
public class MapUseCase {

    private final MapService mapService;
    private final SearchService searchService;
    private final QueueMessageRestrictionContext queueMessageRestrictionContext;
    private final PayloadFactory payloadFactory;


    public MapSearchableHospitalClusterPayload searchableHospitalClusters(MapHospitalClusterContext context) {

        SearchResult<HospitalLocationDocument> searchDocument = searchService.search(context);
        if (searchDocument.isEmpty()) {
            return MapSearchableHospitalClusterPayload.builder()
                    .level(RadiusType.LEVEL_13.getLevel())
                    .build();
        }

        queueMessageRestrictionContext.addGeoPositionUsages(
                context.getGeoPosition().getLatitude(),
                context.getGeoPosition().getLongitude()
        );

        HospitalLocationDocument hospital = searchDocument.getDocuments().get(0);
        RadiusType radius = mapService.findRecommendableRadius(
                new GeoPoint(
                        context.getGeoPosition().getLatitude(),
                        context.getGeoPosition().getLongitude()
                ),
                new GeoPoint(
                        hospital.getLatitude(),
                        hospital.getLongitude()));

        return MapSearchableHospitalClusterPayload.builder()
                .level(radius.getLevel())
                .build();
    }

    public MapHospitalClusterPayload<HospitalLocationTemplate> hospitalClusters(MapHospitalClusterContext context) {
        SearchResult<HospitalLocationDocument> searchDocument = searchService.search(context);
        if (searchDocument.isEmpty()) {
            return MapHospitalClusterPayload.empty(context.getRadius().getLevel());
        }

        queueMessageRestrictionContext.addGeoPositionUsages(
                context.getGeoPosition().getLatitude(),
                context.getGeoPosition().getLongitude()
        );

        List<Cluster<HospitalLocationDocument>> clusters = mapService.cluster(context, searchDocument.getDocuments());
        if (CollectionUtils.isEmpty(clusters)) {
            return MapHospitalClusterPayload.empty(context.getRadius().getLevel());
        }

        return MapHospitalClusterPayload.<HospitalLocationTemplate>builder()
                .level(context.getRadius().getLevel())
                .clusterCount(CollectionUtils.size(clusters))
                .clusters(clusters.stream()
                        .map(x -> MapClusterTemplate.<HospitalLocationTemplate>builder()
                                .id(x.getId())
                                .geoCell(x.getGeoCell())
                                .location(x.getLocation())
                                .count(x.getCount())
                                .items(payloadFactory.hospitalLocationTemplates(x.getItems()))
                                .build())
                        .collect(Collectors.toList()))
                .build();
    }

    public MapPlacesPayload places(Version version) {
        return MapPlacesPayload.builder()
                .places(MapPlaceType.findMapPlaceTypesByVersion(version).stream()
                        .map(mapPlace -> {
                            // todo : v1 더이상 사용되지 않는 시점에 if 제거
                            if (Version.V1 != version) {
                                return payloadFactory.mapPlaceTemplate(mapPlace,
                                        mapPlace.getIncluded(version).isEmpty() ? List.of(mapPlace)
                                                : mapPlace.getIncluded(version));
                            }
                            return payloadFactory.mapPlaceTemplate(mapPlace, Collections.emptyList());
                        })
                        .collect(Collectors.toList()))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/media/component/cdn/CdnTemplate.java
================================================
package kr.co.yeoshin.backend.media.component.cdn;

import java.io.InputStream;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.security.Security;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.props.MediaCdnPrivateAccessibleProps;
import kr.co.yeoshin.backend.config.props.MediaCdnProps;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.jets3t.service.CloudFrontService;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.ResponseCookie;
import org.springframework.stereotype.Component;

@Slf4j
@AllArgsConstructor
@Component
public class CdnTemplate {

    private final ApplicationProps applicationProps;
    private byte[] privateKey;

    @PostConstruct
    public void init() throws Exception {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try (InputStream keyStream = new ClassPathResource(
                applicationProps.getMedia().getCdn().getPrivateAccessible().getKeyPath()).getInputStream()) {
            this.privateKey = org.jets3t.service.utils.ServiceUtils.readInputStreamToBytes(keyStream);
        }
    }

    public String createSignedUrl(String path, Supplier<String> fallbackUrl) {
        MediaCdnProps cdnProps = applicationProps.getMedia().getCdn();

        MediaCdnPrivateAccessibleProps privateAccessibleProps = cdnProps.getPrivateAccessible();
        LocalDateTime expireTime = LocalDateTime.now(ZoneOffset.UTC).plusSeconds(
                privateAccessibleProps.getExpireSeconds());

        try {
            return CloudFrontService.signUrlCanned(
                    MessageUtils.format("https://{}/{}", privateAccessibleProps.getDomain(), path),
                    privateAccessibleProps.getKeyPairId(),
                    privateKey,
                    Date.from(expireTime.toInstant(ZoneOffset.UTC))
            );
        } catch (Exception e) {
            log.error("cdn({}) create signed url error", path, e);
            return fallbackUrl.get();
        }
    }

    @Builder
    @Getter
    private static class Signature {

        private String name;
        private String value;
    }

    public Optional<CdnSignature> createSignedSignatures(String path) {
        MediaCdnProps cdnProps = applicationProps.getMedia().getCdn();
        MediaCdnPrivateAccessibleProps privateAccessibleProps = cdnProps.getPrivateAccessible();
        LocalDateTime expireTime = LocalDateTime.now(ZoneOffset.UTC).plusSeconds(privateAccessibleProps.getExpireSeconds());

        try {
            Date expireDate = Date.from(expireTime.toInstant(ZoneOffset.UTC));
            String resourceUrlOrPath =
                    MessageUtils.format("https://{}/{}", privateAccessibleProps.getDomain(), path);

            String policy = CloudFrontService.buildPolicyForSignedUrl(resourceUrlOrPath, expireDate, null, null);

            String signedUrl = CloudFrontService.signUrl(
                    resourceUrlOrPath,
                    privateAccessibleProps.getKeyPairId(),
                    privateKey,
                    policy);

            URI signedUri = new URI(signedUrl);

            Map<String, String> params = URLEncodedUtils.parse(signedUri, StandardCharsets.UTF_8).stream()
                    .collect(Collectors.toMap(
                            (NameValuePair x) -> StringUtils.lowerCase(x.getName()),
                            NameValuePair::getValue));
            String signedSignature = params.get("signature");
            String signedPolicy = params.get("policy");
            if (StringUtils.isAnyBlank(signedSignature, signedPolicy)) {
                log.error("cdn({}) create blank signature/policy", path);
                return Optional.empty();
            }

            return Optional.of(CdnSignature.builder()
                    .queryParams(URLEncodedUtils.format(
                            List.of(
                                    new BasicNameValuePair("Policy", signedPolicy),
                                    new BasicNameValuePair("Signature", signedSignature),
                                    new BasicNameValuePair("Key-Pair-Id", privateAccessibleProps.getKeyPairId())
                            ),
                            StandardCharsets.UTF_8.name()
                    ))
                    .cookies(Stream.of(
                                    Signature.builder().name("CloudFront-Policy").value(signedPolicy).build(),
                                    Signature.builder().name("CloudFront-Signature").value(signedSignature).build(),
                                    Signature.builder().name("CloudFront-Key-Pair-Id").value(privateAccessibleProps.getKeyPairId()).build()
                            ).map(x -> ResponseCookie.from(x.getName(), x.getValue())
                                    .domain(privateAccessibleProps.getDomain())
                                    .path("/" + path)
                                    .httpOnly(true)
                                    .secure(true)
                                    .build()
                                    .toString())
                            .collect(Collectors.toList()))
                    .build());
        } catch (Exception e) {
            log.error("cdn({}) create signed signatures error", path, e);
            return Optional.empty();
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/media/component/template/MediaTemplate.java
================================================
package kr.co.yeoshin.backend.media.component.template;

import com.amazonaws.services.s3.model.ObjectMetadata;
import java.io.InputStream;
import java.util.Optional;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.MediaCode;
import kr.co.yeoshin.backend.exception.MediaException;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@AllArgsConstructor
@Component
public class MediaTemplate {

    private final S3Template s3Template;

    public boolean upload(S3Media media, MultipartFile file) {
        ObjectMetadata objectMetadata = Optional.ofNullable(media.getObjectMetadata())
                .orElseGet(() -> {
                    ObjectMetadata m = new ObjectMetadata();
                    m.setContentType(file.getContentType());
                    m.setContentLength(file.getSize());
                    m.setHeader("filename", media.getFileName());

                    return m;
                });

        try (InputStream inputStream = file.getInputStream()) {
            s3Template.upload(MessageUtils.format("{}/{}", media.getBucketName(), media.getBucketPath()),
                    media.getFileName(),
                    inputStream,
                    objectMetadata);

            return true;
        } catch (Exception e) {
            log.error("media s3 upload failed", e);
            throw new MediaException(CommonCode.ERROR);
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/media/component/template/S3Template.java
================================================
package kr.co.yeoshin.backend.media.component.template;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.util.StreamUtils;

@Slf4j
@AllArgsConstructor
public class S3Template {

    private final AmazonS3 s3;

    public PutObjectResult upload(String bucketName, String fileName, InputStream inputStream, ObjectMetadata objectMetadata) {
        PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, fileName, inputStream, objectMetadata)
                .withCannedAcl(CannedAccessControlList.Private);

        return s3.putObject(putObjectRequest);
    }


    public PutObjectResult upload(String bucketName, String fileName, String data) {
        ObjectMetadata m = new ObjectMetadata();
        m.setContentType(MediaType.ALL_VALUE);
        m.setContentLength(StringUtils.length(data));

        PutObjectRequest putObjectRequest = new PutObjectRequest(
                bucketName,
                fileName,
                new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8)), m)
                .withCannedAcl(CannedAccessControlList.Private);

        return s3.putObject(putObjectRequest);
    }

    public Optional<String> download(String bucketName, String fileName) {
        try {
            S3Object object = s3.getObject(bucketName, fileName);
            try (S3ObjectInputStream inputStream = object.getObjectContent()) {
                return Optional.of(StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));
            } catch (IOException e) {
                log.error("download object({}/{}) failed", bucketName, fileName, e);
                return Optional.empty();
            }
        } catch (AmazonS3Exception e) {
            if (e.getStatusCode() != HttpStatus.NOT_FOUND.value()) {
                log.error("s3 download failed", e);
            }
            return Optional.empty();
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/media/usecase/MediaUseCase.java
================================================
package kr.co.yeoshin.backend.media.usecase;

import java.util.function.Function;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.MediaException;
import kr.co.yeoshin.backend.media.component.template.Media;
import kr.co.yeoshin.backend.media.component.transcoder.TranscoderJob;
import kr.co.yeoshin.backend.media.controller.model.MediaSignaturesRequest;
import kr.co.yeoshin.backend.media.service.MediaService;
import kr.co.yeoshin.backend.media.usecase.model.ImageUpload;
import kr.co.yeoshin.backend.media.usecase.model.VideoUpload;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@UseCase
public class MediaUseCase {

    private final MediaService mediaService;
    private final TransactionTemplate transactionTemplate;

    public MediaImageUploadPayload uploadImage(ImageUpload image) {
        if (DiagnosticContext.isVirtualMember()
                && !image.getMediaDomainType().isSupportVirtualAccess()) {
            throw new MediaException(CommonCode.ERROR);
        }

        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, Function.identity());

        Media media = mediaService.createMedia(image);
        long mediaId = transactionTemplate.executeMainWritableTransaction(
                () -> mediaService.registerStatus(memberId, image, media).getId());

        mediaService.uploadMedia(media, image.getMultipartFile());

        return MediaImageUploadPayload.builder()
                .id(mediaId)
                .image(media.getFileName())
                .size(image.getMultipartFile().getSize())
                .endpoint(mediaService.retrieveEndpoint(
                        media.getType(), image.getAccessibleType(), image.getDomainType(), media.getFileName()))
                .build();
    }

    public MediaJobTaskPayload uploadVideo(VideoUpload video) {
        long memberId = DiagnosticContext.fetchMemberId();

        Media media = mediaService.createMedia(video);
        long mediaId = transactionTemplate.executeMainWritableTransaction(
                () -> mediaService.registerStatus(memberId, video, media).getId());

        mediaService.uploadMedia(media, video.getMultipartFile());

        TranscoderJob transcodeJob = mediaService.createTranscodeJob(media);

        return MediaJobTaskPayload.builder()
                .id(mediaId)
                .size(video.getMultipartFile().getSize())
                .jobId(transcodeJob.getId())
                .build();
    }

    public MediaJobStatusPayload retrieveVideoJobStatus(long mediaId, String jobId) {
        long memberId = DiagnosticContext.fetchMemberId();

        MediaStatus status = transactionTemplate.executeMainReadableTransaction(
                () -> mediaService.findStatus(memberId, mediaId));

        return MediaJobStatusPayload.builder()
                .id(mediaId)
                .jobId(jobId)
                .status(mediaService.retrieveTranscodeJobStatus(
                        status.getAccessibleType(),
                        status.getDomainType(),
                        status.getFileName(),
                        jobId))
                .build();
    }

    public MediaSignaturesPayload signatures(MediaSignaturesRequest request) {
        return MediaSignaturesPayload.builder()
                .signatures(mediaService.createCdnSignatures(request.getMedia(), request.getAccessible()))
                .build();
    }

    public MediaEndpointPayload getMediaEndpoint(long mediaId) {
        long memberId = DiagnosticContext.fetchMemberId();

        MediaStatus status = transactionTemplate.executeMainReadableTransaction(
                () -> mediaService.findStatus(memberId, mediaId));

        return MediaEndpointPayload.builder()
                .id(mediaId)
                .endpoint(mediaService.retrieveEndpoint(
                        status.getMediaType(),
                        status.getAccessibleType(),
                        status.getDomainType(),
                        status.getFileName()))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/member/usecase/MemberUseCase.java
================================================
package kr.co.yeoshin.backend.member.usecase;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.*;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.cart.service.CartService;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.MediaCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.exception.MediaException;
import kr.co.yeoshin.backend.exception.MemberException;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.interesting.service.model.InterestingContainer;
import kr.co.yeoshin.backend.media.service.MediaService;
import kr.co.yeoshin.backend.member.controller.model.ProfileBirthdatePatchRequest;
import kr.co.yeoshin.backend.member.controller.model.ProfileHomeCountryCodePatchRequest;
import kr.co.yeoshin.backend.member.controller.model.ProfilePatchRequest;
import kr.co.yeoshin.backend.member.controller.model.ProfileRequest;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.member.service.model.MemberLevelContainer;
import kr.co.yeoshin.backend.member.usecase.model.MemberLevelStatPageableContext;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.MemberServiceSummaryTemplate;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.reservation.service.ReservationService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.salesevent.model.Ref;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.systemcash.service.SystemCashService;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.backend.utils.MemberUtils;
import kr.co.yeoshin.backend.utils.SystemCashUtils;
import kr.co.yeoshin.backend.validator.service.ValidatorService;
import kr.co.yeoshin.backend.verify.service.VerificationService;
import kr.co.yeoshin.backend.verify.service.model.VerificationSmsContext;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.type.CouponStatus;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.media.type.MediaAccessibleType;
import kr.co.yeoshin.common.media.type.MediaType;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberAccount;
import kr.co.yeoshin.common.member.entity.MemberServiceStatTicketLog;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.member.model.MemberServiceStatSummary;
import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.payment.entity.SystemCashSummary;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.entity.ReservationAsWritableTreatmentReview;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.type.UserType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.ProbabilityUtils;
import kr.co.yeoshin.common.utils.TreatmentReviewUtils;
import kr.co.yeoshin.common.verify.type.VerificationType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class MemberUseCase {

    private final MemberService memberService;
    private final MemberPointService memberPointService;
    private final SystemCashService systemCashService;
    private final SalesEventService salesEventService;
    private final TreatmentReviewService treatmentReviewService;
    private final ValidatorService validatorService;
    private final VerificationService verificationService;
    private final MediaService mediaService;
    private final CouponService couponService;
    private final CartService cartService;
    private final TicketService ticketService;
    private final ReservationService reservationService;
    private final InterestingService interestingService;
    private final QuestService questService;
    private final OrderService orderService;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final PayloadFactory payloadFactory;

    public ProfilePayload profile() {
        long memberId = DiagnosticContext.fetchMemberId();
        kr.co.yeoshin.common.member.entity.Member member = memberService.findMember(memberId);

        return ProfilePayload.builder()
                .member(payloadFactory.memberTemplate(member))
                .build();
    }

    public ProfilePayload modifyProfile(ProfileRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Predicate<kr.co.yeoshin.common.member.entity.Member>> profileValidator = List.of(
                (m) -> validatorService.validateName(request.getName()),
                (m) -> validatorService.validateBirthdate(request.getBirthdate()),
                (m) -> validatorService.validateEmail(request.getEmail()),
                (m) -> StringUtils.equals(m.getProfileId(), request.getProfileId())
                        || validatorService.validateProfileId(request.getProfileId()),
                (m) -> {
                    VerificationSmsContext verification = new VerificationSmsContext();
                    verification.setCountryCallingCode(request.getCountryCallingCode());
                    verification.setCellPhone(request.getCellPhone());

                    return StringUtils.equals(m.getCellPhone(), request.getCellPhone())
                            || (verificationService.verified(verification, VerificationType.MEMBER_PROFILE)
                            && validatorService.validateAvailableCellPhone(
                            request.getCountryCallingCode(), request.getCellPhone()));
                },
                (m) -> request.getHomeCountryCode() == m.getHomeCountryCode()
                        || MemberUtils.changeableHomeCountryCode(m.getHomeCountryCodeChangeAt())
        );
        Member member = memberService.findMember(memberId);
        profileValidator.forEach(x -> x.test(member));

        Member modifiedMember = memberService.modifyMemberProfile(memberId, request);

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_UPDATE, modifiedMember.getId());

        return ProfilePayload.builder()
                .member(payloadFactory.memberTemplate(modifiedMember))
                .build();
    }

    public ProfilePayload modifyProfile(ProfilePatchRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Predicate<kr.co.yeoshin.common.member.entity.Member>> profileValidator = List.of(
                (m) -> validatorService.validateEmail(request.getEmail()),
                (m) -> StringUtils.equals(m.getProfileId(), request.getProfileId())
                        || validatorService.validateProfileId(request.getProfileId()),
                (m) -> request.getHomeCountryCode() == m.getHomeCountryCode()
                        || MemberUtils.changeableHomeCountryCode(m.getHomeCountryCodeChangeAt()));

        Member member = memberService.findMember(memberId);
        profileValidator.forEach(x -> x.test(member));

        Member modifiedMember = memberService.modifyMemberProfile(memberId, request);

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_UPDATE, modifiedMember.getId());

        return ProfilePayload.builder()
                .member(payloadFactory.memberTemplate(modifiedMember))
                .build();
    }


    public ProfilePayload modifyProfile(ProfileHomeCountryCodePatchRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member modifiedMember = memberService.modifyMemberProfile(memberId, request);

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_UPDATE, modifiedMember.getId());

        return ProfilePayload.builder()
                .member(payloadFactory.memberTemplate(modifiedMember))
                .build();
    }


    public ProfilePayload modifyProfile(ProfileBirthdatePatchRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        MemberServiceSummary summary = memberService.findMemberServiceSummaryByMemberId(memberId);
        if (summary.getIdentificationYn().toBoolean()) {
            log.info("member({}) is identified. birthdate can not be updated", memberId);
            throw new MemberException(CommonCode.ERROR);
        }

        Member modifiedMember = memberService.modifyMemberProfile(memberId, request);

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.MEMBER_UPDATE, modifiedMember.getId());

        return ProfilePayload.builder()
                .member(payloadFactory.memberTemplate(modifiedMember))
                .build();
    }


    public ProfilePayload modifyProfileImage(String image) {
        long memberId = DiagnosticContext.fetchMemberId();

        return transactionTemplate.executeMainWritableTransaction(() -> {
            MediaStatus status = mediaService.findStatusByFileName(image);
            if (status.getMediaType() != MediaType.IMAGE
                    || status.getAccessibleType() != MediaAccessibleType.PRIVATE
                    || status.getUploaderType() != UserType.MEMBER
                    || status.getUploaderId() != memberId) {
                throw new MediaException(MediaCode.MEDIA_INVALID_ID);
            }
            status.changeRegisterYn(YN.Y);

            kr.co.yeoshin.common.member.entity.Member member = memberService.modifyMemberProfileImage(
                    memberId, status.getFileName());

            return ProfilePayload.builder()
                    .member(payloadFactory.memberTemplate(member))
                    .build();
        });
    }

    public BoolPayload modifyLanguage() {
        long memberId = DiagnosticContext.fetchMemberId();
        Locale locale = DiagnosticContext.fetchLocale();

        transactionTemplate.executeMainWritableTransaction(
                () -> memberService.findMemberServiceSummaryByMemberId(memberId)
                        .changePreferLanguage(locale.getLanguage()));

        return BoolPayload.success();
    }

    public MemberServiceSummaryPayload findSummary() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberCoupon> availableCoupons = couponService.fetchAllMemberCoupons(
                memberId, CouponStatus.AVAILABLE);

        long cartCount = cartService.countAllCartProducts(memberId);
        List<Ticket> tickets = ticketService.findAllUsableTicketByMemberId(memberId);

        MemberServiceSummary summary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        kr.co.yeoshin.common.member.entity.Member member = summary.getMember();

        int point = memberPointService.findTotalPointByMemberId(memberId);
        List<SystemCashSummary> systemCashSummaries = systemCashService.findAllSystemCashSummaries(memberId);

        int systemCash = SystemCashUtils.getHoldableSystemCash(systemCashSummaries);
        int refundableSystemCash = SystemCashUtils.getRefundableSystemCash(systemCashSummaries);
        int depositedSystemCash = SystemCashUtils.getDepositedSystemCash(systemCashSummaries);

        LocalDateTime now = LocalDateTime.now();

        List<ReservationAsWritableTreatmentReview> writableTreatmentReviews = treatmentReviewService
                .findWriteableTreatmentReviews(memberId)
                .stream()
                .filter(x -> x.getExpireAt().isAfter(now))
                .collect(Collectors.toList());

        long writableTreatmentReviewCount = CollectionUtils.size(writableTreatmentReviews);
        long rewardableTreatmentReviewCount = writableTreatmentReviews.stream()
                .filter(x -> TreatmentReviewUtils.isRewardable(x.getUseAt()))
                .count();

        List<Reservation> reservations = reservationService.findAllReservations(memberId, List.of(
                ReservationStatus.CONFIRM,
                ReservationStatus.VISIT_EXPECTED_TODAY,
                ReservationStatus.VISIT_DELAYED,
                ReservationStatus.WAIT_VISIT_COMPLETE));

        Optional<Reservation> nearestReservation = reservations.stream()
                .filter(x -> x.getStatus() == ReservationStatus.CONFIRM
                        || x.getStatus() == ReservationStatus.VISIT_EXPECTED_TODAY)
                .filter(x -> x.getStartAt().isAfter(now))
                .min(Comparator.comparing(Reservation::getStartAt));
        long expectReservationCount = reservations.stream()
                .filter(x -> x.getStatus() == ReservationStatus.CONFIRM
                        || x.getStatus() == ReservationStatus.VISIT_EXPECTED_TODAY)
                .count();
        long progressReservationCount = reservations.stream()
                .filter(x -> x.getStatus() == ReservationStatus.VISIT_DELAYED
                        || x.getStatus() == ReservationStatus.WAIT_VISIT_COMPLETE)
                .count();

        long completeReservationCount = reservationService.countReservations(memberId, List.of(ReservationStatus.VISIT_COMPLETE));

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(writableTreatmentReviews.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList()))
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Function.identity()));

        int maxTreatmentReviewPoint = writableTreatmentReviews.stream()
                .map(x -> TreatmentReviewUtils.treatmentReviewMaxRewardPoint(
                        x,
                        salesEventStats.getOrDefault(
                                        x.getSalesEvent().getId(), SalesEventStat.empty(x.getSalesEvent().getId()))
                                .getTotalReviewCount()))
                .max(Comparator.comparing(x -> x))
                .orElse(0);

        InterestingContainer interesting = interestingService.findInteresting(memberId);

        int PROBABILITY_REFRESH_EXTERNAL_QUEST = 20;
        ProbabilityUtils.execute(() -> transactionTemplate.executeMainWritableTransaction(() ->
                questService.refreshExternalQuests(memberId)
        ), PROBABILITY_REFRESH_EXTERNAL_QUEST);

        return MemberServiceSummaryPayload.builder()
                .member(payloadFactory.memberTemplate(member))
                .memberSkinType(payloadFactory.memberSkinTypeTemplate(interesting))
                .serviceSummary(MemberServiceSummaryTemplate.builder()
                        .memberId(memberId)
                        .identification(summary.getIdentificationYn().toBoolean())
                        .identificationAt(Optional.ofNullable(summary.getIdentificationAt())
                                .map(DateUtil::convertFrom)
                                .orElse(null))
                        .couponCount(CollectionUtils.size(availableCoupons))
                        .cartProductCount(cartCount)
                        .ticketCount(CollectionUtils.size(tickets))
                        .firstOrderAt(Optional.ofNullable(summary.getFirstOrderAt())
                                .map(DateUtil::convertFrom)
                                .orElse(null))
                        .recentOrderAt(Optional.ofNullable(summary.getRecentTicketPurchaseAt())
                                .map(DateUtil::convertFrom)
                                .orElse(null))
                        .nearestReservationAt(nearestReservation
                                .map(Reservation::getStartAt)
                                .map(DateUtil::convertFrom)
                                .orElse(null))
                        .firstFaceAnalysisReportAt(Optional.ofNullable(summary.getFirstFaceAnalysisReportAt())
                                .map(DateUtil::convertFrom)
                                .orElse(null))
                        .reservationCount(expectReservationCount)
                        .expectReservationCount(expectReservationCount)
                        .progressReservationCount(progressReservationCount)
                        .completeReservationCount(completeReservationCount)
                        .point(point)
                        .systemCash(systemCash)
                        .refundableSystemCash(refundableSystemCash)
                        .depositedSystemCash(depositedSystemCash)
                        .inviteCode(summary.getInviteCode())
                        .language(summary.getPreferLanguage())
                        .writableTreatmentReviewCount(writableTreatmentReviewCount)
                        .rewardableTreatmentReviewCount(rewardableTreatmentReviewCount)
                        .rewardableMaxTreatmentReviewPoint(maxTreatmentReviewPoint)
                        .latestNotification(summary.getLatestNotificationYn().toBoolean())
                        .latestSalesEventQuestionReply(summary.getLatestSalesEventQuestionReplyYn().toBoolean())
                        .registerInterestings(summary.getInterestingYn().toBoolean())
                        .reservationDuplicationAllow(summary.getReservationDuplicateAllowYn().toBoolean())
                        .build())
                .build();
    }

    public MemberServiceStatPayload stats(ZonedDateTime from, ZonedDateTime to) {
        long memberId = DiagnosticContext.fetchMemberId();
        MemberServiceStatSummary serviceStat =
                memberService.findMemberServiceStat(memberId, DateUtil.convertFrom(from), DateUtil.convertFrom(to));

        return MemberServiceStatPayload.builder()
                .serviceStat(payloadFactory.memberServiceStatTemplates(serviceStat))
                .build();
    }

    public MemberAccountsPayload findAccounts() {
        long memberId = DiagnosticContext.fetchMemberId();
        List<MemberAccount> memberAccounts = memberService.findAccountsByMemberId(memberId);

        return MemberAccountsPayload.builder()
                .accounts(payloadFactory.memberAccountTemplates(memberAccounts, false))
                .build();
    }

    public MemberLevelPayload levels() {
        long memberId = DiagnosticContext.fetchMemberId();

        LocalDateTime at = LocalDateTime.now();

        MemberLevelContainer level = memberService.findMemberLevel(memberId, at);
        MemberServiceStatSummary stat = level.getStat();

        MemberLevelContainer expectLevel = memberService.findMemberLevel(memberId, at.plusMonths(1));
        MemberServiceStatSummary expectStat = expectLevel.getStat();

        return MemberLevelPayload.builder()
                .memberLevel(payloadFactory.memberLevelTemplates(level.getMemberLevel()))
                .expectMemberLevel(payloadFactory.memberLevelTemplates(expectLevel.getMemberLevel()))
                .serviceStat(payloadFactory.memberServiceStatTemplates(stat))
                .expectServiceStat(payloadFactory.memberServiceStatTemplates(expectStat))
                .levels(payloadFactory.levelTemplates(Arrays.asList(Level.values())))
                .build();
    }

    public MemberLevelStatPayload memberLevelStatLogs(MemberLevelStatPageableContext context) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = memberService.pageable(context);

        Page<MemberServiceStatTicketLog> ticketLogs =
                memberService.findAllStatTicketLogs(memberId, context.getFrom(), context.getTo(), pageable);

        Set<Long> ticketIds = ticketLogs.stream()
                .map(MemberServiceStatTicketLog::getTicketId)
                .collect(Collectors.toSet());

        List<Ticket> tickets = ticketService.fetchAllTicketByTicketIds(ticketIds)
                .stream()
                .collect(Collectors.toList());

        String nextToken = ticketLogs.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                MemberLevelStatPageableContext.builder()
                        .page(ticketLogs.getPageable().getPageNumber() + 1)
                        .from(context.getFrom())
                        .to(context.getTo())
                        .build());

        return MemberLevelStatPayload.builder()
                .serviceStatLogs(ticketLogs.stream()
                        .map(payloadFactory::memberServiceStatTicketLogTemplate)
                        .collect(Collectors.toList()))
                .salesEvents(tickets.stream()
                        .map(x -> payloadFactory.salesEventTemplate(x.getSalesEvent(), Ref.empty()))
                        .collect(Collectors.toList()))
                .pageable(payloadFactory.pageableTemplate(ticketLogs, nextToken))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/meta/usecase/MetaUseCase.java
================================================
package kr.co.yeoshin.backend.meta.usecase;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.payload.MetaPayload;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.salesproduct.service.model.TroubleCategory;
import kr.co.yeoshin.common.Constant.TreatmentReview;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctor;
import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.product.entity.SolutionTag;
import kr.co.yeoshin.common.product.entity.Treatment;
import kr.co.yeoshin.common.utils.TreatmentReviewUtils;
import kr.co.yeoshin.common.utils.model.TreatmentReviewReward;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@UseCase
public class MetaUseCase {

    private final SalesProductService salesProductService;
    private final HospitalService hospitalService;
    private final PayloadFactory payloadFactory;

    public MetaPayload meta() {
        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        List<TroubleCategory> troubleCategories = attributeFacade.findAllTroubleCategories();
        List<Treatment> treatments = attributeFacade.findAllTreatments();
        List<SolutionTag> solutionTags = attributeFacade.findAllSolutionTags();

        List<HospitalDoctor> hospitalDoctors = hospitalService.findAllHospitalDoctors();

        Optional<TreatmentReviewReward> treatmentReviewReward = TreatmentReviewUtils.treatmentReviewReward(
                TreatmentReview.DEFAULT_POLICY_VERSION);

        return MetaPayload.builder()
                .solutionTags(payloadFactory.textIconTemplatesBySolutionTags(solutionTags))
                .treatments(treatments.stream()
                        .map(payloadFactory::textIconTemplate)
                        .collect(Collectors.toList()))
                .troubleCategories(payloadFactory.troubleCategoryTemplates(troubleCategories))
                .hospitalSubjects(payloadFactory.hospitalSubjects(hospitalDoctors))
                .treatmentReviewReward(payloadFactory.treatmentReviewRewardTemplate(treatmentReviewReward.orElse(null)))
                .questReward(payloadFactory.questRewardTemplate())
                .levels(payloadFactory.levelTemplates(Arrays.asList(Level.values())))
                .build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/NotificationMailTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper;

import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.backend.notification.component.model.NotificationMailTemplateType;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.stringtemplate.v4.ST;

@RequiredArgsConstructor
@Component
public class NotificationMailTemplate {

    private final NotificationMailTemplateLoader templateLoader;

    public Optional<String> build(NotificationMailTemplateType mailTemplate, Map<String, Object> params) {
        Optional<String> query = templateLoader.getTemplate(mailTemplate);
        if (query.isEmpty()) {
            return Optional.empty();
        }

        ST template = new ST(query.get(), '$', '$');
        params.forEach(template::add);

        return Optional.of(template.render());
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/NotificationTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper;

import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.backend.notification.component.mapper.model.SmsTemplateAttribute;
import kr.co.yeoshin.backend.notification.component.model.NotificationMailTemplateType;
import kr.co.yeoshin.backend.notification.component.model.NotificationSmsIdType;
import kr.co.yeoshin.backend.notification.component.model.SmsTemplate;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;
import org.stringtemplate.v4.ST;

@RequiredArgsConstructor
@Component
public class NotificationTemplate {

    private final NotificationMailTemplateLoader mailTemplateLoader;
    private final NotificationSmsTemplateLoader smsTemplateLoader;
    private final NotificationTemplateMapperLoader mapperTemplateLoader;

    private static final char TEMPLATE_DELIMETER = '$';

    public Optional<String> build(String namespace, String id, Map<String, Object> params) {
        Optional<String> query = mapperTemplateLoader.getTemplate(namespace, id);
        if (query.isEmpty()) {
            return Optional.empty();
        }

        ST template = new ST(query.get(), TEMPLATE_DELIMETER, TEMPLATE_DELIMETER);
        params.forEach(template::add);

        return Optional.of(template.render());
    }

    public Optional<String> build(NotificationMailTemplateType templateType, Map<String, Object> params) {
        Optional<String> mailTemplate = mailTemplateLoader.getTemplate(templateType);
        if (mailTemplate.isEmpty()) {
            return Optional.empty();
        }

        ST template = new ST(mailTemplate.get(), TEMPLATE_DELIMETER, TEMPLATE_DELIMETER);
        params.forEach(template::add);
        return Optional.of(template.render());
    }

    public Optional<SmsTemplate> build(NotificationSmsIdType smsIdType, Map<String, Object> params) {
        Optional<SmsTemplateAttribute> smsTemplateOptional = smsTemplateLoader.getTemplate(smsIdType);
        if (smsTemplateOptional.isEmpty()) {
            return Optional.empty();
        }

        SmsTemplateAttribute smsTemplate = smsTemplateOptional.get();

        ST template = new ST(smsTemplate.getQuery(), TEMPLATE_DELIMETER, TEMPLATE_DELIMETER);
        params.forEach(template::add);

        return Optional.of(template.render())
                .map(x -> SmsTemplate.builder()
                        .title(smsTemplate.getTitle())
                        .body(StringUtils.trim(x))
                        .type(smsTemplate.getType())
                        .build());
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/model/MailAuthDormantAtTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.util.List;
import kr.co.yeoshin.backend.config.json.CurrencySerializer;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MailAuthDormantAtTemplate {

    @JsonFormat(pattern = "yyyy.MM.dd")
    private LocalDate dormantAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/model/MailOrderCompleteTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.util.List;
import kr.co.yeoshin.backend.config.json.CurrencySerializer;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MailOrderCompleteTemplate {

    private String orderCode;

    @JsonFormat(pattern = "yyyy.MM.dd")
    private LocalDate orderAt;
    @JsonSerialize(using = CurrencySerializer.class)
    private int paymentPrice;
    private String paymentMethod;
    private List<MailOrderTemplate> orders;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/model/MailOrderTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper.model;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MailOrderTemplate {

    private String hospitalName;
    private List<MailProductTemplate> products;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/model/MailProductTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper.model;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import kr.co.yeoshin.backend.config.json.CurrencySerializer;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MailProductTemplate {

    private String image;
    private String salesEventName;
    private String salesProductName;
    private int count;
    @JsonSerialize(using = CurrencySerializer.class)
    private int price;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/mapper/model/SmsTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.mapper.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SmsTemplate {

    private final String title;
    private final String body;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/model/SlackBlockPayload.java
================================================
package kr.co.yeoshin.backend.notification.component.model;

import java.util.List;
import java.util.Map;
import lombok.*;

@AllArgsConstructor(access = AccessLevel.PRIVATE)
@NoArgsConstructor
@Getter
@Builder
public class SlackBlockPayload {

    private List<Map<String, Object>> blocks;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/component/model/SmsTemplate.java
================================================
package kr.co.yeoshin.backend.notification.component.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SmsTemplate {

    private final String title;
    private final String body;
    private final String type;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/notification/usecase/NotificationUseCase.java
================================================
package kr.co.yeoshin.backend.notification.usecase;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.service.NotificationService;
import kr.co.yeoshin.backend.notification.usecase.model.NotificationPageableContext;
import kr.co.yeoshin.backend.payload.NotificationConfigsPayload;
import kr.co.yeoshin.backend.payload.NotificationPayload;
import kr.co.yeoshin.backend.payload.NotificationsPayload;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.scrap.usecase.model.TreatmentReviewScrapPageableContext;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.notification.entity.Notification;
import kr.co.yeoshin.common.notification.entity.NotificationConfig;
import kr.co.yeoshin.common.notification.type.NotificationConfigType;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import kr.co.yeoshin.common.utils.ProbabilityUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;

@AllArgsConstructor
@UseCase
public class NotificationUseCase {

    private final NotificationService notificationService;
    private final MemberService memberService;
    private final QuestService questService;
    private final MemberPointService memberPointService;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;

    public NotificationConfigsPayload configs() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<NotificationConfig> configs = notificationService.configs(memberId)
                .stream()
                .filter(x -> x.getActivateYn().toBoolean())
                .collect(Collectors.toList());

        return NotificationConfigsPayload.builder()
                .configs(configs.stream()
                        .map(payloadFactory::codeTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public BoolPayload configOn(List<NotificationConfigType> configTypes) {
        long memberId = DiagnosticContext.fetchMemberId();
        List<NotificationConfig> notificationConfigs = transactionTemplate.executeMainWritableTransaction(() -> {
            List<NotificationConfig> registerConfigs = notificationService.registerNotificationConfigs(memberId, configTypes);

            Set<NotificationConfigType> activateConfigTypes = notificationService.configs(memberId)
                    .stream()
                    .filter(x -> x.getActivateYn().toBoolean())
                    .map(NotificationConfig::getType)
                    .collect(Collectors.toSet());

            if (activateConfigTypes.containsAll(List.of(NotificationConfigType.MARKETING_EMAIL,
                    NotificationConfigType.MARKETING_PUSH,
                    NotificationConfigType.MARKETING_SMS))
                    && questService.notificationMarketingAgreeStatus() == ProgressStatus.PROGRESS) {
                questService.registerNotificationMarketingAgree(memberId)
                        .ifPresent(x -> memberPointService.registerPoint(
                                memberId, MemberPointAddContext.builder()
                                        .title(Action.QUEST_NOTIFICATION_MARKETING_AGREE.getTitleKo())
                                        .action(Action.QUEST_NOTIFICATION_MARKETING_AGREE)
                                        .publishType(PublishType.SYSTEM)
                                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                .expireAt(PointUtils.expireAt(Point.QUEST_NOTIFICATION_MARKETING_AGREE_DAYS))
                                                .point(x.getPoint())
                                                .build()))
                                        .point(x.getPoint())
                                        .type(MemberPointType.REWARD)
                                        .refType(DomainType.QUEST_NOTIFICATION_MARKETING_AGREE)
                                        .refId(x.getId())
                                        .build()));
            }

            if (activateConfigTypes.contains(NotificationConfigType.MARKETING_DISTURB_TIME_PUSH)
                    && questService.notificationMarketingDisturbTimeAgreeStatus() == ProgressStatus.PROGRESS) {
                questService.registerNotificationMarketingDisturbTimeAgree(memberId)
                        .ifPresent(x -> memberPointService.registerPoint(
                                memberId, MemberPointAddContext.builder()
                                        .title(Action.QUEST_NOTIFICATION_MARKETING_DISTURB_TIME_AGREE.getTitleKo())
                                        .action(Action.QUEST_NOTIFICATION_MARKETING_DISTURB_TIME_AGREE)
                                        .publishType(PublishType.SYSTEM)
                                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                .expireAt(PointUtils.expireAt(
                                                        Point.QUEST_NOTIFICATION_MARKETING_DISTURB_TIME_AGREE_DAYS))
                                                .point(x.getPoint())
                                                .build()))
                                        .point(x.getPoint())
                                        .type(MemberPointType.REWARD)
                                        .refType(DomainType.QUEST_NOTIFICATION_MARKETING_DISTURB_TIME_AGREE)
                                        .refId(x.getId())
                                        .build()));
            }

            return registerConfigs;
        });

        queueMessageDomainEventContext.addDomainEvents(
                DomainEventType.NOTIFICATION_CONFIG_UPDATE,
                notificationConfigs.stream()
                        .map(NotificationConfig::getId)
                        .collect(Collectors.toList()));

        return BoolPayload.success();
    }

    public BoolPayload configOff(NotificationConfigType configType) {
        long memberId = DiagnosticContext.fetchMemberId();
        Optional<NotificationConfig> notificationConfig = transactionTemplate.executeMainWritableTransaction(
                () -> notificationService.removeNotificationConfig(memberId, configType));

        notificationConfig.ifPresent(
                config -> queueMessageDomainEventContext.addDomainEvent(DomainEventType.NOTIFICATION_CONFIG_UPDATE,
                        config.getId()));

        return BoolPayload.builder().result(true).build();
    }

    public NotificationsPayload list(NotificationPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (pageableContext.isFirstPage()) {
            transactionTemplate.executeMainWritableTransaction(() ->
                    memberService.findMemberServiceSummaryByMemberId(memberId)
                            .changeLatestNotificationYn(YN.N));
        }

        Page<Notification> notificationPage = notificationService.findAllNotifications(memberId, pageableContext);
        if (notificationPage.isEmpty()) {
            return NotificationsPayload.empty();
        }

        String nextToken = notificationPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TreatmentReviewScrapPageableContext.builder()
                        .page(notificationPage.getPageable().getPageNumber() + 1)
                        .size(pageableContext.getSize())
                        .build());

        int PROBABILITY_CLEAR_NOTIFICATION = 40;

        ProbabilityUtils.execute(() -> transactionTemplate.executeMainWritableTransaction(() ->
                notificationService.removeExpiredNotifications(memberId)
        ), PROBABILITY_CLEAR_NOTIFICATION);

        return NotificationsPayload.builder()
                .notifications(payloadFactory.notificationTemplates(notificationPage.getContent()))
                .pageable(payloadFactory.pageableTemplate(notificationPage, nextToken))
                .build();
    }

    public NotificationPayload notification(long notificationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        Notification notification = notificationService.findNotification(memberId, notificationId);

        return NotificationPayload.builder()
                .notification(payloadFactory.notificationTemplate(notification))
                .build();
    }

    public BoolPayload readNotification(long notificationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(notificationService.readNotification(memberId, notificationId))
                .build();
    }

    public BoolPayload removeNotification(long notificationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(notificationService.removeNotification(memberId, notificationId))
                .build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/order/controller/model/OrderCheckoutIamPortPayload.java
================================================
package kr.co.yeoshin.backend.order.controller.model;

import kr.co.yeoshin.common.payment.type.OrderStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderCheckoutIamPortPayload {

    private OrderStatus status;
    private String merchantUid;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/order/controller/model/OrderCheckoutMileagePayload.java
================================================
package kr.co.yeoshin.backend.order.controller.model;

import kr.co.yeoshin.common.payment.type.OrderStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderCheckoutMileagePayload {

    private OrderStatus status;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/order/controller/model/OrderCheckoutSystemCashPayload.java
================================================
package kr.co.yeoshin.backend.order.controller.model;

import kr.co.yeoshin.common.payment.type.OrderStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderCheckoutSystemCashPayload {

    private OrderStatus status;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/order/controller/model/OrderSystemCheckoutPayload.java
================================================
package kr.co.yeoshin.backend.order.controller.model;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderSystemCheckoutPayload {

    private List<Long> coupons;
    private long point;
    private boolean treatmentInsuranceApply;
    private String currency;
    private long price;
    private long cardId;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/order/usecase/OrderUseCase.java
================================================
package kr.co.yeoshin.backend.order.usecase;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.callback.usecase.component.type.IamportPayMethod;
import kr.co.yeoshin.backend.callback.usecase.component.type.IamportPayMethod.IssuerContext;
import kr.co.yeoshin.backend.cart.service.CartService;
import kr.co.yeoshin.backend.common.Constant.Order;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.OrderCode;
import kr.co.yeoshin.backend.common.model.api.code.PaymentCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.exception.OrderException;
import kr.co.yeoshin.backend.exception.PaymentException;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.iamport.component.retrofit.model.PaymentPayload;
import kr.co.yeoshin.backend.iamport.component.retrofit.model.PaymentStatus;
import kr.co.yeoshin.backend.iamport.model.PayContext;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.GmailNotificationContext;
import kr.co.yeoshin.backend.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.notification.component.template.MailTemplateFactory;
import kr.co.yeoshin.backend.order.controller.model.*;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.order.service.model.OrderContainer;
import kr.co.yeoshin.backend.order.service.model.OrderProduct;
import kr.co.yeoshin.backend.order.service.model.OrderSalesProductRelation;
import kr.co.yeoshin.backend.order.service.model.OrderableStatusValidateConfigure;
import kr.co.yeoshin.backend.order.usecase.component.cancel.OrderCancelDelegator;
import kr.co.yeoshin.backend.order.usecase.model.*;
import kr.co.yeoshin.backend.order.utils.OrderUtils;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payment.component.refund.model.PaymentSystem;
import kr.co.yeoshin.backend.payment.service.PaymentService;
import kr.co.yeoshin.backend.payment.service.SystemCheckoutService;
import kr.co.yeoshin.backend.payment.service.model.IamportPaymentContext;
import kr.co.yeoshin.backend.payment.service.model.PaymentContext;
import kr.co.yeoshin.backend.payment.utils.PaymentUtils;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointMinusContext;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.payment.CpmPaymentContext;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.systemcash.service.SystemCashService;
import kr.co.yeoshin.backend.systemcash.service.model.SystemCashMinusContext;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.backend.verify.service.VerificationService;
import kr.co.yeoshin.backend.verify.service.model.VerificationNiceIdentityContext;
import kr.co.yeoshin.common.coupon.entity.Coupon;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.type.CouponBenefitType;
import kr.co.yeoshin.common.coupon.type.CouponStatus;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;
import kr.co.yeoshin.common.payment.entity.PaymentSystemEasyCheckout;
import kr.co.yeoshin.common.payment.model.Payment;
import kr.co.yeoshin.common.payment.type.*;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.IamPortUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.verify.type.VerificationType;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class OrderUseCase {

    private final ApplicationProps applicationProps;
    private final OrderService orderService;
    private final PaymentService paymentService;
    private final SystemCheckoutService systemCheckoutService;
    private final MemberService memberService;
    private final MemberPointService memberPointService;
    private final SystemCashService systemCashService;
    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final SalesProductService salesProductService;
    private final RecommendService recommendService;
    private final CartService cartService;
    private final CouponService couponService;
    private final TicketService ticketService;
    private final VerificationService verificationService;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;
    private final MailTemplateFactory mailTemplateFactory;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final List<OrderCancelDelegator> orderCancelDelegators;
    private final GlobalCacheTemplate cacheTemplate;

    public BoolPayload orderableStatus(OrderableStatusValidateConfigure configure) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = memberService.findMember(memberId);

        orderService.validateOrderableMemberStatus(member);
        orderService.validateOrderableMemberStatus(member, configure);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public OrderReceiptsPageablePayload list(OrderPageableContext context) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = orderService.pageable(context);

        List<OrderStatus> orderStatuses = List.of(
                OrderStatus.COMPLETE,
                OrderStatus.CANCEL,
                OrderStatus.PART_CANCEL,
                OrderStatus.CANCELING);

        Page<OrderPurchase> orderList = orderService.findAllByMemberId(
                memberId, orderStatuses, pageable);

        List<OrderPurchase> orders = orderList.getContent();

        List<OrderContainer> orderContainers = orderService.fetchAllOrderContainers(orders.stream()
                .map(OrderPurchase::getId)
                .collect(Collectors.toList()));

        List<Long> supportPreCancelOrderIds = paymentService.supportPreCancelOrderIds(orderContainers);

        List<MemberCoupon> memberCoupons = couponService.fetchMemberCouponsByIds(memberId, orders.stream()
                .flatMap(x -> x.getPaymentCouponIds().stream())
                .filter(Objects::nonNull)
                .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderContainers.stream()
                        .flatMap(x -> x.getSalesEventIds().stream())
                        .collect(Collectors.toSet()),
                orderContainers.stream()
                        .flatMap(x -> x.getSalesProductIds().stream())
                        .collect(Collectors.toSet()));

        String nextToken = orderList.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                OrderPageableContext.builder()
                        .size(context.getSize())
                        .page(orderList.getPageable().getPageNumber() + 1)
                        .build());

        List<OrderSalesProductRelation> orderSalesProductRelations = orderContainers.stream()
                .flatMap(x -> x.getOrderSalesProductRelations().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = orderSalesProductRelations.stream()
                .map(OrderSalesProductRelation::getHospital)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        return OrderReceiptsPageablePayload.builder()
                .orderReceipts(payloadFactory.orderReceiptTemplates(orders, orderSalesProductRelations, supportPreCancelOrderIds))
                .orderProducts(payloadFactory.orderProductTemplates(orderSalesProductRelations))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSalesProductRelations.stream()
                                .map(OrderSalesProductRelation::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .tickets(payloadFactory.ticketTemplates(orderSalesProductRelations))
                .coupons(payloadFactory.couponTemplates(memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()), memberCoupons))
                .pageable(payloadFactory.pageableTemplate(orderList, nextToken))
                .build();
    }

    public OrderReceiptPayload receipt(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        OrderPurchase order = orderService.findOrderByMemberIdAndOrderId(memberId, orderId);

        OrderContainer orderContainer = orderService.fetchOrderContainer(orderId)
                .orElseThrow(() -> new OrderException(OrderCode.ORDER_INVALID));

        boolean supportPreCancel = paymentService.supportPreCancel(orderContainer);

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderContainer.getSalesEventIds(),
                orderContainer.getSalesProductIds());

        OrderCancel orderCancel = orderService.cancelOrderDryRun(OrderCancelDryRunContext.builder()
                .memberId(memberId)
                .order(order)
                .orderContainer(orderContainer)
                .supportPreCancel(supportPreCancel)
                .build());

        OrderReceiptContext context = OrderReceiptContext.builder()
                .orderContainer(Optional.of(orderContainer))
                .salesEventContainers(salesEventContainers)
                .memberCoupons(orderCancel.getCancellableCoupons())
                .coupons(orderCancel.getUsedCoupons().stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()))
                .build();

        OrderReceipt orderReceipt = orderService.createOrderReceipt(context);

        Optional<PaymentContext> payment = paymentService.findPaymentContextVisitor(order.getPgType())
                .flatMap(x -> x.findContext(order, paymentService));

        List<OrderSalesProductRelation> orderSalesProductRelations = orderContainer.getOrderSalesProductRelations();

        List<Hospital> hospitals = orderSalesProductRelations.stream()
                .map(OrderSalesProductRelation::getHospital)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        return OrderReceiptPayload.builder()
                .orderReceipt(payloadFactory.orderReceiptTemplate(orderReceipt, orderSalesProductRelations, supportPreCancel))
                .orderCancel(payloadFactory.orderCancelTemplate(orderCancel))
                .orderPayment(payment.map(payloadFactory::orderPayment).orElse(null))
                .orderProducts(payloadFactory.orderProductTemplates(orderSalesProductRelations))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSalesProductRelations.stream()
                                .map(OrderSalesProductRelation::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .tickets(payloadFactory.ticketTemplates(orderSalesProductRelations))
                .coupons(payloadFactory.couponTemplates(orderCancel.getUsedCoupons()
                        .stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()), orderCancel.getUsedCoupons()))
                .build();
    }

    public OrderPurchasePayload order(OrderProductContext request, OrderConfigure configure) {
        List<OrderProduct> orderProducts = request.getOrderProducts();

        List<SalesProductVersion> salesProductVersions = salesProductService.findLatestSalesProductVersionsBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()));

        long memberId = DiagnosticContext.fetchMemberId();

        Map<Long, SalesProductVersion> salesProductVersionBySalesProductId = salesProductVersions.stream()
                .collect(Collectors.toMap(x -> x.getSalesProduct().getId(), Function.identity()));
        for (OrderProduct orderProduct : orderProducts) {
            SalesProductVersion salesProductVersion = salesProductVersionBySalesProductId.get(orderProduct.getSalesProductId());
            if (salesProductVersion == null) {
                continue;
            }

            cartService.registerCartProduct(memberId, salesProductVersion, orderProduct.getCount());
        }

        return order(OrderRequestContext.builder()
                .usePoint(0)
                .useSystemCash(0)
                .useCouponIds(Collections.emptyList())
                .treatmentInsuranceApply(false)
                .build(), configure, orderProducts, salesProductVersions);
    }


    public OrderPurchasePayload orderDryRun(OrderProductContext request, OrderDryRunConfigure configure) {
        List<OrderProduct> orderProducts = request.getOrderProducts();

        long memberId = DiagnosticContext.fetchMemberId();

        List<SalesProductVersion> salesProductVersions = salesProductService.findLatestSalesProductVersionsBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesEventId)
                        .collect(Collectors.toSet()),
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()),
                Collections.singleton(YN.Y),
                Collections.singleton(YN.N));
        if (CollectionUtils.isEmpty(salesEventContainers)) {
            throw new OrderException(OrderCode.ORDER_INVALID);
        }

        orderService.validateOrderProducts(orderProducts, salesProductVersions);

        List<MemberCoupon> memberCoupons = couponService.fetchAllMemberCoupons(
                memberId, CouponStatus.AVAILABLE, List.of(CouponBenefitType.DISCOUNT, CouponBenefitType.PERCENT_DISCOUNT));

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(
                memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .map(Coupon::getId)
                        .collect(Collectors.toList()));

        List<Coupon> coupons = memberCoupons.stream()
                .map(MemberCoupon::getCoupon)
                .collect(Collectors.toList());

        int totalPoint = memberPointService.findTotalPointByMemberId(memberId);

        OrderPurchaseContext context = OrderPurchaseContext.builder()
                .orderContainer(Optional.empty())
                .salesEventContainers(salesEventContainers)
                .memberCoupons(memberCoupons)
                .coupons(coupons)
                .couponIssueConditions(couponIssueConditions)
                .totalPoint(totalPoint)
                .build();

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        OrderSheet orderSheet = orderService.createOrderSheet(OrderRequestContext.builder()
                .usePoint(0)
                .useSystemCash(0)
                .useCouponIds(Collections.emptyList())
                .treatmentInsuranceApply(false)
                .build(), orderProducts, salesEventContainers, salesProductVersions, hospitals);

        kr.co.yeoshin.backend.order.usecase.model.OrderPurchase orderPurchase = orderService.registerOrderDryRun(
                memberId, context, configure, orderSheet);

        return OrderPurchasePayload.builder()
                .orderPurchase(payloadFactory.orderPurchaseTemplate(orderPurchase))
                .orderProducts(payloadFactory.orderProductTemplatesByOrderSalesProducts(orderPurchase.getOrderSalesProducts()))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(context.getSalesEventContainers(), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSheet.getSheetItems().stream()
                                .map(OrderSheetItem::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .coupons(payloadFactory.couponTemplates(context.getCoupons(), context.getMemberCoupons()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(memberCoupons, couponIssueConditions))
                .build();
    }

    public OrderPurchasePayload order(OrderCartProductRequest request, OrderConfigure configure) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<OrderProduct> orderProducts = cartService.fetchCartProducts(memberId, request.getCartProductIds())
                .stream().map(x -> OrderProduct.builder()
                        .salesEventId(x.getSalesEvent().getId())
                        .salesProductId(x.getSalesProductVersion().getSalesProduct().getId())
                        .count(x.getCount())
                        .build())
                .collect(Collectors.toList());

        List<SalesProductVersion> salesProductVersions = salesProductService.findLatestSalesProductVersionsBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()));

        return order(OrderRequestContext.builder()
                .usePoint(request.getUsePoint())
                .useSystemCash(request.getUseSystemCash())
                .useCouponIds(request.getUseCouponIds())
                .treatmentInsuranceApply(false)
                .build(), configure, orderProducts, salesProductVersions);
    }

    public OrderPurchasePayload order(
            OrderRequestContext orderRequestContext,
            OrderConfigure configure,
            List<OrderProduct> orderProducts,
            List<SalesProductVersion> salesProductVersions) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (applicationProps.getOrder().getMaxCouponCount() < CollectionUtils.size(orderRequestContext.getUseCouponIds())) {
            throw new OrderException(CommonCode.ERROR);
        }

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesEventId)
                        .collect(Collectors.toSet()),
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()),
                Collections.singleton(YN.Y),
                Collections.singleton(YN.N));
        if (CollectionUtils.isEmpty(salesEventContainers)) {
            throw new OrderException(OrderCode.ORDER_INVALID);
        }

        orderService.validateOrderProducts(orderProducts, salesEventContainers, salesProductVersions);

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        OrderSheet orderSheet = orderService.createOrderSheet(orderRequestContext, orderProducts, salesEventContainers,
                salesProductVersions,
                hospitals);

        List<MemberCoupon> memberCoupons = couponService.fetchAllMemberCoupons(
                memberId, CouponStatus.AVAILABLE, List.of(CouponBenefitType.DISCOUNT, CouponBenefitType.PERCENT_DISCOUNT));

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(
                memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .map(Coupon::getId)
                        .collect(Collectors.toList()));

        List<Coupon> coupons = memberCoupons.stream()
                .map(MemberCoupon::getCoupon)
                .collect(Collectors.toList());

        int totalPoint = memberPointService.findTotalPointByMemberId(memberId);
        int totalSystemCash = systemCashService.findTotalCashByMemberId(memberId);

        OrderPurchaseContext orderPurchaseContext = OrderPurchaseContext.builder()
                .orderContainer(Optional.empty())
                .salesEventContainers(salesEventContainers)
                .memberCoupons(memberCoupons)
                .coupons(coupons)
                .couponIssueConditions(couponIssueConditions)
                .totalPoint(totalPoint)
                .totalSystemCash(totalSystemCash)
                .build();

        kr.co.yeoshin.backend.order.usecase.model.OrderPurchase orderPurchase = transactionTemplate.executeMainWritableTransaction(
                () -> orderService.registerOrder(memberId, orderPurchaseContext, configure, orderSheet));

        return OrderPurchasePayload.builder()
                .orderPurchase(payloadFactory.orderPurchaseTemplate(orderPurchase))
                .orderProducts(payloadFactory.orderProductTemplatesByOrderSalesProducts(orderPurchase.getOrderSalesProducts()))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(orderPurchaseContext.getSalesEventContainers(),
                        Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSheet.getSheetItems().stream()
                                .map(OrderSheetItem::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .coupons(payloadFactory.couponTemplates(orderPurchaseContext.getCoupons(),
                        orderPurchaseContext.getMemberCoupons()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(memberCoupons, couponIssueConditions))
                .build();
    }

    public OrderPurchasePayload orderDryRun(OrderCartProductDryRunRequest request, OrderDryRunConfigure configure) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<OrderProduct> orderProducts = cartService.fetchCartProducts(memberId, request.getCartProductIds())
                .stream().map(x -> OrderProduct.builder()
                        .salesEventId(x.getSalesEvent().getId())
                        .salesProductId(x.getSalesProductVersion().getSalesProduct().getId())
                        .count(x.getCount())
                        .build())
                .collect(Collectors.toList());

        List<SalesProductVersion> salesProductVersions = salesProductService.findLatestSalesProductVersionsBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderProducts.stream()
                        .map(OrderProduct::getSalesEventId)
                        .collect(Collectors.toSet()),
                orderProducts.stream()
                        .map(OrderProduct::getSalesProductId)
                        .collect(Collectors.toList()),
                Collections.singleton(YN.Y),
                Collections.singleton(YN.N));
        if (CollectionUtils.isEmpty(salesEventContainers)) {
            throw new OrderException(OrderCode.ORDER_INVALID);
        }

        orderService.validateOrderProducts(orderProducts, salesProductVersions);

        List<MemberCoupon> memberCoupons = couponService.fetchAllMemberCoupons(
                memberId, CouponStatus.AVAILABLE, List.of(CouponBenefitType.DISCOUNT, CouponBenefitType.PERCENT_DISCOUNT));

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(
                memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .map(Coupon::getId)
                        .collect(Collectors.toList()));

        List<Coupon> coupons = memberCoupons.stream()
                .map(MemberCoupon::getCoupon)
                .collect(Collectors.toList());

        int totalPoint = memberPointService.findTotalPointByMemberId(memberId);

        OrderPurchaseContext context = OrderPurchaseContext.builder()
                .orderContainer(Optional.empty())
                .salesEventContainers(salesEventContainers)
                .memberCoupons(memberCoupons)
                .coupons(coupons)
                .couponIssueConditions(couponIssueConditions)
                .totalPoint(totalPoint)
                .build();

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        OrderSheet orderSheet = orderService.createOrderSheet(OrderRequestContext.builder()
                .usePoint(0)
                .useSystemCash(0)
                .useCouponIds(Collections.emptyList())
                .treatmentInsuranceApply(false)
                .build(), orderProducts, salesEventContainers, salesProductVersions, hospitals);

        kr.co.yeoshin.backend.order.usecase.model.OrderPurchase orderPurchase = orderService.registerOrderDryRun(
                memberId, context, configure, orderSheet);

        return OrderPurchasePayload.builder()
                .orderPurchase(payloadFactory.orderPurchaseTemplate(orderPurchase))
                .orderProducts(payloadFactory.orderProductTemplatesByOrderSalesProducts(orderPurchase.getOrderSalesProducts()))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(context.getSalesEventContainers(), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSheet.getSheetItems().stream()
                                .map(OrderSheetItem::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .coupons(payloadFactory.couponTemplates(context.getCoupons(), context.getMemberCoupons()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(memberCoupons, couponIssueConditions))
                .build();
    }


    public OrderSheetConfigPayload orderConfig() {
        long memberId = DiagnosticContext.fetchMemberId();

        return orderService.findOrderSheetConfig(memberId)
                .map(x -> OrderSheetConfigPayload.builder()
                        .moneyReceiptIdentifierType(
                                x.getMoneyReceiptIdentifierType() == null
                                        ? MoneyReceiptIdentifier.NONE : x.getMoneyReceiptIdentifierType())
                        .moneyReceiptIdentifier(StringUtils.getIfBlank(x.getMoneyReceiptIdentifier(), () -> StringUtils.EMPTY))
                        .build())
                .orElseGet(OrderSheetConfigPayload::empty);
    }

    public OrderPurchasePayload findOrder(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();
        OrderPurchase order = orderService.findOrderByMemberIdAndOrderId(memberId, orderId);
        if (order.getOrderStatus() != OrderStatus.READY) {
            throw new OrderException(OrderCode.ORDER_NOT_EXIST,
                    MessageUtils.format("order({}) is not in ready status", orderId));
        }

        List<OrderContainer> orderContainers = orderService.fetchAllOrderContainers(Collections.singletonList(order.getId()));
        if (CollectionUtils.isEmpty(orderContainers)) {
            throw new OrderException(OrderCode.ORDER_INVALID);
        }

        List<MemberCoupon> memberCoupons = couponService.fetchMemberCouponsByIds(memberId,
                Optional.ofNullable(order.getPaymentCouponId())
                        .map(Collections::singletonList)
                        .orElse(Collections.emptyList()));

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(
                memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .map(Coupon::getId)
                        .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderContainers.stream()
                        .flatMap(x -> x.getSalesEventIds().stream())
                        .collect(Collectors.toSet()),
                orderContainers.stream()
                        .flatMap(x -> x.getSalesProductIds().stream())
                        .collect(Collectors.toSet()));

        int totalPoint = memberPointService.findTotalPointByMemberId(memberId);
        int totalSystemCash = systemCashService.findTotalCashByMemberId(memberId);

        OrderPurchaseContext context = OrderPurchaseContext.builder()
                .orderContainer(Optional.of(orderContainers.get(0)))
                .salesEventContainers(salesEventContainers)
                .memberCoupons(memberCoupons)
                .coupons(memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()))
                .couponIssueConditions(couponIssueConditions)
                .totalPoint(totalPoint)
                .totalSystemCash(totalSystemCash)
                .build();

        List<OrderSalesProductRelation> orderSalesProductRelations = orderContainers.stream()
                .flatMap(x -> x.getOrderSalesProductRelations().stream())
                .collect(Collectors.toList());

        return OrderPurchasePayload.builder()
                .orderPurchase(payloadFactory.orderPurchaseTemplate(
                        kr.co.yeoshin.backend.order.usecase.model.OrderPurchase.from(context)))
                .orderProducts(payloadFactory.orderProductTemplates(orderSalesProductRelations))
                .hospitals(payloadFactory.hospitalTemplates(orderContainers.stream()
                        .flatMap(x -> x.getHospitals().stream())
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(context.getSalesEventContainers(), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderContainers.stream()
                                .flatMap(x -> x.getSalesProductVersions().stream())
                                .collect(Collectors.toList())))
                .coupons(payloadFactory.couponTemplates(context.getCoupons(), context.getMemberCoupons()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(memberCoupons, couponIssueConditions))
                .build();
    }

    public OrderPurchasePayload modifyOrder(long orderId, OrderSheetRequest orderSheet) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (applicationProps.getOrder().getMaxCouponCount() < CollectionUtils.size(orderSheet.getUseCouponIds())) {
            throw new OrderException(CommonCode.ERROR);
        }

        OrderPurchase order = orderService.findOrderByMemberIdAndOrderId(memberId, orderId);
        if (order.getOrderStatus() != OrderStatus.READY) {
            throw new OrderException(OrderCode.ORDER_NOT_EXIST,
                    MessageUtils.format("order({}) is not in ready status", orderId));
        }

        List<OrderContainer> orderContainers = orderService.fetchAllOrderContainers(Collections.singletonList(order.getId()));
        if (CollectionUtils.isEmpty(orderContainers)) {
            throw new OrderException(OrderCode.ORDER_INVALID);
        }

        List<MemberCoupon> memberCoupons = couponService.fetchAllMemberCoupons(
                memberId, CouponStatus.AVAILABLE, List.of(CouponBenefitType.DISCOUNT, CouponBenefitType.PERCENT_DISCOUNT));

        List<CouponIssueCondition> couponIssueConditions = couponService.findCouponIssueConditionsByCouponIds(
                memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .map(Coupon::getId)
                        .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderContainers.stream()
                        .flatMap(x -> x.getSalesEventIds().stream())
                        .collect(Collectors.toSet()),
                orderContainers.stream()
                        .flatMap(x -> x.getSalesProductIds().stream())
                        .collect(Collectors.toSet()),
                Collections.singleton(YN.Y),
                Collections.singleton(YN.N));
        if (CollectionUtils.isEmpty(salesEventContainers)) {
            throw new OrderException(OrderCode.ORDER_INVALID);
        }

        int totalPoint = memberPointService.findTotalPointByMemberId(memberId);
        int totalSystemCash = systemCashService.findTotalCashByMemberId(memberId);

        OrderPurchaseContext context = OrderPurchaseContext.builder()
                .orderContainer(Optional.of(orderContainers.get(0)))
                .salesEventContainers(salesEventContainers)
                .memberCoupons(memberCoupons)
                .coupons(memberCoupons.stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()))
                .couponIssueConditions(couponIssueConditions)
                .totalPoint(totalPoint)
                .totalSystemCash(totalSystemCash)
                .build();

        kr.co.yeoshin.backend.order.usecase.model.OrderPurchase orderPurchase = transactionTemplate.executeMainWritableTransaction(
                () -> orderService.modifyOrder(
                        memberId,
                        context,
                        OrderRevisedSheet.builder()
                                .order(order)
                                .treatmentInsuranceApply(orderSheet.isTreatmentInsuranceApply())
                                .maxDiscountApply(orderSheet.isMaxDiscountApply())
                                .usePoint(orderSheet.getUsePoint())
                                .useSystemCash(orderSheet.getUseSystemCash())
                                .useCouponIds(orderSheet.getUseCouponIds())
                                .moneyReceiptIdentifierType(orderSheet.getMoneyReceiptIdentifierType())
                                .moneyReceiptIdentifier(orderSheet.getMoneyReceiptIdentifier())
                                .build()));

        List<OrderSalesProductRelation> orderSalesProductRelations = orderContainers.stream()
                .flatMap(x -> x.getOrderSalesProductRelations().stream())
                .collect(Collectors.toList());

        return OrderPurchasePayload.builder()
                .orderPurchase(payloadFactory.orderPurchaseTemplate(orderPurchase))
                .orderProducts(payloadFactory.orderProductTemplates(orderSalesProductRelations))
                .hospitals(payloadFactory.hospitalTemplates(orderContainers.stream()
                        .flatMap(x -> x.getHospitals().stream())
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(context.getSalesEventContainers(), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderContainers.stream()
                                .flatMap(x -> x.getSalesProductVersions().stream())
                                .collect(Collectors.toList())))
                .coupons(payloadFactory.couponTemplates(context.getCoupons(), context.getMemberCoupons()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(memberCoupons, couponIssueConditions))
                .build();
    }

    public OrderStatusPayload orderStatus(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        OrderPurchase order = orderService.findOrderByMemberIdAndOrderId(memberId, orderId);

        return OrderStatusPayload.builder()
                .status(order.getOrderStatus())
                .build();
    }

    public OrderCheckoutIamPortPayload checkoutIamPort(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        throwIfCheckoutIsProcessing(memberId, orderId, Order.Checkout.IAMPORT_PROCESSING_SECONDS);

        orderService.validateOrderableMemberStatus(memberId);

        return transactionTemplate.executeMainWritableTransaction(() -> {
            OrderPurchase order = orderService.findOrderByMemberIdAndOrderId(memberId, orderId);
            if (order.getOrderStatus() != OrderStatus.READY
                    || order.getSaleSystemCashPrice() > 0) {
                throw new OrderException(OrderCode.ORDER_NOT_EXIST,
                        MessageUtils.format("order({}) is not in ready status", orderId));
            }

            orderService.validateOrderableStatus(order);

            int usePoint = order.getSalePointPrice();
            if (usePoint > 0 && usePoint > memberPointService.findTotalPointByMemberId(memberId)) {
                log.error("order({}) invalid: member point insufficient.", orderId);
                throw new OrderException(OrderCode.ORDER_MILEAGE_EXPIRED);
            }

            order.changeStatus(OrderStatus.PAYMENT_READY);
            order.changePgType(PgType.IAMPORT);

            String merchantUid = IamPortUtils.createIamPortMerchantUid(order)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_SALES_PRODUCTS_NOT_EXIST));

            paymentService.registerPaymentIamport(order, merchantUid);

            return OrderCheckoutIamPortPayload.builder()
                    .status(OrderStatus.PAYMENT_READY)
                    .merchantUid(merchantUid)
                    .build();
        });
    }

    public OrderCheckoutIamPortPayload checkoutSystemEasy(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        throwIfCheckoutIsProcessing(memberId, orderId, Order.Checkout.SYSTEM_EASY_PROCESSING_SECONDS);

        Member member = memberService.findMember(memberId);

        orderService.validateOrderableMemberStatus(member);

        PaymentSystemEasyCheckout easyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(memberId)
                .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST));

        if (!easyCheckout.getSkipSecretYn().toBoolean()
                && !systemCheckoutService.verifiedSystemCheckoutSecret(memberId, CheckoutType.SYSTEM_EASY_CHECKOUT)) {
            throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_SECRET_NOT_VERIFIED);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            OrderPurchase order = orderService.fetchOrder(orderId);
            if (order.getOrdererId() != memberId
                    || order.getOrderStatus() != OrderStatus.READY
                    || order.getSaleSystemCashPrice() > 0) {
                throw new OrderException(OrderCode.ORDER_NOT_EXIST,
                        MessageUtils.format("order({}) is not in ready status", orderId));
            }

            orderService.validateOrderableStatus(order);

            orderService.completeOrder(order, PgType.IAMPORT);

            String merchantUid = IamPortUtils.createIamPortMerchantUid(order)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_SALES_PRODUCTS_NOT_EXIST));

            couponService.registerPaymentCoupons(member.getId(), order.getId(), order.getPaymentCouponIds());

            int usePoint = order.getSalePointPrice();
            if (usePoint > 0) {
                int extraHoldMinutes = OrderUtils.getMileageExtraHoldMinutes(order.getUpdated(), LocalDateTime.now());
                LocalDateTime extraHoldAt = LocalDateTime.now().plusMinutes(extraHoldMinutes);

                long totalPoint = memberPointService.findTotalPointByMemberId(memberId, extraHoldAt);
                if (usePoint > totalPoint) {
                    throw new OrderException(OrderCode.ORDER_CHECKOUT_ERROR);
                }
                memberPointService.registerPoint(
                        memberId, MemberPointMinusContext.builder()
                                .action(Action.USE_ORDER_SALES_EVENT_PRODUCT)
                                .publishType(PublishType.NONE)
                                .title(Action.USE_ORDER_SALES_EVENT_PRODUCT.getTitleKo())
                                .type(MemberPointType.USE)
                                .point(order.getSalePointPrice() * -1)
                                .extraHoldMinutes(extraHoldMinutes)
                                .refType(DomainType.ORDER)
                                .refId(order.getId())
                                .build());
            }

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderId(order.getId());
            for (OrderSalesProduct orderSalesProduct : orderSalesProducts) {
                if (!ticketService.createTicket(
                        memberId, order, orderSalesProduct, orderSalesProduct.getSalesProductVersion())) {
                    log.error("iamport order-system-checkout({}) orderSalesProduct({}) create ticket failed.",
                            orderId, orderSalesProduct);
                    throw new OrderException(CommonCode.ERROR);
                }

                cartService.takeCartProduct(
                        memberId, orderSalesProduct.getSalesProductVersion(), orderSalesProduct.getQuantity());
            }

            salesEventService.increaseSalesCount(orderSalesProducts);

            PaymentPayload paymentPayload = paymentService.pay(PayContext.builder()
                    .customerUniqueId(easyCheckout.getPaymentCard().getIamportCustomerUid())
                    .merchantUniqueId(merchantUid)
                    .amount(order.getPaymentAmount())
                    .productName(PaymentUtils.paymentSalesProductName(orderSalesProducts))
                    .ordererName(member.getName())
                    .ordererEmail(member.getEmail())
                    .ordererCellPhone(member.getCellPhone())
                    .build());
            if (paymentPayload.getStatus() != PaymentStatus.PAID) {
                log.error("iamport checkout-system failed. payload: {}", paymentPayload);

                throw new PaymentException(CommonCode.ERROR,
                        MessageUtils.format("iamport checkout-system fail status({})", paymentPayload.getStatus()),
                        paymentPayload.getFailReason());
            }

            memberService.modifyFirstOrderAt(memberId, Optional.of(LocalDateTime.now()));

            log.info("iamport billing payment payload : {}", paymentPayload);
            IamportPayMethod iamportPayMethod = IamportPayMethod.findByPayMethod(paymentPayload.getPayMethod());
            IssuerContext issuerContext = iamportPayMethod.issuerContext(paymentPayload);

            Payment payment = paymentService.registerPaymentIamport(order, IamportPaymentContext.builder()
                    .importUid(paymentPayload.getIamportUniqueId())
                    .cardName(issuerContext.getIssuerName())
                    .cardCode(issuerContext.getIssuerCode())
                    .issuerProperties(issuerContext.getIssuerProperties())
                    .amount(paymentPayload.getAmount())
                    .merchantUid(merchantUid)
                    .authCode(paymentPayload.getApplyNumber())
                    .merchantId(paymentPayload.getPgId())
                    .pgProvider(paymentPayload.getPgProvider())
                    .build());

            List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesEvent)
                    .map(x -> x.getHospital().getId())
                    .collect(Collectors.toSet()));

            messagePublisher.publishCpm(CpmMessageUtils.payment(memberId, orderSalesProducts.stream()
                    .map(x -> CpmPaymentContext.builder()
                            .salesEventId(x.getSalesEvent().getId())
                            .amount(x.getSalesProductVersion().getSalesPrice() * x.getQuantity())
                            .build())
                    .collect(Collectors.toList())));

            List<GmailNotificationContext> mailContexts = Collections.singletonList(
                    mailTemplateFactory.orderCompleteTemplate(
                            member, order, payment, hospitals, orderSalesProducts));
            List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = new ArrayList<>();
            alimTalkContexts.add(alimTalkTemplateFactory.orderComplete(
                    member, order, payment, hospitals, orderSalesProducts));
            if (order.getInsuranceAgreeYn().toBoolean()) {
                alimTalkContexts.add(alimTalkTemplateFactory.insuranceAgree(member, order, orderSalesProducts));
            }

            messagePublisher.publishNotification(NotificationMessageUtils.orderComplete(
                    mailContexts, alimTalkContexts));

            queueMessageDomainEventContext.addDomainEvent(DomainEventType.ORDER_CREATE, order.getId());

            return OrderCheckoutIamPortPayload.builder()
                    .status(OrderStatus.COMPLETE)
                    .merchantUid(merchantUid)
                    .build();
        });
    }


    public OrderCheckoutMileagePayload checkoutMileage(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        throwIfCheckoutIsProcessing(memberId, orderId, Order.Checkout.MILEAGE_PROCESSING_SECONDS);

        Member member = memberService.findMember(memberId);

        orderService.validateOrderableMemberStatus(member);

        return transactionTemplate.executeMainWritableTransaction(() -> {
            OrderPurchase order = orderService.fetchOrder(orderId);
            if (order.getOrdererId() != memberId
                    || order.getOrderStatus() != OrderStatus.READY
                    || order.getSaleSystemCashPrice() > 0) {
                throw new OrderException(OrderCode.ORDER_NOT_EXIST,
                        MessageUtils.format("order({}) is not in ready status", orderId));
            }

            if (order.getPaymentPrice() > 0) {
                throw new OrderException(OrderCode.ORDER_INVALID,
                        MessageUtils.format("order({}) has payment price({})", orderId, order.getPaymentPrice()));
            }

            orderService.completeOrder(order, PgType.SYSTEM);

            couponService.registerPaymentCoupons(member.getId(), order.getId(), order.getPaymentCouponIds());

            if (order.getSalePointPrice() > 0) {
                memberPointService.registerPoint(
                        memberId, MemberPointMinusContext.builder()
                                .action(Action.USE_ORDER_SALES_EVENT_PRODUCT)
                                .publishType(PublishType.NONE)
                                .title(Action.USE_ORDER_SALES_EVENT_PRODUCT.getTitleKo())
                                .type(MemberPointType.USE)
                                .point(order.getSalePointPrice() * -1)
                                .extraHoldMinutes(OrderUtils.getMileageExtraHoldMinutes(order.getUpdated(), LocalDateTime.now()))
                                .refType(DomainType.ORDER)
                                .refId(order.getId())
                                .build());
            }

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderId(order.getId());
            for (OrderSalesProduct orderSalesProduct : orderSalesProducts) {
                if (!ticketService.createTicket(
                        memberId, order, orderSalesProduct, orderSalesProduct.getSalesProductVersion())) {
                    log.error("order-mileage-checkout({}) orderSalesProduct({}) create ticket failed.",
                            orderId, orderSalesProduct);
                    throw new OrderException(CommonCode.ERROR);
                }

                cartService.takeCartProduct(
                        memberId, orderSalesProduct.getSalesProductVersion(), orderSalesProduct.getQuantity());
            }

            List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesEvent)
                    .map(x -> x.getHospital().getId())
                    .collect(Collectors.toSet()));

            salesEventService.increaseSalesCount(orderSalesProducts);

            Payment payment = PaymentSystem.builder()
                    .orderId(orderId)
                    .salesSystemCashPrice(order.getSaleSystemCashPrice())
                    .build();

            List<GmailNotificationContext> mailContexts = Collections.singletonList(
                    mailTemplateFactory.orderCompleteTemplate(
                            member, order, payment, hospitals, orderSalesProducts));

            List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = new ArrayList<>();
            alimTalkContexts.add(
                    alimTalkTemplateFactory.orderComplete(member, order, payment,
                            hospitals, orderSalesProducts));
            if (order.getInsuranceAgreeYn().toBoolean()) {
                alimTalkContexts.add(alimTalkTemplateFactory.insuranceAgree(
                        member, order, orderSalesProducts));
            }
            messagePublisher.publishNotification(NotificationMessageUtils.orderComplete(
                    mailContexts, alimTalkContexts));

            messagePublisher.publishCpm(CpmMessageUtils.payment(memberId, orderSalesProducts.stream()
                    .map(x -> CpmPaymentContext.builder()
                            .salesEventId(x.getSalesEvent().getId())
                            .amount(x.getSalesProductVersion().getSalesPrice() * x.getQuantity())
                            .build())
                    .collect(Collectors.toList())));

            queueMessageDomainEventContext.addDomainEvent(DomainEventType.ORDER_CREATE, order.getId());

            return OrderCheckoutMileagePayload.builder()
                    .status(OrderStatus.COMPLETE)
                    .build();
        });
    }

    public OrderCheckoutSystemCashPayload checkoutSystemCash(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        throwIfCheckoutIsProcessing(memberId, orderId, Order.Checkout.MILEAGE_PROCESSING_SECONDS);

        orderService.validateOrderableMemberStatus(memberId);

        PaymentSystemEasyCheckout easyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(memberId)
                .orElse(null);

        MemberServiceSummary memberServiceSummary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        if (!memberServiceSummary.getIdentificationYn().toBoolean()) {
            throw new OrderException(CommonCode.ERROR,
                    MessageUtils.format("order({}) can use system-cash after verify identification.", orderId));
        }
        Member member = memberServiceSummary.getMember();

        return transactionTemplate.executeMainWritableTransaction(() -> {
            OrderPurchase order = orderService.fetchOrder(orderId);
            if (order.getOrdererId() != memberId || order.getOrderStatus() != OrderStatus.READY) {
                throw new OrderException(OrderCode.ORDER_NOT_EXIST,
                        MessageUtils.format("order({}) is not in ready status", orderId));
            }

            if (order.getSaleSystemCashPrice() <= 0) {
                throw new OrderException(OrderCode.ORDER_INVALID,
                        MessageUtils.format("order({}) must have system cash price", orderId));
            }
            if (order.getPaymentPrice() > 0 && easyCheckout == null) {
                throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST);
            }

            if (order.getPaymentPrice() > 0
                    && !easyCheckout.getSkipSecretYn().toBoolean()
                    && !systemCheckoutService.verifiedSystemCheckoutSecret(memberId, CheckoutType.SYSTEM_EASY_CHECKOUT)) {
                throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_SECRET_NOT_VERIFIED);
            }

            orderService.completeOrder(order, order.getPaymentPrice() > 0 ? PgType.IAMPORT : PgType.SYSTEM);

            couponService.registerPaymentCoupons(member.getId(), order.getId(), order.getPaymentCouponIds());

            if (order.getSalePointPrice() > 0) {
                memberPointService.registerPoint(
                        memberId, MemberPointMinusContext.builder()
                                .action(Action.USE_ORDER_SALES_EVENT_PRODUCT)
                                .publishType(PublishType.NONE)
                                .title(Action.USE_ORDER_SALES_EVENT_PRODUCT.getTitleKo())
                                .type(MemberPointType.USE)
                                .point(order.getSalePointPrice() * -1)
                                .extraHoldMinutes(OrderUtils.getMileageExtraHoldMinutes(order.getUpdated(), LocalDateTime.now()))
                                .refType(DomainType.ORDER)
                                .refId(order.getId())
                                .build());
            }

            memberService.modifyFirstOrderAt(memberId, Optional.of(LocalDateTime.now()));

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByOrderId(order.getId());
            for (OrderSalesProduct orderSalesProduct : orderSalesProducts) {
                if (!ticketService.createTicket(
                        memberId, order, orderSalesProduct, orderSalesProduct.getSalesProductVersion())) {
                    log.error("order-mileage-checkout({}) orderSalesProduct({}) create ticket failed.",
                            orderId, orderSalesProduct);
                    throw new OrderException(CommonCode.ERROR);
                }

                cartService.takeCartProduct(
                        memberId, orderSalesProduct.getSalesProductVersion(), orderSalesProduct.getQuantity());
            }

            List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesEvent)
                    .map(x -> x.getHospital().getId())
                    .collect(Collectors.toSet()));

            salesEventService.increaseSalesCount(orderSalesProducts);

            queueMessageDomainEventContext.addDomainEvent(DomainEventType.ORDER_CREATE, order.getId());

            if (order.getSaleSystemCashPrice() > 0) {
                systemCashService.registerCash(
                        member.getId(), SystemCashMinusContext.builder()
                                .titleKo(SystemCashAction.USE_ORDER_SALES_EVENT_PRODUCT.getTitleKo())
                                .titleEn(SystemCashAction.USE_ORDER_SALES_EVENT_PRODUCT.getTitleEn())
                                .titleZh(SystemCashAction.USE_ORDER_SALES_EVENT_PRODUCT.getTitleZh())
                                .titleJa(SystemCashAction.USE_ORDER_SALES_EVENT_PRODUCT.getTitleJa())
                                .type(SystemCashStatus.USE)
                                .publishType(kr.co.yeoshin.common.payment.type.PublishType.SYSTEM)
                                .cash(order.getSaleSystemCashPrice() * -1)
                                .action(SystemCashAction.USE_ORDER_SALES_EVENT_PRODUCT)
                                .excludeTypes(Collections.emptyList())
                                .refType(DomainType.ORDER)
                                .refId(order.getId())
                                .build());
            }

            Supplier<Payment> paymentSupplier = () -> {
                if (order.getPaymentPrice() > 0) {
                    String merchantUid = IamPortUtils.createIamPortMerchantUid(order)
                            .orElseThrow(() -> new OrderException(OrderCode.ORDER_SALES_PRODUCTS_NOT_EXIST));

                    return paySystemCash(orderId, member, order, PayContext.builder()
                            .customerUniqueId(easyCheckout.getPaymentCard().getIamportCustomerUid())
                            .merchantUniqueId(merchantUid)
                            .amount(order.getPaymentAmount())
                            .productName(PaymentUtils.paymentSalesProductName(orderSalesProducts))
                            .ordererName(member.getName())
                            .ordererEmail(member.getEmail())
                            .ordererCellPhone(member.getCellPhone())
                            .build());
                } else {
                    return paySystemCash(orderId, member, order);
                }
            };
            Payment payment = paymentSupplier.get();

            List<GmailNotificationContext> mailContexts = Collections.singletonList(
                    mailTemplateFactory.orderCompleteTemplate(
                            member, order, payment, hospitals, orderSalesProducts));

            List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = new ArrayList<>();
            alimTalkContexts.add(
                    alimTalkTemplateFactory.orderComplete(member, order, payment,
                            hospitals, orderSalesProducts));
            if (order.getInsuranceAgreeYn().toBoolean()) {
                alimTalkContexts.add(alimTalkTemplateFactory.insuranceAgree(
                        member, order, orderSalesProducts));
            }

            messagePublisher.publishNotification(NotificationMessageUtils.orderComplete(
                    mailContexts, alimTalkContexts));

            messagePublisher.publishCpm(CpmMessageUtils.payment(memberId, orderSalesProducts.stream()
                    .map(x -> CpmPaymentContext.builder()
                            .salesEventId(x.getSalesEvent().getId())
                            .amount(x.getSalesProductVersion().getSalesPrice() * x.getQuantity())
                            .build())
                    .collect(Collectors.toList())));

            return OrderCheckoutSystemCashPayload.builder()
                    .status(OrderStatus.COMPLETE)
                    .build();
        });
    }

    private Payment paySystemCash(long orderId, Member member, OrderPurchase order) {
        return PaymentSystem.builder()
                .orderId(orderId)
                .salesSystemCashPrice(order.getSaleSystemCashPrice())
                .build();
    }

    private Payment paySystemCash(long orderId, Member member, OrderPurchase order, PayContext payContext) {
        PaymentPayload paymentPayload = paymentService.pay(payContext);
        if (paymentPayload.getStatus() != PaymentStatus.PAID) {
            log.error("iamport checkout-system-cash failed. payload: {}", paymentPayload);

            throw new PaymentException(CommonCode.ERROR,
                    MessageUtils.format("iamport checkout-system-cash fail status({})", paymentPayload.getStatus()),
                    paymentPayload.getFailReason());
        }

        log.info("iamport billing payment payload : {}", paymentPayload);

        IamportPayMethod iamportPayMethod = IamportPayMethod.findByPayMethod(paymentPayload.getPayMethod());
        IssuerContext issuerContext = iamportPayMethod.issuerContext(paymentPayload);

        return paymentService.registerPaymentIamport(order, IamportPaymentContext.builder()
                .importUid(paymentPayload.getIamportUniqueId())
                .cardName(issuerContext.getIssuerName())
                .cardCode(issuerContext.getIssuerCode())
                .issuerProperties(issuerContext.getIssuerProperties())
                .amount(paymentPayload.getAmount())
                .merchantUid(paymentPayload.getMerchantUniqueId())
                .authCode(paymentPayload.getApplyNumber())
                .merchantId(paymentPayload.getPgId())
                .pgProvider(paymentPayload.getPgProvider())
                .build());
    }


    public BoolPayload orderCancellable(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        OrderContainer orderContainer = orderService.fetchOrderContainer(orderId)
                .filter(x -> x.getOrder().getOrdererId() == memberId)
                .orElseThrow(() -> new OrderException(OrderCode.ORDER_NOT_EXIST));
        if (orderContainer.getOrder().getOrderStatus() != OrderStatus.COMPLETE) {
            throw new OrderException(OrderCode.ORDER_INVALID,
                    MessageUtils.format("order({}) is not in complete status", orderId));
        }

        orderService.validateOrderCancellable(orderContainer);

        boolean supportPreCancel = paymentService.supportPreCancel(orderContainer);

        OrderCancel orderCancel = orderService.cancelOrderDryRun(OrderCancelDryRunContext.builder()
                .memberId(memberId)
                .order(orderContainer.getOrder())
                .orderContainer(orderContainer)
                .supportPreCancel(supportPreCancel)
                .build());

        if (orderCancel.getStatus() == OrderStatus.CANCELING
                && CollectionUtils.isEmpty(systemCashService.findAllRefundAccounts(memberId))) {
            throw new OrderException(OrderCode.ORDER_CANCEL_REQUIRE_REFUND_ACCOUNT);
        }

        return BoolPayload.success();
    }

    public OrderReceiptCancelPayload orderCancelling(long orderId) {
        long memberId = DiagnosticContext.fetchMemberId();

        OrderContainer orderContainer = orderService.fetchOrderContainer(orderId)
                .filter(x -> x.getOrder().getOrdererId() == memberId)
                .orElseThrow(() -> new OrderException(OrderCode.ORDER_NOT_EXIST));
        if (orderContainer.getOrder().getOrderStatus() != OrderStatus.COMPLETE) {
            throw new OrderException(OrderCode.ORDER_INVALID,
                    MessageUtils.format("order({}) is not in complete status", orderId));
        }

        orderService.validateOrderCancellable(orderContainer);

        boolean supportPreCancel = paymentService.supportPreCancel(orderContainer);

        OrderCancel orderCancel = orderService.cancelOrderDryRun(OrderCancelDryRunContext.builder()
                .memberId(memberId)
                .order(orderContainer.getOrder())
                .orderContainer(orderContainer)
                .supportPreCancel(supportPreCancel)
                .build());

        if (orderCancel.getStatus() == OrderStatus.CANCELING
                && CollectionUtils.isEmpty(systemCashService.findAllRefundAccounts(memberId))) {
            throw new OrderException(OrderCode.ORDER_CANCEL_REQUIRE_REFUND_ACCOUNT);
        }

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderContainer.getSalesEventIds(),
                orderContainer.getSalesProductIds());

        OrderReceiptContext context = OrderReceiptContext.builder()
                .orderContainer(Optional.of(orderContainer))
                .salesEventContainers(salesEventContainers)
                .memberCoupons(orderCancel.getCancellableCoupons())
                .coupons(orderCancel.getCancellableCoupons()
                        .stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()))
                .build();

        OrderReceipt orderReceipt = orderService.createOrderReceipt(context);

        OrderPurchase order = orderContainer.getOrder();
        Optional<PaymentContext> payment = paymentService.findPaymentContextVisitor(order.getPgType())
                .flatMap(x -> x.findContext(order, paymentService));

        List<OrderSalesProductRelation> orderSalesProductRelations = orderContainer.getOrderSalesProductRelations();

        return OrderReceiptCancelPayload.builder()
                .orderReceipt(payloadFactory.orderReceiptTemplate(orderReceipt, orderSalesProductRelations, supportPreCancel))
                .orderCancel(payloadFactory.orderCancelTemplate(orderCancel))
                .orderPayment(payment.map(payloadFactory::orderPayment).orElse(null))
                .orderProducts(payloadFactory.orderProductTemplates(orderSalesProductRelations))
                .hospitals(payloadFactory.hospitalTemplates(orderSalesProductRelations.stream()
                        .map(OrderSalesProductRelation::getHospital)
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSalesProductRelations.stream()
                                .map(OrderSalesProductRelation::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .tickets(payloadFactory.ticketTemplates(orderSalesProductRelations))
                .coupons(payloadFactory.couponTemplates(orderCancel.getUsedCoupons().stream()
                        .map(MemberCoupon::getCoupon)
                        .collect(Collectors.toList()), orderCancel.getUsedCoupons()))
                .build();
    }

    public OrderReceiptCancelPayload orderCancel(long orderId, OrderCancelCardRequest cancelRequest) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = memberService.findMember(memberId);

        return transactionTemplate.executeMainWritableTransaction(() -> {

            OrderPurchase order = orderService.fetchOrderByMemberIdAndOrderId(memberId, orderId);
            if (order.getOrderStatus() != OrderStatus.COMPLETE) {
                throw new OrderException(OrderCode.ORDER_INVALID,
                        MessageUtils.format("order({}) is not in complete status", orderId));
            }

            OrderContainer orderContainer = orderService.fetchOrderContainer(orderId)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_NOT_EXIST));

            orderService.validateOrderCancellable(orderContainer);

            OrderCancelDelegator cancelDelegator = orderCancelDelegators.stream()
                    .filter(x -> x.type() == RefundMethod.CARD)
                    .findFirst()
                    .orElseThrow(() -> {
                        log.error("order cancel delegator(CARD) is not implemented");
                        throw new OrderException(CommonCode.ERROR);
                    });

            boolean supportPreCancel = paymentService.supportPreCancel(orderContainer);

            if (supportPreCancel) {
                if (OrderUtils.cancellable(order)) {
                    long totalOrderCompleteCount = orderService.countOrders(
                            memberId, List.of(OrderStatus.COMPLETE, OrderStatus.PART_CANCEL));

                    return cancelDelegator.cancel(
                            OrderPreCancelContext.builder()
                                    .member(member)
                                    .cancelCode(cancelRequest.getCode())
                                    .cancelVerbose(cancelRequest.getVerbose())
                                    .order(order)
                                    .orderContainer(orderContainer)
                                    .methodProperty(OrderCancelMethodProperty.builder()
                                            .card(OrderCancelCardProperty.builder().build())
                                            .build())
                                    .supportPreCancel(true)
                                    .totalOrderCompleteCount(totalOrderCompleteCount)
                                    .build());
                } else {
                    log.error("order({}) can not be cancelled in spite of supporing pre-cancel.", orderId);
                    throw new OrderException(CommonCode.ERROR);
                }
            } else {
                return cancelDelegator.cancel(OrderCancelingContext.builder()
                        .member(member)
                        .cancelCode(cancelRequest.getCode())
                        .cancelVerbose(cancelRequest.getVerbose())
                        .order(order)
                        .orderContainer(orderContainer)
                        .methodProperty(OrderCancelMethodProperty.builder()
                                .card(OrderCancelCardProperty.builder().build())
                                .build())
                        .supportPreCancel(false)
                        .build());
            }
        });
    }

    public OrderReceiptCancelPayload orderCancel(long orderId, OrderCancelBankAccountRequest cancelRequest) {
        long memberId = DiagnosticContext.fetchMemberId();

        verificationService.verified(new VerificationNiceIdentityContext(), VerificationType.ORDER_CANCEL, memberId);

        Member member = memberService.findMember(memberId);

        return transactionTemplate.executeMainWritableTransaction(() -> {
            OrderPurchase order = orderService.fetchOrderByMemberIdAndOrderId(memberId, orderId);
            if (order.getOrderStatus() != OrderStatus.COMPLETE) {
                throw new OrderException(OrderCode.ORDER_INVALID,
                        MessageUtils.format("order({}) is not in complete status", orderId));
            }

            OrderContainer orderContainer = orderService.fetchOrderContainer(orderId)
                    .orElseThrow(() -> new OrderException(OrderCode.ORDER_NOT_EXIST));

            orderService.validateOrderCancellable(orderContainer);

            OrderCancelDelegator cancelDelegator = orderCancelDelegators.stream()
                    .filter(x -> x.type() == RefundMethod.BANK_ACCOUNT)
                    .findFirst()
                    .orElseThrow(() -> {
                        log.error("order cancel delegator(BANK_ACCOUNT) is not implemented");
                        throw new OrderException(CommonCode.ERROR);
                    });

            boolean supportPreCancel = paymentService.supportPreCancel(orderContainer);
            if (supportPreCancel) {
                return cancelDelegator.cancel(
                        OrderPreCancelContext.builder()
                                .member(member)
                                .cancelCode(cancelRequest.getCode())
                                .cancelVerbose(cancelRequest.getVerbose())
                                .order(order)
                                .orderContainer(orderContainer)
                                .methodProperty(OrderCancelMethodProperty.builder()
                                        .bankAccount(OrderCancelBankAccountProperty.builder()
                                                .bank(cancelRequest.getBank())
                                                .accountHolder(cancelRequest.getAccountHolder())
                                                .account(cancelRequest.getAccount())
                                                .build())
                                        .build())
                                .supportPreCancel(true)
                                .build());
            } else {
                return cancelDelegator.cancel(OrderCancelingContext.builder()
                        .member(member)
                        .cancelCode(cancelRequest.getCode())
                        .cancelVerbose(cancelRequest.getVerbose())
                        .order(order)
                        .orderContainer(orderContainer)
                        .methodProperty(OrderCancelMethodProperty.builder()
                                .bankAccount(OrderCancelBankAccountProperty.builder()
                                        .bank(cancelRequest.getBank())
                                        .accountHolder(cancelRequest.getAccountHolder())
                                        .account(cancelRequest.getAccount())
                                        .build())
                                .build())
                        .supportPreCancel(false)
                        .build());
            }
        });
    }

    public IamportPaymentStatusPayload checkoutIamportStatus(long orderId) {
        PaymentIamport paymentIamport = paymentService.findPaymentIamport(orderId);

        PaymentPayload paymentPayload = paymentService.retrievePaymentHistoryByMerchantUniqueId(paymentIamport.getMerchantUid());

        return IamportPaymentStatusPayload.builder()
                .iamport(payloadFactory.iamportPaymentStatusTemplate(paymentPayload))
                .build();
    }

    private void throwIfCheckoutIsProcessing(long memberId, long orderId, int timeoutSecond) {
        if (cacheTemplate.increaseValue(new CacheKey(CacheType.Service.ORDER_CHECKOUT,
                        MessageUtils.format("{}.{}", memberId, orderId)),
                timeoutSecond,
                TimeUnit.SECONDS) > 1) {
            throw new OrderException(OrderCode.ORDER_DUPLICATED_CHECKOUT,
                    MessageUtils.format("member try to pay multiple. (order id: {} member id: {})",
                            orderId, memberId));
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/BanksPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.BankTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BanksPayload {

    private List<BankTemplate> banks;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/BannersPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.BannerTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BannersPayload {

    private List<BannerTemplate> banners;

    public static BannersPayload empty() {
        return BannersPayload.builder()
                .banners(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/BrowserTemplatesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.BrowserTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BrowserTemplatesPayload {

    private long browserCollectionId;
    private List<BrowserTemplate> templates;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/CartProductPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.CartProductTemplate;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.SalesEventTemplate;
import kr.co.yeoshin.backend.payload.template.SalesProductTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CartProductPayload {

    private CartProductTemplate cartProduct;
    private SalesEventTemplate salesEvent;
    private SalesProductTemplate salesProduct;
    private HospitalTemplate hospital;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/CartProductsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CartProductTemplate;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.SalesEventTemplate;
import kr.co.yeoshin.backend.payload.template.SalesProductTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CartProductsPayload {

    private List<CartProductTemplate> cartProducts;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;

    public static CartProductsPayload empty() {
        return CartProductsPayload.builder()
                .cartProducts(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ConsultationPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ConsultationPageablePayload {

    private List<SalesEventConsultationTemplate> salesEventConsultations;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<HospitalDoctorTemplate> hospitalDoctors;
    private List<HospitalMessengerTemplate> hospitalMessengers;
    private PageableTemplate pageable;

    public static ConsultationPageablePayload empty() {
        return ConsultationPageablePayload.builder()
                .salesEventConsultations(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalDoctors(Collections.emptyList())
                .hospitalMessengers(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ConsultationPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ConsultationPayload {

    private SalesEventConsultationTemplate salesEventConsultation;
    private SalesEventTemplate salesEvent;
    private List<SalesProductTemplate> salesProducts;
    private HospitalTemplate hospital;
    private List<HospitalDoctorTemplate> hospitalDoctors;
    private List<HospitalMessengerTemplate> hospitalMessengers;

    public static ConsultationPayload empty() {
        return ConsultationPayload.builder()
                .salesProducts(Collections.emptyList())
                .hospitalDoctors(Collections.emptyList())
                .hospitalMessengers(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ConsultationsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ConsultationsPayload {

    private List<SalesEventConsultationTemplate> salesEventConsultations;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<HospitalDoctorTemplate> hospitalDoctors;
    private List<HospitalMessengerTemplate> hospitalMessengers;

    public static ConsultationsPayload empty() {
        return ConsultationsPayload.builder()
                .salesEventConsultations(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalDoctors(Collections.emptyList())
                .hospitalMessengers(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/CouponPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.CouponTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponPayload {

    private CouponTemplate coupon;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/CouponsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CouponIssueConditionTemplate;
import kr.co.yeoshin.backend.payload.template.CouponTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponsPayload {

    private List<CouponTemplate> coupons;
    private List<CouponIssueConditionTemplate> couponIssueConditions;

    public static CouponsPayload empty() {
        return CouponsPayload.builder()
                .coupons(Collections.emptyList())
                .couponIssueConditions(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/DomainStatusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.DomainTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class DomainStatusPayload {

    private List<DomainTemplate> domains;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/DormantPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class DormantPayload {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime dormantAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime lastAccessAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/EventQuestionAndAnswerShortsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CardTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class EventQuestionAndAnswerShortsPayload {

    private long totalCount;
    private List<CardTemplate> qas;
    private long replyTimeInMinuteAverage;

    public static EventQuestionAndAnswerShortsPayload empty() {
        return EventQuestionAndAnswerShortsPayload.builder()
                .qas(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ExplorerRankingTreatmentsPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.TextIconTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerRankingTreatmentsPageablePayload {

    private List<TextIconTemplate> treatments;
    private PageableTemplate pageable;

    public static ExplorerRankingTreatmentsPageablePayload empty() {
        return ExplorerRankingTreatmentsPageablePayload.builder()
                .treatments(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ExplorerSearchableRadiusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.hospital.controller.model.type.DistanceUnitType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerSearchableRadiusPayload {

    private int nearestDistance;
    private int defaultDistance;
    private List<Integer> distances;
    private DistanceUnitType distanceUnit;

    public static ExplorerSearchableRadiusPayload empty() {
        return ExplorerSearchableRadiusPayload.builder()
                .distances(Collections.emptyList())
                .distanceUnit(DistanceUnitType.KM)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ExplorerSearchableRankingCategoriesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerSearchableRankingCategoriesPayload {

    private List<ExplorerSearchCategoryTemplate> categories;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/FaceAnalysisReportPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.FaceAnalysisReportTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FaceAnalysisReportPageablePayload {

    private List<FaceAnalysisReportTemplate> faceAnalysisReports;

    private PageableTemplate pageable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/FaceAnalysisReportPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.FaceAnalysisReportTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FaceAnalysisReportPayload {

    private FaceAnalysisReportTemplate faceAnalysisReport;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/FaceAnalysisSalesEventsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class FaceAnalysisSalesEventsPayload {

    private List<TextIconTemplate> treatments;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    @Builder.Default
    private List<SalesEventScrapTemplate> salesEventScraps = Collections.emptyList();
    @Builder.Default
    private List<SalesEventStatTemplate> salesEventStats = Collections.emptyList();
    @Builder.Default
    private List<SalesEventBadgeTemplate> salesEventBadges = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewShortTemplate> treatmentReviews = Collections.emptyList();

    public static FaceAnalysisSalesEventsPayload empty() {
        return FaceAnalysisSalesEventsPayload.builder()
                .treatments(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEventScraps(Collections.emptyList())
                .salesEventStats(Collections.emptyList())
                .salesEventBadges(Collections.emptyList())
                .treatmentReviews(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/FaceAnalysisStatusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.face.component.type.MessageStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FaceAnalysisStatusPayload {

    private long id;
    private MessageStatus status;
    private String token;
    private boolean retryable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/FaqsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.CardTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class FaqsPayload {

    private List<CardTemplate> faqs;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalAdditionAnesthesiaPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalAdditionAnesthesiaTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalAdditionAnesthesiaPayload {

    private List<HospitalAdditionAnesthesiaTemplate> anesthesia;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalDateSchedulesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalDateSchedulesPayload {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private List<ZonedDateTime> openedSchedules;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private List<ZonedDateTime> closedSchedules;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalDateTimeSchedulesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.payload.template.DateTimeRangeTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalDateTimeSchedulesPayload {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private List<DateTimeRangeTemplate> openedSchedules;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private List<DateTimeRangeTemplate> closedSchedules;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalDoctorPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalDoctorPayload {

    private HospitalDoctorTemplate hospitalDoctor;
    private List<CodeTemplate> hospitalDepartments;
    private List<CodeTemplate> hospitalTreatments;
    private List<HospitalTemplate> hospitals;
    private List<HospitalStatTemplate> hospitalStats;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalDoctorsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalDoctorTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalDoctorsPayload {

    private List<HospitalDoctorTemplate> hospitalDoctors;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalImagesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.ImageTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalImagesPayload {

    private ImageTemplate hospitalLogoImage;
    private ImageTemplate hospitalThumbnailImage;
    private ImageTemplate hospitalPremiumThumbnailImage;
    private List<ImageTemplate> hospitalImages;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalPageablePayload {

    private List<HospitalTemplate> hospitals;
    @Builder.Default
    private List<HospitalScrapTemplate> hospitalScraps = Collections.emptyList();
    @Builder.Default
    private List<HospitalStatTemplate> hospitalStats = Collections.emptyList();
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    private PageableTemplate pageable;

    public static HospitalPageablePayload empty() {
        return HospitalPageablePayload.builder()
                .hospitals(Collections.emptyList())
                .hospitalScraps(Collections.emptyList())
                .hospitalStats(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalPayload {

    private List<PlaceTemplate> places;
    private boolean premium;
    private CpmAdStatus cpmStatus;
    private HospitalTemplate hospital;
    private HospitalScrapTemplate hospitalScrap;
    private HospitalStatTemplate hospitalStat;
    private HospitalOnboardTemplate hospitalOnboard;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<ImageTemplate> hospitalImages;
    private HospitalOperationTimeTemplate hospitalOperationTime;
    private List<HospitalDoctorTemplate> hospitalDoctors;
    private List<PropertyTemplate> hospitalAdditionProperties;
    private List<TextIconTemplate> treatmentPrinciples;
    private List<CodeTemplate> hospitalDepartments;
    private List<CodeTemplate> hospitalTreatments;
    private HospitalPartnershipTemplate hospitalPartnership;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalReservationConfigPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.common.model.api.template.ReservationHospitalConfigTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalReservationConfigPayload {

    private ReservationHospitalConfigTemplate reservationHospitalConfig;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalShortPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalBadgeTemplate;
import kr.co.yeoshin.backend.payload.template.HospitalStatTemplate;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.PlaceTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalShortPayload {

    private PlaceTemplate place;
    private HospitalTemplate hospital;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private HospitalStatTemplate hospitalStat;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalShortsPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalShortsPageablePayload {

    private List<PlaceTemplate> places;
    private List<HospitalTemplate> hospitals;
    @Builder.Default
    private List<HospitalScrapTemplate> hospitalScraps = Collections.emptyList();
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    @Builder.Default
    private List<HospitalStatTemplate> hospitalStats = Collections.emptyList();
    private PageableTemplate pageable;

    public static HospitalShortsPageablePayload empty() {
        return HospitalShortsPageablePayload.builder()
                .places(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalScraps(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .hospitalStats(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalShortsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalBadgeTemplate;
import kr.co.yeoshin.backend.payload.template.HospitalStatTemplate;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.PlaceTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalShortsPayload {

    private List<PlaceTemplate> places;
    private List<HospitalTemplate> hospitals;
    private List<HospitalStatTemplate> hospitalStats;
    private List<HospitalBadgeTemplate> hospitalBadges;

    public static HospitalShortsPayload empty() {
        return HospitalShortsPayload.builder()
                .places(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalStats(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalTreatmentGuidesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalTreatmentGuideTemplate;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalTreatmentGuidesPayload {

    private boolean mobileReservable;
    private List<TextTemplate> treatments;
    @Deprecated
    private List<HospitalTreatmentGuideTemplate> hospitalTreatments;
    private List<HospitalTreatmentGuideTemplate> hospitalTreatmentGuides;

    public static HospitalTreatmentGuidesPayload empty() {
        return HospitalTreatmentGuidesPayload.builder()
                .mobileReservable(false)
                .treatments(Collections.emptyList())
                .hospitalTreatments(Collections.emptyList())
                .hospitalTreatmentGuides(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/HospitalTvsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.TvScrapTemplate;
import kr.co.yeoshin.backend.payload.template.TvStatTemplate;
import kr.co.yeoshin.backend.payload.template.TvTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalTvsPayload {

    private HospitalTemplate hospital;
    private List<TvTemplate> tvs;
    private List<TvStatTemplate> tvStats;
    private List<TvScrapTemplate> tvScraps;

    public static HospitalTvsPayload empty() {
        return HospitalTvsPayload.builder()
                .tvs(Collections.emptyList())
                .tvStats(Collections.emptyList())
                .tvScraps(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/IamportPaymentStatusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.IamportPaymentStatusTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class IamportPaymentStatusPayload {

    private IamportPaymentStatusTemplate iamport;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/InitializationPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.AppConfigTemplate;
import kr.co.yeoshin.backend.payload.template.AppVersionTemplate;
import kr.co.yeoshin.backend.payload.template.CardTemplate;
import kr.co.yeoshin.backend.payload.template.SplashTemplate;
import lombok.Builder;
import lombok.Getter;
import lombok.ToString;

@Getter
@Builder
@ToString
public class InitializationPayload {

    private boolean appLoad;
    private SplashTemplate splash;
    private AppVersionTemplate appVersion;
    private AppConfigTemplate appConfig;
    private List<CardTemplate> notices;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/InsuranceTreatmentPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class InsuranceTreatmentPayload {

    private List<TicketTemplate> tickets;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<CodeTemplate> sideEffects;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/InterestingPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CodeTemplate;
import kr.co.yeoshin.backend.payload.template.PlaceTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class InterestingPayload {

    private boolean registered;

    @Builder.Default
    private List<PlaceTemplate> places = Collections.emptyList();
    @Builder.Default
    private List<CodeTemplate> skins = Collections.emptyList();
    @Builder.Default
    private List<CodeTemplate> troubles = Collections.emptyList();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/InterestingPropertyPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PropertyTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class InterestingPropertyPayload {

    private List<PropertyTemplate> placeProperties;
    private List<PropertyTemplate> skinProperties;
    @Deprecated
    private List<PropertyTemplate> troubleProperties;

    private List<PropertyTemplate> troubleCategoryProperties;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MapHospitalClusterPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.MapClusterTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MapHospitalClusterPayload<T> {

    private int level;
    private int clusterCount;
    private List<MapClusterTemplate<T>> clusters;

    public static <T> MapHospitalClusterPayload<T> empty(int level) {
        return MapHospitalClusterPayload.<T>builder()
                .level(level)
                .clusters(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MapPlacesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.MapPlaceTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MapPlacesPayload {

    private List<MapPlaceTemplate> places;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MapSearchableHospitalClusterPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MapSearchableHospitalClusterPayload {

    private int level;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MediaEndpointPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.media.component.provider.model.MediaEndpoint;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaEndpointPayload {
    private long id;
    private MediaEndpoint endpoint;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MediaImageUploadPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.media.component.provider.model.MediaEndpoint;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaImageUploadPayload {

    private long id;
    private long size;
    private String image;
    private MediaEndpoint endpoint;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MediaJobStatusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.media.component.transcoder.JobStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaJobStatusPayload {

    private long id;
    private String jobId;
    private JobStatus status;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MediaJobTaskPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaJobTaskPayload {

    private long id;
    private long size;
    private String jobId;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MediaSignaturesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.media.component.cdn.CdnSignature;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MediaSignaturesPayload {

    private CdnSignature signatures;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberAccountPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.MemberAccountTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberAccountPayload {

    private final MemberAccountTemplate account;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberAccountsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.MemberAccountTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberAccountsPayload {

    private final List<MemberAccountTemplate> accounts;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberLevelPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.LevelTemplate;
import kr.co.yeoshin.backend.payload.template.MemberLevelTemplate;
import kr.co.yeoshin.backend.payload.template.MemberServiceStatTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelPayload {

    private MemberLevelTemplate memberLevel;
    private MemberServiceStatTemplate serviceStat;
    private MemberLevelTemplate expectMemberLevel;
    private MemberServiceStatTemplate expectServiceStat;
    private List<LevelTemplate> levels;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberLevelStatPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.MemberServiceStatTicketLogTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.SalesEventTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelStatPayload {

    private List<MemberServiceStatTicketLogTemplate> serviceStatLogs;
    private List<SalesEventTemplate> salesEvents;
    private PageableTemplate pageable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberReportPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.MemberProfileTemplate;
import kr.co.yeoshin.backend.payload.template.MemberReportTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberReportPageablePayload {

    private List<MemberReportTemplate> memberReports;
    private List<MemberProfileTemplate> memberProfiles;
    private PageableTemplate pageable;

    public static MemberReportPageablePayload empty() {
        return MemberReportPageablePayload.builder()
                .memberReports(Collections.emptyList())
                .memberProfiles(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberServiceStatPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.MemberServiceStatTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberServiceStatPayload {

    private MemberServiceStatTemplate serviceStat;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MemberServiceSummaryPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.MemberTemplate;
import kr.co.yeoshin.backend.payload.template.MemberServiceSummaryTemplate;
import kr.co.yeoshin.backend.payload.template.MemberSkinTypeTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberServiceSummaryPayload {

    private MemberTemplate member;
    private MemberSkinTypeTemplate memberSkinType;
    private MemberServiceSummaryTemplate serviceSummary;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/MetaPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MetaPayload {

    private List<TextIconTemplate> solutionTags;
    private List<TextIconTemplate> treatments;
    private List<TroubleCategoryTemplate> troubleCategories;
    private List<HospitalSubjectTemplate> hospitalSubjects;
    private TreatmentReviewRewardTemplate treatmentReviewReward;
    private QuestRewardTemplate questReward;
    private List<LevelTemplate> levels;

    public static MetaPayload empty() {
        return MetaPayload.builder()
                .solutionTags(Collections.emptyList())
                .treatments(Collections.emptyList())
                .troubleCategories(Collections.emptyList())
                .hospitalSubjects(Collections.emptyList())
                .treatmentReviewReward(TreatmentReviewRewardTemplate.empty())
                .questReward(QuestRewardTemplate.empty())
                .levels(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/NotificationConfigsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.CodeTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class NotificationConfigsPayload {

    private List<CodeTemplate> configs;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/NotificationPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.NotificationTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class NotificationPayload {

    private NotificationTemplate notification;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/NotificationsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.NotificationTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class NotificationsPayload {

    private List<NotificationTemplate> notifications;
    private PageableTemplate pageable;

    public static NotificationsPayload empty() {
        return NotificationsPayload.builder()
                .notifications(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OAuthRegistrationPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OAuthRegistrationPayload {

    private String clientSecret;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OrderPurchasePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderPurchasePayload {

    private OrderPurchaseTemplate orderPurchase;
    private List<OrderProductTemplate> orderProducts;
    private List<SalesProductTemplate> salesProducts;
    private List<SalesEventTemplate> salesEvents;
    private List<HospitalTemplate> hospitals;
    private List<CouponTemplate> coupons;
    private List<CouponIssueConditionTemplate> couponIssueConditions;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OrderReceiptCancelPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderReceiptCancelPayload {

    private OrderReceiptTemplate orderReceipt;
    private OrderCancelTemplate orderCancel;
    private OrderPaymentTemplate orderPayment;
    private List<OrderProductTemplate> orderProducts;
    private List<SalesProductTemplate> salesProducts;
    private List<SalesEventTemplate> salesEvents;
    private List<HospitalTemplate> hospitals;
    private List<TicketTemplate> tickets;
    private List<CouponTemplate> coupons;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OrderReceiptPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderReceiptPayload {

    private OrderReceiptTemplate orderReceipt;
    private OrderCancelTemplate orderCancel;
    private OrderPaymentTemplate orderPayment;
    private List<OrderProductTemplate> orderProducts;
    private List<SalesProductTemplate> salesProducts;
    private List<SalesEventTemplate> salesEvents;
    private List<HospitalTemplate> hospitals;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<TicketTemplate> tickets;
    private List<CouponTemplate> coupons;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OrderReceiptsPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderReceiptsPageablePayload {

    private List<OrderReceiptTemplate> orderReceipts;
    private List<OrderProductTemplate> orderProducts;
    private List<SalesProductTemplate> salesProducts;
    private List<SalesEventTemplate> salesEvents;
    private List<HospitalTemplate> hospitals;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<TicketTemplate> tickets;
    private List<CouponTemplate> coupons;
    private PageableTemplate pageable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OrderSheetConfigPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.common.payment.type.MoneyReceiptIdentifier;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class OrderSheetConfigPayload {

    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifier;

    public static OrderSheetConfigPayload empty() {
        return OrderSheetConfigPayload.builder()
                .moneyReceiptIdentifierType(MoneyReceiptIdentifier.NONE)
                .moneyReceiptIdentifier(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/OrderStatusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.common.payment.type.OrderStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderStatusPayload {

    private OrderStatus status;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PaymentCardPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.PaymentCardTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PaymentCardPayload {

    private PaymentCardTemplate paymentCard;

    public static PaymentCardPayload empty() {
        return PaymentCardPayload.builder()
                .paymentCard(PaymentCardTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PaymentCardSecretPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.ArrayList;
import java.util.List;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PaymentCardSecretPayload {

    private boolean result;
    @Builder.Default
    private List<DomainType> issues = new ArrayList<>();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PlacePropertiesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PropertyTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PlacePropertiesPayload {

    private List<PropertyTemplate> placeProperties;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PlacesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PlaceTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PlacesPayload {

    private List<PlaceTemplate> places;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PointCompositionPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PointCompositionPageablePayload {

    private List<PointCompositionTemplate> pointCompositions;
    private List<TicketTemplate> tickets;
    private List<MemberLevelRewardTemplate> memberLevelRewards;
    private PageableTemplate pageable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PointPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.PointTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PointPageablePayload {

    private List<PointTemplate> points;
    private PageableTemplate pageable;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PointPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PointPayload {

    private int point;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PointsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PointTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PointsPayload {

    private List<PointTemplate> points;

    public static PointsPayload empty() {
        return PointsPayload.builder()
                .points(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PopupsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PopupTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PopupsPayload {

    private List<PopupTemplate> popups;

    public static PopupsPayload empty() {
        return PopupsPayload.builder()
                .popups(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PreliminaryQuestionnairesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PreliminaryQuestionnairesPayload {

    private TextTemplate interestedTreatment;
    private TextTemplate recentTreatment;

    public static PreliminaryQuestionnairesPayload empty() {
        return PreliminaryQuestionnairesPayload.builder()
                .interestedTreatment(TextTemplate.empty())
                .recentTreatment(TextTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ProfilePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.MemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ProfilePayload {

    private MemberTemplate member;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionApplyPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PromotionRewardTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionApplyPayload {

    private List<PromotionRewardTemplate> promotionRewards;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionApplyableRewardGroupPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PromotionRewardGroupTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionApplyableRewardGroupPayload {

    private PromotionTemplate promotion;
    private List<PromotionRewardGroupTemplate> applyablePromotionRewardGroups;
    private List<PromotionRewardGroupTemplate> conditioinalPromotionRewardGroups;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionParticipationsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionParticipationTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionParticipationsPayload {

    private PromotionTemplate promotion;
    private List<PromotionParticipationTemplate> promotionParticipations;
    private PageableTemplate pageable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionPayload {

    private PromotionTemplate promotion;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionReplyPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionReplyTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyPageablePayload {

    private List<PromotionReplyTemplate> promotionReplies;
    private List<PromotionTemplate> promotions;
    private PageableTemplate pageable;


    public static PromotionReplyPageablePayload empty() {
        return PromotionReplyPageablePayload.builder()
                .promotionReplies(Collections.emptyList())
                .promotions(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionReplyPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PromotionReplyTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionRewardTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyPayload {

    private PromotionTemplate promotion;
    private PromotionReplyTemplate promotionReply;
    private List<PromotionRewardTemplate> promotionRewards;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionReplyableRewardGroupPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.PromotionRewardGroupTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyableRewardGroupPayload {

    private PromotionTemplate promotion;
    private List<PromotionRewardGroupTemplate> replyablePromotionRewardGroups;
    private List<PromotionRewardGroupTemplate> conditioinalPromotionRewardGroups;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionRewardPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionRewardPayload {

    private PromotionTemplate promotion;
    private List<PromotionRewardGroupTemplate> promotionRewardGroups;
    private List<PromotionRewardTemplate> promotionRewards;
    private List<CouponTemplate> couponRewards;
    private List<PointTemplate> pointRewards;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/PromotionsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionsPayload {

    private List<PromotionTemplate> promotions;
    private PageableTemplate pageable;

    public static PromotionsPayload empty() {
        return PromotionsPayload.builder()
                .promotions(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/QuestAttendancePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.QuestAttendanceTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestAttendancePayload {

    private QuestAttendanceTemplate attendance;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/QuestAttendancesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.QuestAttendanceTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestAttendancesPayload {

    private List<QuestAttendanceTemplate> attendances;

    public static QuestAttendancesPayload empty() {
        return QuestAttendancesPayload.builder()
                .attendances(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/QuestKingOfInvitationPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.QuestKingOfInvitationRankTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestKingOfInvitationPayload {

    private List<QuestKingOfInvitationRankTemplate> ranks;

    private QuestKingOfInvitationRankTemplate myRank;

    private ZonedDateTime aggregatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/QuestsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.QuestTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestsPayload {

    private List<QuestTemplate> quests;

    public static QuestsPayload empty() {
        return QuestsPayload.builder()
                .quests(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/RecommendBySolutionTagsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class RecommendBySolutionTagsPayload {

    private TextTemplate trouble;
    private List<TextIconTemplate> solutionTags;
    private List<RecommendBySolutionTagTemplate> recommends;
    private List<SalesEventScrapTemplate> salesEventScraps;
    private List<SalesEventStatTemplate> salesEventStats;
    private List<SalesEventBadgeTemplate> salesEventBadges;
    private List<TreatmentReviewShortTemplate> treatmentReviews;
    private List<HospitalTemplate> hospitals;
    private List<HospitalBadgeTemplate> hospitalBadges;

    @Builder.Default
    private Map<String, Object> contexts = Collections.emptyMap();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/RecommendThemesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.ThemeShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class RecommendThemesPayload {

    private List<ThemeShortTemplate> themes;

    public static RecommendThemesPayload empty() {
        return RecommendThemesPayload.builder()
                .themes(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/RecommendTreatmentCounselingsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CardTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class RecommendTreatmentCounselingsPayload {

    private CardTemplate treatmentCounseling;
    private List<CardTemplate> qas;

    public static RecommendTreatmentCounselingsPayload empty() {
        return RecommendTreatmentCounselingsPayload.builder()
                .qas(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/RecommendTreatmentReviewsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class RecommendTreatmentReviewsPayload {

    private long troubleSearchableId;
    private List<TreatmentReviewTemplate> treatmentReviews;
    @Builder.Default
    private List<TreatmentReviewStatTemplate> treatmentReviewStats = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewScrapTemplate> treatmentReviewScraps = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewLikeTemplate> treatmentReviewLikes = Collections.emptyList();
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<MemberProfileTemplate> memberProfiles;
    @Builder.Default
    private List<TreatmentReviewAttributeTemplate> treatmentReviewAttributes = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComments = Collections.emptyList();

    public static RecommendTreatmentReviewsPayload empty() {
        return RecommendTreatmentReviewsPayload.builder()
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewStats(Collections.emptyList())
                .treatmentReviewScraps(Collections.emptyList())
                .treatmentReviewLikes(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewHospitalComments(Collections.emptyList())
                .treatmentReviewAttributes(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ReservationPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.ReservationHospitalConfigTemplate;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationPageablePayload {

    private List<ReservationShortTemplate> reservations;
    private List<TicketTemplate> tickets;
    private List<HospitalTemplate> hospitals;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    @Builder.Default
    private List<TreatmentReviewsWritableTemplate> treatmentReviewsWritables = Collections.emptyList();
    @Builder.Default
    private List<ReservationHospitalConfigTemplate> reservationHospitalConfigs = Collections.emptyList();
    private PageableTemplate pageable;

    public static ReservationPageablePayload empty() {
        return ReservationPageablePayload.builder()
                .reservations(Collections.emptyList())
                .tickets(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .treatmentReviewsWritables(Collections.emptyList())
                .reservationHospitalConfigs(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ReservationPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationPayload {

    private ReservationTemplate reservation;
    private List<TicketTemplate> tickets;
    private HospitalTemplate hospital;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    @Builder.Default
    private List<TreatmentReviewsWritableTemplate> treatmentReviewsWritables = Collections.emptyList();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ReservationsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationsPayload {

    private List<ReservationShortTemplate> reservations;
    private List<TicketTemplate> tickets;
    private List<HospitalTemplate> hospitals;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    @Builder.Default
    private List<TreatmentReviewsWritableTemplate> treatmentReviewsWritables = Collections.emptyList();

    public static ReservationsPayload empty() {
        return ReservationsPayload.builder()
                .reservations(Collections.emptyList())
                .tickets(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .treatmentReviewsWritables(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventPageablePayload {

    @Builder.Default
    private List<SalesEventTemplate> salesEvents = Collections.emptyList();
    @Builder.Default
    private List<SalesProductTemplate> salesProducts = Collections.emptyList();
    @Builder.Default
    private List<HospitalTemplate> hospitals = Collections.emptyList();
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    @Builder.Default
    private List<SalesEventScrapTemplate> salesEventScraps = Collections.emptyList();
    @Builder.Default
    private List<SalesEventStatTemplate> salesEventStats = Collections.emptyList();
    @Builder.Default
    private List<SalesEventBadgeTemplate> salesEventBadges = Collections.emptyList();
    private SalesEventSearchFallbackTemplate fallback;
    @Builder.Default
    private PageableTemplate pageable = PageableTemplate.empty();
    @Builder.Default
    private Map<String, Object> contexts = Collections.emptyMap();

    public static SalesEventPageablePayload empty() {
        return SalesEventPageablePayload.builder()
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .salesEventScraps(Collections.emptyList())
                .salesEventStats(Collections.emptyList())
                .salesEventBadges(Collections.emptyList())
                .fallback(null)
                .pageable(PageableTemplate.empty())
                .contexts(Collections.emptyMap())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.SalesEventTemplate;
import kr.co.yeoshin.backend.payload.template.SalesProductTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventPayload {

    private SalesEventTemplate salesEvent;
    private List<SalesProductTemplate> salesProducts;
    private HospitalTemplate hospital;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventQuestionAndAnswerPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventQuestionAndAnswerPageablePayload {

    private List<QuestionTemplate> questions;
    private List<QuestionReplyTemplate> replies;
    private List<HospitalTemplate> hospitals;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<ContentConcealTemplate> contentConceals;
    private List<MemberSkinTypeTemplate> memberSkinTypes;
    private PageableTemplate pageable;

    public static SalesEventQuestionAndAnswerPageablePayload empty() {
        return SalesEventQuestionAndAnswerPageablePayload.builder()
                .questions(Collections.emptyList())
                .replies(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .contentConceals(Collections.emptyList())
                .memberSkinTypes(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventSearchablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CodeTemplate;
import kr.co.yeoshin.backend.payload.template.PropertyTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventSearchablePayload {

    private List<PropertyTemplate> hospitalAdditionProperties;
    private List<CodeTemplate> troubleBodyParts;
    private List<CodeTemplate> troubles;

    public static SalesEventSearchablePayload empty() {
        return SalesEventSearchablePayload.builder()
                .hospitalAdditionProperties(Collections.emptyList())
                .troubleBodyParts(Collections.emptyList())
                .troubles(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventUsagePageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventUsagePageablePayload {

    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private HospitalTemplate hospital;
    private HospitalStatTemplate hospitalStat;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<SalesEventScrapTemplate> salesEventScraps;
    private List<SalesEventStatTemplate> salesEventStats;
    private List<SalesEventBadgeTemplate> salesEventBadges;
    private List<SalesEventUsageTemplate> salesEventUsages;
    private PageableTemplate pageable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventViewPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventViewPayload {

    private boolean end;
    private boolean orderable;
    private boolean consultable;
    private List<TextTemplate> treatments;
    private List<TextIconTemplate> solutionTags;
    private SalesEventTemplate salesEvent;
    private List<ImageTemplate> salesEventImages;
    private List<ImageTemplate> hospitalImages;
    private SalesEventStatTemplate salesEventStat;
    private SalesEventBadgeTemplate salesEventBadge;
    private SalesEventScrapTemplate salesEventScrap;
    private List<SalesProductTemplate> salesProducts;
    private List<SalesEventUsageTemplate> salesEventUsages;
    private SalesEventLibraryTemplate salesEventLibrary;
    private HospitalTemplate hospital;
    private List<HospitalDoctorTemplate> hospitalDoctors;
    private HospitalOperationTimeTemplate hospitalOperationTime;
    private HospitalBadgeTemplate hospitalBadge;
    private List<CodeTemplate> hospitalConfigs;
    private List<PropertyTemplate> hospitalAdditionProperties;
    private List<TvTemplate> tvs;
    private HospitalPartnershipTemplate hospitalPartnership;

    private List<CouponTemplate> coupons;
    private List<CouponIssueConditionTemplate> couponIssueConditions;

    @Builder.Default
    private Map<String, Object> contexts = Collections.emptyMap();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventsPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventsPageablePayload {

    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    @Builder.Default
    private List<SalesEventScrapTemplate> salesEventScraps = Collections.emptyList();
    @Builder.Default
    private List<SalesEventStatTemplate> salesEventStats = Collections.emptyList();
    @Builder.Default
    private List<SalesEventBadgeTemplate> salesEventBadges = Collections.emptyList();

    private PageableTemplate pageable;

    public static SalesEventsPageablePayload empty() {
        return SalesEventsPageablePayload.builder()
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEventScraps(Collections.emptyList())
                .salesEventStats(Collections.emptyList())
                .salesEventBadges(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventsPayload {

    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    @Builder.Default
    private List<SalesEventScrapTemplate> salesEventScraps = Collections.emptyList();
    @Builder.Default
    private List<SalesEventStatTemplate> salesEventStats = Collections.emptyList();
    @Builder.Default
    private List<HospitalStatTemplate> hospitalStats = Collections.emptyList();
    @Builder.Default
    private List<SalesEventBadgeTemplate> salesEventBadges = Collections.emptyList();
    @Builder.Default
    private Map<String, Object> contexts = Collections.emptyMap();

    public static SalesEventsPayload empty() {
        return SalesEventsPayload.builder()
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEventScraps(Collections.emptyList())
                .salesEventStats(Collections.emptyList())
                .hospitalStats(Collections.emptyList())
                .salesEventBadges(Collections.emptyList())
                .contexts(Collections.emptyMap())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesEventsRelatedTvPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventsRelatedTvPayload {

    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    @Builder.Default
    private List<HospitalBadgeTemplate> hospitalBadges = Collections.emptyList();
    @Builder.Default
    private List<SalesEventScrapTemplate> salesEventScraps = Collections.emptyList();
    @Builder.Default
    private List<SalesEventStatTemplate> salesEventStats = Collections.emptyList();
    @Builder.Default
    private List<SalesEventBadgeTemplate> salesEventBadges = Collections.emptyList();
    @Builder.Default
    private List<Long> recommendByTvs = Collections.emptyList();
    @Builder.Default
    private List<Long> recommendByTreatments = Collections.emptyList();

    public static SalesEventsRelatedTvPayload empty() {
        return SalesEventsRelatedTvPayload.builder()
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .salesEventScraps(Collections.emptyList())
                .salesEventStats(Collections.emptyList())
                .salesEventBadges(Collections.emptyList())
                .recommendByTvs(Collections.emptyList())
                .recommendByTreatments(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SalesProductPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.SalesProductTemplate;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesProductPayload {

    private SalesProductTemplate salesProduct;
    private HospitalTemplate hospital;
    private List<TextTemplate> treatments;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ScrapCountsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CountTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ScrapCountsPayload {

    private List<CountTemplate> scrapCounts;

    public static ScrapCountsPayload empty() {
        return ScrapCountsPayload.builder()
                .scrapCounts(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SearchKeywordsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextIconTemplate;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SearchKeywordsPayload {

    private List<TextTemplate> keywords;
    @Builder.Default
    private List<TextIconTemplate> solutionTags = Collections.emptyList();
    @Builder.Default
    private List<TextIconTemplate> treatments = Collections.emptyList();

    public static SearchKeywordsPayload empty() {
        return SearchKeywordsPayload.builder()
                .keywords(Collections.emptyList())
                .solutionTags(Collections.emptyList())
                .treatments(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SearchKeywordsRankingPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.RankingTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SearchKeywordsRankingPayload {

    private List<RankingTemplate> keywords;

    public static SearchKeywordsRankingPayload empty() {
        return SearchKeywordsRankingPayload.builder()
                .keywords(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ShareCodePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Map;
import kr.co.yeoshin.backend.payload.template.PromotionTemplate;
import kr.co.yeoshin.backend.payload.template.UrlTemplate;
import kr.co.yeoshin.common.share.type.ShareDomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ShareCodePayload {

    private long id;
    private ShareDomainType domain;
    private String language;
    private PromotionTemplate promotion;
    private Map<String, Object> contexts;
    private UrlTemplate external;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ShareUrlPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ShareUrlPayload {

    private UrlTemplate url;
    private HospitalTemplate hospital;
    private HospitalDoctorTemplate hospitalDoctor;
    private PromotionTemplate promotion;
    private SalesEventTemplate salesEvent;
    private List<SalesProductTemplate> salesProducts;
    private TreatmentReviewShortTemplate treatmentReview;
    private TvTemplate tv;
    private FaceAnalysisReportTemplate faceAnalysisReport;
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SignInPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.auth.model.Token;
import kr.co.yeoshin.common.member.type.MemberStatusType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SignInPayload {

    private boolean dormant;
    private MemberStatusType status;
    private Token token;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SignInTempPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.auth.model.Token;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SignInTempPayload {
    private boolean result;
    private boolean dormant;
    private Token token;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SignUpPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.auth.model.Token;
import kr.co.yeoshin.backend.payload.template.MemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SignUpPayload {

    private MemberTemplate member;
    private Token token;
    private boolean recommendable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SkinTagPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SkinTagPayload {

    private TextTemplate skinTag;
    private List<TextTemplate> skinTroubleTags;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SkinTagsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SkinTagsPayload {

    private List<TextTemplate> skinTags;
    private List<TextTemplate> skinTroubleTags;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashBankAccountsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.BankAccountTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashBankAccountsPayload {

    private List<BankAccountTemplate> bankAccounts;

    public static SystemCashBankAccountsPayload empty() {
        return SystemCashBankAccountsPayload.builder()
                .bankAccounts(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.OrderTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.SystemCashRefundStatusTemplate;
import kr.co.yeoshin.backend.payload.template.SystemCashTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashPageablePayload {

    private List<SystemCashTemplate> systemCashes;
    private List<OrderTemplate> orders;
    private List<SystemCashRefundStatusTemplate> systemCashRefundStatuses;
    private PageableTemplate pageable;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashPayload {

    private int systemCash;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashRefundStatusPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.SystemCashRefundStatusTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashRefundStatusPayload {

    private SystemCashRefundStatusTemplate systemCashRefundStatus;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashRefundStatusesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.SystemCashRefundStatusTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashRefundStatusesPayload {

    private List<SystemCashRefundStatusTemplate> systemCashRefundStatuses;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashRefundablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.SystemCashRefundTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashRefundablePayload {

    private SystemCashRefundTemplate systemCashRefund;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/SystemCashResultPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.SystemCashTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashResultPayload {

    private SystemCashTemplate systemCash;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TermsAgreementsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TermsAgreementTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TermsAgreementsPayload {

    private List<TermsAgreementTemplate> termsAgreements;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TermsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TermsTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TermsPayload {

    private List<TermsTemplate> terms;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ThemePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import kr.co.yeoshin.backend.payload.template.ThemeTemplate;
import kr.co.yeoshin.backend.payload.template.ThemeTreatmentsTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ThemePayload {

    private ThemeTemplate theme;
    private List<ThemeTreatmentsTemplate> themeTreatments;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/ThemeShortPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.ThemeShortTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ThemeShortPageablePayload {

    private List<ThemeShortTemplate> themes;
    private PageableTemplate pageable;

    public static ThemeShortPageablePayload empty() {
        return ThemeShortPageablePayload.builder()
                .themes(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TicketCountPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketCountPayload {

    private long count;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TicketPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketPayload {

    private TicketTemplate ticket;
    private ReservationTemplate reservation;
    private HospitalTemplate hospital;
    private HospitalBadgeTemplate hospitalBadge;
    private SalesEventTemplate salesEvent;
    private List<SalesProductTemplate> salesProducts;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TicketsGroupHospitalViewPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.SalesEventTemplate;
import kr.co.yeoshin.backend.payload.template.SalesProductTemplate;
import kr.co.yeoshin.backend.payload.template.TicketGroupHospitalViewTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketsGroupHospitalViewPayload {

    private List<TicketGroupHospitalViewTemplate> groups;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;

    public static TicketsGroupHospitalViewPayload empty() {
        return TicketsGroupHospitalViewPayload.builder()
                .groups(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TicketsPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketsPageablePayload {

    private List<TicketTemplate> tickets;
    private List<HospitalTemplate> hospitals;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private PageableTemplate pageable;

    public static TicketsPageablePayload empty() {
        return TicketsPageablePayload.builder()
                .tickets(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .hospitalBadges(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TicketsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketsPayload {

    private List<TicketTemplate> tickets;
    private List<HospitalTemplate> hospitals;
    private List<HospitalBadgeTemplate> hospitalBadges;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TokenCreatePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.auth.model.Token;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TokenCreatePayload {

    private boolean dormant;
    private Token token;

    public static TokenCreatePayload empty() {
        return TokenCreatePayload.builder()
                .dormant(false)
                .token(null)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TokenPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.auth.model.Token;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TokenPayload {

    private Token token;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentFocusTvsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.TvTemplate;
import kr.co.yeoshin.backend.payload.template.TreatmentFocusTvTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentFocusTvsPayload {

    private List<TreatmentFocusTvTemplate> treatmentFocuses;
    private List<TvTemplate> tvs;

    public static TreatmentFocusTvsPayload empty() {
        return TreatmentFocusTvsPayload.builder()
                .treatmentFocuses(Collections.emptyList())
                .tvs(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentLibrariesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import kr.co.yeoshin.backend.payload.template.TreatmentLibraryTemplate;
import kr.co.yeoshin.backend.payload.template.TreatmentStatTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentLibrariesPayload {

    private List<TextTemplate> treatments;
    private List<TreatmentStatTemplate> treatmentStats;
    private List<TreatmentLibraryTemplate> treatmentLibraries;

    public static TreatmentLibrariesPayload empty() {
        return TreatmentLibrariesPayload.builder()
                .treatments(Collections.emptyList())
                .treatmentStats(Collections.emptyList())
                .treatmentLibraries(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewPayload {

    private boolean removable;
    private boolean modifiable;
    private TreatmentReviewTemplate treatmentReview;
    private TreatmentReviewStatTemplate treatmentReviewStat;
    private TreatmentReviewScrapTemplate treatmentReviewScrap;
    private TreatmentReviewLikeTemplate treatmentReviewLike;
    private List<TreatmentReviewAttributeTemplate> treatmentReviewAttributes;
    private List<TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComments;
    private TreatmentReviewConfirmTemplate treatmentReviewConfirm;
    private SalesEventTemplate salesEvent;
    private List<SalesProductTemplate> salesProducts;
    private HospitalTemplate hospital;
    private MemberProfileTemplate memberProfile;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewSearchableCategoriesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewSearchableCategoriesPayload {

    private List<TextTemplate> categories;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewShortsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewShortsPayload {

    private List<TreatmentReviewTemplate> treatmentReviews;
    private List<TreatmentReviewStatTemplate> treatmentReviewStats;
    @Builder.Default
    private List<TreatmentReviewScrapTemplate> treatmentReviewScraps = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewLikeTemplate> treatmentReviewLikes = Collections.emptyList();
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<MemberProfileTemplate> memberProfiles;
    @Builder.Default
    private List<TreatmentReviewAttributeTemplate> treatmentReviewAttributes = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComments = Collections.emptyList();

    public static TreatmentReviewShortsPayload empty() {
        return TreatmentReviewShortsPayload.builder()
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewStats(Collections.emptyList())
                .treatmentReviewScraps(Collections.emptyList())
                .treatmentReviewLikes(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewHospitalComments(Collections.emptyList())
                .treatmentReviewAttributes(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewSourcePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewSourcePayload {

    private TextTemplate tip;
    private TextTemplate contents;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewSummaryPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.CountTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewSummaryPayload {

    private final long totalCount;
    private final float starPointAverage;
    private final List<CountTemplate> evaluations;

    public static TreatmentReviewSummaryPayload empty() {
        return TreatmentReviewSummaryPayload.builder()
                .evaluations(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewsByMePageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewsByMePageablePayload {

    private List<TreatmentReviewTemplate> treatmentReviews;
    private List<TreatmentReviewStatTemplate> treatmentReviewStats;
    private List<TreatmentReviewConfirmTemplate> treatmentReviewConfirms;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private PageableTemplate pageable;

    public static TreatmentReviewsByMePageablePayload empty() {
        return TreatmentReviewsByMePageablePayload.builder()
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewStats(Collections.emptyList())
                .treatmentReviewConfirms(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewsPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewsPageablePayload {

    private List<TreatmentReviewTemplate> treatmentReviews;
    private List<TreatmentReviewScrapTemplate> treatmentReviewScraps;
    private List<TreatmentReviewLikeTemplate> treatmentReviewLikes;
    private List<TreatmentReviewStatTemplate> treatmentReviewStats;
    private List<TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComments;
    private List<TreatmentReviewAttributeTemplate> treatmentReviewAttributes;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<MemberProfileTemplate> memberProfiles;
    private PageableTemplate pageable;

    public static TreatmentReviewsPageablePayload empty() {
        return TreatmentReviewsPageablePayload.builder()
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewStats(Collections.emptyList())
                .treatmentReviewScraps(Collections.emptyList())
                .treatmentReviewLikes(Collections.emptyList())
                .treatmentReviewHospitalComments(Collections.emptyList())
                .treatmentReviewAttributes(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .memberProfiles(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewsPayload {

    private List<TreatmentReviewTemplate> treatmentReviews;
    @Builder.Default
    private List<TreatmentReviewStatTemplate> treatmentReviewStats = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewScrapTemplate> treatmentReviewScraps = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewLikeTemplate> treatmentReviewLikes = Collections.emptyList();
    private List<SalesEventTemplate> salesEvents;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;
    private List<MemberProfileTemplate> memberProfiles;
    @Builder.Default
    private List<TreatmentReviewAttributeTemplate> treatmentReviewAttributes = Collections.emptyList();
    @Builder.Default
    private List<TreatmentReviewHospitalCommentTemplate> treatmentReviewHospitalComments = Collections.emptyList();

    public static TreatmentReviewsPayload empty() {
        return TreatmentReviewsPayload.builder()
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewStats(Collections.emptyList())
                .treatmentReviewScraps(Collections.emptyList())
                .treatmentReviewLikes(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .treatmentReviews(Collections.emptyList())
                .treatmentReviewHospitalComments(Collections.emptyList())
                .treatmentReviewAttributes(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewsWritableCountPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewsWritableCountPayload {

    private long count;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentReviewsWritablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.*;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewsWritablePayload {

    private List<TreatmentReviewsWritableTemplate> treatmentReviewsWritables;
    private List<ReservationShortTemplate> reservations;
    private List<TicketTemplate> tickets;
    private List<SalesEventTemplate> salesEvents;
    private List<SalesEventStatTemplate> salesEventStats;
    private List<SalesProductTemplate> salesProducts;
    private List<HospitalTemplate> hospitals;

    public static TreatmentReviewsWritablePayload empty() {
        return TreatmentReviewsWritablePayload.builder()
                .treatmentReviewsWritables(Collections.emptyList())
                .reservations(Collections.emptyList())
                .tickets(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .salesEvents(Collections.emptyList())
                .salesEventStats(Collections.emptyList())
                .salesProducts(Collections.emptyList())
                .build();

    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TreatmentsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentsPayload {

    private List<TextTemplate> treatments;

    public static TreatmentsPayload empty() {
        return TreatmentsPayload.builder()
                .treatments(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TroubleCategoryTagPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.TroubleCategoryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TroubleCategoryTagPayload {

    private TroubleCategoryTemplate troubleCategoryTag;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TroubleCategoryTagsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.TroubleCategoryTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TroubleCategoryTagsPayload {

    private List<TroubleCategoryTemplate> troubleCategoryTags;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TvCategoriesPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.TextTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvCategoriesPayload {

    private List<TextTemplate> categories;

    public static TvCategoriesPayload empty() {
        return TvCategoriesPayload.builder()
                .categories(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TvPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.TvScrapTemplate;
import kr.co.yeoshin.backend.payload.template.TvStatTemplate;
import kr.co.yeoshin.backend.payload.template.TvTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvPageablePayload {

    private List<TvTemplate> tvs;
    private List<TvStatTemplate> tvStats;
    private List<TvScrapTemplate> tvScraps;
    private PageableTemplate pageable;

    public static TvPageablePayload empty() {
        return TvPageablePayload.builder()
                .tvs(Collections.emptyList())
                .tvStats(Collections.emptyList())
                .tvScraps(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TvPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.TvLikeTemplate;
import kr.co.yeoshin.backend.payload.template.TvScrapTemplate;
import kr.co.yeoshin.backend.payload.template.TvStatTemplate;
import kr.co.yeoshin.backend.payload.template.TvTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvPayload {

    private TvTemplate tv;
    private TvStatTemplate tvStat;
    private TvScrapTemplate tvScrap;
    private TvLikeTemplate tvLike;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TvRepliesPageablePayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.payload.template.TvReplyTemplate;
import kr.co.yeoshin.backend.payload.template.TvTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvRepliesPageablePayload {

    private List<TvTemplate> tvs;
    private List<TvReplyTemplate> replies;
    private PageableTemplate pageable;

    public static TvRepliesPageablePayload empty() {
        return TvRepliesPageablePayload.builder()
                .tvs(Collections.emptyList())
                .replies(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TvReplyPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.TvReplyTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvReplyPayload {

    private TvReplyTemplate reply;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/TvsPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.TvStatTemplate;
import kr.co.yeoshin.backend.payload.template.TvTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvsPayload {

    private List<TvTemplate> tvs;
    private List<TvStatTemplate> tvStats;

    public static TvsPayload empty() {
        return TvsPayload.builder()
                .tvs(Collections.emptyList())
                .tvStats(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/VerificationDanalIdentitySecretPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class VerificationDanalIdentitySecretPayload {

    private int expiresInSeconds;
    private int retryAfterSeconds;
    private String key;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/VerificationNiceIdentityPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
// test
public class VerificationNiceIdentityPayload {

    private String results;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/VerificationNiceIdentitySecretPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class VerificationNiceIdentitySecretPayload {

    private int expiresInSeconds;
    private int retryAfterSeconds;
    private String tokenVersionId;
    private String encryptionData;
    private String integrityValue;
    private String context;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/WeatherPayload.java
================================================
package kr.co.yeoshin.backend.payload;

import kr.co.yeoshin.backend.payload.template.WeatherConfigTemplate;
import kr.co.yeoshin.backend.payload.template.WeatherTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class WeatherPayload {

    private WeatherTemplate weather;
    private WeatherConfigTemplate weatherConfig;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/AppConfigTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.setup.model.View;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AppConfigTemplate implements Template {

    private View view;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/AppVersionTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class AppVersionTemplate implements Template {

    private String latestVersion;
    private boolean forceUpdate;
    private String webviewUrl;
    private List<UrlTemplate> webviewUrls;
    private String contents;
    private String minimumOsVersion;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/BankAccountTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.type.Bank;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BankAccountTemplate implements Template {

    private long id;
    private String accountHolder;
    private String account;
    private BankTemplate bank;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/BankTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.type.Bank;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class BankTemplate implements Template {

    private long id;
    private Bank type;
    private String name;
    private ImageTemplate image;

    public static BankTemplate empty() {
        return BankTemplate.builder()
                .name(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/BannerTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.banner.type.BannerLocation;
import kr.co.yeoshin.common.banner.type.BannerPosition;
import kr.co.yeoshin.common.banner.type.BannerType;
import kr.co.yeoshin.common.type.LinkType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BannerTemplate implements Template {

    private long id;
    private String code;
    private String name;
    @Deprecated
    private String contents;
    private String content;
    private String subContent;
    private String contentColorCode;
    private ImageTemplate image;
    private BannerType type;
    private BannerLocation location;
    private LinkType linkType;
    private UrlTemplate linkUrl;
    private BannerPosition position;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/BrowserTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.Map;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.browser.type.BrowserLibraryTemplateType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class BrowserTemplate implements Template {

    private long id;
    private BrowserLibraryTemplateType type;
    private String title;
    private String subtitle;
    private ImageTemplate image;
    private String campaign;
    private Map<String, Object> parameter;
    private boolean expandable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CardGroupTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CardGroupTemplate implements Template {

    private long id;
    private TextTemplate header;
    private List<CardTemplate> cards;
    private TextTemplate footer;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.ArrayList;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class CardTemplate implements Template {

    private long id;
    private String title;
    private String body;
    @Builder.Default
    private String color = StringUtils.EMPTY;
    @Builder.Default
    private List<ImageTemplate> images = new ArrayList<>();
    @Builder.Default
    private List<UrlTemplate> urls = new ArrayList<>();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CartProductTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CartProductTemplate implements Template {

    private long id;
    private int count;
    private boolean latest;
    private boolean singleOrderable;
    private long salesEventId;
    private long salesProductId;
    private long hospitalId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CodeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class CodeTemplate implements Template {

    private long id;
    private String code;
    private String value;

    public static CodeTemplate empty() {
        return CodeTemplate.builder()
                .code(StringUtils.EMPTY)
                .value(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ContentConcealTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.review.type.ConcealReason;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ContentConcealTemplate implements Template {

    private long id;
    private ContentType refType;
    private long refId;
    private ConcealReason concealReason;
    private String verbose;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CountTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CountTemplate implements Template {

    private long id;
    private long count;
    private CodeTemplate value;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CouponIssueConditionTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponIssueConditionTemplate implements Template {

    private long id;
    private long couponId;
    private CouponIssueConditionType type;
    private String value;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/CouponTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.coupon.controller.model.CouponCondition;
import kr.co.yeoshin.backend.coupon.service.model.CouponPresetType;
import kr.co.yeoshin.common.coupon.type.CouponBenefitType;
import kr.co.yeoshin.common.coupon.type.CouponStatus;
import kr.co.yeoshin.common.type.Currency;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CouponTemplate implements Template {

    private long id;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime issueAt;
    private String code;
    private CouponPresetType preset;
    private String name;
    private Currency currency;
    private int benefitValue;
    private CouponBenefitType benefitType;
    private boolean duplicateApplyable;
    private CouponStatus status;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime useAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usableStartAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usableEndAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    private List<CouponCondition> conditions;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/DateTimeRangeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class DateTimeRangeTemplate {

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;

    public static DateTimeRangeTemplate empty() {
        return DateTimeRangeTemplate.builder()
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/DomainTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class DomainTemplate implements Template {

    private long id;
    private DomainType domain;
    private long domainId;
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ExplorerSearchCategoryTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ExplorerSearchCategoryTemplate implements Template {

    private TextTemplate trouble;
    private List<TextIconTemplate> solutionTags;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/FaceAnalysisReportTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.face.service.model.FaceAnalysisReport;
import kr.co.yeoshin.backend.face.service.model.report.AnalyzeDoctor;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class FaceAnalysisReportTemplate implements Template {

    private long id;
    private ImageTemplate faceImage;
    private int memberAge;
    private List<String> titles;
    private AnalyzeDoctor doctor;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportAt;
    private FaceAnalysisReport reports;
    private List<Long> solutionTagIds;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalAdditionAnesthesiaTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalAdditionAnesthesiaTemplate implements Template {

    private long id;
    private CodeTemplate name;
    private List<TextTemplate> descriptions;
    private List<TextTemplate> precautions;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalBadgeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import static kr.co.yeoshin.backend.common.Constant.Template.DEFAULT_ID;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalBadgeTemplate implements Template {

    private long id;
    private long hospitalId;
    private List<CodeTemplate> badges;

    public static HospitalBadgeTemplate empty(long hospitalId) {
        return HospitalBadgeTemplate.builder()
                .id(DEFAULT_ID)
                .hospitalId(hospitalId)
                .badges(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalDoctorTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalDoctorTemplate implements Template {

    private long id;
    private long hospitalId;
    private String name;
    private ImageTemplate profileImage;
    private boolean representative;
    private List<CodeTemplate> subjects;
    private List<String> descriptions;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalLocationTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.place.model.Location;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class HospitalLocationTemplate implements Template {

    private long id;
    private String name;
    private Location location;
    private boolean manages;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalMessengerTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.hospital.type.HospitalMessengerType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalMessengerTemplate implements Template {

    private long id;
    private long hospitalId;
    private HospitalMessengerType messengerType;
    private String messengerId;
    private ImageTemplate image;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalOnboardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.common.hospital.type.HospitalOnboardType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalOnboardTemplate {

    private long id;
    private long hospitalId;
    private HospitalOnboardType type;
    private int count;
    private boolean register;

    public static HospitalOnboardTemplate empty(long hospitalId) {
        return HospitalOnboardTemplate.builder()
                .hospitalId(hospitalId)
                .register(false)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalOperationTimeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalOperationTimeTemplate implements Template {

    private long id;
    private long hospitalId;
    private List<OperationTimeTemplate> operationTimes;
    private String additionalExplanation;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalPartnershipTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalPartnershipTemplate {

    private long id;
    private long hospitalId;
    private String businessRegistrationNumber;
    private String businessRegistrationName;
    private String address;
    private String representativeName;
    private String representativePhoneNumber;

    public static HospitalPartnershipTemplate empty() {
        return HospitalPartnershipTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalScrapTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalScrapTemplate {

    private long id;
    private long hospitalId;

    public static HospitalScrapTemplate empty() {
        return HospitalScrapTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalStatTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class HospitalStatTemplate {

    private long id;
    private long hospitalId;
    private long salesEventCount;
    private long salesEventUsageCount;
    private long salesCount;
    private long reviewCount;
    private long scrapCount;
    private float starPointAverage;
    private long replyTimeAverage;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalSubjectTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalSubjectTemplate implements Template {

    private long id;
    private long hospitalId;
    private List<CodeTemplate> subjects;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.place.model.Location;
import kr.co.yeoshin.common.hospital.type.HospitalSource;
import kr.co.yeoshin.common.hospital.type.PartnershipStatus;
import kr.co.yeoshin.common.place.type.PlaceType;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class HospitalTemplate implements Template {

    private long id;
    private String name;
    private String briefIntroduction;
    private String introduction;
    private boolean premium;
    private ImageTemplate logoImage;
    private ImageTemplate thumbnailImage;
    private ImageTemplate premiumThumbnailImage;
    private String landmark;
    private String address;
    private String addressDetail;
    private PlaceType place;
    private Location location;
    private String directions;
    private String directionsGuide;
    private String callMix;
    private String phoneNumber;
    private boolean view;
    private boolean publish;
    private boolean manages;
    private PartnershipStatus partnershipStatus;
    private HospitalSource source;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HospitalTreatmentGuideTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class HospitalTreatmentGuideTemplate {

    private long id;
    private long treatmentId;
    private String name;
    private boolean hasPrice;
    private int price;
    private String description;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/HtmlTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class HtmlTemplate {

    private long id;
    private String html;

    public static HtmlTemplate empty() {
        return HtmlTemplate.builder()
                .html(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/IamportPaymentStatusTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.iamport.component.retrofit.model.PaymentStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class IamportPaymentStatusTemplate {

    private String imaportUniqueId;
    private String merchantUniqueId;
    private PaymentStatus status;
    private String failReason;
    private int amount;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ImageTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.product.type.DirectionType;
import lombok.Builder;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class ImageTemplate implements Template {

    private long id;
    private String type;
    private String image;
    @Builder.Default
    private DirectionType direction = DirectionType.NONE;
    @Builder.Default
    private boolean accessible = true;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/LevelTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.member.type.Level.Benefit;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class LevelTemplate {

    private Level code;
    private int level;
    private String name;
    private RangeTemplate<Integer> ticketUsePriceRange;
    private RangeTemplate<Integer> ticketUseCountRange;
    private double rewardPointPercentage;
    private int rewardCouponPrice;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MapClusterTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.place.model.Location;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MapClusterTemplate<T> implements Template {

    private long id;
    private String geoCell;
    private Location location;
    private int count;
    private List<T> items;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MapPlaceTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
public class MapPlaceTemplate extends PlaceTemplate {

    private int level;
    private List<MapPlaceTemplate> places;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberAccountTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberAccountTemplate implements Template {

    private long id;
    private AuthProvider provider;
    private String providerId;
    private boolean primary;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberLevelRewardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelRewardTemplate {

    private long id;
    private long memberId;
    private Level level;
    private DomainType refType;
    private long refId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberLevelTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.member.type.Level;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberLevelTemplate {

    private long memberId;
    private Level level;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime from;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime to;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberProfileTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.common.member.type.Sex;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberProfileTemplate {

    private long id;
    private String profileId;
    private ImageTemplate profileImage;
    private Sex sex;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberReportTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberReportTemplate {

    private long id;
    private long memberId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime reportAt;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberServiceStatTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberServiceStatTemplate {

    private long memberId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime from;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime to;
    private int orderCount;
    private int salePointPrice;
    private int saleCouponPrice;
    private int rewardPointPrice;
    private int paymentPrice;
    private int ticketUsePrice;
    private int ticketUseCount;
    private int cancelTicketUsePrice;
    private int cancelTicketUseCount;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberServiceStatTicketLogTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberServiceStatTicketLogTemplate {

    private long id;
    private long memberId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    private long orderId;
    private long ticketId;
    private String ticketCode;
    private int ticketPrice;
    private TicketStatus ticketStatus;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberServiceSummaryTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberServiceSummaryTemplate implements Template {

    private long memberId;
    private boolean identification; // 본인인증 여부
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime identificationAt;
    private int systemCash; // 여신 캐시
    private int refundableSystemCash; // 환불 가능 여신 캐시
    private int depositedSystemCash; // 예치된 여신 캐시
    private long cartProductCount; // 장바구니 상품 개수
    private long ticketCount; // 티켓 개수
    private ZonedDateTime nearestReservationAt;
    private ZonedDateTime firstOrderAt; // 첫 구매 일시
    private ZonedDateTime recentOrderAt; // 최근 구매 일시
    private ZonedDateTime firstFaceAnalysisReportAt; // 첫 피부분석 일시
    @Deprecated
    private long reservationCount; // 예약 개수
    private long expectReservationCount; // 방문 예정 예약 개수
    private long progressReservationCount; // 진행 중 예약 개수
    private long completeReservationCount; // 방문 완료 예약 개수
    private long point; // 보유한 포인트
    private long couponCount; // 보유한 쿠폰 개수
    private long writableTreatmentReviewCount; // 작성 가능한 시술 후기 개수
    private long rewardableTreatmentReviewCount; // 보상 지급 가능한 시술 후기 개수
    private long rewardableMaxTreatmentReviewPoint; // 보상 지급 가능한 시술 후기 최대 포인트
    private String inviteCode; // 초대 코드
    private String language; // 사용자 설정 언어
    private boolean latestNotification; // 최신 알림 존재 여부
    private boolean latestSalesEventQuestionReply; // 최신 시술문의 답변 존재 여부
    private boolean registerInterestings; // 관심정보 등록 여부
    private boolean reservationDuplicationAllow; //같은 병원에 중복 예약 가능한 유저인지

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberSkinTypeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.member.type.SkinType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberSkinTypeTemplate implements Template {

    private long id;
    private long memberId;
    private SkinType skin;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MemberTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.member.type.Sex;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MemberTemplate {

    private long id;
    private String profileId;
    private ImageTemplate profileImage;
    private String name;
    private String email;
    private String homeCountryCode;
    private ZonedDateTime homeCountryCodeChangeAt;
    private boolean homeCountryCodeChangeable;
    private String countryCode;
    private String countryCallingCode; // 82, 81 ....
    private String cellPhone; // 01011112222
    private String birthdate; // yyyyMMdd
    private Sex sex;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MileageCouponDiscountableTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MileageCouponDiscountableTemplate implements Template {

    private long couponId;
    private int discountPrice;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/MileageDiscountableTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class MileageDiscountableTemplate implements Template {

    private int point;
    private List<MileageCouponDiscountableTemplate> coupons;

    public static MileageDiscountableTemplate empty() {
        return MileageDiscountableTemplate.builder()
                .point(0)
                .coupons(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/NotificationTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.type.LinkType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class NotificationTemplate {

    private long id;
    private String title;
    private String contents;
    private boolean read;
    private LinkType linkType;
    private UrlTemplate linkUrl;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/NumberTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class NumberTemplate {

    private long id;
    private long value;

    public static NumberTemplate empty() {
        return NumberTemplate.builder()
                .value(0)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OperationTimeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.time.DayOfWeek;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OperationTimeTemplate implements Template {

    private long id;
    private DayOfWeek dayOfWeek;
    private TimeRangeTemplate businessTime; // 영업 시간
    private TimeRangeTemplate lunchTime; // 점심 시간
    private boolean dayOff; // 휴일
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderCancelTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.payment.type.RefundMethod;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderCancelTemplate implements Template {

    private long id;
    private OrderStatus status;
    private RefundMethod refundMethod;
    private int cancelPrice;
    private int usedTicketPrice;
    private int unusedTicketPrice;
    private int cancelPoint;
    private int cancelSystemCash;
    private int cancelCouponPrice;
    private List<NumberTemplate> cancelCouponDiscountPrices;
    private boolean manual;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderDiscountableTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Deprecated(since = "use MileageDiscountableTemplate")
@Builder
@Getter
public class OrderDiscountableTemplate implements Template {

    private int point;
    private List<Long> memberCouponIds;

    public static OrderDiscountableTemplate empty() {
        return OrderDiscountableTemplate.builder()
                .point(0)
                .memberCouponIds(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderMoneyReceiptTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderMoneyReceiptTemplate implements Template {

    private long id;
    private long ticketId;
    private String moneyReceiptUrl;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderPaymentTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.payment.type.PgType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderPaymentTemplate implements Template {

    private long id;
    private PgType pg;
    private String cardName;
    private String receiptUrl;
    private boolean moneyReceiptIssuable;
    private List<OrderMoneyReceiptTemplate> moneyReceipts;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderProductTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderProductTemplate implements Template {

    private long id;
    private long orderId;
    private long hospitalId;
    private long salesEventId;
    private long salesProductId;
    private long count;
    private List<Long> ticketIds;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderPurchaseTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.payment.type.MoneyReceiptIdentifier;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderPurchaseTemplate implements Template {

    private long id;
    private String code;
    private OrderStatus status;
    private int totalPoint;
    private int usablePoint;
    private int usePoint;
    private int totalSystemCash;
    private int usableSystemCash;
    private int useSystemCash;
    private List<Long> totalCouponIds;
    private List<Long> usableCouponIds;
    private List<Long> useCouponIds;
    private List<Long> applyableCouponIds;
    private OrderDiscountableTemplate maxDiscountable;
    private List<NumberTemplate> useCouponDiscountPrices;
    private int couponDiscountPrice;
    private boolean treatmentInsuranceApply;
    private int totalPrice;
    private int paymentPrice;
    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifier;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderReceiptTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.payload.template.type.OrderCancellableType;
import kr.co.yeoshin.common.payment.type.CancelReasonCode;
import kr.co.yeoshin.common.payment.type.CancelRequestType;
import kr.co.yeoshin.common.payment.type.MoneyReceiptIdentifier;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.type.Version;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderReceiptTemplate implements Template {

    private long id;
    private Version version;
    private String code;
    private String orderderName;
    private String ordererCountryCallingCode;
    private String ordererCellPhone;
    private OrderStatus status;
    private int usePoint;
    private List<Long> useCouponIds;
    private int couponDiscountPrice;
    private List<NumberTemplate> useCouponDiscountPrices;
    private boolean treatmentInsuranceApply;
    private int totalPrice;
    private int useSystemCash;
    private int paymentPrice;
    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifier;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime cancelRequestAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime cancelAt;
    private CancelRequestType canceller;
    private CancelReasonCode cancelReason;
    private String cancelVerbose;
    private OrderCancellableType cancellableType;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/OrderTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.payment.type.CancelReasonCode;
import kr.co.yeoshin.common.payment.type.CancelRequestType;
import kr.co.yeoshin.common.payment.type.MoneyReceiptIdentifier;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class OrderTemplate implements Template {

    private long id;
    private String code;
    private OrderStatus status;
    private int usePoint;
    private int useSystemCash;
    private int couponDiscountPrice;
    private boolean treatmentInsuranceApply;
    private int totalPrice;
    private int paymentPrice;
    private MoneyReceiptIdentifier moneyReceiptIdentifierType;
    private String moneyReceiptIdentifier;
    private CancelRequestType canceller;
    private CancelReasonCode cancelReason;
    private String cancelVerbose;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PageableTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Getter
@Builder
public class PageableTemplate {

    private long totalCount;
    private int pageElementCount;
    private String next;

    public static PageableTemplate empty() {
        return PageableTemplate.builder()
                .next(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PaymentCardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class PaymentCardTemplate {

    private long id;
    private CodeTemplate issuer;
    private String maskedCardNumber; // 카드 번호 11112222xxxx (마스킹된 형태)
    private String cardName; // 카드 이름 삼성카드
    private boolean hasSecret; // 비밀번호 설정 여부
    private boolean skipSecret; // 결제시 비밀번호 생략 여부

    public static PaymentCardTemplate empty() {
        return PaymentCardTemplate.builder()
                .issuer(CodeTemplate.empty())
                .maskedCardNumber(StringUtils.EMPTY)
                .cardName(StringUtils.EMPTY)
                .hasSecret(false)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PlaceTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.place.type.PlaceType;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
public class PlaceTemplate implements Template {

    private long id;
    private String name;
    private PlaceType type;
    private double latitude;
    private double longitude;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PointCompositionTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PointCompositionTemplate {

    private long id;
    private long memberPointId;
    private int point;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;
    private DomainType refType;
    private long refId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PointTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.point.type.MemberPointType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PointTemplate {

    private long id;
    private String title;
    private int point;
    private MemberPointType type;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expiredAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PopupTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.popup.model.PopupButton;
import kr.co.yeoshin.common.popup.type.PopupExposureTarget;
import kr.co.yeoshin.common.popup.type.PopupLocation;
import kr.co.yeoshin.common.popup.type.PopupPosition;
import kr.co.yeoshin.common.popup.type.PopupType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PopupTemplate implements Template {

    private long id;
    private String name;
    private PopupType type;
    private String title;
    private String content;
    private List<PopupButton> buttons;
    private PopupLocation location;
    private PopupPosition position;
    private LocalDateTime startAt;
    private LocalDateTime endAt;
    private PopupExposureTarget exposureTarget;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PromotionParticipationTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionParticipationTemplate implements Template {

    private long id;
    private long promotionId;
    private long rewardGroupId;
    private long rewardId;
    @JsonFormat(pattern = Api.DATE_FORMAT)
    private ZonedDateTime participationAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PromotionReplyTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionReplyTemplate {

    private long id;
    private long memberId;
    private String profileId;
    private ImageTemplate profileImage;
    private String contents;
    private long promotionId;
    private boolean secret;
    private boolean report;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PromotionRewardGroupTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.board.type.PromotionParticipationCondition;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionRewardGroupTemplate implements Template {

    private long id;
    private long promotionId;
    private int priority;
    private PromotionParticipationCondition participationCondition;
    private String ref;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PromotionRewardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.board.type.PromotionRewardType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionRewardTemplate implements Template {

    private long id;
    private long promotionId;
    private long promotionRewardGroupId;
    private PromotionRewardType rewardType;
    private long rewardId;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PromotionTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.board.type.PromotionReplyType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PromotionTemplate implements Template {

    private long id;
    private String title;
    private String link;
    private String content;
    private boolean reply;
    private PromotionReplyType replyType;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime startAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime endAt;
    private ImageTemplate image;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/PropertyTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PropertyTemplate implements Template {

    private long id;
    private CodeTemplate name;
    private List<CodeTemplate> properties;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/QuestAttendanceTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestAttendanceTemplate {

    private long id;
    private int point;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/QuestKingOfInvitationRankTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class QuestKingOfInvitationRankTemplate {

    private int rank;

    private String profileId;

    private int inviteCount;

    private int firstTicketUseCount;

    private int point;

    private int bonus;

    public static QuestKingOfInvitationRankTemplate empty(String profileId) {
        return QuestKingOfInvitationRankTemplate.builder()
                .rank(-1)
                .profileId(profileId)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/QuestRewardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestRewardTemplate implements Template {

    private long id;
    private int treatmentReviewLikePoint; // 시술후기 도움돼요 클릭 보상
    private int paymentSystemEasyCardPoint; // 간편결제 카드 등록 보상
    private int notificationMarketingAgreePoint; // 마케팅 수신 동의 보상
    private int salesEventQuestionPoint; // 시술문의 등록 보상

    public static QuestRewardTemplate empty() {
        return QuestRewardTemplate.builder()
                .id(Constant.Template.NOT_EXIST_ID)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/QuestTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestTemplate implements Template {

    private long id;
    private DomainType quest;
    private long completeCount;

    public static QuestTemplate empty() {
        return QuestTemplate.builder()
                .id(Constant.Template.NOT_EXIST_ID)
                .quest(DomainType.NONE)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/QuestionReplyTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestionReplyTemplate {

    private long id;
    private long questionId;
    private String contents;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/QuestionTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class QuestionTemplate {

    private long id;
    private long memberId;
    private String contents;
    private String profileId;
    private ImageTemplate profileImage;
    private long hospitalId;
    private long salesEventId;
    private boolean report;
    private boolean view;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/RangeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class RangeTemplate<T> {

    private T from;
    private T to;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/RankingTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.Collections;
import java.util.List;
import lombok.Builder;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class RankingTemplate extends TextTemplate {

    private int ranking;
    private int variation;
    @Builder.Default
    private List<CodeTemplate> properties = Collections.emptyList();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/RecommendBySolutionTagTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class RecommendBySolutionTagTemplate implements Template {

    private long solutionTagId;
    private SalesEventTemplate salesEvent;
    private List<SalesProductTemplate> salesProducts;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ReservationShortTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.payload.template.type.ReservationStatus;
import kr.co.yeoshin.common.reservation.type.ReservationCancelType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationShortTemplate {

    private long id;
    private long hospitalId;
    private String code;
    private ReservationStatus status;
    private ReservationCancelType cancelReason;
    private List<Long> ticketIds;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ReservationTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.payload.template.type.ReservationStatus;
import kr.co.yeoshin.backend.reservation.controller.model.ReservationPreliminaryQuestionnaire;
import kr.co.yeoshin.common.reservation.type.ReservationCancelType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ReservationTemplate {

    private long id;
    private long hospitalId;
    private String code;
    private ReservationStatus status;
    private ReservationCancelType cancelReason;
    private String reserverName;
    private String reserverCountryCallingCode;
    private String reserverCellPhone;
    private String reserverHomeCountryCode;
    private String memo;
    private ReservationPreliminaryQuestionnaire preliminaryQuestionnaire;
    private List<Long> ticketIds;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime at;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventBadgeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import static kr.co.yeoshin.backend.common.Constant.Template.DEFAULT_ID;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventBadgeTemplate implements Template {

    private long id;
    private long salesEventId;
    private List<CodeTemplate> badges;

    public static SalesEventBadgeTemplate empty(long salesEventId) {
        return SalesEventBadgeTemplate.builder()
                .id(DEFAULT_ID)
                .salesEventId(salesEventId)
                .badges(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventConsultationTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.product.type.SalesEventConsultationMessengerType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventConsultationTemplate implements Template {

    private long id;
    private long salesEventId;
    private long hospitalId;

    private String language;
    private String content;

    private SalesEventConsultationMessengerType messengerType;
    private String messengerId;

    private boolean firstTreatmentReviewWritable;
    private boolean treatmentReviewWritable;

    private List<Long> salesProductIds;
    private List<Long> hospitalDoctorIds;
    private List<Long> hospitalMessengerIds;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventLibraryTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventLibraryTemplate implements Template {

    private long id;
    private TextTemplate requireTime; // 시술시간
    private TextTemplate anesthesia; // 마취여부
    private TextTemplate downtime; // 회복시간
    private TextTemplate treatmentEffectAppearsTime; // 시술효과
    private TextTemplate treatmentBriefIntroduction; // 시술 간략 설명
    private List<CardTemplate> treatmentIntroduction; // 시술 설명
    private List<CardTemplate> treatmentPrinciples; // 시술 원리
    private List<TextTemplate> treatmentProcesses; // 시술 과정
    private List<TextTemplate> treatmentPrecautions; // 주의사항
    private List<TextIconTemplate> treatmentSuggestionTargets; // 추천대상(권장대상)
    private TextTemplate treatmentSuggestionCycle; // 권장주기
    private TextTemplate treatmentDuration; // 유지기간 (지속시간)
    private TextTemplate treatmentSuggestionTimes; //권장횟수
    private List<CardTemplate> treatmentMerits; // 시술 특장점
    private List<CardTemplate> faqs;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventScrapTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventScrapTemplate implements Template {

    private long id;
    private long salesEventId;

    public static SalesEventScrapTemplate empty() {
        return SalesEventScrapTemplate.builder()
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventSearchFallbackTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.SortType;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.salesevent.controller.model.SalesEventReservationType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventSearchFallbackTemplate implements Template {

    private long id;
    private SalesEventReservationType reservation;
    @Deprecated
    private PlaceTemplate place;
    private List<PlaceTemplate> places;
    private String query;
    private SortType sortType;
    private Boolean order;
    private Boolean consultation;
    private List<Long> metaIds;
    private List<Long> additionIds;
    private double latitude;
    private double longitude;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventStatTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventStatTemplate implements Template {

    private long id;
    private long salesEventId;
    private long totalReviewCount;
    private float starPointAverage;
    private long scrapCount;

    public static SalesEventStatTemplate empty() {
        return SalesEventStatTemplate.builder()
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.product.type.SalesEventStyleColorType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesEventTemplate implements Template {

    private long id;
    private String name;
    private String ref;
    private String summary;
    private ImageTemplate thumbnailImage;
    private List<Long> representativeSolutionTagIds;
    private List<Long> representativeTroubleCategoryIds;
    private long representativeTreatmentId;
    private long hospitalId;
    private long representativeSalesProductId;
    private boolean view;
    private boolean trash;
    private boolean order;
    private boolean consultation;
    private boolean publish;
    private SalesEventStyleColorType styleColor;
    private List<String> categories;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesEventUsageTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

@Getter
@SuperBuilder
public class SalesEventUsageTemplate implements Template {

    private long id;
    private String code;
    private long hospitalId;
    private long salesEventId;
    private String title;
    private int afterDayCount;
    private String description;
    private List<ImageTemplate> images;
    private List<TextTemplate> treatmentMethodTags;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SalesProductTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.backend.payload.template.type.SalesProductDiscountType;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.type.Currency;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SalesProductTemplate implements Template {

    private long id;
    private long version;
    private SalesProductType type;
    private int priority;
    private long salesEventId;
    private long hospitalId;
    private String name;
    private String summary;
    private int treatmentCount;
    private int price;
    private int oneTimeRegularPrice;
    private int discountPrice;
    private SalesProductDiscountType discountType;
    private Currency currency;
    private boolean view;
    private MileageDiscountableTemplate discountable;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SplashTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class SplashTemplate {

    private ImageTemplate backgroundImage;
    private ImageTemplate foregroundImage;
    private int durationInMillisecond;
    private boolean skippable;

    public static SplashTemplate empty() {
        return SplashTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SystemCashRefundStatusTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.RefundStatus;
import kr.co.yeoshin.common.payment.type.RefundStatusReasonType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SystemCashRefundStatusTemplate {

    private long id;
    private long memberId;
    private long systemCashId;
    private RefundStatus status;
    private RefundStatusReasonType reason;
    private String verbose;
    private int refundSystemCash;
    private int refundFee;
    private String accountHolder;
    private String account;
    private BankTemplate bank;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime completeAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SystemCashRefundTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashRefundTemplate {

    private long id;
    private int systemCash; // 전체 여신 캐시
    private int refundableSystemCash; // 환불 가능 여신 캐시
    private int refundFee; // 환불 수수료
    private int refundExpectSystemCash; // 환불 예정 금액
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/SystemCashTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.SystemCashStatus;
import kr.co.yeoshin.common.payment.type.SystemCashType;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class SystemCashTemplate {

    private long id;
    private String title;
    private int systemCash;
    private int remainCash;
    private SystemCashStatus type;
    private List<SystemCashType> properties;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expiredAt;
    private DomainType refType;
    private long refId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TermsAgreementTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TermsAgreementTemplate implements Template {

    private long id;
    private String type;
    private String name;
    private boolean agreement;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TermsTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.terms.type.TermsFallbackContentFormatType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TermsTemplate implements Template {

    private long id;
    private String type;
    private String name;
    private String url;
    private TermsFallbackContentFormatType fallbackContentFormatType;
    private String fallbackContent;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TextIconTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Getter;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@Getter
public class TextIconTemplate extends TextTemplate {

    private ImageTemplate image;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TextTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;
import lombok.experimental.SuperBuilder;
import org.apache.commons.lang3.StringUtils;

@SuperBuilder
@Getter
public class TextTemplate {

    private long id;
    private String value;
    @Builder.Default
    private String description = StringUtils.EMPTY;

    public static TextTemplate empty() {
        return TextTemplate.builder()
                .value(StringUtils.EMPTY)
                .description(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ThemeShortTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ThemeShortTemplate implements Template {

    private long id;
    private String title;
    private String phrase;
    private ImageTemplate image;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ThemeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ThemeTemplate implements Template {

    private long id;
    private String title;
    private String contents;
    private String phrase;
    private String subPhrase;
    private ImageTemplate image;
    private ImageTemplate detailImage;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/ThemeTreatmentsTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ThemeTreatmentsTemplate {

    private long id;
    private TextIconTemplate treatment;
    private String title;
    private List<TvTemplate> tvs;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TicketGroupHospitalViewTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketGroupHospitalViewTemplate {

    private HospitalTemplate hospital;
    private HospitalBadgeTemplate hospitalBadge;
    private List<TicketTemplate> tickets;
    private int totalTicketCount;
    private ReservationShortTemplate reservation;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TicketTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.type.Version;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TicketTemplate {

    private long id;
    private Version version;
    private long group;
    private String code;
    private String name;
    private long salesEventId;
    private long hospitalId;
    private TicketStatus status;
    private List<Long> salesProductIds;
    private int oneTimeSalesPrice;
    private boolean expireExtendable;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime usedAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TimeRangeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TimeRangeTemplate {

    @JsonFormat(pattern = Api.TIME_FORMAT)
    private LocalTime startTime;

    @JsonFormat(pattern = Api.TIME_FORMAT)
    private LocalTime endTime;

    public static TimeRangeTemplate empty() {
        return TimeRangeTemplate.builder()
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentFocusTvTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentFocusTvTemplate {

    private long id;
    private String title;
    private TextTemplate treatment;
    private List<CodeTemplate> treatmentProperties;
    private List<Long> tvIds;

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentLibraryTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentLibraryTemplate implements Template {

    private long id;
    private long treatmentId;
    private TextTemplate requireTime; // 시술시간
    private TextTemplate anesthesia; // 마취여부
    private TextTemplate downtime; // 회복시간
    private TextTemplate treatmentEffectAppearsTime; // 시술효과
    private List<TextTemplate> treatmentProcesses; // 시술 과정
    private List<TextTemplate> treatmentPrecautions; // 주의사항
    private List<TextIconTemplate> treatmentSuggestionTargets; // 추천대상(권장대상)
    private TextTemplate treatmentSuggestionCycle; // 권장주기
    private TextTemplate treatmentDuration; // 유지기간 (지속시간)
    private TextTemplate treatmentSuggestionTimes; //권장횟수
    private List<CardTemplate> treatmentMerits; // 시술 특장점
    private List<CardTemplate> faqs;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewAttributeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewAttributeTemplate implements Template {

    private long id;
    private long treatmentReviewId;
    private List<TextIconTemplate> treatments;
    private List<TextIconTemplate> solutionTags;

    private static TreatmentReviewAttributeTemplate empty() {
        return TreatmentReviewAttributeTemplate.builder()
                .treatments(Collections.emptyList())
                .solutionTags(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewConfirmTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.review.entity.ContentConcealReason;
import kr.co.yeoshin.common.review.type.ConcealReason;
import kr.co.yeoshin.common.review.type.Evaluation;
import kr.co.yeoshin.common.review.type.TreatmentReviewApproveStatus;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewConfirmTemplate {

    private long id;
    private long treatmentReviewId;
    private TreatmentReviewCreateType type;
    private float starPoint;
    private String contents;
    private String tip;
    private List<Evaluation> evaluationContents;
    private List<ImageTemplate> images;
    private TreatmentReviewApproveStatus status;
    private ConcealReason rejectReason;
    private String verbose;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}


================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewHospitalCommentTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewHospitalCommentTemplate {

    private long id;
    private long treatmentReviewId;
    private String contents;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewLikeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReviewLikeTemplate {

    private long id;
    private long treatmentReviewId;

    public static TreatmentReviewLikeTemplate empty() {
        return TreatmentReviewLikeTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewRewardTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import kr.co.yeoshin.common.utils.model.TreatmentReviewReward;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewRewardTemplate implements Template {

    private long id;
    private int textReviewPoint;
    private int photoReviewPoint;
    private int firstTextReviewPoint;
    private int firstPhotoReviewPoint;
    private int textReceiptReviewPoint;
    private int photoReceiptReviewPoint;

    public static TreatmentReviewRewardTemplate empty() {
        return TreatmentReviewRewardTemplate.builder()
                .id(Constant.Template.NOT_EXIST_ID)
                .build();
    }

    private static TreatmentReviewRewardTemplate of(TreatmentReviewReward reward) {
        return TreatmentReviewRewardTemplate.builder()
                .id(Constant.Template.DEFAULT_ID)
                .textReviewPoint(reward.getTextReviewPoint().getRegisterReward())
                .photoReviewPoint(reward.getPhotoReviewPoint().getRegisterReward())
                .firstTextReviewPoint(reward.getFirstTextReviewPoint().getRegisterReward())
                .firstPhotoReviewPoint(reward.getFirstPhotoReviewPoint().getRegisterReward())
                .textReceiptReviewPoint(reward.getTextReceiptReviewPoint().getRegisterReward())
                .photoReceiptReviewPoint(reward.getPhotoReceiptReviewPoint().getRegisterReward())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewScrapTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentReviewScrapTemplate {

    private long id;
    private long treatmentReviewId;

    public static TreatmentReviewScrapTemplate empty() {
        return TreatmentReviewScrapTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewShortTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewShortTemplate {

    private long id;
    private TreatmentReviewCreateType type;
    private boolean translate;
    private String contentsLanguage;
    private String contents;
    private long memberId;
    private long hospitalId;
    private long salesEventId;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewStatTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewStatTemplate implements Template {

    private long id;
    private long treatmentReviewId;
    private int likeCount;
    private int scrapCount;
    private int replyCount;
    private int reportCount;

    private static TreatmentReviewStatTemplate empty() {
        return TreatmentReviewStatTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.member.type.Sex;
import kr.co.yeoshin.common.member.type.SkinType;
import kr.co.yeoshin.common.review.type.AgeRange;
import kr.co.yeoshin.common.review.type.Evaluation;
import kr.co.yeoshin.common.review.type.TreatmentReviewCreateType;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewTemplate {

    private long id;
    private TreatmentReviewCreateType type;
    private float starPoint;
    private String treatmentContents;
    private boolean translate;
    private String contentsLanguage;
    private String contents;
    private String tip;
    private long memberId;
    private long hospitalId;
    private SkinType skinType;
    private AgeRange age;
    private Sex sex;
    private List<Evaluation> evaluationContents;
    private List<ImageTemplate> images;
    private long salesEventId;
    private List<Long> salesProductIds;
    private boolean report;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime useAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentReviewsWritableTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TreatmentReviewsWritableTemplate {

    private long id;
    private long reservationId;
    private long salesEventId;
    private boolean firstWritable;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime useAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime rewardExpireAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime writableExpireAt;
    @Deprecated
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime expireAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TreatmentStatTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TreatmentStatTemplate {

    private long id;
    private long treatmentId;
    private long salesEventCount;
    private int salesProductPriceAverage;
    private final List<CountTemplate> treatmentReviewEvaluations;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TroubleCategoryTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TroubleCategoryTemplate implements Template {

    private long id;
    private CodeTemplate bodyPart;
    private CodeTemplate type;
    private CodeTemplate subType;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TvLikeTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvLikeTemplate {

    private long id;
    private long tvId;

    public static TvLikeTemplate empty() {
        return TvLikeTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TvReplyTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvReplyTemplate implements Template {

    private long id;
    private long tvId;
    private long memberId;
    private String profileId;
    private String contents;
    private boolean report;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TvScrapTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvScrapTemplate {

    private long id;
    private long tvId;

    public static TvScrapTemplate empty() {
        return TvScrapTemplate.builder().build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TvStatTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TvStatTemplate {

    private long id;
    private long tvId;
    private long viewCount;
    private long likeCount;
    private long scrapCount;
    private long replyCount;
    private long youtubeViewCount;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/TvTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class TvTemplate {

    private long id;
    private String subject;
    private String comment;
    private String video;
    private String videoId;
    private ImageTemplate videoThumbnailImage;
    private String playTime;
    private List<String> displayTags;
    @Builder.Default
    private boolean accessible = true;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/UrlTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import kr.co.yeoshin.backend.common.model.api.template.Template;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class UrlTemplate implements Template {

    private long id;
    @Builder.Default
    private String type = StringUtils.EMPTY;
    @Builder.Default
    private String name = StringUtils.EMPTY;
    private String url;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/WeatherConfigTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class WeatherConfigTemplate {

    private long cacheInSeconds;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payload/template/WeatherTemplate.java
================================================
package kr.co.yeoshin.backend.payload.template;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.weather.service.model.AirPollutionStatusType;
import kr.co.yeoshin.backend.weather.service.model.HumidityStatusType;
import kr.co.yeoshin.backend.weather.service.model.UvIndexStatusType;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class WeatherTemplate {

    private TextIconTemplate weatherStatus;
    private UvIndexStatusType uvIndexStatus;
    private AirPollutionStatusType coarseParticulateMatterStatus;
    private AirPollutionStatusType fineParticulateMatterStatus;
    private HumidityStatusType humidityStatus;

    private double temperature;
    private double uvIndex;
    private double windSpeed;
    private long windDegree;
    private double pm10;
    private double pm2_5;
    private double humidity;

    private double latitude;
    private double longitude;

    private List<String> briefIntroductions;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/controller/model/PaymentRefundAccountPayload.java
================================================
package kr.co.yeoshin.backend.payment.controller.model;

import kr.co.yeoshin.common.type.Bank;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class PaymentRefundAccountPayload {

    private Bank bank;
    private String accountHolder;
    private String account;

    public static PaymentRefundAccountPayload empty() {
        return PaymentRefundAccountPayload.builder()
                .bank(null)
                .accountHolder(StringUtils.EMPTY)
                .account(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/controller/model/PaymentSystemCashHistoryPayload.java
================================================
package kr.co.yeoshin.backend.payment.controller.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.payment.type.SystemCashStatus;
import lombok.Builder;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Builder
@Getter
public class PaymentSystemCashHistoryPayload {

    private long id;

    private String log;
    //todo enum
    private SystemCashStatus status;

    private long price;

    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime dateTime;

    private String description;

    //todo payload
    public static PaymentSystemCashHistoryPayload empty() {
        return PaymentSystemCashHistoryPayload.builder()
                .log(StringUtils.EMPTY)
                .description(StringUtils.EMPTY)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/controller/model/PaymentSystemCashPayload.java
================================================
package kr.co.yeoshin.backend.payment.controller.model;

import kr.co.yeoshin.backend.payload.template.PaymentCardTemplate;
import kr.co.yeoshin.backend.payload.template.SystemCashTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PaymentSystemCashPayload {

    private SystemCashTemplate systemCash;
    private PaymentCardTemplate paymentCard;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/controller/model/PaymentSystemCashRefundPayload.java
================================================
package kr.co.yeoshin.backend.payment.controller.model;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PaymentSystemCashRefundPayload {

    private long ownedCash;
    private long refundableFor100;
    private long refundableFor90;
    private long freeAccumulationCash;
    private long totalRefundCash;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/controller/model/PaymentSystemEasyCheckoutsPayload.java
================================================
package kr.co.yeoshin.backend.payment.controller.model;

import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.payload.template.PaymentCardTemplate;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PaymentSystemEasyCheckoutsPayload {

    private List<PaymentCardTemplate> paymentCards;

    public static PaymentSystemEasyCheckoutsPayload empty() {
        return PaymentSystemEasyCheckoutsPayload.builder()
                .paymentCards(Collections.emptyList())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/usecase/PaymentUseCase.java
================================================
package kr.co.yeoshin.backend.payment.usecase;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType.Service;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.PaymentCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.IamportException;
import kr.co.yeoshin.backend.exception.PaymentException;
import kr.co.yeoshin.backend.iamport.component.retrofit.model.BillingKeyPayload;
import kr.co.yeoshin.backend.iamport.model.IssueBillingContext;
import kr.co.yeoshin.backend.iamport.model.RegisteredCard;
import kr.co.yeoshin.backend.iamport.model.RemoveBillingKeyContext;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.PaymentCardPayload;
import kr.co.yeoshin.backend.payload.PaymentCardSecretPayload;
import kr.co.yeoshin.backend.payment.controller.model.*;
import kr.co.yeoshin.backend.payment.service.PaymentService;
import kr.co.yeoshin.backend.payment.service.SystemCheckoutService;
import kr.co.yeoshin.backend.payment.usecase.model.PaymentBenefitsPayload;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.payment.entity.PaymentBenefit;
import kr.co.yeoshin.common.payment.entity.PaymentCard;
import kr.co.yeoshin.common.payment.entity.PaymentSystemEasyCheckout;
import kr.co.yeoshin.common.payment.entity.RefundAccount;
import kr.co.yeoshin.common.payment.type.CheckoutType;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

@AllArgsConstructor
@UseCase
public class PaymentUseCase {

    private final PaymentService paymentService;
    private final SystemCheckoutService systemCheckoutService;
    private final MemberService memberService;
    private final QuestService questService;
    private final MemberPointService memberPointService;
    private final PayloadFactory payloadFactory;
    private final GlobalCacheTemplate cacheTemplate;
    private final TransactionTemplate transactionTemplate;

    private final String REMOVE_CARD_REASON = "사용자 요청으로 인한 삭제";

    public PaymentSystemEasyCheckoutsPayload systemEasyCheckoutCards() {
        long memberId = DiagnosticContext.fetchMemberId();

        PaymentSystemEasyCheckout systemEasyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(memberId)
                .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST));

        List<RegisteredCard> cards = paymentService.retrieveRegisteredCards(
                Collections.singletonList(systemEasyCheckout.getPaymentCard().getIamportCustomerUid()));
        if (CollectionUtils.isEmpty(cards)) {
            throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST);
        }

        //todo 카드가 만료되었거나, 분실되었을때 상태를 알수 있는지 확인 필요

        return PaymentSystemEasyCheckoutsPayload.builder()
                .paymentCards(payloadFactory.paymentCardTemplate(systemEasyCheckout, cards))
                .build();
    }

    public PaymentCardPayload registerSystemEasyCheckoutCard(SystemPaymentCardRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (cacheTemplate.increaseValue(new CacheKey(Service.PAYMENT_CARD, String.valueOf(memberId)),
                2,
                TimeUnit.SECONDS) > 1) {
            throw new PaymentException(CommonCode.TOO_MANY_REQUESTS,
                    MessageUtils.format("member try to register card multiple. (member id: {})", memberId));
        }

        //간편결제를 이용중인지 확인
        Optional<PaymentSystemEasyCheckout> systemEasyOptional = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(
                memberId);
        if (systemEasyOptional.isPresent()) {
            throw new PaymentException(PaymentCode.PAYMENT_SYSTEM_EASY_CHECKOUT_ALREADY_ON_SERVICE);
        }

        String customerUniqueId = paymentService.generateCustomerUniqueId(memberId, CheckoutType.SYSTEM_EASY_CHECKOUT);

        Supplier<BillingKeyPayload> billingKeyPayloadSupplier = () -> {
            try {
                return paymentService.registerCardAndIssueBilling(IssueBillingContext.builder()
                        .customerUniqueId(customerUniqueId)
                        .card(request.getCard().toIamport())
                        .build());
            } catch (IamportException e) {
                throw new PaymentException(PaymentCode.PAYMENT_CARD_INVALID);
            }
        };

        BillingKeyPayload billingKeyPayload = billingKeyPayloadSupplier.get();

        return transactionTemplate.executeMainWritableTransaction(() -> {
            //카드 등록
            PaymentCard paymentCard = systemCheckoutService.registerPaymentCard(memberId, customerUniqueId);
            //간편결제 등록
            systemCheckoutService.registerSystemEasyCheckout(memberId, paymentCard);

            return PaymentCardPayload.builder()
                    .paymentCard(payloadFactory.paymentCardTemplate(billingKeyPayload))
                    .build();
        });
    }

    public PaymentCardSecretPayload registerSystemEasyCheckoutSecret(SystemEasyCheckoutSecretRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();
        CheckoutType checkoutType = CheckoutType.SYSTEM_EASY_CHECKOUT;

        List<DomainType> issues = transactionTemplate.executeMainWritableTransaction(() -> {
            PaymentSystemEasyCheckout systemEasyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(
                            memberId)
                    .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST));

            if (StringUtils.isNotBlank(systemEasyCheckout.getSecret())
                    && !systemCheckoutService.verifiedSystemCheckoutSecret(memberId, checkoutType)) {
                throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_SECRET_NOT_VERIFIED);
            }

            List<DomainType> questIssues = new ArrayList<>();
            if (StringUtils.isBlank(systemEasyCheckout.getSecret())
                    && questService.paymentSystemEasyCardProgressStatus() == ProgressStatus.PROGRESS) {
                questService.registerPaymentSystemEasyCard(memberId)
                        .ifPresent(x -> {
                            questIssues.add(DomainType.QUEST_PAYMENT_SYSTEM_EASY_CARD);
                            memberPointService.registerPoint(
                                    memberId, MemberPointAddContext.builder()
                                            .title(Action.QUEST_PAYMENT_SYSTEM_EASY_CARD.getTitleKo())
                                            .action(Action.QUEST_PAYMENT_SYSTEM_EASY_CARD)
                                            .publishType(PublishType.SYSTEM)
                                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                    .expireAt(PointUtils.expireAt(Point.QUEST_PAYMENT_SYSTEM_EASY_CARD_DAYS))
                                                    .point(x.getPoint())
                                                    .build()))
                                            .point(x.getPoint())
                                            .type(MemberPointType.REWARD)
                                            .refType(DomainType.QUEST_PAYMENT_SYSTEM_EASY_CARD)
                                            .refId(x.getId())
                                            .build());
                        });
            }

            systemCheckoutService.removeSystemCheckoutSecretVerification(memberId, checkoutType);
            systemCheckoutService.modifySystemEasyCheckoutSecret(memberId, request.getSecret());

            request.getSkipSecret().map(x ->
                    systemEasyCheckout.changeSkipSecretYn(YN.of(x)));

            return questIssues;
        });

        return PaymentCardSecretPayload.builder()
                .result(true)
                .issues(issues)
                .build();
    }

    public BoolPayload registerSystemEasyCheckoutBiometricSecret(SystemEasyCheckoutBiometricSecretRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                            systemCheckoutService.modifySystemEasyCheckoutBiometricSecret(memberId, request.getBiometricSecretType());
                            return true;
                        }
                )).build();
    }

    public BoolPayload skipSecretOn() {
        long memberId = DiagnosticContext.fetchMemberId();
        CheckoutType checkoutType = CheckoutType.SYSTEM_EASY_CHECKOUT;

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                            if (!systemCheckoutService.verifiedSystemCheckoutSecret(memberId, checkoutType)) {
                                throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_SECRET_NOT_VERIFIED);
                            }
                            systemCheckoutService.removeSystemCheckoutSecretVerification(memberId, checkoutType);

                            return systemCheckoutService.modifySystemEasyCheckoutSkipSecret(memberId, true) != null;
                        }
                ))
                .build();
    }

    public BoolPayload skipSecretOff() {
        long memberId = DiagnosticContext.fetchMemberId();
        CheckoutType checkoutType = CheckoutType.SYSTEM_EASY_CHECKOUT;

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() ->
                        systemCheckoutService.modifySystemEasyCheckoutSkipSecret(memberId, false) != null
                ))
                .build();
    }

    public BoolPayload setUpChargeUnit(SystemCashChargeRequest request) {
        ChargeUnitType chargeUnitType = ChargeUnitType.findChargeUnit(request.getChargeUnit());

        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    systemCheckoutService.modifySystemCashAutoCharge(memberId, YN.of(request.isAutoCharge()),
                            chargeUnitType.getPrice());
                    return true;
                })
        ).build();
    }

    public PaymentRefundAccountPayload fetchRefundAccount() {
        long memberId = DiagnosticContext.fetchMemberId();

        Optional<RefundAccount> refundAccountOptional = paymentService.findRefundAccountByMemberId(memberId);
        if (refundAccountOptional.isEmpty()) {
            return PaymentRefundAccountPayload.empty();
        }

        RefundAccount refundAccount = refundAccountOptional.get();
        return PaymentRefundAccountPayload.builder()
                .accountHolder(refundAccount.getAccountHolder())
                .bank(refundAccount.getBank())
                .account(refundAccount.getAccount())
                .build();
    }

    public BoolPayload registerRefundAccount(RefundAccountRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    Member member = memberService.findMember(memberId);
                    if (!StringUtils.equals(member.getName(), request.getAccountHolder())) {
                        throw new PaymentException(PaymentCode.PAYMENT_SYSTEM_ACCOUNT_HOLDER_NOT_MATCH);
                    }

                    //todo 계좌 정보가 유효한지..

                    paymentService.registerRefundAccount(memberId, request.getAccountHolder(), request.getAccount(),
                            request.getBank());

                    return true;
                })
        ).build();
    }

    public PaymentCardPayload changeSystemEasyCheckoutCard(SystemPaymentCardRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        PaymentSystemEasyCheckout systemEasyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(memberId)
                .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST));

        if (StringUtils.isBlank(systemEasyCheckout.getPaymentCard().getIamportCustomerUid())) {
            throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST);
        }

        String customerUniqueId = paymentService.generateCustomerUniqueId(memberId, CheckoutType.SYSTEM_EASY_CHECKOUT);

        Supplier<BillingKeyPayload> billingKeyPayloadSupplier = () -> {
            try {
                return paymentService.registerCardAndIssueBilling(IssueBillingContext.builder()
                        .customerUniqueId(customerUniqueId)
                        .card(request.getCard().toIamport())
                        .build());
            } catch (IamportException e) {
                throw new PaymentException(PaymentCode.PAYMENT_CARD_INVALID);
            }
        };

        BillingKeyPayload billingKeyPayload = billingKeyPayloadSupplier.get();

        systemCheckoutService.modifyPaymentCard(memberId, customerUniqueId);

        return PaymentCardPayload.builder()
                .paymentCard(payloadFactory.paymentCardTemplate(billingKeyPayload))
                .build();
    }

    public BoolPayload deleteSystemEasyCheckoutCard() {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    PaymentSystemEasyCheckout systemEasyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(
                            memberId).orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST));

                    if (StringUtils.isEmpty(systemEasyCheckout.getPaymentCard().getIamportCustomerUid())) {
                        throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST);
                    }

                    paymentService.removeBillingKey(RemoveBillingKeyContext.builder()
                            .reason(REMOVE_CARD_REASON)
                            .customerUniqueId(systemEasyCheckout.getPaymentCard().getIamportCustomerUid()).build());

                    //카드간편결제 삭제
                    systemCheckoutService.removeSystemEasyCheckoutCard(memberId);

                    //카드정보 삭제
                    systemCheckoutService.removePaymentCard(memberId,
                            systemEasyCheckout.getPaymentCard().getIamportCustomerUid());
                    return true;
                })
        ).build();
    }

    public BoolPayload verifySystemEasyCheckoutSecret(SystemEasyCheckoutSecretVerifyRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();
        CheckoutType checkoutType = CheckoutType.SYSTEM_EASY_CHECKOUT;

        PaymentSystemEasyCheckout systemEasyCheckout = systemCheckoutService.fetchSystemEasyCheckoutByMemberId(memberId)
                .orElseThrow(() -> new PaymentException(PaymentCode.PAYMENT_CHECKOUT_CARD_NOT_EXIST));
        if (StringUtils.isBlank(systemEasyCheckout.getSecret())) {
            throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_SECRET_KEY_NOT_REGISTERED);
        }

        if (!StringUtils.equals(systemEasyCheckout.getSecret(), request.getSecret())) {
            systemCheckoutService.increaseSystemCheckoutSecretVerificationFailCount(memberId, checkoutType);
            throw new PaymentException(PaymentCode.PAYMENT_CHECKOUT_SECRET_INVALID);
        }

        systemCheckoutService.verifySystemCheckoutSecretVerification(memberId, checkoutType);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public PaymentBenefitsPayload benefits() {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            List<PaymentBenefit> benefits = paymentService.findAllPaymentBenefits();

            return PaymentBenefitsPayload.builder()
                    .paymentBenefits(benefits.stream()
                            .map(payloadFactory::paymentBenefitTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/payment/usecase/model/PaymentBenefitsPayload.java
================================================
package kr.co.yeoshin.backend.payment.usecase.model;

import java.util.List;
import kr.co.yeoshin.backend.common.model.api.template.PaymentBenefitTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class PaymentBenefitsPayload {

    private List<PaymentBenefitTemplate> paymentBenefits;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/point/usecase/MemberPointUseCase.java
================================================
package kr.co.yeoshin.backend.point.usecase;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.member.service.model.MemberLevel;
import kr.co.yeoshin.backend.member.service.model.MemberLevelContainer;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.PointCompositionPageablePayload;
import kr.co.yeoshin.backend.payload.PointPageablePayload;
import kr.co.yeoshin.backend.payload.PointPayload;
import kr.co.yeoshin.backend.point.controller.model.MemberPointCompositionType;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.usecase.model.MemberPointPageableContext;
import kr.co.yeoshin.backend.point.usecase.model.PointCompositionPageableContext;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.common.member.entity.MemberLevelReward;
import kr.co.yeoshin.common.member.type.Level;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.point.entity.MemberPoint;
import kr.co.yeoshin.common.point.entity.MemberPointComposition;
import kr.co.yeoshin.common.point.entity.MemberPointSummary;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import kr.co.yeoshin.common.utils.TicketUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class MemberPointUseCase {

    private final MemberPointService memberPointService;
    private final MemberService memberService;
    private final TicketService ticketService;
    private final PayloadFactory payloadFactory;
    private final OrderService orderService;

    public PointPageablePayload list(MemberPointPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = memberPointService.pageable(pageableContext);
        Page<MemberPoint> points = memberPointService.fetchAllPointsByMemberId(memberId,
                pageableContext.getTypes(),
                pageableContext.getFrom(),
                pageableContext.getTo(),
                pageable);
        
        String nextToken = points.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                MemberPointPageableContext.builder()
                        .page(points.getPageable().getPageNumber() + 1)
                        .types(pageableContext.getTypes())
                        .from(pageableContext.getFrom())
                        .to(pageableContext.getTo())
                        .build());

        return PointPageablePayload.builder()
                .points(payloadFactory.pointTemplates(points.getContent()))
                .pageable(payloadFactory.pageableTemplate(points, nextToken))
                .build();
    }

    public PointPayload extinctionPoints(int days) {
        long memberId = DiagnosticContext.fetchMemberId();
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime to = PointUtils.expireAt(now.plusDays(days));

        int point = memberPointService.findAllPointSummaries(memberId)
                .stream()
                .filter(x -> x.getExpireAt().isAfter(now))
                .filter(x -> x.getExpireAt().isBefore(to) || x.getExpireAt().equals(to))
                .map(MemberPointSummary::getAccumulatePoint)
                .mapToInt(Integer::intValue)
                .sum();

        return PointPayload.builder()
                .point(point)
                .build();
    }

    public PointPayload accumulablePoints() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Ticket> usableTickets =
                ticketService.fetchAllTicketsByMemberIdAndStatuses(memberId, List.of(TicketStatus.UNUSED, TicketStatus.RESERVED));

        Map<Long, OrderSalesProduct> orderSalesProductsById =
                orderService.fetchOrderSalesProductsByIds(usableTickets.stream()
                                .map(x -> x.getOrderSalesProduct().getId())
                                .collect(Collectors.toSet()))
                        .stream()
                        .collect(Collectors.toMap(OrderSalesProduct::getId, Function.identity()));

        MemberLevelContainer levelContainer = memberService.findMemberLevel(memberId, LocalDateTime.now());
        MemberLevel memberLevel = levelContainer.getMemberLevel();
        Level level = memberLevel.getLevel();

        return PointPayload.builder()
                .point(usableTickets.stream()
                        .map(x -> orderSalesProductsById.get(x.getOrderSalesProduct().getId()))
                        .map(OrderSalesProduct::getSalesProductVersion)
                        .map(TicketUtils::ticketPrice)
                        .mapToInt(level::calculateRewardPoint)
                        .sum())
                .build();
    }

    public PointCompositionPageablePayload compositions(PointCompositionPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = memberPointService.pageable(pageableContext);

        Set<MemberPointCompositionType> compositionTypes = pageableContext.getCompositionTypes();
        Page<MemberPointComposition> page = memberPointService.findAllCompositions(memberId,
                compositionTypes.stream()
                        .map(MemberPointCompositionType::getActions)
                        .flatMap(Collection::stream)
                        .collect(Collectors.toSet()),
                pageableContext.getFrom(),
                pageableContext.getTo(),
                pageable);

        List<Ticket> tickets = ticketService.findAllTicketsByTicketIds(page.stream()
                .filter(x -> x.getRefType() == DomainType.TICKET)
                .map(MemberPointComposition::getRefId)
                .collect(Collectors.toSet()));

        Set<Long> orderSalesProductIds = tickets.stream()
                .map(x -> x.getOrderSalesProduct().getId())
                .collect(Collectors.toSet());

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(orderSalesProductIds);

        List<MemberLevelReward> memberLevelRewards = memberService.findAllMemberLevelRewardsByRefs(memberId,
                DomainType.MEMBER_POINT, page.stream()
                        .map(x -> x.getMemberPoint().getId())
                        .collect(Collectors.toSet()));

        String nextToken = page.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                PointCompositionPageableContext.builder()
                        .compositionTypes(pageableContext.getCompositionTypes())
                        .page(page.getPageable().getPageNumber() + 1)
                        .from(pageableContext.getFrom())
                        .to(pageableContext.getTo())
                        .build());

        return PointCompositionPageablePayload.builder()
                .pointCompositions(payloadFactory.pointCompositionTemplates(page.getContent()))
                .tickets(payloadFactory.ticketTemplates(tickets, orderSalesProducts))
                .memberLevelRewards(payloadFactory.memberLevelRewardTemplates(memberLevelRewards))
                .pageable(payloadFactory.pageableTemplate(page, nextToken))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/quest/usecase/QuestUseCase.java
================================================
package kr.co.yeoshin.backend.quest.usecase;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.QuestCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.CommonException;
import kr.co.yeoshin.backend.exception.QuestException;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.QuestAttendancePayload;
import kr.co.yeoshin.backend.payload.QuestAttendancesPayload;
import kr.co.yeoshin.backend.payload.QuestKingOfInvitationPayload;
import kr.co.yeoshin.backend.payload.QuestsPayload;
import kr.co.yeoshin.backend.payload.template.QuestKingOfInvitationRankTemplate;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.quest.service.model.QuestAttendanceContainer;
import kr.co.yeoshin.backend.quest.service.model.QuestAttendanceReward;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.quest.entity.QuestAttendance;
import kr.co.yeoshin.common.quest.entity.QuestKingOfInvitationRank;
import kr.co.yeoshin.common.quest.entity.QuestSummary;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class QuestUseCase {

    private final MemberPointService memberPointService;
    private final QuestService questService;
    private final MemberService memberService;
    private final TransactionTemplate transactionTemplate;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final PayloadFactory payloadFactory;

    public QuestsPayload questSummary() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<QuestSummary> questSummaries = questService.findAllQuestSummaries(memberId);
        if (CollectionUtils.isEmpty(questSummaries)) {
            return QuestsPayload.empty();
        }

        return QuestsPayload.builder()
                .quests(payloadFactory.questTemplates(questSummaries))
                .build();
    }

    public QuestAttendancesPayload attendances(int year, int month) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<QuestAttendance> attendances = questService.findAttendances(memberId, year, month);

        return QuestAttendancesPayload.builder()
                .attendances(payloadFactory.questAttendanceTemplates(attendances))
                .build();
    }

    public QuestAttendancePayload attend() {
        LocalDateTime at = LocalDateTime.now();

        if (questService.attendanceProgressStatus() != ProgressStatus.PROGRESS) {
            throw new QuestException(QuestCode.QUEST_NOT_IN_PROGRESS);
        }

        long memberId = DiagnosticContext.fetchMemberId();

        QuestAttendanceContainer container = transactionTemplate.executeMainWritableTransaction(() -> {
            Optional<QuestAttendanceContainer> attendanceContainer = questService.attend(memberId, at);
            attendanceContainer.ifPresent(x -> {
                QuestAttendance attendance = x.getAttendance();
                for (QuestAttendanceReward reward : x.getRewards()) {
                    memberPointService.registerPoint(memberId, MemberPointAddContext.builder()
                            .title(reward.getAction().getTitleKo())
                            .action(reward.getAction())
                            .publishType(PublishType.SYSTEM)
                            .compositions(Collections.singletonList(MemberPointComposition.builder()
                                    .expireAt(PointUtils.expireAt(Point.QUEST_ATTENDANCE_EXPIRE_DAYS))
                                    .point(reward.getPoint())
                                    .build()))
                            .point(reward.getPoint())
                            .type(MemberPointType.REWARD)
                            .refType(DomainType.QUEST_ATTENDANCE)
                            .refId(attendance.getId())
                            .build());
                }
            });

            return attendanceContainer
                    .orElseThrow(() -> {
                        log.error("member({}) already attend at ({})", memberId, at);
                        return new CommonException(CommonCode.ERROR);
                    });
        });

        Optional<DomainEventType> domainEvent = container.getDomainEvent();
        domainEvent.ifPresent(event -> queueMessageDomainEventContext.addDomainEvent(event, memberId));

        return QuestAttendancePayload.builder()
                .attendance(payloadFactory.questAttendanceTemplate(container.getAttendance()))
                .build();
    }

    public QuestKingOfInvitationPayload kingOfInvitations(int year, int month) {
        ZonedDateTime now = ZonedDateTime.now();
        long memberId = DiagnosticContext.fetchMemberId(() -> -1L);

        // return empty result until this month's third day.
        ZonedDateTime limit = now.withDayOfMonth(3).with(LocalTime.MIN);
        if (now.isBefore(limit) && month == now.getMonthValue() && year == now.getYear()) {
            return QuestKingOfInvitationPayload.builder()
                    .ranks(Collections.emptyList())
                    .myRank(QuestKingOfInvitationRankTemplate.empty(
                            memberId == -1 ? "" : memberService.findMember(memberId).getProfileId()))
                    .aggregatedAt(now)
                    .build();
        }

        List<QuestKingOfInvitationRank> ranks = transactionTemplate.executeMainReadableTransaction(
                () -> questService.kingOfInvitationRanks(year, month, 50));

        QuestKingOfInvitationRankTemplate myRank;
        if (memberId == -1) {
            myRank = QuestKingOfInvitationRankTemplate.empty("");
        } else {
            myRank = transactionTemplate.executeMainWritableTransaction(
                            () -> questService.kingOfInvitationRank(year, month, memberId))
                    .map(payloadFactory::questKingOfInvitationRankTemplate)
                    .orElseGet(() -> QuestKingOfInvitationRankTemplate
                            .empty(memberService.findMember(memberId).getProfileId()));
        }

        return QuestKingOfInvitationPayload.builder()
                .ranks(ranks.stream()
                        .map(payloadFactory::questKingOfInvitationRankTemplate)
                        .collect(Collectors.toList()))
                .myRank(myRank)
                .aggregatedAt(ranks.stream().findFirst()
                        .map(QuestKingOfInvitationRank::getUpdated)
                        .map(DateUtil::convertFrom)
                        .orElse(now))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/component/publisher/MessagePublisherTemplate.java
================================================
package kr.co.yeoshin.backend.queue.component.publisher;

import kr.co.yeoshin.backend.queue.model.Message;

public interface MessagePublisherTemplate {

    boolean publishAccessLog(Message<?> message);

    boolean publishBiLog(Message<?> message);

    boolean publishApplicationLog(Message<?> message);

    boolean publishDomainEvent(Message<?> message);

    boolean publishDomainEventFast(Message<?> message);

    boolean publishDomainEventFastest(Message<?> message);

    boolean publishDomainEventSlow(Message<?> message);

    boolean publishDomainEventSlowest(Message<?> message);

    boolean publishDomainLog(Message<?> message);

    boolean publishCpm(Message<?> message);

    boolean publishNotification(Message<?> message);

    boolean publishRestriction(Message<?> message);
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/component/publisher/QueueMessagePublisherTemplate.java
================================================
package kr.co.yeoshin.backend.queue.component.publisher;

import kr.co.yeoshin.backend.queue.model.Message;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@AllArgsConstructor
@Component
public class QueueMessagePublisherTemplate implements MessagePublisherTemplate {

    private final SqsQueueMessagePublisher sqsPublisher;

    @Override
    public boolean publishAccessLog(Message<?> message) {
        return sqsPublisher.publishAccessLog(message);
    }

    @Override
    public boolean publishBiLog(Message<?> message) {
        return sqsPublisher.publishBiLog(message);
    }

    @Override
    public boolean publishApplicationLog(Message<?> message) {
        return sqsPublisher.publishApplicationLog(message);
    }

    @Override
    public boolean publishDomainEvent(Message<?> message) {
        return sqsPublisher.publishDomainEvent(message);
    }

    @Override
    public boolean publishDomainEventFast(Message<?> message) {
        return sqsPublisher.publishDomainEventFast(message);
    }

    @Override
    public boolean publishDomainEventFastest(Message<?> message) {
        return sqsPublisher.publishDomainEventFastest(message);
    }

    @Override
    public boolean publishDomainEventSlow(Message<?> message) {
        return sqsPublisher.publishDomainEventSlow(message);
    }

    @Override
    public boolean publishDomainEventSlowest(Message<?> message) {
        return sqsPublisher.publishDomainEventSlowest(message);
    }

    @Override
    public boolean publishDomainLog(Message<?> message) {
        return sqsPublisher.publishDomainLog(message);
    }

    @Override
    public boolean publishCpm(Message<?> message) {
        return sqsPublisher.publishCpm(message);
    }

    @Override
    public boolean publishNotification(Message<?> message) {
        return sqsPublisher.publishNotification(message);
    }

    @Override
    public boolean publishRestriction(Message<?> message) {
        return sqsPublisher.publishRestriction(message);
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/accesslog/AccessLogPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.accesslog;

import lombok.Data;

@Data
public class AccessLogPayload {

    private String version;
    private String env;
    private String remoteAddr;
    private String userAgent;
    private String scheme;
    private String upstream;
    private String authority;
    private String method;
    private String requestUri;
    private int statusCode;
    private long duration;
    private String startTime;
    private String timestamp;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/bilog/BiLogPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.bilog;

import lombok.Data;

@Data
public class BiLogPayload {
    //https://fastlane.atlassian.net/wiki/spaces/YR/pages/1362625012/V2+Data+Format
    private String date;
    private String dateTime;
    private String requestId; // sequencial한 로그를 하나로 보기 위한 request id
    private String logAction; // log action ex)membership
    private String logSubAction1; //log action의 세부적인 값 ex)login
    private String logSubAction2;
    private String logStatus; // 로그 상태값(추후 확정예정)
    private String userId;
    private String userGender;
    private String userBirthYear;
    private String loginType; // ex) kakao, yeoshin...
    private String hospitalName; // 병원이름
    private String hospitalCode; // 병원코드
    private String hospitalArea1; // ex) 서울특별시
    private String hospitalArea2; // ex) 강남구
    private String payPoint; // 포인트 사용금액
    private String payCoupon; // 쿠폰 사용금액
    private String payType; // 결제 수단
    private String payTotal; // 결제 금액
    private String remoteIp;
    private String deviceType; //ex) aos, ios, web
    private String searchKeyword; // 검색키워드
    private String searchDocument; // 검색결과
    private String searchSort; // 검색타입
    private String searchCategory; //검색카테고리

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/cpm/CpmPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.cpm;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Cpm;
import kr.co.yeoshin.common.type.DeviceType;
import lombok.Data;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;

@Data
public class CpmPayload {

    @JsonFormat(pattern = Cpm.CPM_MESSAGE_DATE_FORMAT)
    private LocalDate date;
    @JsonFormat(pattern = Cpm.CPM_MESSAGE_DATETIME_FORMAT)
    private LocalDateTime dateTime;
    private String ip;
    private long memberId;
    private List<CpmSalesEvent> salesEvents;
    private CpmActionType actionType;
    private CpmEventType eventType;
    private int value;
    private DeviceType devicePlatform;
    private String userAgent;
    private String language;
    private String campaign;
    private int defaultPriority;
    private Map<String, Object> context;

    @JsonIgnore
    public LocalDateTime getReportAt() {
        return dateTime.truncatedTo(ChronoUnit.HOURS);
    }

    @JsonIgnore
    public List<Long> getSalesEventIds() {
        return Optional.ofNullable(salesEvents)
                .filter(CollectionUtils::isNotEmpty)
                .orElse(Collections.emptyList())
                .stream()
                .map(CpmSalesEvent::getSalesEventId)
                .collect(Collectors.toList());
    }

    public Map<String, Object> getContext() {
        return MapUtils.isEmpty(context) ? Collections.emptyMap() : context;
    }
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/domainevent/DomainEventPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.domainevent;

import java.util.Map;
import lombok.Data;

@Data
public class DomainEventPayload {

    private long id;
    private DomainEventType event;
    private Map<String, Object> contexts;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/domainlog/DomainLogPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.domainlog;

import java.util.Map;
import kr.co.yeoshin.common.type.DomainType;
import lombok.Data;

@Data
public class DomainLogPayload {

    private DomainType domainType;
    private Map<String, Object> payload;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/domainlog/MonitoringReservationStatusLogPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.domainlog;

import lombok.Data;

@Data
public class MonitoringReservationStatusLogPayload {

    private long reservationId;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/domainlog/ReservationCrmLogPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.domainlog;

import kr.co.yeoshin.common.reservation.type.CrmDevice;
import kr.co.yeoshin.common.reservation.type.ReservationSource;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.type.YN;
import lombok.Data;

@Data
public class ReservationCrmLogPayload {

    private long reservationId;
    private ReservationStatus reservationStatus;
    private long version;
    private CrmDevice crmType;
    private ReservationSource actionSource;
    private String actionType;
    private YN completeYn;
    private String content;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/notification/NotificationPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.notification;

import java.util.ArrayList;
import java.util.List;
import kr.co.yeoshin.backend.notification.component.model.*;
import lombok.Data;

@Data
public class NotificationPayload {

    private List<GmailNotificationContext> mail;
    private List<FirebasePushNotificationContext> firebase;
    private List<NhnSmsNotificationContext> sms;
    private List<NhnKakaoAlimTalkNotificationContext> alimTalk;
    private List<SlackNotificationContext> slack;

    public NotificationPayload addSms(NhnSmsNotificationContext context) {
        if (this.sms == null) {
            this.sms = new ArrayList<>();
        }
        this.sms.add(context);

        return this;
    }

    public NotificationPayload addMail(GmailNotificationContext context) {
        if (this.mail == null) {
            this.mail = new ArrayList<>();
        }
        this.mail.add(context);

        return this;
    }

    public NotificationPayload addAlimTalk(NhnKakaoAlimTalkNotificationContext context) {
        if (this.alimTalk == null) {
            this.alimTalk = new ArrayList<>();
        }
        this.alimTalk.add(context);

        return this;
    }

    public NotificationPayload addSlack(SlackNotificationContext context) {
        if (this.slack == null) {
            this.slack = new ArrayList<>();
        }
        this.slack.add(context);

        return this;
    }

    public NotificationPayload addFirebase(FirebasePushNotificationContext context) {
        if (this.firebase == null) {
            this.firebase = new ArrayList<>();
        }
        this.firebase.add(context);

        return this;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/restriction/RestrictionPayload.java
================================================
package kr.co.yeoshin.backend.queue.model.restriction;

import java.util.Map;
import kr.co.yeoshin.backend.queue.model.restriction.type.RestrictionType;
import lombok.Data;

@Data
public class RestrictionPayload {

    private RestrictionType type;
    private Map<String, Object> payload;
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/restriction/model/RestrictionGeoPositionUsagePayload.java
================================================
package kr.co.yeoshin.backend.queue.model.restriction.model;

import java.time.LocalDateTime;
import kr.co.yeoshin.common.restriction.type.UsageType;
import kr.co.yeoshin.common.type.DeviceType;
import lombok.*;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
@Builder
@Getter
public class RestrictionGeoPositionUsagePayload {

    private long memberId;
    private DeviceType deviceType;
    private String appVersion;
    private String appClientId;
    private UsageType usageType;
    private String usage;
    private double latitude;
    private double longitude;
    private LocalDateTime at;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/model/thirdparty/ThirdPartyServicePayload.java
================================================
package kr.co.yeoshin.backend.queue.model.thirdparty;

import java.util.Map;
import lombok.Data;

@Data
public class ThirdPartyServicePayload {

    private ThirdPartyServiceType service;
    private ThirdPartyActionType actionType;
    private String requestId;
    private Map<String, Object> payload;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/queue/sender/BigQuerySenderTemplate.java
================================================
package kr.co.yeoshin.backend.queue.sender;

import com.google.cloud.bigquery.TableId;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.PostConstruct;
import kr.co.yeoshin.backend.config.props.AnalyticsBigQueryProps;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.props.BigQueryItemProps;
import kr.co.yeoshin.backend.queue.model.accesslog.AccessLogPayload;
import kr.co.yeoshin.backend.queue.sender.model.CpmLog;
import kr.co.yeoshin.backend.queue.sender.model.SalesEventRefLog;
import kr.co.yeoshin.common.utils.JsonUtils;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

@RequiredArgsConstructor
@Component
public class BigQuerySenderTemplate {

    private final ApplicationProps applicationProps;
    private final BigQueryConnector bigQueryConnector;
    private BigQuerySender bigQuerySender;

    @PostConstruct
    public void init() {
        bigQuerySender = new BigQuerySender(bigQueryConnector.getBigQuery());
    }

    public boolean sendAccessLog(AccessLogPayload payload) {
        AnalyticsBigQueryProps bigQueryProps = applicationProps.getAnalytics().getBigQuery();
        if (!bigQueryProps.isActivate()) {
            return true;
        }

        BigQueryItemProps accessLogProps = bigQueryProps.getAccessLog();
        if (accessLogProps == null || StringUtils.isAnyBlank(accessLogProps.getDataSet(), accessLogProps.getTable())) {
            return false;
        }

        Map<String, Object> row = new HashMap<>();
        row.put("version", payload.getVersion());
        row.put("env", payload.getEnv());
        row.put("scheme", payload.getScheme());
        row.put("authority", payload.getAuthority());
        row.put("uri", payload.getRequestUri());
        row.put("method", payload.getMethod());
        row.put("duration", payload.getDuration());
        row.put("remote_addr", payload.getRemoteAddr());
        row.put("user_agent", payload.getUserAgent());
        row.put("upstream", payload.getUpstream());
        row.put("status_code", payload.getStatusCode());
        row.put("created_at", payload.getStartTime());
        row.put("created_date", LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));

        return bigQuerySender.sendPayload(TableId.of(
                accessLogProps.getDataSet(),
                accessLogProps.getTable()
        ), row);
    }

    public boolean sendCpmLogs(List<CpmLog> cpmLogs) {
        AnalyticsBigQueryProps bigQueryProps = applicationProps.getAnalytics().getBigQuery();
        if (!bigQueryProps.isActivate()) {
            return true;
        }

        BigQueryItemProps cpmLogProps = bigQueryProps.getCpmLog();
        if (cpmLogProps == null || StringUtils.isAnyBlank(cpmLogProps.getDataSet(), cpmLogProps.getTable())) {
            return false;
        }

        return bigQuerySender.sendPayloads(TableId.of(
                cpmLogProps.getDataSet(),
                cpmLogProps.getTable()
        ), cpmLogs.stream()
                .map(cpmLog -> {
                    Map<String, Object> row = new HashMap<>();
                    row.put("group_key", cpmLog.getGroupKey());
                    row.put("member_id", cpmLog.getMemberId());
                    row.put("ip", cpmLog.getIp());
                    row.put("sales_event_id", cpmLog.getSalesEventId());
                    row.put("action_type", Optional.ofNullable(cpmLog.getActionType())
                            .map(Enum::name)
                            .orElse(StringUtils.EMPTY));
                    row.put("event_type", Optional.ofNullable(cpmLog.getEventType())
                            .map(Enum::name)
                            .orElse(StringUtils.EMPTY));
                    row.put("device_platform", cpmLog.getDevicePlatform());
                    row.put("user_agent", cpmLog.getUserAgent());
                    row.put("paid_ad_price", cpmLog.getPaidAdPrice());
                    row.put("paid_ad_view_count", cpmLog.getPaidAdViewCount());
                    row.put("free_ad_price", cpmLog.getFreeAdPrice());
                    row.put("free_ad_view_count", cpmLog.getFreeAdViewCount());
                    row.put("hour", cpmLog.getDateTime().getHour());
                    row.put("priority", cpmLog.getPriority());
                    row.put("language", cpmLog.getLanguage());
                    row.put("context", JsonUtils.toJsonString(cpmLog.getContext()));
                    row.put("created_at", cpmLog.getDateTime().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                    row.put("created_date", cpmLog.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
                    return row;
                }).collect(Collectors.toList()));
    }


    public boolean sendSalesEventRefLogs(List<SalesEventRefLog> refLogs) {
        AnalyticsBigQueryProps bigQueryProps = applicationProps.getAnalytics().getBigQuery();
        if (!bigQueryProps.isActivate()) {
            return true;
        }

        BigQueryItemProps refLogProps = bigQueryProps.getSalesEventRefLog();
        if (refLogProps == null || StringUtils.isAnyBlank(refLogProps.getDataSet(), refLogProps.getTable())) {
            return false;
        }

        return bigQuerySender.sendPayloads(TableId.of(
                refLogProps.getDataSet(),
                refLogProps.getTable()
        ), refLogs.stream()
                .map(refLog -> {
                    Map<String, Object> row = new HashMap<>();
                    row.put("member_id", refLog.getMemberId());
                    row.put("ip", refLog.getIp());
                    row.put("sales_event_id", refLog.getSalesEventId());
                    row.put("event_type", Optional.ofNullable(refLog.getEventType())
                            .map(Enum::name)
                            .orElse(StringUtils.EMPTY));
                    row.put("device_platform", refLog.getDevicePlatform());
                    row.put("user_agent", refLog.getUserAgent());
                    row.put("display_index", refLog.getDisplayIndex());
                    row.put("ref_publish_at",
                            refLog.getRefPublishAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                    row.put("ref_take_at", refLog.getRefTakeAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                    row.put("ref_elapse_seconds", Duration.between(refLog.getRefPublishAt(), refLog.getRefTakeAt()).getSeconds());
                    row.put("hour", refLog.getDateTime().getHour());
                    row.put("created_at", refLog.getDateTime().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                    row.put("created_date", refLog.getDateTime().toLocalDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
                    return row;
                }).collect(Collectors.toList()));
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/ratelimit/model/RateLimitRedisTemplate.java
================================================
package kr.co.yeoshin.backend.ratelimit.model;

import org.springframework.data.redis.core.RedisTemplate;

public class RateLimitRedisTemplate<K, V> extends RedisTemplate<K, V> {

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/recommend/usecase/RecommendUseCase.java
================================================
package kr.co.yeoshin.backend.recommend.usecase;

import com.google.common.base.Functions;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import kr.co.yeoshin.backend.board.service.ThemeService;
import kr.co.yeoshin.backend.board.service.TreatmentFocusService;
import kr.co.yeoshin.backend.cart.service.CartService;
import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.Constant.Context;
import kr.co.yeoshin.backend.common.Constant.Recommend;
import kr.co.yeoshin.backend.common.Constant.Request.Query;
import kr.co.yeoshin.backend.common.Constant.SalesEvent.Badge;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.GeoPosition;
import kr.co.yeoshin.backend.common.model.SortType;
import kr.co.yeoshin.backend.common.model.TroubleSearchableType;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageRestrictionContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.context.Header;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.MemberCouponUsable;
import kr.co.yeoshin.backend.exception.RecommendException;
import kr.co.yeoshin.backend.explorer.service.ExplorerService;
import kr.co.yeoshin.backend.explorer.usecase.model.ExplorerRankingTreatmentPageableContext;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalSearchableContext;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.interesting.service.model.InterestingContainer;
import kr.co.yeoshin.backend.map.controller.model.SalesType;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.order.service.model.OrderMileageDiscountContainer;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.RecommendBySolutionTagTemplate;
import kr.co.yeoshin.backend.payload.template.model.HospitalPlaceRelation;
import kr.co.yeoshin.backend.payload.template.type.SalesProductDiscountType;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.CpmEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.component.model.RecommendSalesEventMeta;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.recommend.service.model.*;
import kr.co.yeoshin.backend.recommend.stream.RecommendMediator;
import kr.co.yeoshin.backend.recommend.stream.RecommendTask;
import kr.co.yeoshin.backend.recommend.usecase.model.At;
import kr.co.yeoshin.backend.recommend.usecase.model.MapHospitalSalesEventSearchableContext;
import kr.co.yeoshin.backend.recommend.usecase.model.MapRadiusSalesEventSearchableContext;
import kr.co.yeoshin.backend.recommend.usecase.model.RecommendPageableContext;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewAttribute;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewAttributeConfig;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewContainer;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventScrapService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesevent.service.model.*;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.salesproduct.service.model.SalesProductWithTreatments;
import kr.co.yeoshin.backend.salesproduct.service.model.TroubleCategory;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.backend.search.utils.SearchUtils;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.backend.treatment.service.TreatmentCounselingService;
import kr.co.yeoshin.backend.treatment.service.TreatmentLibraryService;
import kr.co.yeoshin.backend.treatment.service.model.TreatmentLibraryFacade;
import kr.co.yeoshin.backend.treatment.service.model.TreatmentStat;
import kr.co.yeoshin.backend.treatment.service.model.TreatmentStatConfigure;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.backend.tv.service.model.TvStat;
import kr.co.yeoshin.backend.tv.usecase.model.TvSearchableContext;
import kr.co.yeoshin.backend.utils.CouponUtils;
import kr.co.yeoshin.backend.utils.MonitorUtils;
import kr.co.yeoshin.backend.utils.SalesEventUtils;
import kr.co.yeoshin.common.board.entity.*;
import kr.co.yeoshin.common.board.type.ExplorerThemeLocationType;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.CouponIssueStatus;
import kr.co.yeoshin.common.coupon.type.CouponStatus;
import kr.co.yeoshin.common.elasticsearch.document.HospitalDocument;
import kr.co.yeoshin.common.elasticsearch.document.SalesEventDocument;
import kr.co.yeoshin.common.elasticsearch.document.TvDocument;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.place.type.PlaceType;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.recommend.entity.*;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.review.entity.TreatmentReviewTranslation;
import kr.co.yeoshin.common.review.type.Evaluation;
import kr.co.yeoshin.common.tv.entity.Tv;
import kr.co.yeoshin.common.tv.entity.TvAsSalesEvent;
import kr.co.yeoshin.common.tv.entity.TvAsTreatment;
import kr.co.yeoshin.common.type.Version;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.GeoUtils;
import kr.co.yeoshin.common.utils.KoreanUtils;
import kr.co.yeoshin.common.utils.ListUtils;
import kr.co.yeoshin.common.utils.model.GeoPoint;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.data.domain.Pageable;

@AllArgsConstructor
@UseCase
public class RecommendUseCase {

    private final ApplicationProps applicationProps;
    private final RecommendService recommendService;
    private final ReportService reportService;
    private final MemberService memberService;
    private final InterestingService interestingService;
    private final SalesProductService salesProductService;
    private final SalesEventService salesEventService;
    private final SalesEventScrapService salesEventScrapService;
    private final HospitalService hospitalService;
    private final TvService tvService;
    private final TicketService ticketService;
    private final CartService cartService;
    private final ExplorerService explorerService;
    private final TreatmentReviewService treatmentReviewService;
    private final ThemeService themeService;
    private final TreatmentCounselingService treatmentCounselingService;
    private final TreatmentFocusService treatmentFocusService;
    private final TreatmentLibraryService treatmentLibraryService;
    private final SearchService searchService;
    private final CouponService couponService;
    private final MemberPointService memberPointService;
    private final OrderService orderService;
    private final SettingTemplate settingTemplate;
    private final PayloadFactory payloadFactory;
    private final QueueMessageRestrictionContext restrictionContext;
    private final QueueMessagePublisherTemplate messagePublisher;

    private static final int TREATMENT_REVIEW_ATTRIBUTE_SOLUTION_TAG_COUNT = 2;
    private static final int TREATMENT_REVIEW_ATTRIBUTE_TREATMENT_COUNT = 4;


    public RecommendBySolutionTagsPayload recommendSalesEventsWithTreatmentReviewsByTroubles(
            List<Long> troubleIds, Optional<String> campaign) {
        final int RECOMMEND_SALES_EVENT_COUNT_PER_SOLUTION_TAG = 6;
        final int RECOMMEND_TREATMENT_REVIEW_COUNT = 1;

        int recommendTakeCount = settingTemplate.recommendSalesEventsByTroubles(RECOMMEND_SALES_EVENT_COUNT_PER_SOLUTION_TAG);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        InterestingContainer interestingContainer = DiagnosticContext.ifVirtualMemberOrElse(
                () -> InterestingContainer.empty(-1, false),
                interestingService::findInteresting);

        TroubleCategory troubleCategory = Optional.ofNullable(ListUtils.takeRandomElement(troubleIds))
                .map(attributeFacade::findTroubleCategoryByTroubleId)
                .orElseGet(() -> recommendService.getRecommendableTroubleCategory(
                        recommendFacade, attributeFacade, interestingContainer))
                .orElse(ListUtils.takeRandomElement(attributeFacade.findAllTroubleCategories()));

        List<RecommendSalesEventLinksBySolutionTag> recommendSalesEventBuckets = recommendService.getRecommendSalesEventBySolutionTags(
                DiagnosticContext.recommendScope(),
                recommendFacade,
                attributeFacade.findSolutionTagIdsByTroubleCategoryId(troubleCategory.getId()));

        List<PlaceType> preferPlaces = interestingContainer.getPlaces();

        List<RecommendSalesEventLinksBySolutionTag> recommendLinks = new ArrayList<>();
        Set<Long> excludeRecommendSalesEventIds = new HashSet<>();

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        for (var bucket : recommendSalesEventBuckets) {
            List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                    .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                            DiagnosticContext.recommendScope(), bucket.getRecommendSalesEventIds(),
                            Recommend.AGGREGATE_DEFAULT_COUNT))
                    .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e))
                    .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                    .filter((c, e) -> !excludeRecommendSalesEventIds.contains(e))
                    .take(recommendTakeCount, mediator);
            if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
                continue;
            }

            excludeRecommendSalesEventIds.addAll(recommendSalesEventIds);

            recommendLinks.add(RecommendSalesEventLinksBySolutionTag.builder()
                    .totalCount(bucket.getTotalCount())
                    .solutionTagId(bucket.getSolutionTagId())
                    .recommendSalesEventIds(new HashSet<>(recommendSalesEventIds))
                    .build());
        }

        List<Long> recommendSalesEventIds = recommendLinks.stream()
                .flatMap(x -> x.getRecommendSalesEventIds().stream())
                .collect(Collectors.toList());

        Map<Long, RecommendSalesEvent> recommendSalesEvents = recommendService.findRecommendSalesEventsByIds(
                        recommendSalesEventIds)
                .stream()
                .collect(Collectors.toMap(RecommendSalesEvent::getId, Function.identity()));

        List<SolutionTag> solutionTags = attributeFacade.findSolutionTagsBySolutionTagIds(
                recommendSalesEventBuckets.stream()
                        .map(RecommendSalesEventLinksBySolutionTag::getSolutionTagId)
                        .collect(Collectors.toList()));

        List<Long> salesEventIds = recommendSalesEvents.values().stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        Map<Long, SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build())
                .stream()
                .collect(Collectors.toMap(x -> x.getSalesEvent().getId(), Function.identity(), (a, b) -> a));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<RecommendTreatmentReviewAtHomeTrouble> recommendTreatmentReviewBuckets
                = recommendService.findRecommendTreatmentReviewsAtHomeTroubleBySalesEventIds(salesEventIds);

        Map<Long, List<RecommendTreatmentReviewAtHomeTrouble>> treatmentReviewBucketBySalesEventIds = recommendTreatmentReviewBuckets.stream()
                .collect(Collectors.groupingBy(RecommendTreatmentReviewAtHomeTrouble::getSalesEventId));

        List<Long> recommendTreatmentReviewIds = new ArrayList<>();
        for (var bucket : treatmentReviewBucketBySalesEventIds.entrySet()) {
            List<RecommendTreatmentReviewAtHomeTrouble> recommendTreatmentReviews = RecommendTask.<RecommendTreatmentReviewAtHomeTrouble>stream()
                    .aggregate((c) -> bucket.getValue())
                    .take(RECOMMEND_TREATMENT_REVIEW_COUNT);

            recommendTreatmentReviewIds.addAll(recommendTreatmentReviews
                    .stream()
                    .map(RecommendTreatmentReviewAtHomeTrouble::getTreatmentReviewId)
                    .collect(Collectors.toList()));
        }

        List<TreatmentReview> treatmentReviews = treatmentReviewService
                .findTreatmentReviewsByTreatmentReviewIds(recommendTreatmentReviewIds);

        List<TreatmentReviewTranslation> treatmentReviewTranslations = treatmentReviewService
                .findTreatmentReviewTranslationsByTreatmentReviewIds(recommendTreatmentReviewIds);

        List<HospitalTemplate> hospitals = payloadFactory.hospitalTemplates(
                recommendSalesEvents.values().stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList()));

        List<RecommendSalesEventBySolutionTag> recommends = new ArrayList<>();
        for (var link : recommendLinks) {
            for (long recommendSalesEventId : link.getRecommendSalesEventIds()) {
                RecommendSalesEvent recommendSalesEvent = recommendSalesEvents.get(recommendSalesEventId);
                if (recommendSalesEvent == null) {
                    continue;
                }
                SalesEventContainer salesEventContainer = salesEventContainers.get(recommendSalesEvent.getSalesEvent().getId());
                if (salesEventContainer == null) {
                    continue;
                }

                SalesProduct representativeSalesProduct = salesEventContainer.fetchRepresentativeSalesProduct().orElse(null);
                if (representativeSalesProduct == null) {
                    continue;
                }

                recommends.add(RecommendSalesEventBySolutionTag.builder()
                        .solutionTagId(link.getSolutionTagId())
                        .salesEventContainer(salesEventContainer)
                        .build());
            }
        }

        Collections.shuffle(recommends);

        Refer refer = Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_AT_HOME_TROUBLE);

        boolean activateVirtualMileageDiscount = applicationProps.getOrder().isActivateVirtualMileageDiscount();

        List<MemberCouponUsable> memberCouponUsables = DiagnosticContext.ifVirtualMemberOrElse(
                () -> {
                    if (activateVirtualMileageDiscount) {
                        return couponService.fetchAllDiscountUsableMemberCoupons(
                                kr.co.yeoshin.common.coupon.type.PublishType.AUTO,
                                CouponIssueStatus.ISSUE,
                                CouponIssueConditionType.NEW_MEMBER);
                    } else {
                        return Collections.emptyList();
                    }
                },
                couponService::fetchAllDiscountUsableMemberCoupons);

        List<MemberCoupon> memberCoupons = memberCouponUsables.stream()
                .map(MemberCouponUsable::getMemberCoupon)
                .collect(Collectors.toList());

        List<CouponIssueCondition> couponIssueConditions = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> memberCouponUsables.stream()
                        .flatMap(x -> x.getCouponIssueConditions().stream())
                        .collect(Collectors.toList()));

        int totalMemberPoint = DiagnosticContext.ifVirtualMemberOrElse(
                () -> activateVirtualMileageDiscount ? Constant.Member.VIRTUAL_DEFAULT_MILEAGE_POINT : 0,
                memberPointService::findTotalPointByMemberId);

        List<RecommendBySolutionTagTemplate> recommendBySolutionTagTemplates = IntStream.range(
                        0,
                        CollectionUtils.size(recommends))
                .mapToObj(i -> {
                    RecommendSalesEventBySolutionTag x = recommends.get(i);

                    return RecommendBySolutionTagTemplate.builder()
                            .solutionTagId(x.getSolutionTagId())
                            .salesEvent(payloadFactory.salesEventTemplate(x.getSalesEventContainer(), refer.generateRef(i)))
                            .salesProducts(x.getSalesEventContainer().fetchRepresentativeSalesProduct()
                                    .map(p -> orderService.getMaxDiscountPrice(
                                                    p, memberCoupons, couponIssueConditions, totalMemberPoint)
                                            .filter(o -> o.getDiscountPrice() > 0)
                                            .map(o -> payloadFactory.salesProductTemplate(
                                                    p, SalesProductDiscountType.ALL, o.getDiscountPrice()))
                                            .orElseGet(() -> payloadFactory.salesProductTemplate(p)))
                                    .map(Collections::singletonList)
                                    .orElse(Collections.emptyList()))
                            .build();
                }).collect(Collectors.toList());

        Set<Long> hospitalIds = recommendBySolutionTagTemplates.stream()
                .map(x -> x.getSalesEvent().getHospitalId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.values().stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventAtHomeTrouble(settingTemplate, salesEventIds, campaign));

        MonitorUtils.notEmpty(recommendBySolutionTagTemplates, "sales events from recommend solution tags are empty.");

        Map<String, Object> contexts = new HashMap<>();
        contexts.put(Context.DISCOUNT_PRICE_LABEL, SalesEventUtils.discountPriceLabel());

        return RecommendBySolutionTagsPayload.builder()
                .trouble(payloadFactory.textTemplate(
                        troubleCategory,
                        payloadFactory::textDescription))
                .solutionTags(payloadFactory.textIconTemplatesBySolutionTags(solutionTags))
                .hospitals(hospitals)
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .recommends(recommendBySolutionTagTemplates)
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .treatmentReviews(treatmentReviews.stream()
                        .map(r -> payloadFactory.treatmentReviewShortTemplate(r, treatmentReviewTranslations
                                .stream()
                                .filter(t -> r.getId() == t.getTreatmentReviewId())
                                .collect(Collectors.toList())))
                        .collect(Collectors.toList()))
                .contexts(contexts)
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByLocations(GeoPosition geoPosition, Optional<String> campaign) {
        final int DEFAULT_RECOMMEND_TAKE_COUNT = 41;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByLocation(DEFAULT_RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(
                attributeFacade);

        List<Long> fixedHospitalIds = settingTemplate.recommendSalesEventFixHospitalIdsByLocation();
        List<Long> excludeTreatmentIds = settingTemplate.recommendSalesEventExcludeTreatmentIdsByLocation();
        List<Long> excludeSalesEventIds = settingTemplate.recommendSalesEventExcludeSalesEventIdsByLocation();
        int clickCountPercentage = settingTemplate.recommendSalesEventCpmClickCountPercentageByLocation();
        int clickCountBucketCount = settingTemplate.recommendSalesEventCpmClickCountBucketCountByLocation();
        int cpmScoreBucketCount = settingTemplate.recommendSalesEventCpmScoreBucketCountByLocation();
        RecommendTakePolicy takePolicy = settingTemplate.recommendSalesEventTakePolicyByLocation();
        int cpmExtraBucketCount = settingTemplate.recommendSalesEventCpmExtraBucketCountByLocation();
        int cpmExtraTakeCount = settingTemplate.recommendSalesEventCpmExtraTakeCountByLocation();

        RecommendSalesEventByLocationConfigure configure = RecommendSalesEventByLocationConfigure.builder()
                .fixedHospitalIds(fixedHospitalIds)
                .excludeTreatmentIds(excludeTreatmentIds)
                .excludeSalesEventIds(excludeSalesEventIds)
                .cpmClickCountPercentage(clickCountPercentage)
                .cpmClickCountBucketCount(clickCountBucketCount)
                .cpmScoreBucketCount(cpmScoreBucketCount)
                .takePolicy(takePolicy)
                .cpmExtraBucketCount(cpmExtraBucketCount)
                .cpmExtraTakeCount(cpmExtraTakeCount)
                .build();

        List<Long> recommendSalesEventIds = recommendService.findRecommendSalesEventIdsByBudget(
                        recommendFacade, configure)
                .stream()
                .filter(x -> recommendService.filterScope(recommendFacade, DiagnosticContext.recommendScope(), x))
                .filter(x -> recommendService.filterCpm(recommendFacade, x))
                .collect(Collectors.toList());

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        Collections.shuffle(salesEventContainers);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByLocationAtHome(
                settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Refer refer = Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_LOCATION_AT_HOME);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend locations are empty.");

        boolean activateVirtualMileageDiscount = applicationProps.getOrder().isActivateVirtualMileageDiscount();

        List<MemberCouponUsable> memberCouponUsables = DiagnosticContext.ifVirtualMemberOrElse(
                () -> {
                    if (activateVirtualMileageDiscount) {
                        return couponService.fetchAllDiscountUsableMemberCoupons(
                                kr.co.yeoshin.common.coupon.type.PublishType.AUTO,
                                CouponIssueStatus.ISSUE,
                                CouponIssueConditionType.NEW_MEMBER);
                    } else {
                        return Collections.emptyList();
                    }
                },
                couponService::fetchAllDiscountUsableMemberCoupons);

        List<MemberCoupon> memberCoupons = memberCouponUsables.stream()
                .map(MemberCouponUsable::getMemberCoupon)
                .collect(Collectors.toList());

        List<CouponIssueCondition> couponIssueConditions = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> memberCouponUsables.stream()
                        .flatMap(x -> x.getCouponIssueConditions().stream())
                        .collect(Collectors.toList()));

        int totalMemberPoint = DiagnosticContext.ifVirtualMemberOrElse(
                () -> activateVirtualMileageDiscount ? Constant.Member.VIRTUAL_DEFAULT_MILEAGE_POINT : 0,
                memberPointService::findTotalPointByMemberId);

        Map<String, Object> contexts = new HashMap<>();
        contexts.put(Context.DISCOUNT_PRICE_LABEL, SalesEventUtils.discountPriceLabel());

        return SalesEventsPayload.builder()
                .salesEvents(IntStream.range(0, CollectionUtils.size(salesEventContainers))
                        .mapToObj(i -> {
                            SalesEventContainer x = salesEventContainers.get(i);
                            return payloadFactory.salesEventTemplate(
                                    x,
                                    refer.generateRef(i));
                        }).collect(Collectors.toList()))
                .salesProducts(salesProducts.stream()
                        .map(x -> orderService.getMaxDiscountPrice(x, memberCoupons, couponIssueConditions, totalMemberPoint)
                                .filter(o -> o.getDiscountPrice() > 0)
                                .map(o -> payloadFactory.salesProductTemplate(
                                        x, SalesProductDiscountType.ALL, o.getDiscountPrice()))
                                .orElseGet(() -> payloadFactory.salesProductTemplate(x)))
                        .collect(Collectors.toList()))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .contexts(contexts)
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByPopularity(Optional<String> campaign) {
        final int DEFAULT_RECOMMEND_TAKE_COUNT = 10;
        final int DEFAULT_RECOMMEND_BUCKET_COUNT = 400;
        final int RECOMMEND_PLACE_WEIGHT = 100;

        int recommendBucketCount = settingTemplate.recommendSalesEventBucketCountByPopularity(DEFAULT_RECOMMEND_BUCKET_COUNT);
        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByPopularity(DEFAULT_RECOMMEND_TAKE_COUNT);

        List<PlaceType> preferPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        interestingService::findInteresting)
                .getPlaces();

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventIdBuckets = recommendFacade.getRecommendSalesEventIdsInPlaces(preferPlaces)
                .stream()
                .filter(x -> recommendService.filterScope(recommendFacade, DiagnosticContext.recommendScope(), x))
                .collect(Collectors.toSet());
        if (CollectionUtils.size(recommendSalesEventIdBuckets) < recommendBucketCount) {
            recommendSalesEventIdBuckets.addAll(
                    recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                            DiagnosticContext.recommendScope(),
                            recommendBucketCount - CollectionUtils.size(recommendSalesEventIdBuckets)));
        }

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatByMostScrapedInLatest(
                        recommendFacade.getSalesEventIdsByRecommendSalesEventIds(
                                DiagnosticContext.recommendScope(), recommendSalesEventIdBuckets), recommendBucketCount)
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Function.identity(), (a, b) -> a));

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> fixHospitalIds = settingTemplate.recommendSalesEventFixHospitalIdsByPopularity();
        List<Long> fixedRecommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByHospitalIds(fixHospitalIds))
                .filter((c, e) -> recommendService.filterScope(recommendFacade, DiagnosticContext.recommendScope(), e))
                .take(recommendTakeCount, mediator);

        List<Long> takeRecommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                        DiagnosticContext.recommendScope(),
                        recommendFacade.getRecommendSalesEventIdsBySalesEventIds(
                                salesEventStats.values()
                                        .stream()
                                        .map(SalesEventStat::getSalesEventId)
                                        .collect(Collectors.toList())),
                        recommendBucketCount))
                .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e, RECOMMEND_PLACE_WEIGHT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .take(recommendTakeCount, mediator);

        Set<Long> recommendSalesEventIds = new HashSet<>();
        recommendSalesEventIds.addAll(fixedRecommendSalesEventIds);
        recommendSalesEventIds.addAll(takeRecommendSalesEventIds);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByPopularityAtHome(
                settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend popularity are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_POPULARITY_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(new ArrayList<>(salesEventStats.values())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByExclusive(Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 10;
        final int RECOMMEND_BUCKET_COUNT = 300;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByExclusive(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> hospitalIds = hospitalService.findHospitalAsBadgesByBadgeType(BadgeType.SYSTEM_EXCLUSIVE)
                .stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(hospitalIds)) {
            MonitorUtils.notEmpty(hospitalIds, "hospitals from recommend exclusive are empty.");
            return SalesEventsPayload.empty();
        }

        List<SalesEventStat> salesEventStatsFor1Weeks = salesEventService.findStatByHospitalIdsAndMostOrderedInLatest(
                hospitalIds,
                RECOMMEND_BUCKET_COUNT);

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                        DiagnosticContext.recommendScope(),
                        recommendFacade.getRecommendSalesEventIdsBySalesEventIds(
                                salesEventStatsFor1Weeks.stream()
                                        .map(SalesEventStat::getSalesEventId)
                                        .collect(Collectors.toList())),
                        RECOMMEND_BUCKET_COUNT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .filter((c, e) -> recommendService.filterScope(recommendFacade, DiagnosticContext.recommendScope(), e))
                .filter((c, e) -> recommendService.filterCpm(recommendFacade, e))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> takeHospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                takeHospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByExclusiveAtHome(
                settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend exclusive are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_EXCLUSIVE_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(takeHospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByRecentViewsAtHome(Optional<String> campaign) {
        final int MAX_ALLOW_VIEW_BUCKET_COUNT = 20;
        final int MAX_ALLOW_VIEW_COUNT = 10;

        long memberId = DiagnosticContext.fetchMemberId();

        int recommendTakeCount = settingTemplate.recommendSalesEventsByRecentViews(MAX_ALLOW_VIEW_COUNT);

        MemberServiceSummary serviceSummary = memberService.findMemberServiceSummaryByMemberId(memberId);
        if (ChronoUnit.DAYS.between(serviceSummary.getRecentAccessAt(), LocalDateTime.now())
                > Constant.SalesEvent.RECENT_VIEW_VALID_DAYS) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> recentlyViewedSalesEventIds = salesEventService.findRecentlyViewedSalesEventIds(memberId)
                .stream()
                .filter(x -> recommendService.filterSalesEventIdByScope(recommendFacade, DiagnosticContext.recommendScope(), x))
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(recentlyViewedSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        Collections.reverse(recentlyViewedSalesEventIds);

        final int FIXED_COUNT = 3;
        List<Long> salesEventIds = new ArrayList<>();
        salesEventIds.addAll(ListUtils.subList(recentlyViewedSalesEventIds, FIXED_COUNT));
        salesEventIds.addAll(ListUtils.takeRandomElements(
                ListUtils.subList(recentlyViewedSalesEventIds, FIXED_COUNT, CollectionUtils.size(recentlyViewedSalesEventIds)),
                MAX_ALLOW_VIEW_BUCKET_COUNT - FIXED_COUNT));

        List<SalesEventContainer> salesEventContainerBuckets = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build())
                .stream()
                .sorted(Comparator.comparingInt(x -> salesEventIds.indexOf(x.getSalesEvent().getId())))
                .collect(Collectors.toList());

        Set<Long> salesEventLinkables = salesEventService.salesEventsLinkable(salesEventContainerBuckets.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()))
                .stream()
                .filter(SalesEventLinkable::isLinkable)
                .map(SalesEventLinkable::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventContainerBuckets
                .stream()
                .filter(x -> salesEventLinkables.contains(x.getSalesEvent().getId()))
                .limit(recommendTakeCount)
                .collect(Collectors.toList());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(salesEventContainers.stream()
                .map(x -> x.getSalesEvent().getHospital().getId())
                .collect(Collectors.toList()));

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(
                memberId, salesEventIds);

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByRecentViewsAtHome(
                settingTemplate,
                salesEventContainers.stream()
                        .filter(x -> recommendService.filterCpm(x.getSalesEvent()))
                        .map(x -> x.getSalesEvent().getId())
                        .distinct()
                        .collect(Collectors.toList()), campaign));

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_RECENT_VIEW_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByRecentViewsAtSearch() {
        final int RECOMMEND_TAKE_COUNT = 20;
        final int RECENT_SALES_EVENT_BUCKET_COUNT = 5;

        long memberId = DiagnosticContext.fetchMemberId();

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> findRecentlyViewedSalesEventIds = salesEventService.findRecentlyViewedSalesEventIds(memberId);

        long recentlyViewedSalesEventId = ListUtils.takeRandomElement(
                findRecentlyViewedSalesEventIds
                        .stream()
                        .skip(Math.max(0,
                                CollectionUtils.size(findRecentlyViewedSalesEventIds) - RECENT_SALES_EVENT_BUCKET_COUNT))
                        .limit(RECENT_SALES_EVENT_BUCKET_COUNT)
                        .collect(Collectors.toList()), -1L);
        if (recentlyViewedSalesEventId < 0) {
            return SalesEventsPayload.empty();
        }

        SalesEvent salesEvent = salesEventService.fetchSalesEventBySalesEventId(recentlyViewedSalesEventId)
                .orElse(null);
        if (salesEvent == null) {
            return SalesEventsPayload.empty();
        }

        long representativeTreatmentId = salesEvent.getTreatment().getId();
        List<RecommendSalesEventMeta> recommendSalesEventMetas = recommendFacade.getRecommendSalesEventMetasByTreatmentIds(
                Collections.singletonList(representativeTreatmentId));
        if (CollectionUtils.isEmpty(recommendSalesEventMetas)) {
            return SalesEventsPayload.empty();
        }

        Map<Long, Hospital> recommendHospitals = hospitalService.findHospitalsByHospitalIds(
                        recommendSalesEventMetas
                                .stream()
                                .map(RecommendSalesEventMeta::getHospitalId)
                                .collect(Collectors.toList()))
                .stream()
                .collect(Collectors.toMap(Hospital::getId, Function.identity()));

        List<Long> recommendSalesEventIds = RecommendTask.<RecommendSalesEventMeta>stream()
                .aggregate((c) -> recommendSalesEventMetas)
                .weight((c, e) -> recommendService.weightByGeoDistance(
                        salesEvent.getHospital().getGeoCell(),
                        recommendHospitals.get(e.getHospitalId())))
                .take(RECOMMEND_TAKE_COUNT)
                .stream()
                .map(RecommendSalesEventMeta::getRecommendSalesEventId)
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(x -> x.getSalesEvent().getHospital().getId())
                .map(recommendHospitals::get)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(
                memberId, salesEventIds);

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByRecentViewsAtSearch(
                settingTemplate,
                salesEventContainers.stream()
                        .filter(x -> recommendService.filterCpm(x.getSalesEvent()))
                        .map(x -> x.getSalesEvent().getId())
                        .distinct()
                        .collect(Collectors.toList())));

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_RECENT_VIEW_AT_SEARCH)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public HospitalShortsPayload recommendHospitalsByPlaces(Version version) {
        final int RECOMMEND_MAX_PLACE_COUNT = 50;   // todo : 기존 5에서 50으로 변경 - 기획 협의 따라 변경예정(현 v1, 뉴v2 상관없이 v2 리스트로 응답 or 버전 맞춰 응답 협의 중
        final int RECOMMEND_BUCKET_COUNT = 30;
        final int RECOMMEND_TAKE_COUNT = 3;

        int recommendTakeCount = settingTemplate.recommendHospitalTakeCountByPlaces(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<PlaceType> interestingPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        memberId -> interestingService.findInteresting(memberId, version))
                .getPlaces();

        List<PlaceType> preferPlaces = CollectionUtils.isEmpty(interestingPlaces) ?
                Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : interestingPlaces;

        Map<Long, List<PlaceType>> placesByCount = new TreeMap<>(Collections.reverseOrder());
        for (PlaceType preferPlace : preferPlaces) {
            long hospitalCountInPlace = recommendFacade.getRecommendHospitalCountInPlace(
                    DiagnosticContext.recommendScope(), preferPlace);
            if (hospitalCountInPlace > 0) {
                placesByCount.computeIfAbsent(
                        hospitalCountInPlace,
                        x -> new ArrayList<>()).add(preferPlace);
            }
        }

        List<PlaceType> recommendPlaces = placesByCount.values().stream()
                .flatMap(Collection::stream)
                .limit(RECOMMEND_MAX_PLACE_COUNT)
                .collect(Collectors.toList());

        RecommendMediator<Long> mediator = RecommendTask.mediator();

        List<HospitalPlaceRelation> hospitalPlaceRelations = new ArrayList<>();
        for (PlaceType recommendPlace : recommendPlaces) {
            hospitalPlaceRelations.addAll(RecommendTask.<Long>stream()
                    .aggregate((c) -> recommendFacade.getRecommendHospitalIdInPlaceByScore(
                            DiagnosticContext.recommendScope(), recommendPlace, RECOMMEND_BUCKET_COUNT))
                    .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                    //.weight( distance )
                    .take(recommendTakeCount, mediator).stream()
                    .map(x -> HospitalPlaceRelation.builder()
                            .hospitalId(x)
                            .place(recommendPlace)
                            .build())
                    .collect(Collectors.toList()));
        }

        Set<Long> recommendHospitalIds = hospitalPlaceRelations.stream()
                .map(HospitalPlaceRelation::getHospitalId)
                .collect(Collectors.toSet());

        Set<PlaceType> hospitalPlaces = hospitalPlaceRelations.stream()
                .map(HospitalPlaceRelation::getPlace)
                .collect(Collectors.toSet());

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(recommendHospitalIds);
        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(recommendHospitalIds);
        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                recommendHospitalIds, hospitalService.getBadges(), hospitalStats, recommendFacade);

        return HospitalShortsPayload.builder()
                .places(payloadFactory.placeTemplates(recommendPlaces.stream()
                        .filter(hospitalPlaces::contains)
                        .collect(Collectors.toList())))
                .hospitals(payloadFactory.hospitalTemplates(hospitals, hospitalPlaceRelations))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(recommendHospitalIds, hospitalBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByHospitalAtHome(long hospitalId, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 4;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByHospital(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> salesEventIdsByHospital = recommendFacade.getSalesEventIdsByHospitalId(
                DiagnosticContext.recommendScope(), hospitalId);
        if (CollectionUtils.isEmpty(salesEventIdsByHospital)) {
            return SalesEventsPayload.empty();
        }

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        salesEventIdsByHospital)
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Functions.identity()));

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByHospitalId(hospitalId))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .weight((c, e) -> recommendService.weightBySalesEventStat(
                        recommendFacade.getSalesEventIdByRecommendSalesEventId(e)
                                .map(x -> salesEventStats.getOrDefault(x, SalesEventStat.empty(x)))
                                .orElseGet(() -> SalesEventStat.empty(-1))))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByHospitalAtHome(settingTemplate, new ArrayList<>(salesEventIds), campaign));

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(new ArrayList<>(salesEventStats.values())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByHospitalCouponsAtHome(Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 10;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByHospitalCoupon(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        boolean activateVirtualMileageDiscount = applicationProps.getOrder().isActivateVirtualMileageDiscount();

        List<MemberCouponUsable> memberCouponUsables = DiagnosticContext.ifVirtualMemberOrElse(
                () -> {
                    if (activateVirtualMileageDiscount) {
                        return couponService.fetchAllDiscountUsableMemberCoupons(
                                kr.co.yeoshin.common.coupon.type.PublishType.AUTO,
                                CouponIssueStatus.ISSUE,
                                CouponIssueConditionType.NEW_MEMBER);
                    } else {
                        return Collections.emptyList();
                    }
                },
                couponService::fetchAllDiscountUsableMemberCoupons);

        List<MemberCoupon> memberCoupons = memberCouponUsables.stream()
                .map(MemberCouponUsable::getMemberCoupon)
                .collect(Collectors.toList());

        List<CouponIssueCondition> couponIssueConditions = memberCouponUsables.stream()
                .flatMap(x -> x.getCouponIssueConditions().stream())
                .collect(Collectors.toList());

        Set<Long> hospitalIdBuckets = couponIssueConditions.stream()
                .filter(x -> x.getType() == CouponIssueConditionType.FRAY_HOSPITAL_ID)
                .map(x -> NumberUtils.toLong(x.getValue(), -1))
                .filter(x -> x > 0)
                .collect(Collectors.toSet());

        int totalMemberPoint = DiagnosticContext.ifVirtualMemberOrElse(
                () -> activateVirtualMileageDiscount ? Constant.Member.VIRTUAL_DEFAULT_MILEAGE_POINT : 0,
                memberPointService::findTotalPointByMemberId);

        List<Long> salesEventIdsByHospital = recommendFacade.getSalesEventIdsByHospitalIds(
                DiagnosticContext.recommendScope(), hospitalIdBuckets);
        if (CollectionUtils.isEmpty(salesEventIdsByHospital)) {
            return SalesEventsPayload.empty();
        }

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        salesEventIdsByHospital)
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Functions.identity()));

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByHospitalIds(hospitalIdBuckets))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .weight((c, e) -> recommendService.weightBySalesEventStat(
                        recommendFacade.getSalesEventIdByRecommendSalesEventId(e)
                                .map(x -> salesEventStats.getOrDefault(x, SalesEventStat.empty(x)))
                                .orElseGet(() -> SalesEventStat.empty(-1))))
                .filter((c, e) -> recommendService.filterCpm(recommendFacade, e))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        long memberId = DiagnosticContext.fetchMemberId();

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByHospitalCouponAtHome(
                        settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        Map<String, Object> contexts = new HashMap<>();
        contexts.put(Context.DISCOUNT_PRICE_LABEL, SalesEventUtils.discountPriceLabel());

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_HOME)))
                .salesProducts(salesProducts.stream()
                        .map(x -> payloadFactory.salesProductTemplate(
                                x,
                                SalesProductDiscountType.ALL,
                                orderService.getMaxDiscountPrice(x, memberCoupons, couponIssueConditions, totalMemberPoint)
                                        .map(OrderMileageDiscountContainer::getDiscountPrice)
                                        .orElse(0)))
                        .collect(Collectors.toList()))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(new ArrayList<>(salesEventStats.values())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .contexts(contexts)
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByHospitalFocusesAtHome(
            List<Long> hospitalIdBuckets, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 30;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByHospitalFocus(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> salesEventIdsByHospital = recommendFacade.getSalesEventIdsByHospitalIds(
                DiagnosticContext.recommendScope(), hospitalIdBuckets);
        if (CollectionUtils.isEmpty(salesEventIdsByHospital)) {
            return SalesEventsPayload.empty();
        }

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        salesEventIdsByHospital)
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Functions.identity()));

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByHospitalIds(hospitalIdBuckets))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .weight((c, e) -> recommendService.weightBySalesEventStat(
                        recommendFacade.getSalesEventIdByRecommendSalesEventId(e)
                                .map(x -> salesEventStats.getOrDefault(x, SalesEventStat.empty(x)))
                                .orElseGet(() -> SalesEventStat.empty(-1))))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByHospitalFocusAtHome(
                        settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(new ArrayList<>(salesEventStats.values())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByLatest(Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 20;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByLatest(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        LocalDate recommendStartAt = LocalDate.now().minusDays(Badge.NEW_DAYS);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByRecommendStartAt(
                        DiagnosticContext.recommendScope(), recommendStartAt))
                .filter((c, e) -> recommendService.filterCpm(recommendFacade, e))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByLatestAtHome(
                        settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByLowPrices(Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 20;
        final int RECOMMEND_SALES_PRODUCT_MIN_PRICE = 0;
        final int RECOMMEND_SALES_PRODUCT_MAX_PRICE = 50_000;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByLowPrice(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> salesEventIdBuckets = recommendFacade.getSalesEventIdsBySalesProductPrices(
                DiagnosticContext.recommendScope(), RECOMMEND_SALES_PRODUCT_MIN_PRICE, RECOMMEND_SALES_PRODUCT_MAX_PRICE);
        if (CollectionUtils.isEmpty(salesEventIdBuckets)) {
            MonitorUtils.notEmpty(salesEventIdBuckets, "sales events from recommend low-prices buckets are empty.");
            return SalesEventsPayload.empty();
        }

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        salesEventIdBuckets)
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Functions.identity()));

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsBySalesEventIds(salesEventIdBuckets))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .weight((c, e) -> recommendService.weightBySalesEventStat(
                        recommendFacade.getSalesEventIdByRecommendSalesEventId(e)
                                .map(x -> salesEventStats.getOrDefault(x, SalesEventStat.empty(x)))
                                .orElseGet(() -> SalesEventStat.empty(-1))))
                .filter((c, e) -> recommendService.filterCpm(recommendFacade, e))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            MonitorUtils.notEmpty(recommendSalesEventIds, "sales events from recommend low-prices candidates are empty.");
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByLowPriceAtHome(settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend low-prices are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats.values().stream()
                        .filter(x -> salesEventIds.contains(x.getSalesEventId()))
                        .collect(Collectors.toList())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }


    public SalesEventsPayload recommendSalesEventsByMuchOrders(boolean expand, Optional<String> campaign) {
        final int RECOMMEND_BUCKET_COUNT = 150;
        final int RECOMMEND_TAKE_COUNT = expand ? 100 : 20;

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventIdBuckets = new HashSet<>();
        recommendSalesEventIdBuckets.addAll(recommendFacade.getRecommendSalesEventMetas(DiagnosticContext.recommendScope())
                .stream()
                .filter(x -> x.getPaymentPrice() > 0)
                .filter(recommendService::filterCpm)
                .sorted(Comparator.comparing(RecommendSalesEventMeta::getPaymentPrice).reversed())
                .map(RecommendSalesEventMeta::getRecommendSalesEventId)
                .limit(RECOMMEND_BUCKET_COUNT)
                .collect(Collectors.toList()));
        recommendSalesEventIdBuckets.addAll(recommendFacade.getRecommendSalesEventMetas(DiagnosticContext.recommendScope())
                .stream()
                .filter(x -> x.getPaymentCount() > 0)
                .filter(recommendService::filterCpm)
                .sorted(Comparator.comparing(RecommendSalesEventMeta::getPaymentCount).reversed())
                .map(RecommendSalesEventMeta::getRecommendSalesEventId)
                .limit(RECOMMEND_BUCKET_COUNT)
                .collect(Collectors.toList()));

        List<Long> recommendSalesEventIds = ListUtils.takeRandomElements(
                new ArrayList<>(recommendSalesEventIdBuckets), RECOMMEND_TAKE_COUNT);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(expand ?
                CpmMessageUtils.recommendSalesEventByMuchOrderExpandAtHome(settingTemplate,
                        new ArrayList<>(salesEventIds), campaign) :
                CpmMessageUtils.recommendSalesEventByMuchOrderAtHome(settingTemplate,
                        new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend much orders sales events are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_CONSULTATION_SALES_EVENT_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }


    public SalesEventsPageablePayload recommendSalesEventsByMuchOrders(RecommendPageableContext context) {
        final int RECOMMEND_BUCKET_COUNT = 150;
        final int RECOMMEND_TAKE_COUNT = 100;
        final int RECOMMEND_PAGE_COUNT = 20;
        final int RECOMMEND_KEEP_MINUTES = 2;

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Header header = DiagnosticContext.header();

        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        Supplier<Optional<RecommendKeep>> keep = () -> {
            if (context.getPage() == Query.PAGE_DEFAULT_NUMBER) {
                Set<Long> recommendSalesEventIdBuckets = new HashSet<>();
                recommendSalesEventIdBuckets.addAll(
                        recommendFacade.getRecommendSalesEventMetas(DiagnosticContext.recommendScope())
                                .stream()
                                .filter(x -> x.getPaymentPrice() > 0)
                                .filter(recommendService::filterCpm)
                                .sorted(Comparator.comparing(RecommendSalesEventMeta::getPaymentPrice).reversed())
                                .map(RecommendSalesEventMeta::getRecommendSalesEventId)
                                .limit(RECOMMEND_BUCKET_COUNT)
                                .collect(Collectors.toList()));
                recommendSalesEventIdBuckets.addAll(
                        recommendFacade.getRecommendSalesEventMetas(DiagnosticContext.recommendScope())
                                .stream()
                                .filter(x -> x.getPaymentCount() > 0)
                                .filter(recommendService::filterCpm)
                                .sorted(Comparator.comparing(RecommendSalesEventMeta::getPaymentCount).reversed())
                                .map(RecommendSalesEventMeta::getRecommendSalesEventId)
                                .limit(RECOMMEND_BUCKET_COUNT)
                                .collect(Collectors.toList()));

                List<Long> recommendSalesEventIds = ListUtils.takeRandomElements(
                        new ArrayList<>(recommendSalesEventIdBuckets), RECOMMEND_TAKE_COUNT);

                return recommendService.keepRecommends(
                        memberId, RecommendKeepContext.builder()
                                .eventType(CpmEventType.RECOMMEND_SALES_EVENT_BY_MUCH_ORDER_AT_SEARCH)
                                .deviceType(header.devicePlatform())
                                .clientId(header.clientId())
                                .expireAt(LocalDateTime.now().plusMinutes(RECOMMEND_KEEP_MINUTES))
                                .recommendIds(recommendSalesEventIds)
                                .build());
            } else {
                return recommendService.findRecommendKeep(
                        memberId, header.devicePlatform(), header.clientId(),
                        CpmEventType.RECOMMEND_SALES_EVENT_BY_MUCH_ORDER_AT_SEARCH);
            }
        };
        RecommendKeep recommendKeep = keep.get().orElse(null);
        if (recommendKeep == null) {
            return SalesEventsPageablePayload.empty();
        }

        int fromIndex = context.getPage() * RECOMMEND_PAGE_COUNT;
        int toIndex = (context.getPage() * RECOMMEND_PAGE_COUNT) + RECOMMEND_PAGE_COUNT;
        List<Long> recommendSalesEventIds = ListUtils.subList(recommendKeep.getKeepIds(), fromIndex, toIndex);

        String nextToken = CollectionUtils.size(recommendKeep.getKeepIds()) <= toIndex
                ? StringUtils.EMPTY
                : CryptUtils.AES.encrypt(
                        RecommendPageableContext.builder()
                                .page(context.getPage() + 1)
                                .build());

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (m) -> salesEventScrapService.findScrapsBySalesEventIds(m, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByMuchOrderAtSearch(settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend much orders sales events are empty.");

        return SalesEventsPageablePayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_CONSULTATION_SALES_EVENT_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .pageable(payloadFactory.pageableTemplate(
                        CollectionUtils.size(recommendKeep.getKeepIds()),
                        RECOMMEND_PAGE_COUNT,
                        nextToken))
                .build();
    }


    public SalesEventsPayload recommendSalesEventsByConsultationSalesEvents(
            List<Long> consultationSalesEventIds, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 20;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByConsultationSalesEvent(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsBySalesEventIds(
                        DiagnosticContext.recommendScope(), consultationSalesEventIds))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            MonitorUtils.notEmpty(recommendSalesEventIds,
                    "sales events from recommend consultation sales events candidates are empty.");
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByConsultationSalesEventAtHome(settingTemplate,
                        new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend consultation sales events are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_CONSULTATION_SALES_EVENT_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public TvsPayload recommendTvsAtHome(List<Long> tvIds) {
        if (CollectionUtils.isEmpty(tvIds)) {
            return TvsPayload.empty();
        }

        List<Tv> tvs = tvService.findAllTvByTvIds(tvIds)
                .stream()
                .sorted(Comparator.comparingInt(x -> tvIds.indexOf(x.getId())))
                .collect(Collectors.toList());

        List<TvStat> tvStats = tvService.findStatsByTvIds(tvIds);

        MonitorUtils.notEmpty(tvs, "tvs from home tvs are empty.");

        return TvsPayload.builder()
                .tvs(payloadFactory.tvTemplates(tvs))
                .tvStats(payloadFactory.tvStatTemplates(tvStats))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByHospitalAtExplorer(long hospitalId, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 4;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByHospital(RECOMMEND_TAKE_COUNT);

        List<SalesEvent> salesEvents = salesEventService.findSalesEventsByHospitalId(hospitalId);
        List<Long> salesEventIds = salesEvents.stream()
                .map(SalesEvent::getId)
                .collect(Collectors.toList());

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        salesEvents.stream()
                                .map(SalesEvent::getId)
                                .collect(Collectors.toList()))
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Functions.identity()));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendableSalesEventIds = new HashSet<>(recommendFacade.getSalesEventIdsByHospitalId(
                DiagnosticContext.recommendScope(), hospitalId));

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> salesEventIds)
                .weight((c, e) -> recommendService.weightBySalesEventStat(
                        salesEventStats.getOrDefault(e, SalesEventStat.empty(e))))
                .filter((c, e) -> recommendableSalesEventIds.contains(e))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                Collections.singletonList(hospitalId), hospitalService.getBadges(), recommendFacade);

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(recommendSalesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByHospitalAtExplorer(
                        settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_EXPLORER)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(salesEventContainers.stream()
                        .map(SalesEventContainer::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(Collections.singletonList(hospitalId), hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(new ArrayList<>(salesEventStats.values())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByHospitalAtMySkinLog(long hospitalId) {
        final int RECOMMEND_TAKE_COUNT = 10;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByHospital(RECOMMEND_TAKE_COUNT);

        List<SalesEvent> salesEvents = salesEventService.findSalesEventsByHospitalId(hospitalId);
        List<Long> salesEventIds = salesEvents.stream()
                .map(SalesEvent::getId)
                .collect(Collectors.toList());

        Map<Long, SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        salesEvents.stream()
                                .map(SalesEvent::getId)
                                .collect(Collectors.toList()))
                .stream()
                .collect(Collectors.toMap(SalesEventStat::getSalesEventId, Functions.identity()));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> salesEventIds)
                .weight((c, e) -> recommendService.weightBySalesEventStat(
                        salesEventStats.getOrDefault(e, SalesEventStat.empty(e))))
                .filter((c, e) -> recommendService.filterSalesEventIdByScope(
                        recommendFacade, DiagnosticContext.recommendScope(), e))
                .take(recommendTakeCount);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                Collections.singletonList(hospitalId), hospitalService.getBadges(), recommendFacade);

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(recommendSalesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByHospitalAtMySkinLog(settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_MY_SKIN_LOG)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(salesEventContainers.stream()
                        .map(SalesEventContainer::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(Collections.singletonList(hospitalId), hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(new ArrayList<>(salesEventStats.values())))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }


    public SalesEventsPayload recommendSalesEventsByTreatment(
            int recommendTakeCount, long treatmentId, At at, Optional<String> campaign) {
        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<PlaceType> interestingPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        interestingService::findInteresting)
                .getPlaces();
        List<PlaceType> preferPlaces = CollectionUtils.isEmpty(interestingPlaces) ?
                Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : interestingPlaces;

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                        DiagnosticContext.recommendScope(),
                        recommendFacade.getRecommendSalesEventIdsByTreatmentId(DiagnosticContext.recommendScope(), treatmentId),
                        Recommend.AGGREGATE_DEFAULT_COUNT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e))
                .take(recommendTakeCount);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));
        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        if (at == At.EXPLORER) {
            messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByTreatmentAtExplorer(
                    settingTemplate, new ArrayList<>(salesEventIds), campaign));
        }
        if (at == At.CONSULTATION) {
            messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByConsultationTreatmentAtHome(
                    settingTemplate, new ArrayList<>(salesEventIds), campaign));
        }
        if (at == At.TICKET) {
            messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByTreatmentAtTicket(
                    settingTemplate, new ArrayList<>(salesEventIds), campaign));
        }

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend treatments are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_TREATMENT_AT_EXPLORER)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public FaceAnalysisSalesEventsPayload recommendFaceAnalysisSalesEventsByTreatment(int recommendTakeCount, long treatmentId) {
        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Treatment treatment = attributeFacade.findTreatmentByTreatmentId(treatmentId)
                .orElseThrow(() -> new RecommendException(CommonCode.ERROR));

        List<PlaceType> interestingPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        interestingService::findInteresting)
                .getPlaces();
        List<PlaceType> preferPlaces = CollectionUtils.isEmpty(interestingPlaces) ?
                Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : interestingPlaces;

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                        DiagnosticContext.recommendScope(),
                        recommendFacade.getRecommendSalesEventIdsByTreatmentId(DiagnosticContext.recommendScope(), treatmentId),
                        Recommend.AGGREGATE_DEFAULT_COUNT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));
        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        // TODO review policy
        List<RecommendTreatmentReviewAtHomeTrouble> recommendTreatmentReviewBuckets
                = recommendService.findRecommendTreatmentReviewsAtHomeTroubleBySalesEventIds(salesEventIds);

        Map<Long, List<RecommendTreatmentReviewAtHomeTrouble>> treatmentReviewBucketBySalesEventIds = recommendTreatmentReviewBuckets.stream()
                .collect(Collectors.groupingBy(RecommendTreatmentReviewAtHomeTrouble::getSalesEventId));

        List<Long> recommendTreatmentReviewIds = new ArrayList<>();
        for (var bucket : treatmentReviewBucketBySalesEventIds.entrySet()) {
            List<RecommendTreatmentReviewAtHomeTrouble> recommendTreatmentReviews = RecommendTask.<RecommendTreatmentReviewAtHomeTrouble>stream()
                    .aggregate((c) -> bucket.getValue())
                    .take(2);

            recommendTreatmentReviewIds.addAll(recommendTreatmentReviews
                    .stream()
                    .map(RecommendTreatmentReviewAtHomeTrouble::getTreatmentReviewId)
                    .collect(Collectors.toList()));
        }

        List<TreatmentReview> treatmentReviews = treatmentReviewService
                .findTreatmentReviewsByTreatmentReviewIds(recommendTreatmentReviewIds);

        List<TreatmentReviewTranslation> treatmentReviewTranslations = treatmentReviewService
                .findTreatmentReviewTranslationsByTreatmentReviewIds(recommendTreatmentReviewIds);

        Collections.shuffle(salesEventContainers);

        return FaceAnalysisSalesEventsPayload.builder()
                .treatments(Collections.singletonList(payloadFactory.textIconTemplate(treatment)))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_TREATMENT_AT_EXPLORER)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .treatmentReviews(treatmentReviews.stream()
                        .map(r -> payloadFactory.treatmentReviewShortTemplate(r, treatmentReviewTranslations
                                .stream()
                                .filter(t -> r.getId() == t.getTreatmentReviewId())
                                .collect(Collectors.toList())))
                        .collect(Collectors.toList()))
                .build();
    }

    public RecommendTreatmentReviewsPayload recommendBestTreatmentReviewsByTrouble(long troubleId) {
        final int RECOMMEND_TAKE_COUNT = 5;

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        long troubleSearchableId = attributeFacade.findTroubleCategory(troubleId)
                .map(x -> TroubleSearchableType.similarTroubleSearchableType(attributeFacade, x, TroubleSearchableType.LIFTING))
                .map(TroubleSearchableType::getId)
                .orElse(TroubleSearchableType.LIFTING.getId());

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);
        Set<Long> recommendSalesEventIds = recommendFacade.getRecommendSalesEventIdsByTroubleCategoryId(troubleId);
        if (CollectionUtils.isEmpty(recommendSalesEventIds)) {
            return RecommendTreatmentReviewsPayload.empty();
        }

        List<RecommendTreatmentReviewAtHomeBest> recommendBuckets = recommendService.findRecommendTreatmentReviewsAtHomeBestBySalesEventIds(
                recommendFacade.getSalesEventIdsByRecommendSalesEventIds(
                        DiagnosticContext.recommendScope(), recommendSalesEventIds));

        Set<Long> reportReviewId = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                (memberId) -> reportService.findReportContents(memberId, ContentType.TREATMENT_REVIEW,
                        recommendBuckets.stream()
                                .map(RecommendTreatmentReviewAtHomeBest::getTreatmentReviewId)
                                .collect(Collectors.toList())));

        List<RecommendTreatmentReviewAtHomeBest> recommendTreatmentReviews = RecommendTask.<RecommendTreatmentReviewAtHomeBest>stream()
                .aggregate((c) -> recommendBuckets)
                .filter((c, r) -> !reportReviewId.contains(r.getTreatmentReviewId()))
                .take(RECOMMEND_TAKE_COUNT);

        List<Long> salesEventIds = recommendTreatmentReviews.stream()
                .map(RecommendTreatmentReviewAtHomeBest::getSalesEventId)
                .collect(Collectors.toList());

        List<Long> treatmentReviewIds = recommendTreatmentReviews.stream()
                .map(RecommendTreatmentReviewAtHomeBest::getTreatmentReviewId)
                .collect(Collectors.toList());

        List<TreatmentReviewContainer> treatmentReviewContainers = treatmentReviewService
                .fetchTreatmentReviewsWithProductByTreatmentReviewIds(treatmentReviewIds);

        List<SalesEventContainer> salesEventWithSalesProducts = salesEventService.fetchSalesEventContainersBySalesProductIds(
                salesEventIds, treatmentReviewContainers.stream()
                        .flatMap(x -> x.getSalesProductIds().stream())
                        .collect(Collectors.toList()), true);

        List<Hospital> hospitals = salesEventWithSalesProducts.stream()
                .map(SalesEventContainer::getHospital)
                .distinct()
                .collect(Collectors.toList());

        Map<Long, List<Long>> salesProductVersionByTreatmentReviewId = treatmentReviewContainers.stream()
                .collect(Collectors.toMap(x -> x.getTreatmentReview().getId(),
                        x -> x.getSalesProductVersions().stream().map(SalesProductVersion::getId).collect(
                                Collectors.toList())));

        Map<Long, SalesProductVersion> salesProductVersions = treatmentReviewContainers.stream()
                .flatMap(x -> x.getSalesProductVersions().stream())
                .collect(Collectors.toMap(SalesProductVersion::getId, Function.identity(), (a, b) -> a));

        List<SalesProduct> salesProducts = salesProductVersions.values()
                .stream()
                .map(SalesProductVersion::getSalesProduct)
                .collect(Collectors.toList());

        List<SalesProductWithTreatments> salesProductWithTreatments = salesProductService.fetchSalesProductWithTreatmentsBySalesProductIds(
                salesProducts.stream()
                        .map(SalesProduct::getId)
                        .collect(Collectors.toList()));

        SalesProductAttributeFacade salesProductAttributeFacade = salesProductService.getAttributeFacade();

        TreatmentReviewAttributeConfig treatmentReviewAttributeConfig = TreatmentReviewAttributeConfig.builder()
                .treatmentCount(TREATMENT_REVIEW_ATTRIBUTE_TREATMENT_COUNT)
                .solutionTagCount(TREATMENT_REVIEW_ATTRIBUTE_SOLUTION_TAG_COUNT)
                .build();

        List<TreatmentReviewAttribute> treatmentReviewAttributes = new ArrayList<>();
        for (var entry : salesProductVersionByTreatmentReviewId.entrySet()) {
            long treatmentReviewId = entry.getKey();
            List<Long> salesProductIds = entry.getValue().stream()
                    .map(salesProductVersions::get)
                    .filter(Objects::nonNull)
                    .map(x -> x.getSalesProduct().getId())
                    .filter(Objects::nonNull)
                    .collect(Collectors.toList());

            treatmentReviewAttributes.add(treatmentReviewService.findTreatmentReviewAttributes(
                    treatmentReviewId,
                    treatmentReviewAttributeConfig,
                    salesProductIds,
                    salesProductAttributeFacade,
                    salesProductWithTreatments));
        }

        List<Member> members = memberService.findAllByMemberIds(treatmentReviewContainers.stream()
                .map(x -> x.getTreatmentReview().getMember().getId())
                .collect(Collectors.toList()));

        return RecommendTreatmentReviewsPayload.builder()
                .troubleSearchableId(troubleSearchableId)
                .treatmentReviews(treatmentReviewContainers.stream()
                        .map(x -> payloadFactory.treatmentReviewTemplate(x.getTreatmentReview(),
                                x.getSalesProductIds(),
                                x.getTreatmentReviewImages(),
                                x.getTreatmentReviewTranslations(),
                                Collections.emptySet()))
                        .collect(Collectors.toList()))
                .treatmentReviewStats(payloadFactory.treatmentReviewStatTemplates(treatmentReviewContainers.stream()
                        .map(TreatmentReviewContainer::getTreatmentReviewStat)
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventWithSalesProducts, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesEventWithSalesProducts.stream()
                        .flatMap(x -> x.fetchSalesProducts().stream())
                        .collect(Collectors.toList())))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .treatmentReviewAttributes(payloadFactory.treatmentReviewAttributeTemplates(treatmentReviewAttributes))
                .memberProfiles(payloadFactory.memberProfileTemplates(members))
                .build();
    }

    public RecommendThemesPayload recommendThemes() {
        final int TAKE_THEME_COUNT = 2;

        List<ExplorerTheme> themes = ListUtils.subList(themeService.findAllActivatedThemes(ExplorerThemeLocationType.HOME)
                .stream()
                .sorted(Comparator.comparing(ExplorerTheme::getPriority))
                .collect(Collectors.toList()), TAKE_THEME_COUNT);
        if (CollectionUtils.isEmpty(themes)) {
            return RecommendThemesPayload.empty();
        }

        return RecommendThemesPayload.builder()
                .themes(payloadFactory.themeTemplates(themes))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByTheme(long themeId, At at, Optional<String> campaign) {
        final int RECOMMEND_SALES_EVENT_COUNT = 7;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByTheme(RECOMMEND_SALES_EVENT_COUNT);

        List<ExplorerThemeAsTreatment> explorerThemeAsTreatments = themeService.findExplorerThemeAsTreatments(
                Collections.singletonList(themeId));
        if (CollectionUtils.isEmpty(explorerThemeAsTreatments)) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> treatmentIds = explorerThemeAsTreatments
                .stream()
                .map(x -> x.getTreatment().getId())
                .collect(Collectors.toList());

        List<Long> troubleCategoryIds = attributeFacade.findTroubleCategoryIdsByTreatmentIds(treatmentIds);

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                        DiagnosticContext.recommendScope(),
                        recommendFacade.getRecommendSalesEventIdsByTroubleCategoryIds(troubleCategoryIds),
                        Recommend.AGGREGATE_DEFAULT_COUNT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .filter((c, e) -> recommendService.filterScope(recommendFacade, DiagnosticContext.recommendScope(), e))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                at == At.HOME
                        ? CpmMessageUtils.recommendSalesEventByThemeAtHome(
                        settingTemplate, new ArrayList<>(salesEventIds), campaign)
                        : CpmMessageUtils.recommendSalesEventByThemeAtExplorer(
                                settingTemplate, new ArrayList<>(salesEventIds), campaign));

        // TODO refactor
        CpmEventType cpmEventType = at == At.HOME
                ? CpmEventType.RECOMMEND_SALES_EVENT_BY_THEME_AT_HOME : CpmEventType.RECOMMEND_SALES_EVENT_BY_THEME_AT_EXPLORER;

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(cpmEventType)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public TreatmentFocusTvsPayload recommendTreatmentFocusTvs() {
        final int TAKE_COUNT = 2;
        List<TreatmentFocus> treatmentFocuses = ListUtils.subList(treatmentFocusService.fetchAllVisibleTreatmentFocus()
                .stream()
                .sorted(Comparator.comparing(TreatmentFocus::getPriority))
                .collect(Collectors.toList()), TAKE_COUNT);
        if (CollectionUtils.isEmpty(treatmentFocuses)) {
            return TreatmentFocusTvsPayload.empty();
        }

        List<TreatmentLibrary> treatmentLibraries = treatmentLibraryService.findAllTreatmentLibraries(
                treatmentFocuses.stream()
                        .map(x -> x.getTreatment().getId())
                        .collect(Collectors.toList()));

        Set<Long> tvIds = treatmentFocuses.stream()
                .flatMap(x -> x.getTvIds().stream())
                .collect(Collectors.toSet());
        if (CollectionUtils.isEmpty(tvIds)) {
            return TreatmentFocusTvsPayload.empty();
        }

        List<Tv> tvs = tvService.findAllTvByTvIds(tvIds)
                .stream()
                .filter(x -> x.getViewYn().toBoolean())
                .collect(Collectors.toList());

        return TreatmentFocusTvsPayload.builder()
                .treatmentFocuses(
                        payloadFactory.treatmentFocusShortTemplates(treatmentFocuses, treatmentLibraries))
                .tvs(payloadFactory.tvTemplates(tvs))
                .build();
    }

    public SalesEventsPayload recommendTreatmentFocusSalesEvents(long treatmentFocusId, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 6;
        final int RECOMMEND_PLACE_WEIGHT = 100;

        int recommendTakeCount = settingTemplate.recommendTreatmentFocusSalesEventTakeCountByTvs(RECOMMEND_TAKE_COUNT);
        int recommendBucketCount = recommendTakeCount * 5;

        TreatmentFocus treatmentFocus = treatmentFocusService.findTreatmentFocus(treatmentFocusId)
                .orElse(null);
        if (treatmentFocus == null) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        Treatment treatment = attributeFacade.findTreatmentByTreatmentId(treatmentFocus.getTreatment().getId())
                .orElse(null);
        if (treatment == null) {
            return SalesEventsPayload.empty();
        }

        List<Long> troubleCategoryIds = attributeFacade.findTroubleCategoryIdsByTreatmentId(treatment.getId());

        List<PlaceType> interestingPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        interestingService::findInteresting)
                .getPlaces();
        List<PlaceType> preferPlaces = CollectionUtils.isEmpty(interestingPlaces) ?
                Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : interestingPlaces;

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventIdsByTreatment = recommendFacade.getRecommendSalesEventIdsByTreatmentId(
                DiagnosticContext.recommendScope(), treatment.getId());

        Set<Long> recommendSalesEventBucketIds = new HashSet<>();
        recommendSalesEventBucketIds.addAll(recommendSalesEventIdsByTreatment);
        if (CollectionUtils.size(recommendSalesEventIdsByTreatment) < recommendBucketCount) {
            recommendSalesEventBucketIds.addAll(recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                    DiagnosticContext.recommendScope(),
                    recommendFacade.getRecommendSalesEventIdsByTroubleCategoryIds(troubleCategoryIds),
                    recommendBucketCount - CollectionUtils.size(recommendSalesEventIdsByTreatment)));
        }

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendSalesEventBucketIds)
                .weight((c, e) -> recommendSalesEventIdsByTreatment.contains(e) ? (double) Recommend.DEFAULT_BOOST_WEIGHT : 0)
                .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e, RECOMMEND_PLACE_WEIGHT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .filter((c, e) -> recommendService.filterCpm(recommendFacade, e))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        List<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByTreatmentFocusAtHome(
                settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_TREATMENT_FOCUS_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendTreatmentFocusSalesEventsByTvs(List<Long> tvIds, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 6;
        final int RECOMMEND_PLACE_WEIGHT = 100;

        int recommendTakeCount = settingTemplate.recommendTreatmentFocusSalesEventTakeCountByTvs(RECOMMEND_TAKE_COUNT);
        int recommendBucketCount = recommendTakeCount * 5;

        List<TvAsTreatment> tvAsTreatments = tvService.fetchTvAsTreatmentsByTvIds(tvIds);
        if (CollectionUtils.isEmpty(tvAsTreatments)) {
            return SalesEventsPayload.empty();
        }

        List<Treatment> treatments = tvAsTreatments.stream()
                .map(TvAsTreatment::getTreatment)
                .distinct()
                .collect(Collectors.toList());

        List<Long> treatmentIds = treatments.stream()
                .map(Treatment::getId)
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        List<Long> troubleCategoryIds = attributeFacade.findTroubleCategoryIdsByTreatmentIds(treatmentIds);

        List<PlaceType> interestingPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        interestingService::findInteresting)
                .getPlaces();
        List<PlaceType> preferPlaces = CollectionUtils.isEmpty(interestingPlaces) ?
                Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : interestingPlaces;

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventIdsByTreatment = recommendFacade.getRecommendSalesEventIdsByTreatmentIds(treatmentIds);

        Set<Long> recommendSalesEventBucketIds = new HashSet<>();
        recommendSalesEventBucketIds.addAll(recommendSalesEventIdsByTreatment);
        if (CollectionUtils.size(recommendSalesEventIdsByTreatment) < recommendBucketCount) {
            recommendSalesEventBucketIds.addAll(recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                    DiagnosticContext.recommendScope(),
                    recommendFacade.getRecommendSalesEventIdsByTroubleCategoryIds(troubleCategoryIds),
                    recommendBucketCount - CollectionUtils.size(recommendSalesEventIdsByTreatment)));
        }

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendSalesEventBucketIds)
                .weight((c, e) -> recommendSalesEventIdsByTreatment.contains(e) ? (double) Recommend.DEFAULT_BOOST_WEIGHT : 0)
                .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e, RECOMMEND_PLACE_WEIGHT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByTreatmentFocusAtHome(
                settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_TREATMENT_FOCUS_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();

    }

    public RecommendTreatmentCounselingsPayload recommendTreatmentCounseling() {
        List<TreatmentCounseling> treatmentCounselings = treatmentCounselingService.findAllActivatedTreatmentCounselings();
        if (CollectionUtils.isEmpty(treatmentCounselings)) {
            return RecommendTreatmentCounselingsPayload.empty();
        }

        TreatmentCounseling treatmentCounseling = ListUtils.takeRandomElement(treatmentCounselings);

        @SuppressWarnings("ConstantConditions")
        List<TreatmentCounselingFaq> treatmentCounselingFaqs = treatmentCounselingService.findAllFaqsByTreatmentCounselingId(
                treatmentCounseling.getId());

        return RecommendTreatmentCounselingsPayload.builder()
                .treatmentCounseling(payloadFactory.treatmentCounselingTemplate(treatmentCounseling))
                .qas(treatmentCounselingFaqs.stream()
                        .map(x -> payloadFactory.cardTemplate(x, treatmentCounseling.getShapeColorCode()))
                        .collect(Collectors.toList()))
                .build();

    }

    public SalesEventsPayload recommendSalesEventsByTreatmentCounseling(long treatmentCounselingId, Optional<String> campaign) {
        final int RECOMMEND_TAKE_COUNT = 5;
        final int RECOMMEND_BUCKET_COUNT = 25;
        final int RECOMMEND_PLACE_WEIGHT = 100;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByTreatmentCounseling(RECOMMEND_TAKE_COUNT);

        TreatmentCounseling treatmentCounseling = treatmentCounselingService.fetchByTreatmentCounselingId(
                        treatmentCounselingId)
                .orElseThrow(() -> new RecommendException(CommonCode.ERROR));

        Treatment treatment = treatmentCounseling.getTreatment();

        List<PlaceType> interestingPlaces = DiagnosticContext.ifVirtualMemberOrElse(
                        () -> InterestingContainer.empty(-1, false),
                        interestingService::findInteresting)
                .getPlaces();
        List<PlaceType> preferPlaces = CollectionUtils.isEmpty(interestingPlaces) ?
                Collections.singletonList(PlaceType.GANGNAM_SEOCHO) : interestingPlaces;

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        List<Long> troubleCategoryIds = attributeFacade.findTroubleCategoryIdsByTreatmentIds(
                Collections.singletonList(treatment.getId()));

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);
        Set<Long> recommendSalesEventIdsByTreatment = recommendFacade.getRecommendSalesEventIdsByTreatmentId(
                DiagnosticContext.recommendScope(), treatment.getId());

        Set<Long> recommendSalesEventBucketIds = new HashSet<>();
        recommendSalesEventBucketIds.addAll(recommendSalesEventIdsByTreatment);
        if (CollectionUtils.size(recommendSalesEventIdsByTreatment) < RECOMMEND_BUCKET_COUNT) {
            recommendSalesEventBucketIds.addAll(recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                    DiagnosticContext.recommendScope(),
                    recommendFacade.getRecommendSalesEventIdsByTroubleCategoryIds(troubleCategoryIds),
                    RECOMMEND_BUCKET_COUNT - CollectionUtils.size(recommendSalesEventIdsByTreatment)));
        }

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendSalesEventBucketIds)
                .weight((c, e) -> recommendSalesEventIdsByTreatment.contains(e) ? (double) Recommend.DEFAULT_BOOST_WEIGHT : 0)
                .weight((c, e) -> recommendService.weightByPlaces(recommendFacade, preferPlaces, e, RECOMMEND_PLACE_WEIGHT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(
                CpmMessageUtils.recommendSalesEventByTreatmentCounselingAtHome(
                        settingTemplate, new ArrayList<>(salesEventIds), campaign));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_TREATMENT_COUNSELING_AT_HOME)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public TvsPayload recommendTvsByTv(long tvId) {
        final int RECOMMEND_COUNT = 20;
        final int TAKE_COUNT = 5;

        Tv tv = tvService.findTvByTvId(tvId)
                .orElseThrow(() -> new RecommendException(CommonCode.ERROR));

        String query = StringUtils.isAllBlank(tv.getDisplayTags(), tv.getHiddenTags())
                ? tv.getSubject() : tv.getDisplayTags() + " " + tv.getHiddenTags();

        SearchResult<TvDocument> searchResult = searchService.search(TvSearchableContext.builder()
                .sort(SortType.RELATED)
                .size(RECOMMEND_COUNT)
                .query(query)
                .build());
        if (searchResult.isEmpty()) {
            return TvsPayload.empty();
        }

        List<TvDocument> documents = ListUtils.takeRandomElements(searchResult.getDocuments().stream()
                .filter(x -> x.getId() != tvId)
                .collect(Collectors.toList()), TAKE_COUNT);

        List<TvStat> tvStats = tvService.findStatsByTvIds(documents.stream()
                .map(TvDocument::getId)
                .collect(Collectors.toList()));

        return TvsPayload.builder()
                .tvs(documents.stream()
                        .map(payloadFactory::tvTemplate)
                        .collect(Collectors.toList()))
                .tvStats(payloadFactory.tvStatTemplates(tvStats))
                .build();
    }

    public SalesEventsRelatedTvPayload recommendSalesEventsByTv(long tvId) {
        final int RECOMMEND_COUNT = 10;
        final int RECOMMEND_RELATED_SALES_EVENT_COUNT = 5;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountByTv(RECOMMEND_COUNT);

        Map<Long, SalesEvent> salesEventsByTv = tvService.fetchTvAsSalesEventsByTvId(tvId)
                .stream()
                .map(TvAsSalesEvent::getSalesEvent)
                .collect(Collectors.toMap(SalesEvent::getId, Function.identity()));

        List<SalesEventStat> salesEventStatsByTv = salesEventService.findStatsBySalesEventIds(salesEventsByTv.keySet())
                .stream()
                .sorted(Comparator.comparingLong(SalesEventStat::getOrderCountIn1Month))
                .collect(Collectors.toList());

        List<SalesEvent> recommendSalesEventsByTv = ListUtils.subList(salesEventStatsByTv,
                        RECOMMEND_RELATED_SALES_EVENT_COUNT)
                .stream()
                .map(x -> salesEventsByTv.get(x.getSalesEventId()))
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendableSalesEventIds = new HashSet<>(recommendFacade.getSalesEventIdsByHospitalIds(
                DiagnosticContext.recommendScope(),
                recommendSalesEventsByTv.stream()
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toSet())));

        Set<Long> salesEventIdsByTv = recommendSalesEventsByTv.stream()
                .map(SalesEvent::getId)
                .filter(recommendableSalesEventIds::contains)
                .collect(Collectors.toSet());

        List<Supplier<List<Long>>> treatmentIdSuppliers = new ArrayList<>();
        treatmentIdSuppliers.add(() -> salesEventsByTv.values()
                .stream()
                .map(x -> x.getTreatment().getId())
                .collect(Collectors.toList()));
        treatmentIdSuppliers.add(() -> tvService.fetchTvAsTreatmentsByTvId(tvId)
                .stream()
                .map(x -> x.getTreatment().getId())
                .collect(Collectors.toList()));
        treatmentIdSuppliers.add(() -> tvService.findTvByTvId(tvId)
                .stream()
                .flatMap(x -> tvService.findSimilarTreatmentsByTv(x, attributeFacade.findAllTreatments()).stream())
                .map(Treatment::getId)
                .collect(Collectors.toList()));

        List<Long> treatmentIds = new ArrayList<>();
        for (var supplier : treatmentIdSuppliers) {
            treatmentIds.addAll(supplier.get());
            if (CollectionUtils.isNotEmpty(treatmentIds)) {
                break;
            }
        }
        if (CollectionUtils.isEmpty(treatmentIds)) {
            return SalesEventsRelatedTvPayload.empty();
        }

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIdsByTreatment = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                        DiagnosticContext.recommendScope(),
                        recommendFacade.getRecommendSalesEventIdsByTreatmentIds(treatmentIds),
                        Recommend.AGGREGATE_DEFAULT_COUNT))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                .filter((c, e) -> recommendFacade.getSalesEventIdByRecommendSalesEventId(e)
                        .filter(x -> !salesEventIdsByTv.contains(x))
                        .stream().findAny().isPresent())
                .take(recommendTakeCount - CollectionUtils.size(recommendSalesEventsByTv), mediator);

        List<RecommendSalesEvent> recommendSalesEventsByTreatment = recommendService.fetchRecommendSalesEventsByIds(
                recommendSalesEventIdsByTreatment);

        List<Long> salesEventIdsByTroubleCategory = recommendSalesEventsByTreatment.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        Set<Hospital> hospitals = new HashSet<>();
        hospitals.addAll(recommendSalesEventsByTv.stream()
                .map(SalesEvent::getHospital)
                .collect(Collectors.toList()));
        hospitals.addAll(recommendSalesEventsByTreatment.stream()
                .map(RecommendSalesEvent::getHospital)
                .collect(Collectors.toList()));

        Set<Long> salesEventIds = new HashSet<>();
        salesEventIds.addAll(salesEventIdsByTv);
        salesEventIds.addAll(salesEventIdsByTroubleCategory);

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        Set<Long> validSalesEventIds = salesEventContainers.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByTvAtTv(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventsRelatedTvPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_TV_AT_TV)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .recommendByTvs(salesEventIdsByTv.stream()
                        .filter(validSalesEventIds::contains)
                        .collect(Collectors.toList()))
                .recommendByTreatments(salesEventIdsByTroubleCategory.stream()
                        .filter(validSalesEventIds::contains)
                        .collect(Collectors.toList()))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsBySalesEvent(long salesEventId) {
        final int RECOMMEND_TAKE_COUNT = 50;

        int recommendTakeCount = settingTemplate.recommendSalesEventTakeCountBySalesEvent(RECOMMEND_TAKE_COUNT);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainer(salesEventId);
        SalesEvent salesEvent = salesEventContainer.getSalesEvent();
        Set<Long> preferSolutionTagIds = new HashSet<>(
                recommendService.findRepresentativeSolutionTagIds(
                        attributeFacade,
                        Collections.singletonList(salesEvent.getTreatment().getId())));

        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventBuckets = new HashSet<>();
        preferSolutionTagIds.forEach(
                x -> recommendSalesEventBuckets.addAll(
                        recommendFacade.getRecommendSalesEventIdsByCpmScoreDesc(
                                DiagnosticContext.recommendScope(),
                                recommendFacade.getRecommendSalesEventIdsBySolutionTagId(x),
                                Recommend.AGGREGATE_DEFAULT_COUNT)));

        RecommendMediator<Long> mediator = RecommendTask.mediatorByRecommendSalesEventId(recommendFacade);

        List<Long> recommendSalesEventIds = RecommendTask.<Long>stream()
                .aggregate((c) -> recommendSalesEventBuckets)
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e))
                //.weight((c, e) -> recommendService.weightBySolutionTag(attributeFacade, preferSolutionTagIds, e))
                .filter((c, e) -> !Objects.equals(e, salesEvent.getId()))
                .take(recommendTakeCount, mediator);

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(recommendSalesEventIds);

        Set<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventBySalesEventAtSalesEvent(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_SALES_EVENT_AT_SALES_EVENT)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSynergySalesEventsBySalesEvent(long salesEventId) {
        long memberId = DiagnosticContext.fetchMemberId();

        final int RECOMMEND_BUCKET_COUNT = 10;
        final int RECOMMEND_TAKE_COUNT = 7;

        int recommendTakeCount = settingTemplate.recommendSynergySalesEventTakeCountBySalesEvent(RECOMMEND_TAKE_COUNT);

        SalesEvent salesEvent = salesEventService.fetchSalesEventBySalesEventId(salesEventId).orElse(null);
        if (salesEvent == null) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Hospital hospital = salesEvent.getHospital();

        List<Long> salesEventIdsBySolutionTags = ListUtils.takeRandomElements(
                        recommendFacade.getSalesEventIdsByRecommendSalesEventIds(
                                DiagnosticContext.recommendScope(),
                                salesEvent.getRepresentativeSolutionTagIds().stream()
                                        .flatMap(x -> recommendFacade.getRecommendSalesEventIdsBySolutionTagId(x).stream())
                                        .collect(Collectors.toSet())), RECOMMEND_BUCKET_COUNT)
                .stream()
                .filter(x -> x != salesEventId)
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        CollectionUtils.isEmpty(salesEventIdsBySolutionTags) ?
                                salesEventService.findSalesEventsByHospitalId(hospital.getId()).stream()
                                        .map(SalesEvent::getId)
                                        .collect(Collectors.toSet()) : salesEventIdsBySolutionTags)
                .stream()
                .sorted(Comparator.comparing(SalesEventStat::getOrderCountIn1Week).reversed())
                .limit(recommendTakeCount)
                .collect(Collectors.toList());

        Set<Long> salesEventIds = salesEventStats.stream()
                .map(SalesEventStat::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        List<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(memberId,
                salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventWithCouponsBySalesEventAtSalesEvent(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers,
                        Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_WITH_COUPONS_BY_SALES_EVENT_AT_SALES_EVENT)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsWithCouponsBySalesEvent(long salesEventId) {
        long memberId = DiagnosticContext.fetchMemberId();

        final int RECOMMEND_TAKE_COUNT = 7;

        LocalDateTime now = LocalDateTime.now();

        MemberCoupon memberCoupon = couponService.fetchAllMemberCoupons(
                        memberId, CouponStatus.AVAILABLE, CouponUtils.couponPackCodePrefix(now))
                .stream()
                .min(Comparator.comparing(x -> x.getCoupon().getMinimumPaymentPrice()))
                .orElse(null);
        if (memberCoupon == null) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        RecommendSalesEventMeta meta = recommendFacade.getRecommendSalesEventMetasBySalesEventId(salesEventId).orElse(null);
        if (meta == null) {
            return SalesEventsPayload.empty();
        }

        if (recommendFacade.getRecommendSalesEventMetasByHospitalId(meta.getHospitalId())
                .stream().noneMatch(x -> x.getSalesEventId() != salesEventId)) {
            return SalesEventsPayload.empty();
        }

        int totalPrice = cartService.fetchAllCartProducts(memberId)
                .stream()
                .filter(x -> x.getHospital().getId() == meta.getHospitalId())
                .map(x -> x.getCount() * x.getSalesProductVersion().getSalesPrice())
                .mapToInt(Integer::intValue)
                .sum();
        if (memberCoupon.getCoupon().getMinimumPaymentPrice() < totalPrice) {
            return SalesEventsPayload.empty();
        }

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(
                        recommendFacade.getRecommendSalesEventMetasByHospitalId(meta.getHospitalId())
                                .stream()
                                .map(RecommendSalesEventMeta::getSalesEventId)
                                .collect(Collectors.toList()))
                .stream()
                .sorted(Comparator.comparing(SalesEventStat::getOrderCountIn1Month).reversed())
                .limit(RECOMMEND_TAKE_COUNT)
                .collect(Collectors.toList());

        Set<Long> salesEventIds = salesEventStats.stream()
                .map(SalesEventStat::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        List<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(memberId,
                salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventWithCouponsBySalesEventAtSalesEvent(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        Map<String, Object> contexts = new HashMap<>();
        contexts.put(Context.COUPON_MINIMUM_PAYMENT_PRICE, memberCoupon.getCoupon().getMinimumPaymentPrice());
        contexts.put(Context.CART_TOTAL_PAYMENT_PRICE, totalPrice);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers,
                        Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_WITH_COUPONS_BY_SALES_EVENT_AT_SALES_EVENT)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .contexts(contexts)
                .build();
    }

    public SalesEventsPayload recommendSalesEventsBySalesProduct(List<Long> salesProductIds, GeoPosition geoPosition) {
        long memberId = DiagnosticContext.fetchMemberId();

        final int RECOMMEND_TAKE_COUNT = 7;

        List<Treatment> treatments = salesProductService.fetchSalesProductWithTreatmentsBySalesProductIds(salesProductIds)
                .stream()
                .flatMap(x -> x.getTreatments().stream())
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(treatments)) {
            return SalesEventsPayload.empty();
        }

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<RecommendTreatmentScore> treatmentRelationScores = treatments.stream()
                .flatMap(x -> RecommendPreset.treatmentRelations(x.getId()).stream())
                .filter(x -> CollectionUtils.isNotEmpty(recommendFacade.getRecommendSalesEventIdsByTreatmentId(
                        DiagnosticContext.recommendScope(), x.getTreatmentId())))
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(treatmentRelationScores)) {
            return SalesEventsPayload.empty();
        }

        long recommendTreatmentId = RecommendTask.<RecommendTreatmentScore>stream()
                .aggregate((c) -> treatmentRelationScores)
                .weight((c, e) -> e.getLiftScore() * 1000 + e.getConfidenceScore())
                .take(3)
                .stream()
                .map(RecommendTreatmentScore::getTreatmentId)
                .findFirst()
                .orElse(-1L);
        if (recommendTreatmentId < 0) {
            return SalesEventsPayload.empty();
        }

        List<RecommendSalesEventMeta> recommendSalesEventMetas = recommendFacade.getRecommendSalesEventMetasByTreatmentIds(
                Collections.singletonList(recommendTreatmentId));

        Map<Long, Hospital> recommendHospitals = hospitalService.findHospitalsByHospitalIds(
                        recommendSalesEventMetas
                                .stream()
                                .map(RecommendSalesEventMeta::getHospitalId)
                                .collect(Collectors.toList()))
                .stream()
                .collect(Collectors.toMap(Hospital::getId, Function.identity()));

        String geoCell = GeoUtils.H3.geoToH3Address(new GeoPoint(geoPosition.getLatitude(), geoPosition.getLongitude()));

        List<Long> recommendSalesEventIds = RecommendTask.<RecommendSalesEventMeta>stream()
                .aggregate((c) -> recommendSalesEventMetas)
                .weight((c, e) -> recommendService.weightByGeoDistance(geoCell, recommendHospitals.get(e.getHospitalId())))
                .weight((c, e) -> recommendService.weightByQualityScore(recommendFacade, e.getRecommendSalesEventId()))
                .take(RECOMMEND_TAKE_COUNT)
                .stream()
                .map(RecommendSalesEventMeta::getRecommendSalesEventId)
                .collect(Collectors.toList());

        List<RecommendSalesEvent> recommendSalesEvents = recommendService.fetchRecommendSalesEventsByIds(recommendSalesEventIds);
        if (CollectionUtils.isEmpty(recommendSalesEvents)) {
            return SalesEventsPayload.empty();
        }

        Set<Long> salesEventIds = recommendSalesEvents.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        List<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(memberId,
                salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventsBySalesProduct(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_SALES_PRODUCT_AT_SALES_EVENT)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventPageablePayload recommendSalesEventsFromMap(
            List<Long> presetSalesEventIds, MapRadiusSalesEventSearchableContext searchableContext) {
        restrictionContext.addGeoPositionUsages(
                searchableContext.getGeoPosition().getLatitude(),
                searchableContext.getGeoPosition().getLongitude());

        SearchResult<SalesEventDocument> searchResult = searchService.search(searchableContext);
        if (CollectionUtils.isEmpty(searchResult.getDocuments())) {
            return SalesEventPageablePayload.empty();
        }

        List<Long> excludeSalesEvent = Stream.concat(
                        Optional.ofNullable(presetSalesEventIds).orElse(Collections.emptyList()).stream(),
                        Optional.ofNullable(searchableContext.getExcludeSalesEventIds()).orElse(Collections.emptyList()).stream())
                .distinct()
                .collect(Collectors.toList());

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                MapRadiusSalesEventSearchableContext.builder()
                        .size(searchableContext.getSize())
                        .radius(searchableContext.getRadius())
                        .reservation(searchableContext.getReservation())
                        .excludeSalesEventIds(excludeSalesEvent)
                        .query(searchableContext.getQuery())
                        .geoPosition(searchableContext.getGeoPosition())
                        .distanceUnit(searchableContext.getDistanceUnit())
                        .searchAfter(searchResult.getSearchAfter())
                        .build());

        final int FIXED_PRESET_SALES_EVENT_ID_COUNT = 5;
        List<Long> fixedSalesEventIds = ListUtils.subList(presetSalesEventIds, FIXED_PRESET_SALES_EVENT_ID_COUNT);

        Set<Long> salesEventIds = new HashSet<>();
        salesEventIds.addAll(fixedSalesEventIds);
        salesEventIds.addAll(searchResult.getDocuments().stream()
                .map(SalesEventDocument::getId)
                .collect(Collectors.toSet()));

        Set<Long> hospitalIds = searchResult.getDocuments().stream()
                .map(SalesEventDocument::getHospitalId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                        salesEventIds,
                        Collections.singletonList(SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                                .supportAd(true)
                                .build())
                .stream()
                .sorted(Comparator.comparingInt(x -> {
                    int index = fixedSalesEventIds.indexOf(x.getSalesEvent().getId());
                    return index >= 0 ? index : Integer.MAX_VALUE;
                }))
                .collect(Collectors.toList());

        Set<Long> linkableSalesEventIds = salesEventService.salesEventsLinkable(salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()))
                .stream()
                .filter(SalesEventLinkable::isLinkable)
                .map(SalesEventLinkable::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> validSalesEventContainers = salesEventContainers.stream()
                .filter(x -> linkableSalesEventIds.contains(x.getSalesEvent().getId()))
                .collect(Collectors.toList());

        List<SalesProduct> salesProducts = validSalesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = validSalesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                validSalesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventAtMap(
                settingTemplate, new ArrayList<>(linkableSalesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventPageablePayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        validSalesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_AT_MAP)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), nextToken))
                .build();
    }

    public SalesEventPageablePayload recommendSalesEventsByHospitalFromMap(
            MapHospitalSalesEventSearchableContext searchableContext) {
        SearchResult<SalesEventDocument> searchResult = searchService.search(searchableContext);
        if (CollectionUtils.isEmpty(searchResult.getDocuments())) {
            return SalesEventPageablePayload.empty();
        }

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                MapHospitalSalesEventSearchableContext.builder()
                        .size(searchableContext.getSize())
                        .hospitalId(searchableContext.getHospitalId())
                        .query(searchableContext.getQuery())
                        .searchAfter(searchResult.getSearchAfter())
                        .build());

        List<Long> salesEventIds = searchResult.getDocuments().stream()
                .map(SalesEventDocument::getId)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = searchResult.getDocuments().stream()
                .map(SalesEventDocument::getHospitalId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                        salesEventIds,
                        Collections.singletonList(SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                                .supportAd(true)
                                .build())
                .stream()
                .sorted(Comparator.comparingInt(x -> {
                    int index = salesEventIds.indexOf(x.getSalesEvent().getId());
                    return index >= 0 ? index : Integer.MAX_VALUE;
                }))
                .collect(Collectors.toList());

        Set<Long> linkableSalesEventIds = salesEventService.salesEventsLinkable(salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()))
                .stream()
                .filter(SalesEventLinkable::isLinkable)
                .map(SalesEventLinkable::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> validSalesEventContainers = salesEventContainers.stream()
                .filter(x -> linkableSalesEventIds.contains(x.getSalesEvent().getId()))
                .collect(Collectors.toList());

        List<SalesProduct> salesProducts = validSalesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = validSalesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                validSalesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByHospitalAtMap(
                settingTemplate, new ArrayList<>(linkableSalesEventIds)));

        Collections.shuffle(salesEventContainers);

        return SalesEventPageablePayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        validSalesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_AT_MAP)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), nextToken))
                .build();
    }

    public TreatmentLibrariesPayload recommendTreatmentLibrariesBySolutionTagId(long solutionTagId) {
        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventIds = recommendFacade.getRecommendSalesEventIdsBySolutionTagId(solutionTagId);
        Map<Long, Integer> treatmentCounts = new HashMap<>();
        for (long recommendSalesEventId : recommendSalesEventIds) {
            RecommendSalesEventMeta meta = recommendFacade.getRecommendSalesEventMeta(recommendSalesEventId).orElse(null);
            if (meta == null) {
                continue;
            }

            treatmentCounts.put(meta.getTreatmentId(), treatmentCounts.getOrDefault(meta.getTreatmentId(), 0) + 1);
        }
        if (MapUtils.isEmpty(treatmentCounts)) {
            return TreatmentLibrariesPayload.empty();
        }

        final int RECOMMEND_BUCKET_COUNT = 5;
        final int RECOMMEND_TAKE_COUNT = 3;

        List<Long> treatmentIds = ListUtils.takeRandomElements(treatmentCounts.entrySet()
                .stream()
                .sorted(Entry.<Long, Integer>comparingByValue().reversed()) // 값 기준 내림차순 정렬
                .limit(RECOMMEND_BUCKET_COUNT)
                .map(Entry::getKey)
                .collect(Collectors.toList()), RECOMMEND_TAKE_COUNT);

        List<TreatmentLibraryFacade> treatmentLibraryFacades = treatmentLibraryService.fetchAllTreatmentLibraries(treatmentIds)
                .stream()
                .map(x -> TreatmentLibraryFacade.builder()
                        .treatment(Optional.ofNullable(x.getTreatment()))
                        .treatmentLibrary(Optional.of(x))
                        .build())
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(treatmentLibraryFacades)) {
            return TreatmentLibrariesPayload.empty();
        }

        List<TreatmentStat> treatmentStats = treatmentLibraryService.findTreatmentStats(
                treatmentIds,
                TreatmentStatConfigure.builder()
                        .excludeTreatmentReviewEvaluations(
                                List.of(Evaluation.VERY_COST_EFFECTIVE,
                                        Evaluation.TREAT_METICULOUSLY,
                                        Evaluation.TAKE_GOOD_CARE_OF_AFTER_TREATMENT,
                                        Evaluation.WAITING_TIME_IS_SHORT,
                                        Evaluation.FRIENDLY_AND_DETAILED_CONSULTATION,
                                        Evaluation.REVISIT,
                                        Evaluation.GOOD_ACCESS_TO_HOSPITAL,
                                        Evaluation.HOSPITAL_FACILITIES_ARE_COMFORTABLE))
                        .build());

        return TreatmentLibrariesPayload.builder()
                .treatments(treatmentLibraryFacades.stream()
                        .map(TreatmentLibraryFacade::getTreatment)
                        .filter(Optional::isPresent)
                        .map(Optional::get)
                        .map(payloadFactory::textIconTemplate)
                        .collect(Collectors.toList()))
                .treatmentStats(payloadFactory.treatmentStatTemplates(treatmentStats))
                .treatmentLibraries(payloadFactory.treatmentLibraryTemplates(treatmentLibraryFacades))
                .build();
    }

    public SalesEventsPayload recommendSalesEventsByHospital(long hospitalId) {
        final int RECOMMEND_HOSPITAL_COUNT = 10;
        final int RECOMMEND_SALES_EVENT_COUNT = 4;

        Hospital preferHospital = hospitalService.findHospitalByHospitalId(hospitalId);
        List<Long> hospitalAdditionIds = hospitalService.findHospitalDepartmentsByHospitalId(hospitalId)
                .stream()
                .map(HospitalDepartment::getId)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        List<HospitalDocument> hospitalDocuments = searchService.search(HospitalSearchableContext.builder()
                .size(RECOMMEND_HOSPITAL_COUNT)
                .sort(SortType.DISTANCE)
                .geoPosition(GeoPosition.builder()
                        .latitude(preferHospital.getLatitude())
                        .longitude(preferHospital.getLongitude())
                        .build())
                .sales(SalesType.SALES)
                .additionIds(hospitalAdditionIds)
                .build()).getDocuments();

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitalDocuments.stream()
                        .map(HospitalDocument::getId)
                        .collect(Collectors.toList()))
                .stream()
                .sorted(Comparator.comparing(HospitalStat::getStarPointAverage).reversed()
                        .thenComparing(HospitalStat::getReviewCount).reversed())
                .limit(RECOMMEND_HOSPITAL_COUNT)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitalStats.stream()
                .map(HospitalStat::getHospitalId)
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Map<Long, List<SalesEventStat>> salesEventStatByHospital = salesEventService.findStatsBySalesEventIds(
                        hospitalIds.stream()
                                .flatMap(x -> recommendFacade.getSalesEventIdsByHospitalId(
                                        DiagnosticContext.recommendScope(), x).stream())
                                .collect(Collectors.toSet()))
                .stream()
                .collect(Collectors.groupingBy(SalesEventStat::getHospitalId));

        List<SalesEventStat> salesEventStats = new ArrayList<>();
        for (HospitalStat hospitalStat : hospitalStats) {
            salesEventStats.addAll(salesEventStatByHospital.getOrDefault(
                            hospitalStat.getHospitalId(),
                            Collections.emptyList())
                    .stream()
                    .sorted(Comparator.comparing(SalesEventStat::getTotalReviewCount).reversed())
                    .limit(RECOMMEND_SALES_EVENT_COUNT)
                    .collect(Collectors.toList()));
        }

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        Set<Long> salesEventIds = salesEventStats.stream()
                .map(SalesEventStat::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByHospitalPlaceAtHospital(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend hospital places are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_PLACE_AT_HOSPITAL)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplatesByHospitalDocuments(hospitalDocuments))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }


    public SalesEventsPayload recommendSalesEventsByFray() {
        final int RECOMMEND_SALES_EVENT_BUCKET_COUNT = 100;
        final int RECOMMEND_SALES_EVENT_COUNT = 3;

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> recommendSalesEventIds = recommendFacade.getRecommendSalesEventIdsByTreatmentId(
                DiagnosticContext.recommendScope(),
                applicationProps.getFray().getTreatmentId());

        List<RecommendSalesEvent> recommendSalesEvents = ListUtils.takeRandomElements(
                recommendService.fetchRecommendSalesEventsByIds(recommendSalesEventIds)
                        .stream()
                        .filter(x -> {
                            String normalized = StringUtils.deleteWhitespace(x.getSalesEvent().getNameKo());
                            return StringUtils.containsIgnoreCase(normalized, "F-RAY")
                                    || StringUtils.containsIgnoreCase(normalized, "FRAY");
                        })
                        .collect(Collectors.toList()), RECOMMEND_SALES_EVENT_BUCKET_COUNT);
        if (CollectionUtils.isEmpty(recommendSalesEvents)) {
            return SalesEventsPayload.empty();
        }

        List<Long> hospitalIds = recommendSalesEvents.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(recommendSalesEvents.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toSet()))
                .stream()
                .sorted(Comparator.comparing(SalesEventStat::getTotalReviewCount).reversed())
                .limit(RECOMMEND_SALES_EVENT_COUNT)
                .collect(Collectors.toList());

        Set<Long> salesEventIds = salesEventStats.stream()
                .map(SalesEventStat::getSalesEventId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService
                .fetchSalesEventContainersBySalesProductTypes(salesEventIds, Collections.singletonList(
                        SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, salesEventIds));

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getSalesEvent)
                        .collect(Collectors.toList()), recommendFacade);

        messagePublisher.publishCpm(CpmMessageUtils.recommendSalesEventByFrayAtTicket(
                settingTemplate, new ArrayList<>(salesEventIds)));

        Collections.shuffle(salesEventContainers);

        MonitorUtils.notEmpty(salesEventContainers, "sales events from recommend fray are empty.");

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, Refer.of(CpmEventType.RECOMMEND_SALES_EVENT_BY_HOSPITAL_PLACE_AT_HOSPITAL)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(recommendSalesEvents.stream()
                        .map(RecommendSalesEvent::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }


    public TreatmentsPayload recommendTicketTreatmentsByRecentOrders() {
        final int RECOMMEND_TREATMENT_COUNT = 3;

        long memberId = DiagnosticContext.fetchMemberId();
        LocalDateTime now = LocalDateTime.now();

        Map<Long, List<Ticket>> ticketGroups = ticketService.fetchAllTicketsByMemberIdAndStatuses(memberId,
                        List.of(TicketStatus.USED, TicketStatus.UNUSED, TicketStatus.RESERVED),
                        now.minusYears(1), now)
                .stream()
                .collect(Collectors.groupingBy(Ticket::getGroupId));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<Long> treatmentIds = ticketGroups.values()
                .stream()
                .filter(CollectionUtils::isNotEmpty)
                .map(tickets -> tickets.get(0))
                .sorted(Comparator.comparing(Ticket::getCreated).reversed())
                .map(x -> x.getSalesEvent().getTreatment().getId())
                .filter(x -> CollectionUtils.isNotEmpty(
                        recommendFacade.getRecommendSalesEventIdsByTreatmentId(DiagnosticContext.recommendScope(), x)))
                .distinct()
                .limit(RECOMMEND_TREATMENT_COUNT)
                .collect(Collectors.toList());

        Set<Long> recommendTreatmentIds = new HashSet<>(treatmentIds);

        if (CollectionUtils.size(treatmentIds) == RECOMMEND_TREATMENT_COUNT) {
            return TreatmentsPayload.builder()
                    .treatments(payloadFactory.treatmentsTemplate(attributeFacade.findTreatmentsByTreatmentIds(treatmentIds)))
                    .build();
        }

        Set<Long> extraTreatmentIds = explorerService.fetchAllRankingCategories()
                .stream()
                .map(ExplorerRankingCategory::getSolutionTag)
                .map(SolutionTag::getId)
                .flatMap(x -> attributeFacade.findTreatmentIdsBySolutionTagId(x).stream())
                .collect(Collectors.toSet());

        Pageable pageable = explorerService.pageable(ExplorerRankingTreatmentPageableContext.builder()
                .page(Query.PAGE_DEFAULT_NUMBER)
                .size(RECOMMEND_TREATMENT_COUNT)
                .sort(SortType.MUCH_ORDERS)
                .build());
        recommendTreatmentIds.addAll(explorerService.fetchAllTreatmentsByTreatmentIds(pageable, extraTreatmentIds)
                .stream()
                .map(x -> x.getTreatment().getId())
                .filter(x -> !recommendTreatmentIds.contains(x))
                .filter(x -> CollectionUtils.isNotEmpty(
                        recommendFacade.getRecommendSalesEventIdsByTreatmentId(DiagnosticContext.recommendScope(), x)))
                .limit(RECOMMEND_TREATMENT_COUNT - CollectionUtils.size(treatmentIds))
                .collect(Collectors.toList()));

        return TreatmentsPayload.builder()
                .treatments(payloadFactory.treatmentsTemplate(
                        attributeFacade.findTreatmentsByTreatmentIds(recommendTreatmentIds)))
                .build();
    }

    public SearchKeywordsPayload recommendKeywords(String query) {
        if (StringUtils.isBlank(query)) {
            return SearchKeywordsPayload.empty();
        }

        StringBuilder normalizedQuery = new StringBuilder();
        for (int index = 0; index < query.length(); index++) {
            char value = query.charAt(index);
            if (KoreanUtils.isKorean(value)) {
                if (KoreanUtils.isCompletedWord(value)) {
                    normalizedQuery.append(value);
                }
            } else {
                normalizedQuery.append(value);
            }
        }

        String searchQuery = StringUtils.deleteWhitespace(
                SearchUtils.normalizedText(normalizedQuery.toString()));
        if (StringUtils.isBlank(searchQuery)) {
            return SearchKeywordsPayload.empty();
        }

        final int RECOMMEND_TREATMENT_COUNT = 20;

        List<RecommendSearchKeyword> searchKeywords = recommendService.fetchRecommendSearchKeywordsByQuery(
                searchQuery, RecommendSearchKeywordOption.builder()
                        .language(DiagnosticContext.fetchLocale().getLanguage())
                        .build());
        if (CollectionUtils.isEmpty(searchKeywords)) {
            return SearchKeywordsPayload.empty();
        }

        Set<Long> searchSolutionIds = searchKeywords.stream()
                .filter(x -> StringUtils.equals(x.getSearchWord(), searchQuery))
                .flatMap(x -> x.getSolutionTagIds().stream())
                .collect(Collectors.toSet());

        List<Long> solutionTagIds = searchKeywords.stream()
                .flatMap(x -> x.getSolutionTagIds().stream())
                .distinct()
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(solutionTagIds)) {
            return SearchKeywordsPayload.builder()
                    .keywords(searchKeywords.stream()
                            .sorted(Comparator.comparing(RecommendSearchKeyword::getPriority))
                            .map(payloadFactory::textTemplate)
                            .collect(Collectors.toList()))
                    .build();
        }
        List<Long> excludeSolutionTagIds = solutionTagIds.stream()
                .filter(x -> !searchSolutionIds.contains(x))
                .collect(Collectors.toList());

        long solutionTagId = CollectionUtils.isEmpty(excludeSolutionTagIds) ?
                Optional.ofNullable(ListUtils.takeRandomElement(solutionTagIds)).orElse(0L)
                : Optional.ofNullable(ListUtils.takeRandomElement(excludeSolutionTagIds)).orElse(0L);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        SolutionTag solutionTag = attributeFacade.findSolutionTagBySolutionTagId(solutionTagId).orElse(null);
        if (solutionTag == null) {
            return null;
        }

        List<Long> treatmentIds = ListUtils.takeRandomElements(
                attributeFacade.findTreatmentIdsBySolutionTagId(solutionTagId), RECOMMEND_TREATMENT_COUNT);
        List<Treatment> treatments = attributeFacade.findTreatmentsByTreatmentIds(treatmentIds)
                .stream()
                .filter(x -> !StringUtils.equals(x.getNameKo(), query))
                .collect(Collectors.toList());

        return SearchKeywordsPayload.builder()
                .keywords(searchKeywords.stream()
                        .sorted(Comparator.comparing(RecommendSearchKeyword::getPriority))
                        .map(payloadFactory::textTemplate)
                        .collect(Collectors.toList()))
                .solutionTags(Collections.singletonList(payloadFactory.textIconTemplate(solutionTag)))
                .treatments(treatments.stream()
                        .map(payloadFactory::textIconTemplate)
                        .collect(Collectors.toList()))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/report/usecase/ReportUseCase.java
================================================
package kr.co.yeoshin.backend.report.usecase;

import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.board.service.PromotionService;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.api.code.TreatmentReviewCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.TreatmentReviewException;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.MemberReportPageablePayload;
import kr.co.yeoshin.backend.report.controller.model.ContentReportRequest;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.report.usecase.model.MemberReportPageableContext;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventQuestionService;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.common.board.entity.PromotionReply;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.report.entity.MemberReport;
import kr.co.yeoshin.common.review.entity.SalesEventQuestion;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.tv.entity.TvReply;
import kr.co.yeoshin.common.utils.CryptUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;


@Slf4j
@RequiredArgsConstructor
@UseCase
public class ReportUseCase {

    private final MemberService memberService;
    private final TreatmentReviewService treatmentReviewService;
    private final TvService tvService;
    private final ReportService reportService;
    private final SalesEventQuestionService salesEventQuestionService;
    private final PromotionService promotionService;
    private final PayloadFactory payloadFactory;

    public BoolPayload reportMember(long reportedMemberId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(reportService.addReports(memberId, reportedMemberId))
                .build();
    }

    public MemberReportPageablePayload listMemberReports(MemberReportPageableContext context) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = reportService.pageable(context);
        Page<MemberReport> memberReportPage = reportService.fetchMemberReportByMemberId(memberId, pageable);

        if (memberReportPage.isEmpty()) {
            return MemberReportPageablePayload.empty();
        }

        List<Long> reportedMemberIds = memberReportPage.getContent().stream()
                .map(x -> x.getReportedMember().getId())
                .collect(Collectors.toList());
        List<Member> reportedMembers = memberService.findAllByMemberIds(reportedMemberIds);

        String nextToken = memberReportPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                MemberReportPageableContext.builder()
                        .page(memberReportPage.getPageable().getPageNumber() + 1)
                        .size(context.getSize())
                        .build()
        );

        return MemberReportPageablePayload.builder()
                .memberReports(payloadFactory.memberReportTemplates(memberReportPage.getContent()))
                .memberProfiles(payloadFactory.memberProfileTemplates(reportedMembers))
                .pageable(payloadFactory.pageableTemplate(memberReportPage, nextToken))
                .build();
    }

    public BoolPayload removeReportedMember(long reportedMemberId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(reportService.removeReportedMember(memberId, reportedMemberId))
                .build();
    }

    public BoolPayload reportReview(long reviewId, ContentReportRequest report) {
        long memberId = DiagnosticContext.fetchMemberId();

        TreatmentReview treatmentReview = treatmentReviewService.findTreatmentReviewByTreatmentReviewId(reviewId)
                .orElseThrow(() -> new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_NOT_EXIST));

        return BoolPayload.builder()
                .result(reportService.addReports(memberId, treatmentReview, report))
                .build();
    }

    public BoolPayload reportTvReply(long tvId, long replyId, ContentReportRequest report) {
        long memberId = DiagnosticContext.fetchMemberId();

        TvReply tvReply = tvService.findTvReplyByReplyIdAndTvId(replyId, tvId);

        return BoolPayload.builder()
                .result(reportService.addReports(memberId, tvReply, report))
                .build();
    }

    public BoolPayload reportSalesEventQuestion(long salesEventId, long questionId, ContentReportRequest report) {
        long memberId = DiagnosticContext.fetchMemberId();

        SalesEventQuestion salesEventQuestion = salesEventQuestionService.findQuestionByQuestionId(questionId);

        return BoolPayload.builder()
                .result(reportService.addReports(memberId, salesEventQuestion, report))
                .build();
    }


    public BoolPayload reportPromotionReport(long promotionId, long promotionReplyId, ContentReportRequest report) {
        long memberId = DiagnosticContext.fetchMemberId();

        PromotionReply promotionReply = promotionService.findPromotionReply(promotionReplyId);

        return BoolPayload.builder()
                .result(reportService.addReports(memberId, promotionReply, report))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/component/retrofit/model/CrmIdPayload.java
================================================
package kr.co.yeoshin.backend.reservation.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class CrmIdPayload {

    @JsonProperty("sid")
    private long crmReservationId;

    @JsonProperty("cid")
    private long crmMemberId;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/component/retrofit/model/DoctorPayload.java
================================================
package kr.co.yeoshin.backend.reservation.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class DoctorPayload {

    @JsonProperty("doctor_id")
    private long id;

    @JsonProperty("doctor_name")
    private String name;

    @JsonProperty("doctor_hour")
    private String workingHours;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/component/retrofit/model/HolidayPayload.java
================================================
package kr.co.yeoshin.backend.reservation.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Crm;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class HolidayPayload {

    @JsonProperty("holidays")
    private String holidays;

    public List<LocalDateTime> toLocalDateTime(int year) {
        try {
            return Arrays.stream(StringUtils.split(holidays, DELIMITER))
                    .map(monthDay -> LocalDate.parse(year + monthDay, DateTimeFormatter.ofPattern(Crm.DATE_FORMAT))
                            .atStartOfDay())
                    .collect(Collectors.toList());
        } catch (DateTimeParseException exception) {
            log.error("crm holiday date format error: ({})", exception.getMessage());

            return Collections.emptyList();
        }
    }

    private static final String DELIMITER = ",";
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/component/retrofit/model/HospitalInformationPayload.java
================================================
package kr.co.yeoshin.backend.reservation.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class HospitalInformationPayload {

    @JsonProperty("doctors")
    private List<DoctorPayload> doctors;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/component/retrofit/model/OperationTimePayload.java
================================================
package kr.co.yeoshin.backend.reservation.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.DayOfWeek;
import java.time.LocalTime;
import kr.co.yeoshin.backend.common.Constant.Crm;
import lombok.Getter;

public class OperationTimePayload {

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("OPENTIME")
    private LocalTime startTime;

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("CLOSETIME")
    private LocalTime endTime;

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("STARTLUNCHTIME")
    private LocalTime lunchStartTime;

    @Getter
    @JsonFormat(pattern = Crm.TIME_FORMAT)
    @JsonProperty("ENDLUNCHTIME")
    private LocalTime lunchEndTime;

    @JsonProperty("DAYCLOSE")
    private int closedDay;  // 휴무일: 1, 휴무일 X: 0

    @JsonProperty("TIMEFIX")
    private int reservationRestrictedThirtyMinutesInAdvance;    // 예약제한: 1, 예약제한 X: 0

    @JsonProperty("WEEKDAY")
    private int dayOfWeek;

    public boolean isHoliday() {
        return this.closedDay == 1;
    }

    public boolean isReservableAtThirtyMinutesInAdvance() {
        return this.reservationRestrictedThirtyMinutesInAdvance == 0;
    }

    public DayOfWeek dayOfWeek() {
        // 일(0), 월(1), 화(2), 수(3), 목(4), 금(5), 토(6)
        if (dayOfWeek < 0 || dayOfWeek > 6) {
            return null;
        }

        if (dayOfWeek == 0) {
            return DayOfWeek.SUNDAY;
        }

        return DayOfWeek.of(dayOfWeek);
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/component/retrofit/model/ReservationPayload.java
================================================
package kr.co.yeoshin.backend.reservation.component.retrofit.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.time.LocalTime;
import kr.co.yeoshin.backend.common.Constant.Crm;
import lombok.Data;

@Data
public class ReservationPayload {

    @JsonProperty("sid")
    private long crmReservationId;

    @JsonProperty("cid")
    private long crmMemberId;

    @JsonFormat(pattern = Crm.DATE_FORMAT)
    @JsonProperty("resv_date")
    private LocalDate reservationDate;

    @JsonFormat(pattern = Crm.TIME_WITH_SECONDS_FORMAT)
    @JsonProperty("resv_time")
    private LocalTime reservationTime;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/reservation/usecase/ReservationUseCase.java
================================================
package kr.co.yeoshin.backend.reservation.usecase;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.auth.service.AuthService;
import kr.co.yeoshin.backend.common.Constant.Point;
import kr.co.yeoshin.backend.common.Constant.Template;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType.Service;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.ReservationCode;
import kr.co.yeoshin.backend.common.model.api.code.TicketCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.CouponMeta;
import kr.co.yeoshin.backend.exception.ReservationException;
import kr.co.yeoshin.backend.exception.TicketException;
import kr.co.yeoshin.backend.exception.TreatmentReviewException;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.insurance.service.InsuranceService;
import kr.co.yeoshin.backend.insurance.service.model.InsuranceTicket;
import kr.co.yeoshin.backend.member.service.MemberDomainService;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.PreliminaryQuestionnairesPayload;
import kr.co.yeoshin.backend.payload.ReservationPageablePayload;
import kr.co.yeoshin.backend.payload.ReservationPayload;
import kr.co.yeoshin.backend.payment.service.PaymentService;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.point.service.model.MemberPointUsageReport;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.payment.CpmSettlementContext;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.common.queue.utils.DomainEventContextUtils;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.reservation.controller.model.ReservationRequest;
import kr.co.yeoshin.backend.reservation.service.CrmService;
import kr.co.yeoshin.backend.reservation.service.ReservationService;
import kr.co.yeoshin.backend.reservation.service.model.ReservableStatusValidateConfigure;
import kr.co.yeoshin.backend.reservation.service.model.ReservationContainer;
import kr.co.yeoshin.backend.reservation.service.model.ReservationValidatable;
import kr.co.yeoshin.backend.reservation.usecase.model.ReservationContext;
import kr.co.yeoshin.backend.reservation.usecase.model.ReservationPageableContext;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.settlement.service.SettlementService;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.common.Constant;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalManagementContact;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.MerchantType;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicket;
import kr.co.yeoshin.common.reservation.entity.ReservationAsWritableTreatmentReview;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalConfig;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.utils.*;
import kr.co.yeoshin.common.utils.model.TicketSettlementPrice;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class ReservationUseCase {

    private final ApplicationProps applicationProps;
    private final ReservationService reservationService;
    private final AuthService authService;
    private final MemberService memberService;
    private final TicketService ticketService;
    private final OrderService orderService;
    private final MemberPointService memberPointService;
    private final CouponService couponService;
    private final SalesProductService salesProductService;
    private final RecommendService recommendService;
    private final TreatmentReviewService treatmentReviewService;
    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final InsuranceService insuranceService;
    private final CrmService crmService;
    private final SettlementService settlementService;
    private final PaymentService paymentService;
    private final MemberDomainService memberDomainService;
    private final QuestService questService;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final QueueMessageDomainEventContext messageDomainEventContext;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final PayloadFactory payloadFactory;
    private final GlobalCacheTemplate cacheTemplate;
    private final TransactionTemplate transactionTemplate;
    private final SettingTemplate settingTemplate;

    public ReservationPayload reserve(ReservationRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (CollectionUtils.isEmpty(request.getTicketIds())) {
            throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
        }

        if (cacheTemplate.increaseValue(new CacheKey(Service.RESERVATION_REGISTER,
                        MessageUtils.format("{}.{}", request.getHospitalId(), memberId)),
                10,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to reserve hospital({}) too many.", memberId, request.getHospitalId());
            throw new ReservationException(CommonCode.TOO_MANY_REQUESTS);
        }

        MemberServiceSummary memberServiceSummary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        Member member = memberServiceSummary.getMember();
        if (!reservationService.validateReservableMemberStatus(member)) {
            throw new ReservationException(ReservationCode.RESERVATION_REQUIRE_INFORMATION);
        }

        ReservationHospitalConfig hospitalConfig = reservationService.findReservationHospitalConfig(request.getHospitalId())
                .orElseThrow(() -> new ReservationException(CommonCode.ERROR));

        ReservationValidatable reservationValidatable = ReservationValidatable.builder()
                .hospitalId(request.getHospitalId())
                .ticketIds(request.getTicketIds())
                .allowDuplicateReservation(memberServiceSummary.getReservationDuplicateAllowYn().toBoolean())
                .startAt(DateUtil.convertFrom(request.getStartAt()))
                .build();

        reservationService.validateReservable(memberId, LocalDateTime.now(), hospitalConfig, reservationValidatable);

        Set<Long> requestTicketIds = new HashSet<>(request.getTicketIds());

        return transactionTemplate.<Supplier<ReservationPayload>>executeMainWritableTransaction(() -> {
            List<Ticket> usableTickets = ticketService.fetchAllUsableTicketByMemberId(memberId)
                    .stream()
                    .filter(x -> requestTicketIds.contains(x.getId()))
                    .collect(Collectors.toList());
            if (CollectionUtils.isEmpty(usableTickets)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            if (!ticketService.isReservableTicket(
                    request.getHospitalId(), requestTicketIds, Collections.emptySet(), usableTickets)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            Reservation reservation = reservationService.registerReservation(memberId, request, hospitalConfig);

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(usableTickets.stream()
                    .map(x -> x.getOrderSalesProduct().getId())
                    .collect(Collectors.toList()));

            List<ReservationAsTicket> reservationAsTickets = reservationService.registerReserveAsTicket(
                    usableTickets,
                    orderSalesProducts,
                    reservation);

            List<Ticket> tickets = reservationAsTickets.stream()
                    .map(ReservationAsTicket::getTicket)
                    .collect(Collectors.toList());

            List<SalesEvent> salesEvents = tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getSalesEvent())
                    .collect(Collectors.toList());

            List<Long> salesProductVersionIds = tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getSalesProductVersion().getId())
                    .collect(Collectors.toList());

            List<SalesProduct> salesProducts = salesProductService.fetchSalesProductVersionsByBySalesProductVersionIds(
                            salesProductVersionIds)
                    .stream()
                    .map(SalesProductVersion::getSalesProduct)
                    .collect(Collectors.toList());

            memberDomainService.registerLatestStatus(memberId, reservation);

            ticketService.modifyTicketStatus(reservationAsTickets.stream()
                            .map(x -> x.getTicket().getId())
                            .collect(Collectors.toList()),
                    TicketStatus.RESERVED,
                    orderSalesProducts);

            boolean autoConfirm = hospitalConfig.getAutoConfirmReservationYn().toBoolean();

            List<HospitalManagementContact> reservationManagementContacts =
                    autoConfirm ? hospitalService.findHospitalManagementContacts(
                            request.getHospitalId(),
                            HospitalManagementContactType.RESERVATION) : Collections.emptyList();

            return () -> {
                crmService.registerReservation(ReservationContext.builder()
                        .reservation(reservation)
                        .tickets(tickets)
                        .hospitalConfig(hospitalConfig)
                        .member(member)
                        .previousStatus(Optional.empty())
                        .build());

                Hospital hospital = usableTickets.get(0).getHospital();

                List<NhnKakaoAlimTalkNotificationContext> alimTalkContexts = new ArrayList<>();
                if (autoConfirm) {
                    alimTalkContexts.add(alimTalkTemplateFactory.reservationAutoConfirm(
                            member, reservation, hospital, orderSalesProducts));
                    if (CollectionUtils.isNotEmpty(reservationManagementContacts)) {
                        alimTalkContexts.add(alimTalkTemplateFactory.reservationAutoConfirm(
                                reservationManagementContacts, member, reservation, hospital, orderSalesProducts));
                    }
                } else {
                    alimTalkContexts.add(alimTalkTemplateFactory.reservationWaitConfirm(
                            member, reservation, hospital, orderSalesProducts));
                }

                messagePublisher.publishNotification(NotificationMessageUtils.notificationMessage(alimTalkContexts));

                messageDomainEventContext.addDomainEvent(DomainEventType.RESERVATION_CREATE, reservation.getId());
                messageDomainEventContext.addDomainEvent(
                        DomainEventType.CRM_RESERVATION_CREATE,
                        reservation.getId(),
                        DomainEventContextUtils.crmReservationCreateContext(reservation));

                return ReservationPayload.builder()
                        .reservation(payloadFactory.reservationTemplate(reservation, tickets))
                        .tickets(payloadFactory.ticketTemplates(tickets, orderSalesProducts))
                        .hospital(payloadFactory.hospitalTemplate(hospital))
                        .salesEvents(payloadFactory.salesEventTemplates(salesEvents, Refer.empty()))
                        .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                        .build();
            };
        }).get();
    }

    public ReservationPayload modifyReservation(long reservationId, ReservationRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (CollectionUtils.isEmpty(request.getTicketIds())) {
            throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
        }

        MemberServiceSummary memberServiceSummary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        Member member = memberServiceSummary.getMember();
        if (!reservationService.validateReservableMemberStatus(member)) {
            throw new ReservationException(ReservationCode.RESERVATION_REQUIRE_INFORMATION);
        }

        ReservationValidatable reservationValidatable = ReservationValidatable.builder()
                .hospitalId(request.getHospitalId())
                .ticketIds(request.getTicketIds())
                .allowDuplicateReservation(memberServiceSummary.getReservationDuplicateAllowYn().toBoolean())
                .startAt(DateUtil.convertFrom(request.getStartAt()))
                .build();

        return transactionTemplate.<Supplier<ReservationPayload>>executeMainWritableTransaction(() -> {
            Reservation reservation = reservationService.fetchReservationByReservationIdAndMemberId(reservationId, memberId);
            if (!reservation.isChangeableStatus()) {
                throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_UPDATE_STATUS);
            }
            if (reservation.getHospital().getId() != request.getHospitalId()) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            if (!reservationService.isReservableHospitals(
                    memberId, reservationValidatable, Collections.singleton(reservation.getId()))) {
                throw new ReservationException(ReservationCode.RESERVATION_DUPLICATION_HOSPITAL);
            }

            ReservationHospitalConfig hospitalConfig = reservationService.findReservationHospitalConfig(
                            reservation.getHospital().getId())
                    .orElseThrow(() -> new ReservationException(CommonCode.ERROR));

            LocalDateTime reservationStartTime = DateUtil.convertFrom(request.getStartAt());
            if (!reservation.getStartAt().equals(reservationStartTime) &&
                    !reservationService.isReservableHospitalSchedule(
                            request.getHospitalId(),
                            LocalDateTime.now(),
                            reservationStartTime,
                            hospitalConfig)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_SCHEDULE);
            }

            List<ReservationAsTicket> reservationAsTickets = reservationService
                    .fetchAllReservationAsTicketByReservationId(reservationId);

            List<Ticket> reservedTickets = reservationAsTickets.stream()
                    .map(ReservationAsTicket::getTicket)
                    .collect(Collectors.toList());

            Set<Long> requestTicketIds = new HashSet<>(request.getTicketIds());
            List<Ticket> usableTickets = ticketService.fetchAllUsableTicketByMemberId(memberId)
                    .stream()
                    .filter(x -> requestTicketIds.contains(x.getId()))
                    .collect(Collectors.toList());
            usableTickets.addAll(reservedTickets);

            List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(usableTickets.stream()
                    .map(x -> x.getOrderSalesProduct().getId())
                    .collect(Collectors.toList()));

            if (!ticketService.isReservableTicket(request.getHospitalId(), requestTicketIds, reservedTickets, usableTickets)) {
                throw new ReservationException(ReservationCode.RESERVATION_UNUSABLE_TICKET);
            }

            reservationService.removeReserveAsTicketByIds(reservationAsTickets.stream()
                    .map(ReservationAsTicket::getId)
                    .collect(Collectors.toList()));

            ticketService.modifyTicketStatus(reservationAsTickets.stream()
                            .map(x -> x.getTicket().getId())
                            .collect(Collectors.toList()),
                    TicketStatus.UNUSED,
                    orderSalesProducts);

            Reservation updatedReservation = reservationService.modifyReservation(
                    memberId, reservationId, request, hospitalConfig);

            List<ReservationAsTicket> updatedReservationAsTickets = reservationService.registerReserveAsTicket(
                    usableTickets.stream()
                            .filter(x -> requestTicketIds.contains(x.getId()))
                            .collect(Collectors.toList()),
                    orderSalesProducts, updatedReservation);

            List<Ticket> tickets = updatedReservationAsTickets.stream()
                    .map(ReservationAsTicket::getTicket)
                    .collect(Collectors.toList());

            List<SalesEvent> salesEvents = tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getSalesEvent())
                    .collect(Collectors.toList());

            List<Long> salesProductVersionIds = tickets.stream()
                    .map(x -> x.getOrderSalesProduct().getSalesProductVersion().getId())
                    .collect(Collectors.toList());

            List<SalesProduct> salesProducts = salesProductService.fetchSalesProductVersionsByBySalesProductVersionIds(
                            salesProductVersionIds)
                    .stream()
                    .map(SalesProductVersion::getSalesProduct)
                    .collect(Collectors.toList());

            memberDomainService.registerLatestStatus(memberId, updatedReservation);

            ticketService.modifyTicketStatus(tickets.stream()
                            .map(Ticket::getId)
                            .collect(Collectors.toList()),
                    TicketStatus.RESERVED,
                    orderSalesProducts);

            return () -> {
                crmService.modifyReservation(ReservationContext.builder()
                        .reservation(updatedReservation)
                        .tickets(tickets)
                        .hospitalConfig(hospitalConfig)
                        .member(member)
                        .previousStatus(Optional.of(reservation.getStatus()))
                        .build());

                messagePublisher.publishNotification(
                        NotificationMessageUtils.notificationMessage(
                                alimTalkTemplateFactory.reservationUpdate(
                                        member, updatedReservation, reservation.getHospital(), orderSalesProducts)));

                messageDomainEventContext.addDomainEvent(DomainEventType.RESERVATION_UPDATE, reservation.getId());
                messageDomainEventContext.addDomainEvent(
                        DomainEventType.CRM_RESERVATION_UPDATE,
                        reservation.getId(),
                        DomainEventContextUtils.crmReservationUpdateContext(updatedReservation));

                return ReservationPayload.builder()
                        .reservation(payloadFactory.reservationTemplate(reservation, tickets))
                        .tickets(payloadFactory.ticketTemplates(tickets, orderSalesProducts))
                        .hospital(payloadFactory.hospitalTemplate(reservation.getHospital()))
                        .salesEvents(payloadFactory.salesEventTemplates(salesEvents, Refer.empty()))
                        .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                        .build();
            };
        }).get();
    }

    public BoolPayload cancelReservation(long reservationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = memberService.findMember(memberId);

        return BoolPayload.builder().result(
                transactionTemplate.<Supplier<Boolean>>executeMainWritableTransaction(() -> {
                    Reservation reservation = reservationService.fetchReservationByReservationIdAndMemberId(
                            reservationId, memberId);

                    // 예약대기 상태일때만, 취소 할수 있음
                    if (!reservation.isChangeableStatus()) {
                        throw new ReservationException(ReservationCode.RESERVATION_UNABLE_TO_UPDATE_STATUS);
                    }

                    //예약취소로 상태변경
                    Reservation cancelReservation = reservationService.modifyReservationStatus(reservationId, memberId,
                            ReservationStatus.CANCEL_WAIT_CONFIRM_BY_MEMBER);

                    ReservationHospitalConfig hospitalConfig = reservationService.findReservationHospitalConfig(
                                    reservation.getHospital().getId())
                            .orElseThrow(() -> new ReservationException(CommonCode.ERROR));

                    //예약에 해당하는 티켓 상태를 전부 변경
                    List<ReservationAsTicket> reservationAsTickets = reservationService.fetchAllReservationAsTicketByReservationId(
                            reservationId);
                    List<Long> ticketIds = reservationAsTickets.stream().map(x -> x.getTicket().getId())
                            .collect(Collectors.toList());

                    List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(
                            reservationAsTickets.stream()
                                    .map(ReservationAsTicket::getTicket)
                                    .map(x -> x.getOrderSalesProduct().getId())
                                    .collect(Collectors.toList()));

                    ticketService.modifyTicketStatus(ticketIds, TicketStatus.UNUSED, orderSalesProducts);

                    if (orderSalesProducts.stream()
                            .anyMatch(orderProduct -> orderProduct.getOrder().getOrderStatus() != OrderStatus.COMPLETE)) {
                        log.error("reservation ticket's order status is not valid.");
                        throw new ReservationException(CommonCode.ERROR);
                    }

                    memberDomainService.registerLatestStatus(memberId, reservation);

                    return () -> {
                        crmService.cancelReservation(ReservationContext.builder()
                                .reservation(cancelReservation)
                                .tickets(reservationAsTickets.stream()
                                        .map(ReservationAsTicket::getTicket)
                                        .collect(Collectors.toList()))
                                .hospitalConfig(hospitalConfig)
                                .member(member)
                                .previousStatus(Optional.of(reservation.getStatus()))
                                .build());

                        messagePublisher.publishNotification(
                                NotificationMessageUtils.notificationMessage(
                                        alimTalkTemplateFactory.reservationCancel(
                                                member, cancelReservation, cancelReservation.getHospital(), orderSalesProducts)));

                        messageDomainEventContext.addDomainEvent(DomainEventType.RESERVATION_DELETE, cancelReservation.getId());
                        messageDomainEventContext.addDomainEvent(
                                DomainEventType.CRM_RESERVATION_DELETE,
                                cancelReservation.getId(),
                                DomainEventContextUtils.crmReservationDeleteContext(cancelReservation));

                        return true;
                    };
                }).get()).build();
    }

    public ReservationPayload getReservation(long reservationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        Reservation reservation = reservationService.fetchReservationByReservationIdAndMemberId(reservationId, memberId);

        ReservationContainer reservationContainer = reservationService.fetchContainers(reservation.getId())
                .orElseThrow(() -> new ReservationException(ReservationCode.RESERVATION_NOT_EXIT));

        List<ReservationAsWritableTreatmentReview> writableTreatmentReviews = treatmentReviewService.findWriteableTreatmentReviews(
                memberId, reservationId);

        List<Long> salesEventIds = writableTreatmentReviews.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        return ReservationPayload.builder()
                .reservation(payloadFactory.reservationTemplate(reservationContainer))
                .tickets(payloadFactory.ticketTemplates(reservationContainer))
                .hospital(payloadFactory.hospitalTemplate(reservation.getHospital()))
                .salesEvents(payloadFactory.salesEventTemplates(reservationContainer.getSalesEvents(), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        reservationContainer.getSalesProductVersions()))
                .treatmentReviewsWritables(
                        payloadFactory.treatmentReviewsWritableTemplates(writableTreatmentReviews, salesEventStats))
                .build();

    }

    public PreliminaryQuestionnairesPayload getLastPreliminaryQuestionnaires() {
        long memberId = DiagnosticContext.fetchMemberId();

        Reservation reservation = reservationService.findLastReservation(memberId).orElse(null);

        return reservation == null ?
                PreliminaryQuestionnairesPayload.empty()
                : PreliminaryQuestionnairesPayload.builder()
                        .interestedTreatment(payloadFactory.textTemplate(reservation.getInterestedTreatment()))
                        .recentTreatment(payloadFactory.textTemplate(reservation.getRecentTreatment()))
                        .build();
    }

    public ReservationPageablePayload list(ReservationPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = reservationService.pageable(pageableContext);
        Page<Reservation> reservationPage = reservationService.fetchAllReservations(
                memberId, pageableContext.getHospitalId(), pageableContext.getStatuses().stream()
                        .flatMap(x -> x.getStatues().stream())
                        .collect(Collectors.toSet()), pageable);

        String nextToken = reservationPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                ReservationPageableContext.builder()
                        .sort(pageableContext.getSort())
                        .page(reservationPage.getPageable().getPageNumber() + 1)
                        .hospitalId(pageableContext.getHospitalId())
                        .statuses(pageableContext.getStatuses())
                        .build());

        List<Reservation> reservations = reservationPage.getContent();
        if (CollectionUtils.isEmpty(reservations)) {
            return ReservationPageablePayload.empty();
        }

        List<Long> reservationIds = reservations.stream()
                .map(Reservation::getId)
                .collect(Collectors.toList());

        List<ReservationContainer> reservationContainers = reservationService.fetchContainers(reservationIds)
                .stream()
                .sorted(Comparator.comparing(x -> reservationIds.indexOf(x.getReservation().getId())))
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(reservationContainers)) {
            log.error("member({}) has mismatched reservations({})", memberId, reservationIds);
            return ReservationPageablePayload.empty();
        }

        List<ReservationAsWritableTreatmentReview> writableTreatmentReviews = treatmentReviewService.findWriteableTreatmentReviews(
                memberId);

        Set<Long> hospitalIds = reservations.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        List<ReservationHospitalConfig> reservationHospitalConfigs = reservationService.findReservationHospitalConfigs(
                hospitalIds);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<Long> salesEventIds = writableTreatmentReviews.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        return ReservationPageablePayload.builder()
                .reservations(payloadFactory.reservationShortTemplates(reservationContainers))
                .tickets(payloadFactory.ticketTemplatesByReservationContainers(reservationContainers))
                .hospitals(payloadFactory.hospitalTemplates(
                        reservations.stream()
                                .map(Reservation::getHospital)
                                .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEvents(payloadFactory.salesEventTemplates(reservationContainers.stream()
                        .flatMap(x -> x.getSalesEvents().stream())
                        .collect(Collectors.toList()), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(reservationContainers.stream()
                        .flatMap(x -> x.getSalesProductVersions().stream())
                        .collect(Collectors.toList())))
                .treatmentReviewsWritables(
                        payloadFactory.treatmentReviewsWritableTemplates(writableTreatmentReviews, salesEventStats))
                .reservationHospitalConfigs(payloadFactory.reservationHospitalConfigTemplates(reservationHospitalConfigs))
                .pageable(payloadFactory.pageableTemplate(
                        reservationPage.getTotalElements(), reservationPage.getSize(), nextToken))
                .build();
    }

    public BoolPayload payComplete(long reservationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        LocalDateTime now = LocalDateTime.now();

        Reservation reservation = reservationService.fetchReservationByReservationIdAndMemberId(
                reservationId, memberId);
        if (!reservation.isPayableStatus()) {
            log.info("member({}) try to complete reservation({}) that is not in payable status.", memberId, reservation);
            throw new ReservationException(CommonCode.ERROR);
        }

        List<ReservationAsTicket> reservationAsTickets = reservationService.fetchAllReservationAsTicketByReservationIds(
                Collections.singletonList(reservation.getId()));

        if (CollectionUtils.isEmpty(reservationAsTickets)) {
            throw new TicketException(TicketCode.TICKET_NOT_EXITS);
        }

        if (!ticketService.isPayableTicket(reservationAsTickets)) {
            throw new TicketException(TicketCode.TICKET_UNABLE_TO_PAY);
        }

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(
                reservationAsTickets.stream()
                        .map(x -> x.getTicket().getOrderSalesProduct().getId())
                        .collect(Collectors.toList()));

        List<OrderPurchase> orders = orderSalesProducts.stream()
                .map(OrderSalesProduct::getOrder)
                .collect(Collectors.toList());

        List<PaymentIamport> paymentIamports = paymentService.findAllPaymentIamport(orders.stream()
                .map(OrderPurchase::getId)
                .collect(Collectors.toList()));

        if (kr.co.yeoshin.backend.order.utils.OrderUtils.isMoneyReceiptIssuable(orders, paymentIamports)
                && now.toLocalTime().isAfter(
                settingTemplate.applicationMoneyReceiptIdentifierDisableAfter(
                        kr.co.yeoshin.backend.common.Constant.Reservation.MONEY_RECEIPT_TICKET_UNABLE_PAY_IDENTIFIER_AFTER))) {
            throw new TicketException(TicketCode.TICKET_UNABLE_TO_PAY_MONEY_RECEIPT_IDENTIFIER);
        }

        Map<Long, OrderPurchase> insuranceOrderSalesProducts = orderSalesProducts.stream()
                .filter(x -> x.getOrder().getInsuranceAgreeYn().toBoolean())
                .collect(Collectors.toMap(OrderSalesProduct::getId, OrderSalesProduct::getOrder, (a, b) -> a));

        MemberServiceSummary memberServiceSummary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        Member member = memberServiceSummary.getMember();

        transactionTemplate.executeMainWritableTransaction(() -> {
            // TODO refactor issuable check method from coupon service to other service
            if (couponService.issuableRecommendMemberFirstTicketUse(member, memberServiceSummary, orders, orderSalesProducts)) {
                if (applicationProps.getReward().isActivateRecommendFirstTicketUsePoint()) {
                    authService.fetchInviterByRecommendCode(memberServiceSummary.getRecommendCode())
                            .filter(x -> CollectionUtils.isEmpty(
                                    memberPointService.findAllPointsByRef(
                                            x.getMember().getId(), DomainType.RESERVATION, reservationId)))
                            .ifPresent(x -> {
                                MemberPointUsageReport memberPoint = memberPointService.registerPoint(
                                        x.getMember().getId(),
                                        MemberPointAddContext.builder()
                                                .title(MessageUtils.format(
                                                        Action.REWARD_REGISTER_RECOMMEND_MEMBER_FIRST_TICKET_USE.getTitleKo(),
                                                        memberServiceSummary.getInviteCode()))
                                                .action(Action.REWARD_REGISTER_RECOMMEND_MEMBER_FIRST_TICKET_USE)
                                                .publishType(PublishType.SYSTEM)
                                                .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                        .expireAt(
                                                                PointUtils.expireAt(
                                                                        Constant.Point.REWARD_RECOMMEND_MEMBER_FIRST_TICKET_USE_EXPIRE_DAYS))
                                                        .point(Point.REGISTER_RECOMMEND_MEMBER_FIRST_TICKET_USE)
                                                        .build()))
                                                .point(Point.REGISTER_RECOMMEND_MEMBER_FIRST_TICKET_USE)
                                                .type(MemberPointType.REWARD)
                                                .refType(DomainType.RESERVATION)
                                                .refId(reservationId)
                                                .build());
                                questService.registerInvitationRecord(
                                        x.getMember().getId(),
                                        0,
                                        1,
                                        Point.REGISTER_RECOMMEND_MEMBER_FIRST_TICKET_USE,
                                        memberPoint.getMemberPoint().getCreated());
                            });
                } else {
                    authService.fetchInviterByRecommendCode(memberServiceSummary.getRecommendCode())
                            .ifPresent(x -> couponService.issueMemberCoupons(
                                    x.getMember().getId(),
                                    CouponIssueConditionType.RECOMMEND_MEMBER_FIRST_TICKET_USE,
                                    CouponMeta.builder()
                                            .build()));
                }
            }

            reservationService.modifyReservationStatus(reservation.getId(), memberId, ReservationStatus.VISIT_COMPLETE);
            ticketService.modifyTicketStatus(reservationAsTickets.stream()
                            .map(x -> x.getTicket().getId())
                            .collect(Collectors.toList()),
                    TicketStatus.USED,
                    orderSalesProducts);

            insuranceService.registerInsuranceRelations(reservationAsTickets.stream()
                    .filter(x -> insuranceOrderSalesProducts.containsKey(x.getTicket().getOrderSalesProduct().getId()))
                    .map(x -> InsuranceTicket.builder()
                            .ticket(x.getTicket())
                            .order(insuranceOrderSalesProducts.get(x.getTicket().getOrderSalesProduct().getId()))
                            .build())
                    .collect(Collectors.toList()));

            Set<SalesEvent> salesEvents = orderSalesProducts.stream()
                    .map(OrderSalesProduct::getSalesEvent)
                    .collect(Collectors.toSet());

            treatmentReviewService.registerWritableTreatmentReviews(memberId, reservation, salesEvents);

            settlementService.registerSettlements(reservationAsTickets.stream()
                    .map(ReservationAsTicket::getTicket)
                    .collect(Collectors.toList()), now);

            messageDomainEventContext.addDomainEvent(DomainEventType.CRM_RESERVATION_UPDATE, reservation.getId());

            messagePublisher.publishNotification(
                    NotificationMessageUtils.notificationMessage(
                            alimTalkTemplateFactory.reservationVisitComplete(
                                    member, reservation, reservation.getHospital(), orderSalesProducts)));

            return true;
        });

        Map<Long, MerchantType> paymentMerchantTypeMap = paymentIamports.stream()
                .collect(Collectors.toMap(iamport -> iamport.getOrder().getId(), PaymentIamport::getMerchantType));

        Map<Long, List<CpmSettlementContext>> cpmSettlementContextGroups = new HashMap<>();
        for (ReservationAsTicket reservationAsTicket : reservationAsTickets) {
            long salesEventId = reservationAsTicket.getSalesEvent().getId();
            cpmSettlementContextGroups.computeIfAbsent(salesEventId, x -> new ArrayList<>())
                    .addAll(orderSalesProducts.stream()
                            .filter(x -> Objects.equals(x.getId(),
                                    reservationAsTicket.getTicket().getOrderSalesProduct().getId()))
                            .findFirst()
                            .map(x -> {
                                TicketSettlementPrice settlementPrice = TicketUtils.settlementPrice(
                                        x.getOrder(),
                                        x,
                                        paymentMerchantTypeMap.getOrDefault(x.getOrder().getId(), MerchantType.CARD));

                                return CpmSettlementContext.builder()
                                        .salesEventId(salesEventId)
                                        .useTicketPrice(x.getSalesProductVersion().getSalesPrice())
                                        .couponPrice(settlementPrice.getCouponPrice())
                                        .pointPrice(settlementPrice.getPointPrice())
                                        .build();
                            })
                            .stream()
                            .collect(Collectors.toList()));
        }
        List<CpmSettlementContext> cpmSettlementContexts = new ArrayList<>();
        for (var cpmSettlementContext : cpmSettlementContextGroups.entrySet()) {
            long salesEventId = cpmSettlementContext.getKey();
            cpmSettlementContexts.add(CpmSettlementContext.builder()
                    .salesEventId(salesEventId)
                    .useTicketPrice(cpmSettlementContext.getValue().stream()
                            .map(CpmSettlementContext::getUseTicketPrice)
                            .reduce(0, Integer::sum))
                    .pointPrice(cpmSettlementContext.getValue().stream()
                            .map(CpmSettlementContext::getPointPrice)
                            .reduce(0, Integer::sum))
                    .couponPrice(cpmSettlementContext.getValue().stream()
                            .map(CpmSettlementContext::getCouponPrice)
                            .reduce(0, Integer::sum))
                    .build());
        }

        messagePublisher.publishCpm(CpmMessageUtils.settlement(memberId, cpmSettlementContexts));
        messageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_WRITABLE_CREATE, Template.NOT_EXIST_ID,
                DomainEventContextUtils.treatmentReviewWritableCreateContext(memberId));

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload payReject(long reservationId) {
        long memberId = DiagnosticContext.fetchMemberId();

        LocalDateTime now = LocalDateTime.now();
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    Reservation reservation = reservationService.fetchReservationByReservationIdAndMemberId(
                            reservationId, memberId);
                    if (!reservation.isPayableStatus()) {
                        log.info("member({}) try to reject reservation({}) that is not in payable status.",
                                memberId, reservation);
                        throw new ReservationException(CommonCode.ERROR);
                    }

                    // 방문확정 요청 건이 철회되면서 예약 상태값은 이전 상태로 돌아감 ('오늘 방문예정' 또는 ‘방문 확인중’)
                    if (now.isAfter(reservation.getStartAt())) {
                        reservationService.registerReservationStatusLog(
                                reservation, reservation.getStatus(), ReservationStatus.VISIT_DELAYED);
                        reservationService.modifyReservationStatus(reservation.getId(), memberId,
                                ReservationStatus.VISIT_DELAYED);
                    } else {
                        reservationService.registerReservationStatusLog(
                                reservation, reservation.getStatus(), ReservationStatus.VISIT_EXPECTED_TODAY);
                        reservationService.modifyReservationStatus(reservation.getId(), memberId,
                                ReservationStatus.VISIT_EXPECTED_TODAY);
                    }

                    Hospital hospital = hospitalService.fetchHospitalById(reservation.getHospital().getId());

                    Member member = memberService.findMember(memberId);

                    List<HospitalManagementContact> managementContacts = hospitalService.findHospitalManagementContacts(
                            hospital.getId(),
                            HospitalManagementContactType.RESERVATION);
                    if (CollectionUtils.isEmpty(managementContacts)) {
                        return true;
                    }

                    messageDomainEventContext.addDomainEvent(DomainEventType.CRM_RESERVATION_UPDATE, reservation.getId());

                    messagePublisher.publishNotification(
                            NotificationMessageUtils.notificationMessage(
                                    alimTalkTemplateFactory.reservationPayReject(
                                            member, hospital, reservation, managementContacts)));

                    return true;
                })).build();
    }

    public BoolPayload reservableStatus(ReservableStatusValidateConfigure configure) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = memberService.findMember(memberId);
        if (!reservationService.validateReservableMemberStatus(member)) {
            throw new TreatmentReviewException(ReservationCode.RESERVATION_REQUIRE_INFORMATION);
        }

        if (!reservationService.validateReservableMemberStatus(member, configure)) {
            throw new TreatmentReviewException(ReservationCode.RESERVATION_REQUIRE_INFORMATION_HOME_COUNTRY_CODE);
        }

        return BoolPayload.success();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/review/usecase/TreatmentReviewUseCase.java
================================================
package kr.co.yeoshin.backend.review.usecase;


import static kr.co.yeoshin.backend.common.Constant.TreatmentReview.ATTRIBUTE_SOLUTION_TAG_COUNT;
import static kr.co.yeoshin.backend.common.Constant.TreatmentReview.ATTRIBUTE_TREATMENT_COUNT;

import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Template;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.TroubleSearchableType;
import kr.co.yeoshin.backend.common.model.api.code.TreatmentReviewCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.TreatmentReviewException;
import kr.co.yeoshin.backend.explorer.service.ExplorerService;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.member.service.MemberDomainService;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.reservation.service.ReservationService;
import kr.co.yeoshin.backend.review.controller.model.TreatmentReceiptReviewRequest;
import kr.co.yeoshin.backend.review.controller.model.TreatmentReviewModifyRequest;
import kr.co.yeoshin.backend.review.controller.model.TreatmentReviewRegisterRequest;
import kr.co.yeoshin.backend.review.controller.model.TreatmentSalesEventReceiptReviewRequest;
import kr.co.yeoshin.backend.review.service.TreatmentReviewLikeService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewScrapService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.review.service.model.*;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewStat;
import kr.co.yeoshin.backend.review.usecase.model.TreatmentReviewMePageableContext;
import kr.co.yeoshin.backend.review.usecase.model.TreatmentReviewSearchableContext;
import kr.co.yeoshin.backend.salesevent.model.Ref;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.salesproduct.service.model.SalesProductWithTreatments;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.common.elasticsearch.document.TreatmentReviewDocument;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.queue.utils.DomainEventContextUtils;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerTreatment;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicket;
import kr.co.yeoshin.common.reservation.entity.ReservationAsWritableTreatmentReview;
import kr.co.yeoshin.common.review.entity.*;
import kr.co.yeoshin.common.review.type.ReviewImageType;
import kr.co.yeoshin.common.review.type.TreatmentReviewApproveStatus;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.ListUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class TreatmentReviewUseCase {

    private final ApplicationProps applicationProps;
    private final TreatmentReviewService treatmentReviewService;
    private final TreatmentReviewScrapService treatmentReviewScrapService;
    private final TreatmentReviewLikeService treatmentReviewLikeService;
    private final ReservationService reservationService;
    private final SearchService searchService;
    private final MemberService memberService;
    private final ExplorerService explorerService;
    private final OrderService orderService;
    private final InterestingService interestingService;
    private final HospitalService hospitalService;
    private final SalesEventService salesEventService;
    private final SalesProductService salesProductService;
    private final ReportService reportService;
    private final MemberDomainService memberDomainService;
    private final PayloadFactory payloadFactory;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final TransactionTemplate transactionTemplate;

    public TreatmentReviewSearchableCategoriesPayload troubleSearchableCategories() {
        return TreatmentReviewSearchableCategoriesPayload.builder()
                .categories(Arrays.stream(TroubleSearchableType.values())
                        .sorted(Comparator.comparing(TroubleSearchableType::getId))
                        .map(payloadFactory::textTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public TreatmentReviewSearchableCategoriesPayload treatmentSearchableCategories() {
        final int TREATMENT_COUNT = 10;
        List<RecommendExplorerTreatment> recommendTreatments = ListUtils.subList(explorerService.fetchAllTreatments()
                .stream()
                .sorted(Comparator.comparing(RecommendExplorerTreatment::getSalesCount).reversed())
                .collect(Collectors.toList()), TREATMENT_COUNT);

        return TreatmentReviewSearchableCategoriesPayload.builder()
                .categories(recommendTreatments.stream()
                        .map(RecommendExplorerTreatment::getTreatment)
                        .map(payloadFactory::textIconTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public TreatmentReviewsPageablePayload searchTreatmentReview(
            TreatmentReviewSearchableContext searchableContext) {
        SearchResult<TreatmentReviewDocument> searchResult = searchService.search(searchableContext);
        if (searchResult.isEmpty()) {
            return TreatmentReviewsPageablePayload.empty();
        }

        SearchResult<TreatmentReviewDocument> excludedSearchResult = reportService.excludeReportedMember(
                TreatmentReviewDocument::getMemberId, searchResult);

        String nextToken = excludedSearchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TreatmentReviewSearchableContext.builder()
                        .sort(searchableContext.getSort())
                        .size(searchableContext.getSize())
                        .review(searchableContext.getReview())
                        .query(searchableContext.getQuery())
                        .salesEventId(searchableContext.getSalesEventId())
                        .hospitalId(searchableContext.getHospitalId())
                        .sexes(searchableContext.getSexes())
                        .ages(searchableContext.getAges())
                        .skinTypes(searchableContext.getSkinTypes())
                        .troubles(searchableContext.getTroubles())
                        .treatmentIds(searchableContext.getTreatmentIds())
                        .searchAfter(excludedSearchResult.getSearchAfter())
                        .build());

        List<Long> salesEventIds = excludedSearchResult.getDocuments().stream()
                .map(TreatmentReviewDocument::getSalesEventId)
                .collect(Collectors.toList());

        List<Long> treatmentReviewIds = excludedSearchResult.getDocuments().stream()
                .map(TreatmentReviewDocument::getId)
                .collect(Collectors.toList());

        List<Long> memberIds = excludedSearchResult.getDocuments().stream()
                .map(TreatmentReviewDocument::getMemberId)
                .collect(Collectors.toList());

        List<Long> hospitalIds = excludedSearchResult.getDocuments().stream()
                .map(TreatmentReviewDocument::getHospitalId)
                .collect(Collectors.toList());

        Map<Long, List<Long>> salesProductVersionByTreatmentReviewId = excludedSearchResult.getDocuments()
                .stream()
                .collect(Collectors.toMap(TreatmentReviewDocument::getId, TreatmentReviewDocument::getSalesProductVersionIds));

        List<Long> salesProductVersionIds = salesProductVersionByTreatmentReviewId.values().stream()
                .flatMap(Collection::stream)
                .collect(Collectors.toList());

        Map<Long, SalesProductVersion> salesProductVersions = salesProductService.fetchSalesProductVersionsByBySalesProductVersionIds(
                        salesProductVersionIds)
                .stream().
                collect(Collectors.toMap(SalesProductVersion::getId, Function.identity(), (a, b) -> a));

        List<SalesProduct> salesProducts = salesProductVersions.values()
                .stream()
                .map(SalesProductVersion::getSalesProduct)
                .collect(Collectors.toList());

        Map<Long, List<TreatmentReviewImage>> treatmentReviewImages = treatmentReviewService
                .findTreatmentReviewImagesByTreatmentReviewIds(treatmentReviewIds)
                .stream()
                .filter(x -> x.getType() == ReviewImageType.REVIEW)
                .collect(Collectors.groupingBy(x -> x.getTreatmentReview().getId()));

        List<TreatmentReviewTranslation> treatmentReviewTranslations = treatmentReviewService
                .findTreatmentReviewTranslationsByTreatmentReviewIds(treatmentReviewIds);

        Set<Long> reportIds = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                (memberId) -> reportService.findReportContents(memberId, ContentType.TREATMENT_REVIEW, treatmentReviewIds));

        List<Member> members = memberService.findAllByMemberIds(memberIds);

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(hospitalIds);

        List<TreatmentReviewScrap> treatmentReviewScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> treatmentReviewScrapService.findScrapsByMemberIdAndTreatmentReviewIds(
                        memberId, treatmentReviewIds));

        List<TreatmentReviewLike> treatmentReviewLikes = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> treatmentReviewLikeService.findLikesByMemberIdAndTreatmentReviewIds(memberId, treatmentReviewIds));

        List<TreatmentReviewStat> treatmentReviewStats = treatmentReviewService
                .findTreatmentReviewStats(treatmentReviewIds,
                        TreatmentReviewStatAdjuster.of(treatmentReviewScraps, treatmentReviewLikes));

        List<TreatmentReviewHospitalComment> treatmentReviewHospitalComments = treatmentReviewService
                .findTreatmentReviewHospitalCommentsByTreatmentReviewIds(treatmentReviewIds);

        List<SalesProductWithTreatments> salesProductWithTreatments = salesProductService.fetchSalesProductWithTreatmentsBySalesProductIds(
                salesProducts.stream()
                        .map(SalesProduct::getId)
                        .collect(Collectors.toList()));

        List<SalesEvent> salesEvents = salesEventService.fetchSalesEventsBySalesEventIds(salesEventIds);

        SalesProductAttributeFacade salesProductAttributeFacade = salesProductService.getAttributeFacade();

        TreatmentReviewAttributeConfig treatmentReviewAttributeConfig = TreatmentReviewAttributeConfig.builder()
                .treatmentCount(ATTRIBUTE_TREATMENT_COUNT)
                .solutionTagCount(ATTRIBUTE_SOLUTION_TAG_COUNT)
                .build();

        List<TreatmentReviewAttribute> treatmentReviewAttributes = new ArrayList<>();
        for (var entry : salesProductVersionByTreatmentReviewId.entrySet()) {
            long treatmentReviewId = entry.getKey();
            List<Long> salesProductIds = entry.getValue().stream()
                    .map(salesProductVersions::get)
                    .filter(Objects::nonNull)
                    .map(x -> x.getSalesProduct().getId())
                    .filter(Objects::nonNull)
                    .collect(Collectors.toList());

            treatmentReviewAttributes.add(treatmentReviewService.findTreatmentReviewAttributes(
                    treatmentReviewId,
                    treatmentReviewAttributeConfig,
                    salesProductIds,
                    salesProductAttributeFacade,
                    salesProductWithTreatments));
        }

        return TreatmentReviewsPageablePayload.builder()
                .treatmentReviews(excludedSearchResult.getDocuments().stream()
                        .map(x -> payloadFactory.treatmentReviewTemplate(
                                x,
                                treatmentReviewImages.getOrDefault(x.getId(), Collections.emptyList()),
                                treatmentReviewTranslations.stream()
                                        .filter(t -> t.getTreatmentReviewId() == x.getId())
                                        .collect(Collectors.toList()),
                                salesProductVersions,
                                reportIds
                        ))
                        .collect(Collectors.toList()))
                .treatmentReviewScraps(payloadFactory.treatmentReviewScrapTemplates(treatmentReviewScraps))
                .treatmentReviewLikes(payloadFactory.treatmentReviewLikeTemplates(treatmentReviewLikes))
                .treatmentReviewStats(payloadFactory.treatmentReviewStatTemplates(treatmentReviewStats))
                .treatmentReviewHospitalComments(
                        payloadFactory.treatmentReviewHospitalCommentTemplates(treatmentReviewHospitalComments))
                .treatmentReviewAttributes(payloadFactory.treatmentReviewAttributeTemplates(treatmentReviewAttributes))
                .salesEvents(payloadFactory.salesEventTemplates(salesEvents, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .memberProfiles(payloadFactory.memberProfileTemplates(members))
                .pageable(payloadFactory.pageableTemplate(
                        excludedSearchResult.getTotalCount(), excludedSearchResult.getSearchSize(), nextToken))
                .build();
    }

    public TreatmentReviewPayload detailTreatmentReview(long reviewId, boolean translate) {
        long memberId = DiagnosticContext.fetchMemberId();

        TreatmentReviewContainer treatmentReviewContainer = treatmentReviewService
                .fetchTreatmentReviewContainerByTreatmentReviewId(
                        reviewId, TreatmentReviewContainerConfigure.builder()
                                .includeTranslate(translate)
                                .build())
                .orElseThrow(() -> new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_NOT_EXIST));

        TreatmentReview treatmentReview = treatmentReviewContainer.getTreatmentReview();

        Set<Long> reportIds = reportService.findReportContents(
                memberId, ContentType.TREATMENT_REVIEW, Collections.singletonList(reviewId));

        Hospital hospital = hospitalService.fetchHospitalById(treatmentReview.getHospital().getId());

        Optional<TreatmentReviewHospitalComment> hospitalComment = treatmentReviewService.findTreatmentReviewHospitalCommentByReviewId(
                treatmentReview.getId());

        List<SalesProduct> salesProducts = treatmentReviewContainer.getSalesProductVersions()
                .stream()
                .map(SalesProductVersion::getSalesProduct)
                .collect(Collectors.toList());

        List<SalesProductWithTreatments> salesProductWithTreatments = salesProductService.fetchSalesProductWithTreatmentsBySalesProductIds(
                salesProducts.stream()
                        .map(SalesProduct::getId)
                        .collect(Collectors.toList()));

        SalesProductAttributeFacade salesProductAttributeFacade = salesProductService.getAttributeFacade();

        TreatmentReviewAttributeConfig treatmentReviewAttributeConfig = TreatmentReviewAttributeConfig.builder()
                .treatmentCount(ATTRIBUTE_TREATMENT_COUNT)
                .solutionTagCount(ATTRIBUTE_SOLUTION_TAG_COUNT)
                .build();

        List<TreatmentReviewAttribute> treatmentReviewAttributes = Collections.singletonList(
                treatmentReviewService.findTreatmentReviewAttributes(
                        treatmentReview.getId(),
                        treatmentReviewAttributeConfig,
                        salesProducts.stream().map(SalesProduct::getId).collect(Collectors.toList()),
                        salesProductAttributeFacade,
                        salesProductWithTreatments));

        Optional<TreatmentReviewConfirmContainer> treatmentReviewConfirmContainer =
                treatmentReview.getMember().getId() == memberId
                        ? treatmentReviewService.fetchTreatmentReviewConfirmContainersByTreatmentReview(reviewId)
                        : Optional.empty();

        boolean existLike = treatmentReviewLikeService.existLike(memberId, reviewId);
        boolean existScrap = treatmentReviewScrapService.existScrap(memberId, reviewId);

        Member member = memberService.findMember(treatmentReview.getMember().getId());

        boolean ownTreatmentReview = treatmentReview.getMember().getId() == memberId;

        return TreatmentReviewPayload.builder()
                .removable(ownTreatmentReview)
                .modifiable(ownTreatmentReview && treatmentReviewService.modifiableTreatmentReview(
                        treatmentReview,
                        treatmentReviewConfirmContainer.map(TreatmentReviewConfirmContainer::getTreatmentReview)))
                .treatmentReview(payloadFactory.treatmentReviewTemplate(
                        treatmentReviewContainer.getTreatmentReview(),
                        treatmentReviewContainer.getSalesProductIds(),
                        treatmentReviewContainer.getTreatmentReviewImages(),
                        treatmentReviewContainer.getTreatmentReviewTranslations(),
                        reportIds))
                .treatmentReviewStat(payloadFactory.treatmentReviewStatTemplate(
                        treatmentReviewContainer.getTreatmentReviewStat()))
                .treatmentReviewAttributes(
                        payloadFactory.treatmentReviewAttributeTemplates(treatmentReviewAttributes))
                .treatmentReviewLike(existLike ? payloadFactory.treatmentReviewLikeTemplate(reviewId) : null)
                .treatmentReviewScrap(existScrap ? payloadFactory.treatmentReviewScrapTemplate(reviewId) : null)
                .treatmentReviewConfirm(
                        treatmentReviewConfirmContainer.map(
                                        x -> payloadFactory.treatmentReviewConfirmTemplate(x.getTreatmentReview(),
                                                x.getTreatmentReviewImages(),
                                                x.getTreatmentReviewConcealReasons()))
                                .orElse(null))
                .treatmentReviewHospitalComments(
                        payloadFactory.treatmentReviewHospitalCommentTemplates(hospitalComment
                                .map(Collections::singletonList)
                                .orElse(Collections.emptyList())))
                .hospital(payloadFactory.hospitalTemplate(hospital))
                .salesEvent(treatmentReviewContainer.getSalesEvent()
                        .map(x -> payloadFactory.salesEventTemplate(x, Ref.empty()))
                        .orElse(null))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        treatmentReviewContainer.getSalesProductVersions()))
                .memberProfile(payloadFactory.memberProfileTemplate(member))
                .build();
    }

    public TreatmentReviewSourcePayload treatmentReviewSource(long reviewId) {
        TreatmentReview treatmentReview = treatmentReviewService.findTreatmentReviewByTreatmentReviewId(reviewId)
                .filter(x -> x.getViewYn().toBoolean())
                .orElseThrow(() -> new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_NOT_EXIST));

        return TreatmentReviewSourcePayload.builder()
                .tip(payloadFactory.textTemplate(treatmentReview.getId(), treatmentReview.getTip()))
                .contents(payloadFactory.textTemplate(treatmentReview.getId(), treatmentReview.getContents()))
                .build();
    }

    public TreatmentReviewsWritablePayload writeableTreatmentReview() {
        long memberId = DiagnosticContext.fetchMemberId();

        LocalDateTime now = LocalDateTime.now();

        List<ReservationAsWritableTreatmentReview> writableTreatmentReviews = treatmentReviewService
                .fetchWriteableTreatmentReviews(memberId)
                .stream()
                .filter(x -> x.getExpireAt().isAfter(now))
                .sorted(Comparator.comparing(ReservationAsWritableTreatmentReview::getUseAt).reversed())
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(writableTreatmentReviews)) {
            return TreatmentReviewsWritablePayload.empty();
        }

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(writableTreatmentReviews.stream()
                .map(x -> x.getSalesEvent().getHospital().getId())
                .collect(Collectors.toList()));

        List<ReservationAsTicket> reservationAsTickets = reservationService.fetchAllReservationAsTicketByReservationIds(
                writableTreatmentReviews.stream()
                        .map(x -> x.getReservation().getId())
                        .collect(Collectors.toList()));

        Map<Reservation, List<Ticket>> ticketByReservation = reservationAsTickets.stream()
                .collect(Collectors.groupingBy(ReservationAsTicket::getReservation,
                        Collectors.mapping(ReservationAsTicket::getTicket, Collectors.toList())));

        List<Ticket> tickets = reservationAsTickets.stream()
                .map(ReservationAsTicket::getTicket)
                .collect(Collectors.toList());

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(tickets.stream()
                .map(x -> x.getOrderSalesProduct().getId())
                .collect(Collectors.toList()));

        // key : sales product version id
        List<SalesProductVersion> salesProductVersions = salesProductService
                .findSalesProductVersionsBySalesProductVersionIds(orderSalesProducts.stream()
                        .map(x -> x.getSalesProductVersion().getId())
                        .collect(Collectors.toList()));

        List<SalesEvent> salesEvents = writableTreatmentReviews.stream()
                .map(ReservationAsWritableTreatmentReview::getSalesEvent)
                .collect(Collectors.toList());

        List<Long> salesEventIds = salesEvents.stream()
                .map(SalesEvent::getId)
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = treatmentReviewService.adjustSalesEventStat(salesEventIds,
                salesEventService.findStatsBySalesEventIds(salesEventIds));

        return TreatmentReviewsWritablePayload.builder()
                .treatmentReviewsWritables(
                        payloadFactory.treatmentReviewsWritableTemplates(writableTreatmentReviews, salesEventStats))
                .reservations(
                        ticketByReservation.entrySet().stream()
                                .map(x -> payloadFactory.reservationShortTemplate(x.getKey(), x.getValue()))
                                .collect(Collectors.toList()))
                .tickets(payloadFactory.ticketTemplates(tickets, orderSalesProducts))
                .salesEvents(payloadFactory.salesEventTemplates(salesEvents, Refer.empty()))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(salesProductVersions))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .build();
    }

    public TreatmentReviewsWritableCountPayload writeableTreatmentReviewCount() {
        long memberId = DiagnosticContext.fetchMemberId();

        long count = treatmentReviewService.findWriteableTreatmentReviewCount(memberId);

        return TreatmentReviewsWritableCountPayload.builder()
                .count(count)
                .build();
    }

    public TreatmentReviewsByMePageablePayload listMyTreatmentReviews(
            TreatmentReviewMePageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = treatmentReviewService.pageable(pageableContext);
        Page<TreatmentReview> treatmentReviewPage = treatmentReviewService.findAllTreatmentReviewByMemberId(
                memberId, pageable);
        if (treatmentReviewPage.isEmpty()) {
            return TreatmentReviewsByMePageablePayload.empty();
        }

        String nextToken = treatmentReviewPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TreatmentReviewMePageableContext.builder()
                        .page(treatmentReviewPage.getPageable().getPageNumber() + 1)
                        .size(pageableContext.getSize())
                        .build());

        List<TreatmentReview> treatmentReviews = treatmentReviewPage.getContent();

        List<Long> treatmentReviewIds = treatmentReviews.stream()
                .map(TreatmentReview::getId)
                .collect(Collectors.toList());

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(treatmentReviews.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toList()));

        List<TreatmentReviewContainer> treatmentReviewContainers = treatmentReviewService
                .fetchTreatmentReviewsWithProductByTreatmentReviewIds(
                        treatmentReviewIds, TreatmentReviewContainerConfigure.builder()
                                .includeTranslate(false)
                                .build())
                .stream()
                .sorted(Comparator.comparingInt(x -> treatmentReviewIds.indexOf(x.getTreatmentReview().getId())))
                .collect(Collectors.toList());

        List<TreatmentReviewConfirmContainer> treatmentReviewConfirmContainers =
                treatmentReviewService.fetchTreatmentReviewConfirmContainersByTreatmentReviews(treatmentReviewIds)
                        .stream()
                        .filter(x -> x.getTreatmentReview().getApproveStatus() != TreatmentReviewApproveStatus.APPROVED)
                        .collect(Collectors.toList());

        List<Long> salesEventIds = treatmentReviewContainers
                .stream().map(TreatmentReviewContainer::getSalesEvent)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .map(SalesEvent::getId)
                .collect(Collectors.toList());

        List<SalesEvent> salesEvents = salesEventService.findSalesEventsBySalesEventIds(salesEventIds);

        Map<Long, SalesProductVersion> salesProductVersions = treatmentReviewContainers.stream()
                .flatMap(x -> x.getSalesProductVersions().stream())
                .collect(Collectors.toMap(SalesProductVersion::getId, Function.identity(), (a, b) -> a));

        List<SalesProduct> salesProducts = salesProductVersions.values()
                .stream()
                .map(SalesProductVersion::getSalesProduct)
                .collect(Collectors.toList());

        return TreatmentReviewsByMePageablePayload.builder()
                .treatmentReviews(
                        treatmentReviewContainers.stream()
                                .map(x -> payloadFactory.treatmentReviewTemplate(
                                        x.getTreatmentReview(),
                                        x.getSalesProductIds(),
                                        x.getTreatmentReviewImages(),
                                        x.getTreatmentReviewTranslations(),
                                        Collections.emptySet()))
                                .collect(Collectors.toList()))
                .treatmentReviewStats(payloadFactory.treatmentReviewStatTemplates(treatmentReviewContainers.stream()
                        .map(TreatmentReviewContainer::getTreatmentReviewStat)
                        .collect(Collectors.toList())))
                .treatmentReviewConfirms(treatmentReviewConfirmContainers.stream()
                        .map(x -> payloadFactory.treatmentReviewConfirmTemplate(
                                x.getTreatmentReview(),
                                x.getTreatmentReviewImages(),
                                x.getTreatmentReviewConcealReasons()))
                        .collect(Collectors.toList()))
                .salesEvents(payloadFactory.salesEventTemplates(salesEvents, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .pageable(payloadFactory.pageableTemplate(treatmentReviewPage, nextToken))
                .build();
    }

    public BoolPayload registerTreatmentReview(TreatmentReviewRegisterRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();
        Member member = memberService.findMember(memberId);
        if (!treatmentReviewService.validateTreatmentReviewRegistrableMember(member)) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_REQUIRE_INFORMATION);
        }
        if (!treatmentReviewService.validateTreatmentReviewRegistrable(memberId)) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_ABUSE_CREATE, memberId);
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_WRITABLE_QUOTA_EXCEED);
        }

        if (request.hasSlang()) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_CONTENTS_SLANG_EXIST);
        }

        TreatmentReview treatmentReview = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    TreatmentReview result = treatmentReviewService.registerTreatmentReview(
                            memberId,
                            request.getTreatmentReviewWritableId(),
                            interestingService.findInteresting(memberId),
                            request);

                    memberDomainService.registerLatestStatus(memberId, result);

                    return result;
                });

        if (treatmentReview.getViewYn().toBoolean()) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_CREATE, treatmentReview.getId());
            queueMessageDomainEventContext.addDomainEvent(
                    DomainEventType.TREATMENT_REVIEW_WRITABLE_DELETE,
                    Template.NOT_EXIST_ID,
                    DomainEventContextUtils.treatmentReviewWritableDeleteContext(memberId)
            );
            queueMessageDomainEventContext.addDomainEvent(
                    DomainEventType.TREATMENT_REVIEW_TRANSLATION_CREATE, treatmentReview.getId());
        }

        if (applicationProps.getEmbeddingVector().isTreatmentReviewImage() && treatmentReview.getCreateType().isPhotoReview()) {
            queueMessageDomainEventContext.addDomainEvent(
                    DomainEventType.TREATMENT_REVIEW_IMAGE_VECTOR_CREATE, treatmentReview.getId()
            );
        }

        messagePublisher.publishCpm(CpmMessageUtils.treatmentReviewCreate(treatmentReview.getSalesEvent().getId()));

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload registerTreatmentReceiptReview(TreatmentReceiptReviewRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = memberService.findMember(memberId);
        if (!treatmentReviewService.validateTreatmentReviewRegistrableMember(member)) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_REQUIRE_INFORMATION);
        }

        if (!treatmentReviewService.validateTreatmentReviewRegistrable(memberId)) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_ABUSE_CREATE, memberId);
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_WRITABLE_QUOTA_EXCEED);
        }

        if (request.hasSlang()) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_CONTENTS_SLANG_EXIST);
        }

        hospitalService.findHospitalByHospitalId(request.getHospitalId());

        transactionTemplate.executeMainWritableTransaction(
                () -> {
                    TreatmentReview result = treatmentReviewService.registerTreatmentReceiptReview(
                            member,
                            interestingService.findInteresting(memberId),
                            request);

                    memberDomainService.registerLatestStatus(memberId, result);

                    return result;
                });

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload registerTreatmentSalesEventReceiptReview(TreatmentSalesEventReceiptReviewRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();
        Member member = memberService.findMember(memberId);
        if (!treatmentReviewService.validateTreatmentReviewRegistrableMember(member)) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_REQUIRE_INFORMATION);
        }

        if (!treatmentReviewService.validateTreatmentReviewRegistrable(memberId)) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_ABUSE_CREATE, memberId);
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_WRITABLE_QUOTA_EXCEED);
        }

        if (request.hasSlang()) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_CONTENTS_SLANG_EXIST);
        }

        hospitalService.findHospitalByHospitalId(request.getHospitalId());
        salesEventService.findSalesEventById(request.getSalesEventId());

        transactionTemplate.executeMainWritableTransaction(
                () -> treatmentReviewService.registerTreatmentSalesEventReceiptReview(
                        member,
                        interestingService.findInteresting(memberId),
                        request));

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload modifyTreatmentReview(long treatmentReviewId, TreatmentReviewModifyRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (request.hasSlang()) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_CONTENTS_SLANG_EXIST);
        }

        TreatmentReview treatmentReview = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    TreatmentReview result = treatmentReviewService.modifyTreatmentReview(memberId, treatmentReviewId, request);
                    treatmentReviewService.deleteTreatmentReviewTranslation(treatmentReviewId);

                    memberDomainService.registerLatestStatus(memberId, result);

                    return result;
                });

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_UPDATE, treatmentReviewId);
        queueMessageDomainEventContext.addDomainEvent(
                DomainEventType.TREATMENT_REVIEW_TRANSLATION_CREATE, treatmentReviewId);

        if (applicationProps.getEmbeddingVector().isTreatmentReviewImage() && treatmentReview.getCreateType().isPhotoReview()) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_IMAGE_VECTOR_UPDATE,
                    treatmentReviewId);
        }

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload removeTreatmentReview(long treatmentReviewId) {
        long memberId = DiagnosticContext.fetchMemberId();

        TreatmentReview treatmentReview = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    TreatmentReview review = treatmentReviewService.removeTreatmentReview(memberId, treatmentReviewId);
                    treatmentReviewService.deleteTreatmentReviewTranslation(treatmentReviewId);
                    messagePublisher.publishCpm(CpmMessageUtils.treatmentReviewDelete(review.getSalesEvent().getId()));
                    return review;
                });

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_DELETE, treatmentReviewId);
        queueMessageDomainEventContext.addDomainEvent(
                DomainEventType.TREATMENT_REVIEW_WRITABLE_CREATE,
                Template.NOT_EXIST_ID,
                DomainEventContextUtils.treatmentReviewWritableCreateContext(memberId));

        if (applicationProps.getEmbeddingVector().isTreatmentReviewImage() && treatmentReview.getCreateType().isPhotoReview()) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_IMAGE_VECTOR_DELETE,
                    treatmentReviewId);
        }

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload writableStatus(TreatmentReviewWritableStatusValidateConfigure configure) {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = memberService.findMember(memberId);
        if (!treatmentReviewService.validateTreatmentReviewRegistrableMember(member, configure)) {
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_REQUIRE_INFORMATION);
        }

        if (!treatmentReviewService.validateTreatmentReviewRegistrableMember(member, configure)) {
            // TODO exception message
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_REQUIRE_INFORMATION_HOME_COUNTRY_CODE);
        }

        if (!treatmentReviewService.validateTreatmentReviewRegistrable(memberId)) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TREATMENT_REVIEW_ABUSE_CREATE, memberId);
            throw new TreatmentReviewException(TreatmentReviewCode.TREATMENT_REVIEW_WRITABLE_QUOTA_EXCEED);
        }

        return BoolPayload.success();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/salesevent/usecase/SalesEventUseCase.java
================================================
package kr.co.yeoshin.backend.salesevent.usecase;

import static kr.co.yeoshin.common.hospital.type.HospitalConfigType.*;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.Constant.Context;
import kr.co.yeoshin.backend.common.Constant.Request.Query;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.SalesEventCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.config.scope.QueueMessageRestrictionContext;
import kr.co.yeoshin.backend.content.service.ContentService;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.MemberCouponUsable;
import kr.co.yeoshin.backend.cpm.service.CpmService;
import kr.co.yeoshin.backend.exception.SalesEventException;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.interesting.service.InterestingService;
import kr.co.yeoshin.backend.interesting.service.model.InterestingContainer;
import kr.co.yeoshin.backend.log.service.InstantLogService;
import kr.co.yeoshin.backend.member.service.MemberDomainService;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.CardTemplate;
import kr.co.yeoshin.backend.payload.template.type.SalesProductDiscountType;
import kr.co.yeoshin.backend.point.service.AdPointService;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.AdPointMinusContext;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.CpmEventType;
import kr.co.yeoshin.backend.queue.model.cpm.payment.CpmSalesEventConsultationContext;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.sender.BigQuerySenderTemplate;
import kr.co.yeoshin.backend.queue.sender.model.SalesEventRefLog;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewContainer;
import kr.co.yeoshin.backend.salesevent.component.SalesEventConsultationLogHelper;
import kr.co.yeoshin.backend.salesevent.controller.model.ConsultationRequest;
import kr.co.yeoshin.backend.salesevent.controller.model.QuestionRequest;
import kr.co.yeoshin.backend.salesevent.model.Ref;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.*;
import kr.co.yeoshin.backend.salesevent.service.model.*;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesevent.usecase.model.SalesEventConsultationPageContext;
import kr.co.yeoshin.backend.salesevent.usecase.model.SalesEventSearchableContext;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.backend.utils.MonitorUtils;
import kr.co.yeoshin.backend.utils.SalesEventConsultationUtils;
import kr.co.yeoshin.backend.utils.SalesEventUtils;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.CouponIssueStatus;
import kr.co.yeoshin.common.cpm.entity.CpmSearchExperiment;
import kr.co.yeoshin.common.cpm.entity.CpmSearchPrice;
import kr.co.yeoshin.common.elasticsearch.document.SalesEventDocument;
import kr.co.yeoshin.common.hospital.entity.*;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoType;
import kr.co.yeoshin.common.hospital.type.HospitalAdditionalInfoValue;
import kr.co.yeoshin.common.hospital.type.HospitalManagementContactType;
import kr.co.yeoshin.common.hospital.type.PartnershipStatus;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.point.entity.AdPoint;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.*;
import kr.co.yeoshin.common.product.entity.*;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.product.type.TroubleBodyPart;
import kr.co.yeoshin.common.product.type.TroubleSubType;
import kr.co.yeoshin.common.recommend.type.RecommendScope;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.review.entity.ContentConcealReason;
import kr.co.yeoshin.common.review.entity.SalesEventQuestion;
import kr.co.yeoshin.common.review.entity.SalesEventQuestionReply;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.tv.entity.Tv;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.Language;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class SalesEventUseCase {

    private final ApplicationProps applicationProps;
    private final SalesEventService salesEventService;
    private final SalesEventUsageService salesEventUsageService;
    private final SalesEventScrapService salesEventScrapService;
    private final TreatmentReviewService treatmentReviewService;
    private final HospitalService hospitalService;
    private final MemberService memberService;
    private final CouponService couponService;
    private final OrderService orderService;
    private final InterestingService interestingService;
    private final SearchService searchService;
    private final ReportService reportService;
    private final SalesEventQuestionService salesEventQuestionService;
    private final TvService tvService;
    private final SalesProductService salesProductService;
    private final QuestService questService;
    private final CpmService cpmService;
    private final MemberPointService memberPointService;
    private final RecommendService recommendService;
    private final ContentService contentService;
    private final SalesEventConsultationService salesEventConsultationService;
    private final MemberDomainService memberDomainService;
    private final InstantLogService instantLogService;
    private final AdPointService adPointService;
    private final TransactionTemplate transactionTemplate;
    private final SettingTemplate settingTemplate;
    private final PayloadFactory payloadFactory;
    private final BigQuerySenderTemplate bigQuerySenderTemplate;
    private final QueueMessageRestrictionContext restrictionContext;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;

    public SalesEventPayload salesEvent(String code) {
        SalesEvent salesEvent = salesEventService.findSalesEventByCode(code);

        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainer(
                salesEvent.getId(), EnumSet.allOf(YN.class), Collections.singleton(YN.N));

        return SalesEventPayload.builder()
                .salesEvent(payloadFactory.salesEventTemplate(salesEventContainer, false, Ref.empty()))
                .salesProducts(salesEventContainer.fetchSalesProducts().stream()
                        .map(payloadFactory::salesProductTemplate)
                        .collect(Collectors.toList()))
                .hospital(payloadFactory.hospitalTemplate(salesEventContainer.getHospital()))
                .build();
    }

    public SalesEventPayload salesEvent(long salesEventId) {
        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainer(
                salesEventId, EnumSet.allOf(YN.class), Collections.singleton(YN.N));

        return SalesEventPayload.builder()
                .salesEvent(payloadFactory.salesEventTemplate(salesEventContainer, false, Ref.empty()))
                .salesProducts(salesEventContainer.fetchSalesProducts().stream()
                        .map(payloadFactory::salesProductTemplate)
                        .collect(Collectors.toList()))
                .hospital(payloadFactory.hospitalTemplate(salesEventContainer.getHospital()))
                .build();
    }

    public SalesEventViewPayload salesEventView(long salesEventId, Optional<String> campaign, Optional<Ref> ref) {
        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainer(
                salesEventId, EnumSet.allOf(YN.class), Collections.singleton(YN.N));

        boolean activateVirtualMileageDiscount = applicationProps.getOrder().isActivateVirtualMileageDiscount();

        List<MemberCouponUsable> memberCouponUsables = DiagnosticContext.ifVirtualMemberOrElse(
                () -> {
                    if (activateVirtualMileageDiscount) {
                        return couponService.fetchAllDiscountUsableMemberCoupons(
                                kr.co.yeoshin.common.coupon.type.PublishType.AUTO,
                                CouponIssueStatus.ISSUE,
                                CouponIssueConditionType.NEW_MEMBER);
                    } else {
                        return Collections.emptyList();
                    }
                },
                couponService::fetchAllDiscountUsableMemberCoupons);

        List<MemberCoupon> memberCoupons = memberCouponUsables.stream()
                .map(MemberCouponUsable::getMemberCoupon)
                .collect(Collectors.toList());

        int totalMemberPoint = DiagnosticContext.ifVirtualMemberOrElse(
                () -> activateVirtualMileageDiscount ? Constant.Member.VIRTUAL_DEFAULT_MILEAGE_POINT : 0,
                memberPointService::findTotalPointByMemberId);

        List<CouponIssueCondition> couponIssueConditions = memberCouponUsables.stream()
                .flatMap(x -> x.getCouponIssueConditions().stream())
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        SalesEventAccessible accessible = salesEventService.salesEventAccessible(
                DiagnosticContext.fetchMemberId(() -> -1L), salesEventContainer);

        List<SalesEventImage> salesEventImages = salesEventService.findImagesBySalesEventId(salesEventContainer.getSalesEvent());
        SalesEventTreatmentLibraryFacade treatmentLibrary = salesEventService.findTreatmentLibraryBySalesEventId(salesEventId);

        List<HospitalImage> hospitalImages = hospitalService.findHospitalImagesByHospitalId(
                salesEventContainer.getHospital().getId());

        SalesEventScrap salesEventScrap = DiagnosticContext.ifVirtualMemberOrElse(
                () -> null,
                (memberId) -> salesEventScrapService.findScrapBySalesEventId(memberId, salesEventId).orElse(null));

        SalesEventStat salesEventStat = salesEventService.findStatBySalesEventId(salesEventId);

        Optional<SalesEventBadgeContainer> salesEventBadge = salesEventService.findSalesEventBadgeContainer(
                salesEventContainer.getSalesEvent(), recommendFacade);

        List<SalesEventUsageContainer> usages = salesEventUsageService.findSalesEventUsageContainers(
                Collections.singleton(salesEventId));

        List<Tv> tvs = tvService.fetchTvsBySalesEventId(salesEventId)
                .stream()
                .filter(x -> x.getViewYn().toBoolean())
                .collect(Collectors.toList());

        long hospitalId = salesEventContainer.getHospital().getId();
        Optional<HospitalBadgeContainer> badgeContainer = hospitalService.findHospitalBadgeContainer(
                hospitalId, hospitalService.getBadges(), recommendFacade);

        List<HospitalDoctor> doctors = hospitalService.findHospitalDoctorsByHospitalId(hospitalId);

        List<HospitalConfig> hospitalConfigs =
                hospitalService.findHospitalConfigsByHospitalIdAndConfigTypes(
                        hospitalId, Set.of(PRICE_INCLUSION_ANESTHESIA, PRICE_INCLUSION_POST_CARE,
                                PRICE_INCLUSION_CONSULTATION, PRICE_INCLUSION_EXAMINATION));

        List<HospitalAdditionalInfo> hospitalAdditions = hospitalService.findHospitalAdditionsByHospitalId(hospitalId);

        DiagnosticContext.ifVirtualMemberOrElse(
                () -> null,
                (memberId) -> salesEventService.registerRecentlyViewedSalesEvent(memberId, salesEventId));

        messagePublisher.publishCpm(CpmMessageUtils.salesEventClick(salesEventId, campaign));

        ref.ifPresent(r -> bigQuerySenderTemplate.sendSalesEventRefLogs(
                Collections.singletonList(
                        SalesEventRefLog.builder()
                                .dateTime(LocalDateTime.now())
                                .memberId(DiagnosticContext.fetchMemberId(() -> Constant.Member.MEMBER_NOT_EXIST_ID))
                                .ip(DiagnosticContext.fetchClientIp())
                                .salesEventId(salesEventId)
                                .eventType(r.getCpmType())
                                .devicePlatform(DiagnosticContext.header().devicePlatform())
                                .userAgent(DiagnosticContext.header().userAgent())
                                .displayIndex(r.getDisplayIndex())
                                .language(DiagnosticContext.fetchLocale().getLanguage())
                                .refPublishAt(Instant.ofEpochMilli(r.getTimestamp())
                                        .atZone(ZoneId.systemDefault()).toLocalDateTime())
                                .refTakeAt(LocalDateTime.now())
                                .build())));

        Optional<HospitalPartnership> hospitalPartnership =
                PartnershipStatus.WAIT == salesEventContainer.getHospital().getPartnershipStatus() ? Optional.empty()
                        : hospitalService.findHospitalPartnershipByHospitalId(hospitalId);

        transactionTemplate.executeMainWritableTransaction(
                () -> salesEventService.registerSalesEventAccessible(
                        DiagnosticContext.fetchMemberId(() -> -1L),
                        salesEventContainer,
                        accessible));

        Map<String, Object> contexts = new HashMap<>();
        contexts.put(Context.DISCOUNT_PRICE_LABEL, SalesEventUtils.discountPriceLabel());

        return SalesEventViewPayload.builder()
                .end(accessible.isEnded())
                .orderable(accessible.isOrderable())
                .consultable(accessible.isConsultable())
                .treatments(payloadFactory.treatmentsTemplate(attributeFacade.findTreatmentsByTreatmentIds(
                        Collections.singletonList(salesEventContainer.getSalesEvent().getTreatment().getId()))))
                .solutionTags(payloadFactory.textIconTemplatesBySolutionTags(
                        attributeFacade.findSolutionTagsBySolutionTagIds(
                                salesEventContainer.getSalesEvent().getRepresentativeSolutionTagIds())))
                .salesEvent(payloadFactory.salesEventTemplate(salesEventContainer, false, Ref.empty()))
                .salesEventImages(salesEventImages.stream()
                        .map(payloadFactory::imageTemplate)
                        .collect(Collectors.toList()))
                .hospitalImages(hospitalImages.stream()
                        .map(payloadFactory::imageTemplate)
                        .collect(Collectors.toList()))
                .salesEventStat(payloadFactory.salesEventStatTemplate(salesEventStat))
                .salesEventScrap(payloadFactory.salesEventScrapTemplate(salesEventScrap))
                .salesEventBadge(payloadFactory.salesEventBadgeTemplate(salesEventBadge.orElse(null)))
                .salesProducts(salesEventContainer.fetchSalesProducts().stream()
                        .map(x -> salesEventContainer.isOrderable() ?
                                orderService.getMaxDiscountPrice(x, memberCoupons, couponIssueConditions, totalMemberPoint)
                                        .filter(o -> o.getDiscountPrice() > 0)
                                        .map(o -> payloadFactory.salesProductTemplate(
                                                x,
                                                SalesProductDiscountType.ALL,
                                                o))
                                        .orElseGet(() -> payloadFactory.salesProductTemplate(x))
                                : payloadFactory.salesProductTemplate(x))
                        .collect(Collectors.toList()))
                .salesEventUsages(usages.stream()
                        .sorted(Comparator.comparingInt(x -> x.getSalesEventUsage().getPriority()))
                        .map(x -> payloadFactory.salesEventUsageTemplate(
                                x.getSalesEventUsage(),
                                x.getSalesEventUsageImages().stream()
                                        .sorted(Comparator.comparingInt(SalesEventUsageImage::getPriority))
                                        .collect(Collectors.toList()),
                                x.getTags()))
                        .collect(Collectors.toList()))
                .salesEventLibrary(payloadFactory.salesEventLibraryTemplate(
                        salesEventContainer.getSalesEvent(), treatmentLibrary))
                .hospital(payloadFactory.hospitalTemplate(salesEventContainer.getHospital()))
                .hospitalDoctors(payloadFactory.hospitalDoctorTemplates(doctors))
                .hospitalOperationTime(payloadFactory.hospitalOperationTimeTemplate(salesEventContainer.getHospital()))
                .hospitalBadge(payloadFactory.hospitalBadgeTemplate(hospitalId, badgeContainer.orElse(null)))
                .hospitalConfigs(payloadFactory.hospitalConfigTemplates(hospitalConfigs))
                .hospitalAdditionProperties(payloadFactory.hospitalAdditionProperties(hospitalAdditions))
                .tvs(payloadFactory.tvTemplates(tvs))
                .hospitalPartnership(hospitalPartnership.map(payloadFactory::hospitalPartnershipTemplate).orElse(null))
                .coupons(memberCouponUsables.stream()
                        .map(x -> payloadFactory.couponTemplate(
                                x.getMemberCoupon().getCoupon(),
                                x.isDownloadable() ? Optional.empty() : Optional.of(x.getMemberCoupon())))
                        .collect(Collectors.toList()))
                .couponIssueConditions(payloadFactory.couponIssueConditionTemplates(couponIssueConditions))
                .contexts(contexts)
                .build();
    }

    public TreatmentReviewSummaryPayload treatmentReviewSummaries(long salesEventId) {
        SalesEventStat salesEventStat = salesEventService.findStatBySalesEventId(salesEventId);

        return TreatmentReviewSummaryPayload.builder()
                .totalCount(salesEventStat.getTotalReviewCount())
                .starPointAverage(salesEventStat.getStarPointAverageIn365day())
                .evaluations(salesEventStat.getTreatmentReviewEvaluationsIn365day().stream()
                        .map(payloadFactory::countTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public EventQuestionAndAnswerShortsPayload recentQuestions(long salesEventId) {
        Optional<SalesEvent> salesEvent = salesEventService.fetchSalesEventBySalesEventId(salesEventId);
        if (salesEvent.isEmpty()) {
            return EventQuestionAndAnswerShortsPayload.empty();
        }

        final int PREVIEW_QUESTION_ANSWER_COUNT = 5;

        Hospital hospital = salesEvent.get().getHospital();

        HospitalStat hospitalStat = hospitalService.findHospitalStatByHospitalId(hospital.getId());

        QuestionReplyContainer questionReplyContainer = salesEventQuestionService.fetchRecentQuestionReplyBySalesEventId(
                salesEventId, PREVIEW_QUESTION_ANSWER_COUNT);

        List<CardTemplate> qas = questionReplyContainer.getQuestionReplyPairs().stream()
                .map(x -> payloadFactory.cardTemplate(x.getSalesEventQuestion().getId(),
                        x.getSalesEventQuestion().getContents(),
                        x.getSalesEventQuestionReply().getContents()))
                .collect(Collectors.toList());

        return EventQuestionAndAnswerShortsPayload.builder()
                .totalCount(questionReplyContainer.getQuestionTotalCount())
                .qas(qas)
                .replyTimeInMinuteAverage(hospitalStat.getReplyTimeInMinuteAverage())
                .build();
    }

    public TreatmentReviewsPayload bestReviews(long salesEventId) {
        final int BEST_REVIEW_COUNT = 5;
        final int STAR_POINT_GREATER_THAN = 7;

        List<TreatmentReview> treatmentReviews = treatmentReviewService.findTreatmentReviewsByStarPoint(
                salesEventId, STAR_POINT_GREATER_THAN, BEST_REVIEW_COUNT);

        List<TreatmentReviewContainer> treatmentReviewContainers =
                treatmentReviewService.fetchTreatmentReviewsWithProductByTreatmentReviewIds(treatmentReviews
                        .stream()
                        .map(TreatmentReview::getId)
                        .collect(Collectors.toList()));

        List<Member> members = memberService.findAllByMemberIds(treatmentReviewContainers.stream()
                .map(x -> x.getTreatmentReview().getMember().getId())
                .collect(Collectors.toList()));

        return TreatmentReviewsPayload.builder()
                .treatmentReviews(treatmentReviewContainers.stream()
                        .map(x -> payloadFactory.treatmentReviewTemplate(
                                x.getTreatmentReview(),
                                x.getSalesProductIds(),
                                x.getTreatmentReviewImages(),
                                x.getTreatmentReviewTranslations(),
                                Collections.emptySet()))
                        .collect(Collectors.toList()))
                .salesEvents(payloadFactory.salesEventTemplates(treatmentReviewContainers.stream()
                        .map(TreatmentReviewContainer::getSalesEvent)
                        .filter(Optional::isPresent)
                        .map(Optional::get)
                        .collect(Collectors.toList()), Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        treatmentReviewContainers.stream()
                                .flatMap(x -> x.getSalesProductVersions().stream())
                                .collect(Collectors.toList())))
                .hospitals(Collections.emptyList())
                .memberProfiles(payloadFactory.memberProfileTemplates(members))
                .build();
    }

    public BoolPayload registerQuestion(long salesEventId, QuestionRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (!salesEventQuestionService.validateQuestionRegistrable(memberId)) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.SALES_EVENT_QUESTION_ABUSE_CREATE, memberId);
            throw new SalesEventException(SalesEventCode.SALES_EVENT_QUESTION_WRITABLE_QUOTA_EXCEED);
        }

        SalesEvent salesEvent = salesEventService.fetchSalesEventBySalesEventId(salesEventId)
                .orElseThrow(() -> new SalesEventException(CommonCode.ERROR));

        transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventQuestion salesEventQuestion = salesEventQuestionService.registerQuestion(
                    memberId, salesEventId, salesEvent.getHospital().getId(), request.getContents());

            if (questService.salesEventQuestionStatus() == ProgressStatus.PROGRESS) {
                questService.registerSalesEventQuestion(memberId, salesEventQuestion, LocalDate.now())
                        .ifPresent(x -> memberPointService.registerPoint(
                                memberId, MemberPointAddContext.builder()
                                        .title(Action.QUEST_SALES_EVENT_QUESTION.getTitleKo())
                                        .action(Action.QUEST_SALES_EVENT_QUESTION)
                                        .publishType(PublishType.SYSTEM)
                                        .compositions(Collections.singletonList(MemberPointComposition.builder()
                                                .expireAt(PointUtils.expireAt(Point.QUEST_SALES_EVENT_QUESTION_DAYS))
                                                .point(x.getPoint())
                                                .build()))
                                        .point(x.getPoint())
                                        .type(MemberPointType.REWARD)
                                        .refType(DomainType.QUEST_SALES_EVENT_QUESTION)
                                        .refId(x.getId())
                                        .build()));
            }

            messagePublisher.publishCpm(CpmMessageUtils.salesEventQuestionCreate(salesEventId));
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.SALES_EVENT_QUESTION_CREATE,
                    salesEventQuestion.getId());

            return true;
        });

        return BoolPayload.success();
    }

    public BoolPayload removeQuestion(long salesEventId, long questionId) {
        long memberId = DiagnosticContext.fetchMemberId();

        salesEventQuestionService.removeQuestion(memberId, questionId);

        messagePublisher.publishCpm(CpmMessageUtils.salesEventQuestionDelete(salesEventId));
        queueMessageDomainEventContext.addDomainEvent(DomainEventType.SALES_EVENT_QUESTION_DELETE, questionId);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public SalesEventQuestionAndAnswerPageablePayload questions(EventQuestionPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = salesEventQuestionService.getEventQuestionPageable(pageableContext);

        Page<SalesEventQuestion> questionPage = salesEventQuestionService.fetchAllQuestionBySalesEventId(
                pageableContext.getSalesEventId(), pageable);
        if (questionPage.isEmpty()) {
            return SalesEventQuestionAndAnswerPageablePayload.empty();
        }

        Page<SalesEventQuestion> excludeQuestionPage = reportService.excludeReportedMember(
                question -> question.getMember().getId(), questionPage);

        List<Long> salesEventQuestionIds = excludeQuestionPage.stream()
                .map(SalesEventQuestion::getId)
                .collect(Collectors.toList());

        List<Long> memberIds = excludeQuestionPage.stream()
                .map(x -> x.getMember().getId())
                .collect(Collectors.toList());

        List<SalesEventQuestionReply> replyList = salesEventQuestionService.fetchAllQuestionReplyByQuestionIds(
                salesEventQuestionIds);

        Set<Long> reportIds = reportService.findReportContents(memberId, ContentType.SALES_EVENT_QUESTION, salesEventQuestionIds);

        String nextToken = excludeQuestionPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                EventQuestionPageableContext.builder()
                        .page(excludeQuestionPage.getPageable().getPageNumber() + 1)
                        .salesEventId(pageableContext.getSalesEventId())
                        .build());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                Collections.singletonList(pageableContext.getSalesEventId()),
                Collections.singletonList(SalesProductType.REPRESENTATIVE));

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<InterestingContainer> interestings = interestingService.findInterestings(memberIds);

        return SalesEventQuestionAndAnswerPageablePayload.builder()
                .questions(payloadFactory.questionTemplates(excludeQuestionPage.getContent(), reportIds))
                .replies(payloadFactory.questionReplyTemplates(replyList))
                .hospitals(payloadFactory.hospitalTemplates(excludeQuestionPage.getContent()
                        .stream()
                        .map(SalesEventQuestion::getHospital)
                        .collect(Collectors.toList())))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .memberSkinTypes(payloadFactory.memberSkinTypeTemplates(interestings))
                .pageable(payloadFactory.pageableTemplate(excludeQuestionPage, nextToken))
                .build();
    }

    public SalesEventPageablePayload searchSalesEvents(
            SalesEventSearchableContext searchableContext) {
        restrictionContext.addGeoPositionUsages(
                searchableContext.getGeoPosition().getLatitude(),
                searchableContext.getGeoPosition().getLongitude());

        if (CollectionUtils.isEmpty(searchableContext.getSearchAfter())
                && StringUtils.isNotBlank(searchableContext.getQuery())
                && !searchableContext.getFallback().orElse(false)) {
            if (!DiagnosticContext.isVirtualMember()) {
                transactionTemplate.executeMainWritableTransaction(
                        () -> searchService.registerSearchKeyword(DiagnosticContext.fetchMemberId(),
                                searchableContext.getQuery()));
            }
        }

        SearchResult<SalesEventDocument> searchResult = searchService.search(searchableContext);
        if (CollectionUtils.isEmpty(searchResult.getDocuments())
                && CollectionUtils.isEmpty(searchableContext.getSearchAfter())) {
            MonitorUtils.notEmpty(searchResult.getDocuments(), "documents from sales event search are empty.");

            return searchService.searchFallback(searchableContext)
                    .map(f -> SalesEventPageablePayload.builder()
                            .fallback(payloadFactory.salesEventSearchFallbackTemplate(f))
                            .build())
                    .orElse(SalesEventPageablePayload.empty());
        }

        Map<Long, CpmSearchExperiment> searchExperiments = cpmService.findCpmSearchExperiments(
                        searchableContext, searchResult.getSearchSize())
                .stream()
                .collect(Collectors.toMap(CpmSearchExperiment::getSalesEventId, Function.identity(), (a, b) -> a));

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                SalesEventSearchableContext.builder()
                        .sort(searchableContext.getSort())
                        .page(searchableContext.getPage() + 1)
                        .reservation(searchableContext.getReservation())
                        .geoPosition(searchableContext.getGeoPosition())
                        .places(searchableContext.getPlaces())
                        .order(searchableContext.getOrder())
                        .consultation(searchableContext.getConsultation())
                        .metaIds(searchableContext.getMetaIds())
                        .additionIds(searchableContext.getAdditionIds())
                        .treatmentIds(searchableContext.getTreatmentIds())
                        .campaign(searchableContext.getCampaign())
                        .query(searchableContext.getQuery())
                        .searchAfter(searchResult.getSearchAfter())
                        .fallback(searchableContext.getFallback())
                        .build());

        List<Long> salesEventIds = searchResult.getDocuments().stream()
                .map(SalesEventDocument::getId)
                .collect(Collectors.toList());

        Set<Long> salesEventIdCandidates = new LinkedHashSet<>();
        salesEventIdCandidates.addAll(searchExperiments.keySet());
        salesEventIdCandidates.addAll(salesEventIds);

        Set<Long> hospitalIds = searchResult.getDocuments().stream()
                .map(SalesEventDocument::getHospitalId)
                .collect(Collectors.toSet());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                        salesEventIdCandidates,
                        Collections.singletonList(SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                                .supportAd(true)
                                .build())
                .stream()
                .sorted(Comparator.comparingInt(x -> salesEventIds.indexOf(x.getSalesEvent().getId())))
                .collect(Collectors.toList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        Set<Long> linkableSalesEventIds = salesEventService.salesEventsLinkable(salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()))
                .stream()
                .filter(SalesEventLinkable::isLinkable)
                .map(SalesEventLinkable::getSalesEventId)
                .filter(salesEventId -> recommendFacade.getRecommendSalesEventMetasBySalesEventId(salesEventId).isPresent())
                .collect(Collectors.toSet());

        RecommendScope recommendScope = DiagnosticContext.recommendScope();
        Set<YN> supportKafhYns = recommendScope == RecommendScope.PRIVATE
                ? Set.of(YN.Y) : EnumSet.allOf(YN.class);

        List<SalesEventContainer> validSalesEventContainers = salesEventService.adjustSearchPriorities(
                SalesEventSearchAdjustContext
                        .builder()
                        .searchableContext(searchableContext)
                        .salesEventIds(salesEventIdCandidates.stream()
                                .filter(linkableSalesEventIds::contains)
                                .collect(Collectors.toList()))
                        .searchExperiments(searchExperiments)
                        .build(),
                salesEventContainers.stream()
                        .filter(x -> linkableSalesEventIds.contains(x.getSalesEvent().getId()))
                        .filter(x -> supportKafhYns.contains(x.getHospital().getKahfYn()))
                        .collect(Collectors.toList()));

        Set<Long> orderableSalesEventIds = validSalesEventContainers.stream()
                .filter(SalesEventContainer::isOrderable)
                .map(SalesEventContainer::getSalesEvent)
                .map(SalesEvent::getId)
                .collect(Collectors.toSet());

        List<Long> validSalesEventIds = validSalesEventContainers.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        List<SalesProduct> salesProducts = validSalesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = validSalesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> salesEventScrapService.findScrapsBySalesEventIds(memberId, validSalesEventIds));

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(validSalesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                validSalesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        int defaultPriority = searchableContext.getPage() * searchResult.getSearchSize();

        Optional<CpmSearchPrice> cpmSearchPrice = cpmService.findCpmSearchPrice(
                searchableContext, cpmService.findCpmSearchPrices());

        messagePublisher.publishCpm(CpmMessageUtils.searchSalesEvent(
                searchableContext,
                settingTemplate,
                validSalesEventIds.stream()
                        .filter(x -> !searchExperiments.containsKey(x))
                        .collect(Collectors.toList()),
                defaultPriority,
                cpmSearchPrice));

        List<Long> experimentLinkableSalesEventIds = validSalesEventIds.stream()
                .filter(searchExperiments::containsKey)
                .collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(experimentLinkableSalesEventIds)) {
            messagePublisher.publishCpm(CpmMessageUtils.searchSalesEventExperiment(
                    settingTemplate, experimentLinkableSalesEventIds));
        }

        long invalidCount = Math.min(searchResult.getSearchSize(), searchResult.getTotalCount())
                - CollectionUtils.size(validSalesEventContainers);

        MonitorUtils.notEmpty(validSalesEventContainers, "sales events from sales event search are empty.");

        boolean activateVirtualMileageDiscount = applicationProps.getOrder().isActivateVirtualMileageDiscount();
        List<MemberCouponUsable> memberCouponUsables = DiagnosticContext.ifVirtualMemberOrElse(
                () -> {
                    if (activateVirtualMileageDiscount) {
                        return couponService.fetchAllDiscountUsableMemberCoupons(
                                kr.co.yeoshin.common.coupon.type.PublishType.AUTO,
                                CouponIssueStatus.ISSUE,
                                CouponIssueConditionType.NEW_MEMBER);
                    } else {
                        return Collections.emptyList();
                    }
                },
                couponService::fetchAllDiscountUsableMemberCoupons);

        List<MemberCoupon> memberCoupons = memberCouponUsables.stream()
                .map(MemberCouponUsable::getMemberCoupon)
                .collect(Collectors.toList());

        List<CouponIssueCondition> couponIssueConditions = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> memberCouponUsables.stream()
                        .flatMap(x -> x.getCouponIssueConditions().stream())
                        .collect(Collectors.toList()));

        int totalMemberPoint = DiagnosticContext.ifVirtualMemberOrElse(
                () -> activateVirtualMileageDiscount ? Constant.Member.VIRTUAL_DEFAULT_MILEAGE_POINT : 0,
                memberPointService::findTotalPointByMemberId);

        Map<String, Object> contexts = new HashMap<>();
        contexts.put(Context.DISCOUNT_PRICE_LABEL, SalesEventUtils.discountPriceLabel());

        return SalesEventPageablePayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        validSalesEventContainers,
                        Refer.of(CpmEventType.SALES_EVENT_AT_SEARCH)))
                .salesProducts(salesProducts.stream()
                        .map(x -> orderableSalesEventIds.contains(x.getSalesEvent().getId()) ?
                                orderService.getMaxDiscountPrice(x, memberCoupons, couponIssueConditions, totalMemberPoint)
                                        .filter(o -> o.getDiscountPrice() > 0)
                                        .map(o -> payloadFactory.salesProductTemplate(
                                                x, SalesProductDiscountType.ALL, o.getDiscountPrice()))
                                        .orElseGet(() -> payloadFactory.salesProductTemplate(x))
                                : payloadFactory.salesProductTemplate(x))
                        .collect(Collectors.toList()))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .pageable(
                        payloadFactory.pageableTemplate(
                                Math.max(0, searchResult.getTotalCount() - invalidCount),
                                searchResult.getSearchSize(),
                                nextToken))
                .contexts(contexts)
                .build();
    }

    public SalesEventSearchablePayload searchableSalesEvents(SalesEventSearchableContext searchableContext) {
        List<HospitalAdditionalInfoValue> departmentValues = List.of(
                HospitalAdditionalInfoValue.DEPARTMENT_DERMATOLOGY,
                HospitalAdditionalInfoValue.DEPARTMENT_PLASTIC_SURGERY,
                HospitalAdditionalInfoValue.DEPARTMENT_DENTISTRY,
                HospitalAdditionalInfoValue.DEPARTMENT_OPHTHALMOLOGY,
                HospitalAdditionalInfoValue.DEPARTMENT_OBSTETRICS_AND_GYNECOLOGY,
                HospitalAdditionalInfoValue.DEPARTMENT_ORIENTAL_MEDICINE
        );

        List<HospitalAdditionalInfoValue> additionalInfoValues = List.of(
                HospitalAdditionalInfoValue.ADDITIONAL_INFO_FEMALE_DOCTOR_CONSULTATION,
                HospitalAdditionalInfoValue.ADDITIONAL_INFO_ANESTHESIOLOGY_CONSULTATION,
                HospitalAdditionalInfoValue.ADDITIONAL_INFO_SURGERY_ROOM_CCTV,
                HospitalAdditionalInfoValue.LANGUAGE_ENGLISH,
                HospitalAdditionalInfoValue.LANGUAGE_JAPANESE,
                HospitalAdditionalInfoValue.LANGUAGE_CHINESE,
                HospitalAdditionalInfoValue.OPERATING_HOLIDAY_AVAILABLE,
                HospitalAdditionalInfoValue.OPERATING_SATURDAY_AVAILABLE,
                HospitalAdditionalInfoValue.OPERATING_SUNDAY_AVAILABLE,
                HospitalAdditionalInfoValue.OPERATING_WEEKDAY_NIGHT_AVAILABLE
        );

        List<TroubleBodyPart> troubleBodyParts = List.of(
                TroubleBodyPart.SKIN,
                TroubleBodyPart.FACE_HAIR,
                TroubleBodyPart.EYES,
                TroubleBodyPart.NOSE,
                TroubleBodyPart.LIPS,
                TroubleBodyPart.BODY,
                TroubleBodyPart.WAXING
        );

        List<TroubleSubType> troubles = List.of(
                TroubleSubType.COSMETIC_INJECTION,
                TroubleSubType.EXCESSIVE_SWEATING,
                TroubleSubType.ORIENTAL_MEDICINE,
                TroubleSubType.WOMEN_CONCERNS,
                TroubleSubType.MALE_CONCERNS
        );

        final int defaultIndex = -1;

        return SalesEventSearchablePayload.builder()
                .hospitalAdditionProperties(payloadFactory.propertyTemplates(Map.of(
                        payloadFactory.codeTemplate(HospitalAdditionalInfoType.DEPARTMENT),
                        departmentValues.stream()
                                .map(x -> payloadFactory.codeTemplate(SalesEventUtils.searchFilterIndex(x, defaultIndex), x))
                                .collect(Collectors.toList()),
                        payloadFactory.codeTemplate(HospitalAdditionalInfoType.ADDITIONAL_INFO),
                        additionalInfoValues.stream()
                                .map(x -> payloadFactory.codeTemplate(SalesEventUtils.searchFilterIndex(x, defaultIndex), x))
                                .collect(Collectors.toList()))))
                .troubleBodyParts(troubleBodyParts.stream()
                        .map(x -> payloadFactory.codeTemplate(SalesEventUtils.searchFilterIndex(x, defaultIndex), x))
                        .collect(Collectors.toList()))
                .troubles(troubles.stream()
                        .map(x -> payloadFactory.codeTemplate(SalesEventUtils.searchFilterIndex(x, defaultIndex), x))
                        .collect(Collectors.toList()))
                .build();
    }

    public SalesEventsPayload recentViews(Optional<Long> salesEventId) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Long> salesEventIds = salesEventService.findRecentlyViewedSalesEventIds(memberId);
        if (CollectionUtils.isEmpty(salesEventIds)) {
            return SalesEventsPayload.empty();
        }

        List<SalesEventContainer> salesEventContainerCandidates = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                salesEventIds,
                Collections.singletonList(SalesProductType.REPRESENTATIVE), SalesEventContainerOption.builder()
                        .supportAd(true)
                        .build());

        Set<Long> linkableSalesEventIds = salesEventService.salesEventsLinkable(salesEventContainerCandidates.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()))
                .stream()
                .filter(SalesEventLinkable::isLinkable)
                .map(SalesEventLinkable::getSalesEventId)
                .collect(Collectors.toSet());

        RecommendScope recommendScope = DiagnosticContext.recommendScope();
        List<SalesEventContainer> salesEventContainers = salesEventContainerCandidates.stream()
                .filter(x -> linkableSalesEventIds.contains(x.getSalesEvent().getId()))
                .filter(x -> recommendScope != RecommendScope.PRIVATE || x.getHospital().getKahfYn().toBoolean())
                .sorted(Comparator.comparingInt(x -> salesEventIds.indexOf(x.getSalesEvent().getId()) * -1))
                .collect(Collectors.toList());

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        List<SalesEventScrap> salesEventScraps = salesEventScrapService.findScrapsBySalesEventIds(
                memberId, salesEventIds);

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        salesEventId.ifPresentOrElse(
                i -> messagePublisher.publishCpm(CpmMessageUtils.salesEventAtSalesEventRecentView(
                        settingTemplate,
                        salesEventContainers.stream()
                                .map(x -> x.getSalesEvent().getId())
                                .collect(Collectors.toList()))),
                () -> messagePublisher.publishCpm(CpmMessageUtils.salesEventRecentView(
                        settingTemplate,
                        salesEventContainers.stream()
                                .map(x -> x.getSalesEvent().getId())
                                .collect(Collectors.toList()))));

        // TODO refactor
        CpmEventType cpmEventType = salesEventId.isPresent() ?
                CpmEventType.SALES_EVENT_AT_SALES_EVENT_RECENT_VIEW : CpmEventType.SALES_EVENT_AT_RECENT_VIEW;

        return SalesEventsPayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.of(cpmEventType)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .build();
    }

    public SalesEventQuestionAndAnswerPageablePayload questionsByMe(QuestionPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = salesEventQuestionService.getQuestionPageable(pageableContext);

        Page<SalesEventQuestion> questionList = salesEventQuestionService.fetchAllQuestionsByMemberId(memberId, pageable);
        if (questionList.isEmpty()) {
            return SalesEventQuestionAndAnswerPageablePayload.empty();
        }
        if (pageableContext.isFirstPage()) {
            transactionTemplate.executeMainWritableTransaction(() ->
                    memberService.findMemberServiceSummaryByMemberId(memberId)
                            .changeLatestSalesEventQuestionReplyYn(YN.N));
        }
        Collection<Long> salesEventQuestionIds = questionList.stream()
                .map(SalesEventQuestion::getId)
                .collect(Collectors.toList());

        List<SalesEventQuestionReply> replies = salesEventQuestionService.fetchAllQuestionReplyByQuestionIds(
                salesEventQuestionIds);

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                questionList.stream()
                        .map(SalesEventQuestion::getSalesEventId)
                        .collect(Collectors.toList()),
                Collections.singletonList(SalesProductType.REPRESENTATIVE), EnumSet.allOf(YN.class), EnumSet.allOf(YN.class));

        List<ContentConcealReason> concealReasons = contentService.findContentConcealReasons(
                ContentType.SALES_EVENT_QUESTION, salesEventQuestionIds);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        String nextToken = questionList.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                QuestionPageableContext.builder()
                        .page(questionList.getPageable().getPageNumber() + 1)
                        .build());

        return SalesEventQuestionAndAnswerPageablePayload.builder()
                .questions(payloadFactory.questionTemplates(questionList.getContent(), Collections.emptySet()))
                .replies(payloadFactory.questionReplyTemplates(replies))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .hospitals(payloadFactory.hospitalTemplates(questionList.stream()
                        .map(SalesEventQuestion::getHospital)
                        .collect(Collectors.toList())))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .contentConceals(payloadFactory.contentConcealTemplates(concealReasons))
                .memberSkinTypes(Collections.emptyList())
                .pageable(payloadFactory.pageableTemplate(questionList, nextToken))
                .build();
    }

    public BoolPayload registerConsultation(long salesEventId, ConsultationRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainer(salesEventId, Language.KOREAN);
        if (!salesEventContainer.supportConsultation()) {
            log.info("sales event({}) is not support consultation", salesEventId);
            throw new SalesEventException(CommonCode.ERROR);
        }

        SalesEventAccessible accessible = salesEventService.salesEventAccessible(
                DiagnosticContext.fetchMemberId(() -> -1L), salesEventContainer);
        if (!accessible.isConsultable()) {
            log.info("sales event({}) is not available for consultation", salesEventId);
            throw new SalesEventException(CommonCode.ERROR);
        }

        Hospital hospital = salesEventContainer.getHospital();

        Member member = memberService.findMember(memberId);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();

        transactionTemplate.executeMainWritableTransaction(() -> {
            SalesEventConsultation savedConsultation = salesEventConsultationService.registerConsultation(
                    member,
                    salesEventContainer,
                    request.getContent(),
                    request.getMessenger(),
                    request.getMessengerId(),
                    SalesEventConsultationOption.builder()
                            .language(StringUtils.getIfBlank(
                                    request.getLanguage(),
                                    () -> DiagnosticContext.fetchLocale().getLanguage()))
                            .hospitalDoctorIds(request.getHospitalDoctorIds())
                            .salesProductIds(request.getSalesProductIds())
                            .treatment(attributeFacade.findTreatmentByTreatmentId(
                                    salesEventContainer.getSalesEvent().getTreatment().getId()))
                            .build());

            Optional<SalesEventConsultationPriceTag> priceTag = salesEventConsultationService.findConsultationPriceTag(
                    salesEventContainer, savedConsultation);
            if (priceTag.isPresent()) {
                Optional<AdPoint> adPoint = SalesEventConsultationUtils.isFreePlan()
                        ? Optional.empty()
                        : Optional.of(adPointService.registerPoint(hospital.getId(), AdPointMinusContext.builder()
                                        .title(AdPointAction.CPA_AD.getDescription())
                                        .action(AdPointAction.CPA_AD)
                                        .type(AdPointType.DEDUCT)
                                        .point(-priceTag.get().getPriceKo())
                                        .orderProductType(OrderProductType.CONSULTATION_POINT_PRODUCT)
                                        .build())
                                .getAdPoint());

                salesEventConsultationService.registerConsultationPaidStatusLog(savedConsultation, priceTag.get(), adPoint);
            } else {
                salesEventConsultationService.registerConsultationFreeStatusLog(savedConsultation);
            }

            SalesEventConsultationLogHelper.registerInstantLog(instantLogService, savedConsultation.getId(),
                    SalesEventConsultationLogHelper.transitionMessage(savedConsultation.getStatus()));

            memberDomainService.registerLatestStatus(memberId, savedConsultation);

            List<HospitalManagementContact> managementContacts = hospitalService.findHospitalManagementContacts(
                    savedConsultation.getHospital().getId(),
                    HospitalManagementContactType.SALES_EVENT_CONSULTATION);

            List<NhnKakaoAlimTalkNotificationContext> notificationContexts = new ArrayList<>();
            notificationContexts.add(alimTalkTemplateFactory.registerConsultationForMember(member, hospital, savedConsultation));
            if (CollectionUtils.isNotEmpty(managementContacts)) {
                notificationContexts.add(alimTalkTemplateFactory.registerConsultationForHospital(hospital, managementContacts));
            }

            SalesProduct representativeSalesProduct = salesEventContainer.fetchRepresentativeSalesProduct().orElse(null);

            messagePublisher.publishNotification(NotificationMessageUtils.notificationMessage(notificationContexts));
            messagePublisher.publishCpm(CpmMessageUtils.salesEventConsultationCreate(CpmSalesEventConsultationContext.builder()
                    .salesEventId(salesEventId)
                    .addCount(1)
                    .paidAdPrice(SalesEventConsultationUtils.isFreePlan()
                            ? 0 : priceTag.map(SalesEventConsultationPriceTag::getPriceKo).orElse(0))
                    .representativeSalesProductPrice(
                            ObjectUtils.isNotEmpty(representativeSalesProduct) ? representativeSalesProduct.getSalesPrice() : 0)
                    .build()));
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.SALES_EVENT_CONSULTATION_CREATE,
                    savedConsultation.getId());

            return true;
        });

        return BoolPayload.success();
    }

    public ConsultationPayload consultationLatest(long salesEventId) {
        long memberId = DiagnosticContext.fetchMemberId();

        SalesEvent salesEvent = salesEventService.findSalesEventById(salesEventId);

        return transactionTemplate.executeMainWritableTransaction(() -> {
            Page<SalesEventConsultation> salesEventConsultationPage = salesEventConsultationService.findAllConsultations(
                    memberId,
                    salesEvent.getHospital().getId(),
                    salesEventConsultationService.pageable(SalesEventConsultationPageContext.builder()
                            .page(Query.PAGE_DEFAULT_NUMBER)
                            .size(1)
                            .build()));

            SalesEventConsultation salesEventConsultation = salesEventConsultationPage.getContent()
                    .stream()
                    .findFirst()
                    .orElse(null);
            if (salesEventConsultationPage == null) {
                return ConsultationPayload.empty();
            }

            SalesEventConsultationContainer salesEventConsultationContainer = salesEventConsultationService.fetchAllOption(
                            salesEventConsultation)
                    .orElse(null);
            if (salesEventConsultationContainer == null) {
                return ConsultationPayload.empty();
            }

            List<HospitalMessenger> hospitalMessengers =
                    SalesEventConsultationUtils.hospitalMessengerAccessible(salesEventConsultation)
                            ? hospitalService.findAllHospitalMessengers(
                            Collections.singletonList(salesEventConsultation.getHospital().getId()))
                            : Collections.emptyList();

            SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                            Collections.singletonList(salesEventConsultation.getSalesEvent().getId()),
                            Collections.singletonList(SalesProductType.REPRESENTATIVE), EnumSet.allOf(YN.class), EnumSet.allOf(YN.class))
                    .stream()
                    .findFirst()
                    .orElseThrow(() -> new SalesEventException(CommonCode.ERROR));

            SalesEventStat salesEventStat = salesEventService.findStatBySalesEventId(salesEventId);
            List<TreatmentReview> treatmentReviews = treatmentReviewService.findAllTreatmentReviews(
                    memberId, Collections.singletonList(salesEventId));

            List<SalesProduct> salesProducts = salesEventContainer.fetchSalesProducts();

            return ConsultationPayload.builder()
                    .salesEventConsultation(payloadFactory.salesEventConsultationTemplate(
                            salesEventConsultation,
                            salesEventConsultationContainer.getSalesProductVersions(),
                            salesEventConsultationContainer.getHospitalDoctors(),
                            hospitalMessengers,
                            salesEventStat,
                            treatmentReviews))
                    .salesEvent(payloadFactory.salesEventTemplate(salesEventContainer, Ref.empty()))
                    .hospital(payloadFactory.hospitalTemplate(salesEventContainer.getHospital()))
                    .salesProducts(payloadFactory.salesProductTemplates(salesProducts,
                            salesEventConsultationContainer.getSalesProductVersions()))
                    .hospitalDoctors(payloadFactory.hospitalDoctorTemplates(salesEventConsultationContainer.getHospitalDoctors()))
                    .hospitalMessengers(payloadFactory.hospitalMessengerTemplates(hospitalMessengers))
                    .build();
        });
    }

    public ConsultationPageablePayload consultations(SalesEventConsultationPageContext context) {
        long memberId = DiagnosticContext.fetchMemberId();

        Page<SalesEventConsultation> salesEventConsultationPage = salesEventConsultationService.findAllConsultations(
                memberId, salesEventConsultationService.pageable(context));
        List<SalesEventConsultation> salesEventConsultations = salesEventConsultationPage.getContent();
        if (CollectionUtils.isEmpty(salesEventConsultations)) {
            return ConsultationPageablePayload.empty();
        }

        List<SalesEventConsultationContainer> salesEventConsultationContainers = salesEventConsultationService.fetchAllOptions(
                salesEventConsultationPage.getContent());

        List<HospitalMessenger> hospitalMessengers = hospitalService.findAllHospitalMessengers(
                salesEventConsultationContainers.stream()
                        .map(SalesEventConsultationContainer::getSalesEventConsultation)
                        .filter(SalesEventConsultationUtils::hospitalMessengerAccessible)
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                salesEventConsultations.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList()),
                Collections.singletonList(SalesProductType.REPRESENTATIVE), EnumSet.allOf(YN.class), EnumSet.allOf(YN.class));

        List<Long> salesEventIds = salesEventContainers.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);
        List<TreatmentReview> treatmentReviews = treatmentReviewService.findAllTreatmentReviews(memberId, salesEventIds);

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        String nextToken = salesEventConsultationPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                SalesEventConsultationPageContext.builder()
                        .size(context.getSize())
                        .page(salesEventConsultationPage.getPageable().getPageNumber() + 1)
                        .build());

        return ConsultationPageablePayload.builder()
                .salesEventConsultations(payloadFactory.salesEventConsultationTemplates(
                        salesEventConsultations,
                        salesEventConsultationContainers,
                        salesEventStats,
                        treatmentReviews,
                        hospitalMessengers))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .hospitals(payloadFactory.hospitalTemplates(salesEventContainers.stream()
                        .map(SalesEventContainer::getHospital)
                        .collect(Collectors.toList())))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts, salesEventConsultationContainers.stream()
                        .flatMap(x -> x.getSalesProductVersions().stream())
                        .collect(Collectors.toList())))
                .hospitalDoctors(payloadFactory.hospitalDoctorTemplates(salesEventConsultationContainers.stream()
                        .flatMap(x -> x.getHospitalDoctors().stream())
                        .collect(Collectors.toList())))
                .hospitalMessengers(payloadFactory.hospitalMessengerTemplates(hospitalMessengers))
                .pageable(payloadFactory.pageableTemplate(salesEventConsultationPage, nextToken))
                .build();
    }

    public BoolPayload consultationApplyableStatus(SalesEventConsultationApplyableStatusValidateConfigure configure) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainReadableTransaction(() -> {
                    Member member = memberService.findMember(memberId);
                    return salesEventConsultationService.validateApplyableMember(member, configure);
                }))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/salesproduct/usecase/SalesProductUseCase.java
================================================
package kr.co.yeoshin.backend.salesproduct.usecase;

import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.payload.SalesProductPayload;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.salesproduct.service.model.SalesProductWithTreatments;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@UseCase
public class SalesProductUseCase {

    private final HospitalService hospitalService;
    private final SalesProductService salesProductService;
    private final PayloadFactory payloadFactory;

    public SalesProductPayload salesProduct(long salesProductId) {
        SalesProductWithTreatments salesProductWithTreatments = salesProductService.fetchSalesProductWithTreatmentBySalesProductId(
                salesProductId);

        Hospital hospital = hospitalService.findHospitalByHospitalId(
                salesProductWithTreatments.getSalesProduct().getHospital().getId());

        return payloadFactory.salesProductPayload(
                salesProductWithTreatments, hospital);
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/scrap/usecase/ScrapUseCase.java
================================================
package kr.co.yeoshin.backend.scrap.usecase;

import static kr.co.yeoshin.backend.common.Constant.TreatmentReview.ATTRIBUTE_SOLUTION_TAG_COUNT;
import static kr.co.yeoshin.backend.common.Constant.TreatmentReview.ATTRIBUTE_TREATMENT_COUNT;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.auth.service.AuthService;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.*;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.HospitalException;
import kr.co.yeoshin.backend.exception.SalesEventException;
import kr.co.yeoshin.backend.exception.TreatmentReviewException;
import kr.co.yeoshin.backend.exception.TvException;
import kr.co.yeoshin.backend.hospital.service.HospitalScrapService;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.queue.component.publisher.QueueMessagePublisherTemplate;
import kr.co.yeoshin.backend.queue.model.cpm.CpmEventType;
import kr.co.yeoshin.backend.queue.utils.CpmMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewLikeService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewScrapService;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewAttribute;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewAttributeConfig;
import kr.co.yeoshin.backend.review.service.model.TreatmentReviewContainer;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventScrapService;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventBadgeContainer;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventLinkable;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventStat;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.salesproduct.service.model.SalesProductWithTreatments;
import kr.co.yeoshin.backend.scrap.service.ScrapService;
import kr.co.yeoshin.backend.scrap.usecase.model.HospitalScrapPageableContext;
import kr.co.yeoshin.backend.scrap.usecase.model.SalesEventScrapPageableContext;
import kr.co.yeoshin.backend.scrap.usecase.model.TreatmentReviewScrapPageableContext;
import kr.co.yeoshin.backend.scrap.usecase.model.TvScrapPageableContext;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.tv.service.TvScrapService;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.backend.tv.service.model.TvStat;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalScrap;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.entity.SalesEventScrap;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.review.entity.TreatmentReviewHospitalComment;
import kr.co.yeoshin.common.review.entity.TreatmentReviewLike;
import kr.co.yeoshin.common.review.entity.TreatmentReviewScrap;
import kr.co.yeoshin.common.tv.entity.Tv;
import kr.co.yeoshin.common.tv.entity.TvScrap;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@UseCase
@AllArgsConstructor
public class ScrapUseCase {

    private final AuthService authService;
    private final TreatmentReviewService treatmentReviewService;
    private final TreatmentReviewScrapService treatmentReviewScrapService;
    private final TreatmentReviewLikeService treatmentReviewLikeService;
    private final MemberService memberService;
    private final HospitalService hospitalService;
    private final HospitalScrapService hospitalScrapService;
    private final SalesEventService salesEventService;
    private final SalesEventScrapService salesEventScrapService;
    private final SalesProductService salesProductService;
    private final RecommendService recommendService;
    private final TvService tvService;
    private final TvScrapService tvScrapService;
    private final ScrapService scrapService;
    private final ReportService reportService;
    private final PayloadFactory payloadFactory;
    private final SettingTemplate settingTemplate;
    private final QueueMessagePublisherTemplate messagePublisher;
    private final TransactionTemplate transactionTemplate;

    public ScrapCountsPayload count(List<DomainType> domains) {
        long memberId = DiagnosticContext.fetchMemberId();

        return ScrapCountsPayload.builder()
                .scrapCounts(domains.stream()
                        .map(x -> payloadFactory.countTemplate(
                                x, scrapService.countScrapCount(memberId, x)))
                        .collect(Collectors.toList()))
                .build();
    }

    public TreatmentReviewsPageablePayload listReviewScraps(
            TreatmentReviewScrapPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = treatmentReviewScrapService.pageable(pageableContext);

        Page<TreatmentReviewScrap> scrapPage = treatmentReviewScrapService.fetchAllScraps(memberId, pageable);
        if (scrapPage.isEmpty()) {
            return TreatmentReviewsPageablePayload.empty();
        }

        Page<TreatmentReviewScrap> excludedScrapPage = reportService.excludeReportedMember(
                scrap -> scrap.getMember().getId(),
                scrapPage);

        List<TreatmentReviewScrap> treatmentReviewScraps = excludedScrapPage.getContent();

        List<Long> treatmentReviewIds = treatmentReviewScraps.stream()
                .map(x -> x.getTreatmentReview().getId())
                .collect(Collectors.toList());

        List<TreatmentReviewContainer> treatmentReviewContainers = treatmentReviewService.fetchTreatmentReviewsWithProductByTreatmentReviewIds(
                        treatmentReviewIds)
                .stream()
                .sorted(Comparator.comparingInt(x -> treatmentReviewIds.indexOf(x.getTreatmentReview().getId())))
                .collect(Collectors.toList());

        Map<Long, SalesProductVersion> salesProductVersions = treatmentReviewContainers.stream()
                .flatMap(x -> x.getSalesProductVersions().stream())
                .collect(Collectors.toMap(SalesProductVersion::getId, Function.identity(), (a, b) -> a));

        List<Long> salesEventIds = treatmentReviewScraps.stream()
                .map(x -> x.getTreatmentReview().getSalesEvent().getId())
                .collect(Collectors.toList());

        List<Long> hospitalIds = treatmentReviewScraps.stream()
                .map(x -> x.getTreatmentReview().getHospital().getId())
                .collect(Collectors.toList());

        List<Hospital> hospitals = hospitalService.findHospitalsByHospitalIds(hospitalIds);

        String nextToken = excludedScrapPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TreatmentReviewScrapPageableContext.builder()
                        .page(excludedScrapPage.getPageable().getPageNumber() + 1)
                        .size(pageableContext.getSize())
                        .build());

        List<TreatmentReviewHospitalComment> hospitalComments =
                treatmentReviewService.findTreatmentReviewHospitalCommentsByTreatmentReviewIds(treatmentReviewIds);

        List<SalesEvent> salesEvents = salesEventService.findSalesEventsBySalesEventIds(salesEventIds);

        Map<Long, List<Long>> salesProductVersionByTreatmentReviewId = treatmentReviewContainers.stream()
                .collect(Collectors.toMap(x -> x.getTreatmentReview().getId(),
                        x -> x.getSalesProductVersions().stream().map(SalesProductVersion::getId).collect(
                                Collectors.toList())));

        List<SalesProduct> salesProducts = salesProductVersions.values()
                .stream()
                .map(SalesProductVersion::getSalesProduct)
                .collect(Collectors.toList());

        List<SalesProductWithTreatments> salesProductWithTreatments = salesProductService.fetchSalesProductWithTreatmentsBySalesProductIds(
                salesProducts.stream()
                        .map(SalesProduct::getId)
                        .collect(Collectors.toList()));

        SalesProductAttributeFacade salesProductAttributeFacade = salesProductService.getAttributeFacade();

        TreatmentReviewAttributeConfig treatmentReviewAttributeConfig = TreatmentReviewAttributeConfig.builder()
                .treatmentCount(ATTRIBUTE_TREATMENT_COUNT)
                .solutionTagCount(ATTRIBUTE_SOLUTION_TAG_COUNT)
                .build();

        List<TreatmentReviewAttribute> treatmentReviewAttributes = new ArrayList<>();
        for (var entry : salesProductVersionByTreatmentReviewId.entrySet()) {
            long treatmentReviewId = entry.getKey();
            List<Long> salesProductIds = entry.getValue().stream()
                    .map(salesProductVersions::get)
                    .filter(Objects::nonNull)
                    .map(x -> x.getSalesProduct().getId())
                    .filter(Objects::nonNull)
                    .collect(Collectors.toList());

            treatmentReviewAttributes.add(treatmentReviewService.findTreatmentReviewAttributes(
                    treatmentReviewId,
                    treatmentReviewAttributeConfig,
                    salesProductIds,
                    salesProductAttributeFacade,
                    salesProductWithTreatments));
        }

        List<Member> members = memberService.findAllByMemberIds(treatmentReviewContainers.stream()
                .map(TreatmentReviewContainer::getTreatmentReview)
                .map(x -> x.getMember().getId())
                .collect(Collectors.toList()));

        List<TreatmentReviewLike> treatmentReviewLikes = treatmentReviewLikeService
                .findLikesByMemberIdAndTreatmentReviewIds(memberId, treatmentReviewIds);

        Set<Long> reportIds = reportService.findReportContents(memberId, ContentType.TREATMENT_REVIEW, treatmentReviewIds);

        return TreatmentReviewsPageablePayload.builder()
                .treatmentReviews(treatmentReviewContainers.stream()
                        .map(x -> payloadFactory.treatmentReviewTemplate(
                                x.getTreatmentReview(),
                                x.getSalesProductIds(),
                                x.getTreatmentReviewImages(),
                                x.getTreatmentReviewTranslations(),
                                reportIds))
                        .collect(Collectors.toList()))
                .treatmentReviewScraps(payloadFactory.treatmentReviewScrapTemplates(treatmentReviewScraps))
                .treatmentReviewLikes(payloadFactory.treatmentReviewLikeTemplates(treatmentReviewLikes))
                .treatmentReviewStats(
                        payloadFactory.treatmentReviewStatTemplates(treatmentReviewContainers.stream()
                                .map(TreatmentReviewContainer::getTreatmentReviewStat)
                                .collect(Collectors.toList())))
                .treatmentReviewAttributes(payloadFactory.treatmentReviewAttributeTemplates(treatmentReviewAttributes))
                .treatmentReviewHospitalComments(payloadFactory.treatmentReviewHospitalCommentTemplates(hospitalComments))
                .salesEvents(payloadFactory.salesEventTemplates(salesEvents, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .memberProfiles(payloadFactory.memberProfileTemplates(members))
                .pageable(payloadFactory.pageableTemplate(excludedScrapPage, nextToken))
                .build();
    }

    public BoolPayload registerReviewScrap(long treatmentReviewId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (treatmentReviewScrapService.existScrap(memberId, treatmentReviewId)) {
            throw new TreatmentReviewException(
                    TreatmentReviewCode.TREATMENT_REVIEW_SCRAP_DUPLICATE_NOT_EXIST);
        }

        treatmentReviewScrapService.registerScrap(memberId, treatmentReviewId);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload removeReviewScrap(long treatmentReviewId) {
        long memberId = DiagnosticContext.fetchMemberId();
        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(
                        () -> treatmentReviewScrapService.removeScrap(memberId, treatmentReviewId))

        ).build();
    }

    public TvPageablePayload listTvScraps(TvScrapPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();
        Pageable pageable = tvScrapService.pageable(pageableContext);

        Page<TvScrap> tvScrapPage = tvScrapService.fetchAllTvScrapsByMemberId(memberId, pageable);
        if (tvScrapPage.isEmpty()) {
            return TvPageablePayload.empty();
        }

        List<TvScrap> tvScraps = tvScrapPage.getContent();
        List<Tv> tvs = tvScraps.stream().map(TvScrap::getTv).collect(Collectors.toList());

        String nextToken = tvScrapPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TvScrapPageableContext.builder()
                        .page(tvScrapPage.getPageable().getPageNumber() + 1)
                        .size(pageableContext.getSize())
                        .build());

        List<TvStat> tvStats = tvService.findStatsByTvIds(tvs.stream()
                .map(Tv::getId)
                .collect(Collectors.toList()));

        return TvPageablePayload.builder()
                .tvs(payloadFactory.tvTemplates(tvs))
                .tvStats(payloadFactory.tvStatTemplates(tvStats))
                .tvScraps(payloadFactory.tvScrapTemplates(tvScraps))
                .pageable(payloadFactory.pageableTemplate(tvScrapPage, nextToken))
                .build();
    }

    public BoolPayload registerTvScrap(long tvId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (tvScrapService.existTvScrap(memberId, tvId)) {
            throw new TvException(TvCode.TV_DUPLICATED_SCRAP);
        }

        tvScrapService.registerTvScrap(memberId, tvId);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload removeTvScrap(long tvId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                    tvScrapService.removeTvScrap(memberId, tvId);
                    return true;
                }))
                .build();
    }

    public HospitalShortsPageablePayload listHospitalScraps(HospitalScrapPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = hospitalScrapService.pageable(pageableContext);
        Page<HospitalScrap> hospitalScrapPage = hospitalScrapService.fetchAllScrapHospital(memberId, pageable);
        if (hospitalScrapPage.isEmpty()) {
            return HospitalShortsPageablePayload.empty();
        }

        List<HospitalScrap> hospitalScraps = hospitalScrapPage.getContent();
        List<Hospital> hospitals = hospitalScraps.stream()
                .map(HospitalScrap::getHospital)
                .collect(Collectors.toList());

        String nextToken = hospitalScrapPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                HospitalScrapPageableContext.builder()
                        .page(hospitalScrapPage.getPageable().getPageNumber() + 1)
                        .size(pageableContext.getSize())
                        .build());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitalIds);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> badgeContainers = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), hospitalStats, recommendFacade);

        return HospitalShortsPageablePayload.builder()
                .places(payloadFactory.placeTemplates(hospitals.stream()
                        .flatMap(x -> x.getPlaces().stream())
                        .collect(Collectors.toList())))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalScraps(payloadFactory.hospitalScrapTemplates(hospitalScraps))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, badgeContainers))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .pageable(payloadFactory.pageableTemplate(hospitalScrapPage, nextToken))
                .build();
    }

    public BoolPayload registerHospitalScrap(long hospitalId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (hospitalScrapService.existScrapHospital(memberId, hospitalId)) {
            throw new HospitalException(HospitalCode.HOSPITAL_SCRAP_DUPLICATE_NOT_EXIST);
        }

        hospitalScrapService.registerScrapHospital(memberId, hospitalId);

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload removeHospitalScrap(long hospitalId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() ->
                        hospitalScrapService.removeScrapHospital(memberId, hospitalId))
        ).build();
    }

    public SalesEventPageablePayload listSalesEventScraps(SalesEventScrapPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = salesEventScrapService.pageable(pageableContext);

        Page<SalesEventScrap> salesEventScrapPage = salesEventScrapService.findAllScrapSalesEvent(memberId, pageable);
        if (salesEventScrapPage.isEmpty()) {
            return SalesEventPageablePayload.empty();
        }

        List<SalesEventScrap> salesEventScraps = salesEventScrapPage.getContent();

        List<Long> salesEventIds = salesEventScraps.stream()
                .map(x -> x.getSalesEvent().getId())
                .collect(Collectors.toList());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductTypes(
                        salesEventIds,
                        Collections.singletonList(SalesProductType.REPRESENTATIVE),
                        EnumSet.allOf(YN.class),
                        EnumSet.allOf(YN.class))
                .stream()
                .sorted(Comparator.comparingInt(x -> salesEventIds.indexOf(x.getSalesEvent().getId())))
                .collect(Collectors.toList());

        List<SalesEventLinkable> salesEventLinks = salesEventService.salesEventsLinkable(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .collect(Collectors.toList()),
                Set.of(CpmAdStatus.PROGRESS, CpmAdStatus.PAUSE));

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        List<Hospital> hospitals = salesEventContainers.stream()
                .map(SalesEventContainer::getHospital)
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitals.stream()
                        .map(Hospital::getId)
                        .collect(Collectors.toSet()), hospitalService.getBadges(), recommendFacade);

        List<SalesEventStat> salesEventStats = salesEventService.findStatsBySalesEventIds(salesEventIds);

        List<SalesEventBadgeContainer> salesEventBadges = salesEventService.findSalesEventBadgeContainers(
                salesEventContainers.stream()
                        .map(SalesEventContainer::getSalesEvent)
                        .distinct()
                        .collect(Collectors.toList()), recommendFacade);

        String nextToken = salesEventScrapPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                SalesEventScrapPageableContext.builder()
                        .page(salesEventScrapPage.getPageable().getPageNumber() + 1)
                        .size(pageableContext.getSize())
                        .build());

        messagePublisher.publishCpm(CpmMessageUtils.scrapSalesEvent(settingTemplate, salesEventLinks.stream()
                .filter(SalesEventLinkable::isLinkable)
                .filter(x -> x.getStatus() == CpmAdStatus.PROGRESS)
                .map(SalesEventLinkable::getSalesEventId)
                .collect(Collectors.toList())));

        return SalesEventPageablePayload.builder()
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(
                        salesEventContainers, salesEventLinks, Refer.of(CpmEventType.SALES_EVENT_AT_SCRAP)))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEventScraps(payloadFactory.salesEventScrapTemplates(salesEventScraps))
                .salesEventStats(payloadFactory.salesEventStatTemplates(salesEventStats))
                .salesEventBadges(payloadFactory.salesEventBadgeTemplates(salesEventBadges))
                .pageable(payloadFactory.pageableTemplate(salesEventScrapPage, nextToken))
                .build();

    }

    public BoolPayload registerSalesEventScrap(long salesEventId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (salesEventScrapService.existScrapSalesEvent(memberId, salesEventId)) {
            throw new SalesEventException(SalesEventCode.SALES_EVENT_DUPLICATED_SCRAP);
        }

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                    salesEventScrapService.registerScrapSalesEvent(memberId, salesEventId);

                    if (!authService.incrementSalesEventScrapCount(memberId)) {
                        throw new SalesEventException(CommonCode.ERROR);
                    }

                    messagePublisher.publishCpm(CpmMessageUtils.salesEventScrapCreate(salesEventId));

                    return true;
                }))
                .build();
    }

    public BoolPayload removeSalesEventScrap(long salesEventId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder().result(
                transactionTemplate.executeMainWritableTransaction(() -> {
                    salesEventScrapService.removeScrapSalesEvent(memberId, salesEventId);

                    if (!authService.decrementSalesEventScrapCount(memberId)) {
                        throw new SalesEventException(CommonCode.ERROR);
                    }

                    messagePublisher.publishCpm(CpmMessageUtils.salesEventScrapDelete(salesEventId));

                    return true;
                })

        ).build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/search/component/template/ElasticsearchLogSenderTemplate.java
================================================
package kr.co.yeoshin.backend.search.component.template;

import co.elastic.clients.elasticsearch.ElasticsearchClient;
import co.elastic.clients.elasticsearch.core.IndexRequest;
import co.elastic.clients.elasticsearch.core.IndexResponse;
import co.elastic.clients.json.JsonData;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import lombok.Builder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@Getter
@Builder
public class ElasticsearchLogSenderTemplate implements SearchLogSender {

    private ElasticsearchClient accessLogRestClient;
    private ElasticsearchClient applicationLogRestClient;
    private ElasticsearchClient biLogRestClient;

    private String accessLogIndex;
    private String applicationLogIndex;
    private String biLogIndex;

    private final String INDEX_DATEFORMAT_OPEN = "{";
    private final String INDEX_DATEFORMAT_CLOSE = "}";

    @Override
    public boolean performAccessLogRequest(String documentId, Map<String, Object> payload) {
        LocalDateTime now = LocalDateTime.now();

        IndexRequest<JsonData> request = IndexRequest.of(i -> i
                .index(createIndexName(accessLogIndex, now))
                .id(documentId)
                .document(JsonData.of(payload))
        );

        return performRequest(accessLogRestClient, request);
    }

    @Override
    public boolean performAccessLogRequest(Map<String, Object> payload) {
        LocalDateTime now = LocalDateTime.now();

        IndexRequest<JsonData> request = IndexRequest.of(i -> i
                .index(createIndexName(accessLogIndex, now))
                .document(JsonData.of(payload))
        );

        return performRequest(accessLogRestClient, request);
    }

    @Override
    public boolean performApplicationLogRequest(String documentId, Map<String, Object> payload) {
        LocalDateTime now = LocalDateTime.now();

        IndexRequest<JsonData> request = IndexRequest.of(i -> i
                .index(createIndexName(applicationLogIndex, now))
                .id(documentId)
                .document(JsonData.of(payload))
        );

        return performRequest(applicationLogRestClient, request);
    }

    @Override
    public boolean performApplicationLogRequest(Map<String, Object> payload) {
        LocalDateTime now = LocalDateTime.now();

        IndexRequest<JsonData> request = IndexRequest.of(i -> i
                .index(createIndexName(applicationLogIndex, now))
                .document(JsonData.of(payload))
        );

        return performRequest(applicationLogRestClient, request);
    }

    @Override
    public boolean performBiLogRequest(String documentId, Map<String, Object> payload) {
        LocalDateTime now = LocalDateTime.now();

        IndexRequest<JsonData> request = IndexRequest.of(i -> i
                .index(createIndexName(biLogIndex, now))
                .id(documentId)
                .document(JsonData.of(payload))
        );

        return performRequest(biLogRestClient, request);
    }

    @Override
    public boolean performBiLogRequest(Map<String, Object> payload) {
        LocalDateTime now = LocalDateTime.now();

        IndexRequest<JsonData> request = IndexRequest.of(i -> i
                .index(createIndexName(biLogIndex, now))
                .document(JsonData.of(payload))
        );
        return performRequest(biLogRestClient, request);
    }

    public boolean performRequest(ElasticsearchClient restClient, IndexRequest<?> request) {
        try {
            IndexResponse response = restClient.index(request);

            return true;
        } catch (Exception e) {
            log.error("elasticsearch send log to index({}) failed", request.index(), e);
            return false;
        }
    }

    public String createIndexName(String index, LocalDateTime now) {
        String dateFormat = StringUtils.substringBetween(index, INDEX_DATEFORMAT_OPEN, INDEX_DATEFORMAT_CLOSE);
        if (StringUtils.isBlank(dateFormat)) {
            return index;
        }

        String date = now.format(DateTimeFormatter.ofPattern(dateFormat));

        return StringUtils.replace(
                index,
                StringUtils.join(INDEX_DATEFORMAT_OPEN, dateFormat, INDEX_DATEFORMAT_CLOSE),
                date);
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/search/component/template/ElasticsearchSearchTemplate.java
================================================
package kr.co.yeoshin.backend.search.component.template;

import co.elastic.clients.elasticsearch.ElasticsearchClient;
import co.elastic.clients.elasticsearch.core.SearchRequest;
import co.elastic.clients.elasticsearch.core.SearchResponse;
import java.io.Reader;
import java.io.StringReader;
import kr.co.yeoshin.backend.config.props.SearchLogProps;
import kr.co.yeoshin.backend.search.model.HospitalLocationDocument;
import kr.co.yeoshin.common.elasticsearch.document.HospitalDocument;
import kr.co.yeoshin.common.elasticsearch.document.SalesEventDocument;
import kr.co.yeoshin.common.elasticsearch.document.TreatmentReviewDocument;
import kr.co.yeoshin.common.elasticsearch.document.TvDocument;
import lombok.Builder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Getter
@Builder
public class ElasticsearchSearchTemplate {

    private SearchLogProps logProps;

    private ElasticsearchClient tvRestClient;
    private ElasticsearchClient hospitalRestClient;
    private ElasticsearchClient treatmentReviewRestClient;
    private ElasticsearchClient salesEventRestClient;

    private String tvIndex;
    private String hospitalIndex;
    private String treatmentReviewIndex;
    private String salesEventIndex;

    public SearchResponse<TvDocument> searchTv(String queryJson) {
        return performRequest(tvRestClient, tvIndex, queryJson, TvDocument.class);
    }

    public SearchResponse<HospitalDocument> searchHospital(String queryJson) {
        return performRequest(hospitalRestClient, hospitalIndex, queryJson, HospitalDocument.class);
    }

    public SearchResponse<HospitalLocationDocument> searchHospitalLocation(String queryJson) {
        return performRequest(hospitalRestClient, hospitalIndex, queryJson, HospitalLocationDocument.class);
    }

    public SearchResponse<TreatmentReviewDocument> searchTreatmentReview(String queryJson) {
        return performRequest(treatmentReviewRestClient, treatmentReviewIndex, queryJson, TreatmentReviewDocument.class);
    }

    public SearchResponse<SalesEventDocument> searchSalesEvent(String queryJson) {
        return performRequest(salesEventRestClient, salesEventIndex, queryJson, SalesEventDocument.class);
    }

    public <T> SearchResponse<T> performRequest(
            ElasticsearchClient restClient, String index, String queryJson, Class<T> documentClass) {

        try {
            Reader query = new StringReader(queryJson);

            SearchRequest request = SearchRequest.of(b -> b
                    .index(index)
                    .withJson(query)
                    .ignoreUnavailable(true)
            );

            long start = System.currentTimeMillis();
            SearchResponse<T> searchResponse = restClient.search(request, documentClass);
            long end = System.currentTimeMillis();

            long duration = end - start;
            if (logProps.getQueriesSlowerThanMs() < duration) {
                log.info("ES SlowQuery: {} milliseconds. Query: {}", duration, queryJson);
            }

            return searchResponse;
        } catch (Exception e) {
            log.error("elasticsearch perform request failed", e);
            return null;
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/search/component/template/SearchLogSenderTemplate.java
================================================
package kr.co.yeoshin.backend.search.component.template;

import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@AllArgsConstructor
@Getter
@Component
public class SearchLogSenderTemplate implements SearchLogSender {

    private final ElasticsearchLogSenderTemplate elasticsearchLogSenderTemplate;

    @Override
    public boolean performAccessLogRequest(String documentId, Map<String, Object> payload) {
        return elasticsearchLogSenderTemplate.performAccessLogRequest(documentId, payload);
    }

    @Override
    public boolean performAccessLogRequest(Map<String, Object> payload) {
        return elasticsearchLogSenderTemplate.performAccessLogRequest(payload);
    }

    @Override
    public boolean performApplicationLogRequest(String documentId, Map<String, Object> payload) {
        return elasticsearchLogSenderTemplate.performApplicationLogRequest(documentId, payload);
    }

    @Override
    public boolean performApplicationLogRequest(Map<String, Object> payload) {
        return elasticsearchLogSenderTemplate.performApplicationLogRequest(payload);
    }

    @Override
    public boolean performBiLogRequest(String documentId, Map<String, Object> payload) {
        return elasticsearchLogSenderTemplate.performBiLogRequest(documentId, payload);
    }

    @Override
    public boolean performBiLogRequest(Map<String, Object> payload) {
        return elasticsearchLogSenderTemplate.performBiLogRequest(payload);
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/search/repository/SearchRepository.java
================================================
package kr.co.yeoshin.backend.search.repository;

import static kr.co.yeoshin.backend.common.Constant.Search.*;

import co.elastic.clients.elasticsearch.core.SearchResponse;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.backend.common.Constant.Request.Query;
import kr.co.yeoshin.backend.common.component.QueryTemplate;
import kr.co.yeoshin.backend.common.model.GeoPosition;
import kr.co.yeoshin.backend.common.model.SortType;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.locale.LocaleEnText;
import kr.co.yeoshin.backend.common.model.locale.LocaleJaText;
import kr.co.yeoshin.backend.common.model.locale.LocaleKoText;
import kr.co.yeoshin.backend.common.model.locale.LocaleZhText;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.SearchException;
import kr.co.yeoshin.backend.explorer.usecase.model.ExplorerHospitalSearchableRadiusContext;
import kr.co.yeoshin.backend.hospital.usecase.model.FrayHospitalSearchableContext;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalNameSearchableContext;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalSearchableContext;
import kr.co.yeoshin.backend.map.controller.model.SalesType;
import kr.co.yeoshin.backend.map.usecase.model.MapHospitalClusterContext;
import kr.co.yeoshin.backend.recommend.usecase.model.MapHospitalSalesEventSearchableContext;
import kr.co.yeoshin.backend.recommend.usecase.model.MapRadiusSalesEventSearchableContext;
import kr.co.yeoshin.backend.review.controller.model.TreatmentReviewType;
import kr.co.yeoshin.backend.review.usecase.model.TreatmentReviewSearchableContext;
import kr.co.yeoshin.backend.salesevent.usecase.model.SalesEventSearchableContext;
import kr.co.yeoshin.backend.search.component.template.ElasticsearchSearchTemplate;
import kr.co.yeoshin.backend.search.model.HospitalLocationDocument;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.tv.usecase.model.TvSearchableContext;
import kr.co.yeoshin.backend.utils.LocaleUtils;
import kr.co.yeoshin.common.elasticsearch.document.HospitalDocument;
import kr.co.yeoshin.common.elasticsearch.document.SalesEventDocument;
import kr.co.yeoshin.common.elasticsearch.document.TreatmentReviewDocument;
import kr.co.yeoshin.common.elasticsearch.document.TvDocument;
import kr.co.yeoshin.common.hospital.repository.HospitalAsBadgeRepository;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import kr.co.yeoshin.common.recommend.type.RecommendScope;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.JsonUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

@Slf4j
@AllArgsConstructor
@Repository
public class SearchRepository {

    private final ApplicationProps applicationProps;
    private final SettingTemplate settingTemplate;
    private final QueryTemplate queryTemplate;
    private final ElasticsearchSearchTemplate searchTemplate;

    private final HospitalAsBadgeRepository hospitalAsBadgeRepository;

    private final String QUERY_NAMESPACE_TV = "tv";
    private final String QUERY_NAMESPACE_HOSPITAL = "hospital";
    private final String QUERY_NAMESPACE_TREATMENT_REVIEW = "treatmentReview";
    private final String QUERY_NAMESPACE_SALES_EVENT = "salesEvent";
    private final String QUERY_NAMESPACE_EXPLORER = "explorer";
    private final String QUERY_NAMESPACE_MAP = "map";

    public SearchResult<TvDocument> searchTvsByLatest(TvSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_TV, "searchByLatest", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<TvDocument> response = searchTemplate.searchTv(query);

        return SearchResult.of(Query.PAGE_DEFAULT_SIZE, response);
    }

    public SearchResult<TvDocument> searchTvsByRelated(TvSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(QUERY, searchableContext.getQuery());
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_TV, "searchByRelated", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<TvDocument> response = searchTemplate.searchTv(query);

        return SearchResult.of(Query.PAGE_DEFAULT_SIZE, response);
    }

    public SearchResult<HospitalDocument> searchHospitalsByRecommend(HospitalSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_OR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(SALES_TYPE, Optional.ofNullable(searchableContext.getSales())
                .map(SalesType::getSearchableType)
                .orElse(SalesType.ALL)
                .getSearchableType());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(FRAY, Optional.ofNullable(searchableContext.getHasFray()).filter(x -> x).orElse(null));
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getAdditionIds());
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_HOSPITAL, "searchByRecommend", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<HospitalDocument> searchHospitalsByDistance(HospitalSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_OR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(SALES_TYPE, Optional.ofNullable(searchableContext.getSales())
                .map(SalesType::getSearchableType)
                .orElse(SalesType.ALL)
                .getSearchableType());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(FRAY, Optional.ofNullable(searchableContext.getHasFray()).filter(x -> x).orElse(null));
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getAdditionIds());
        params.put(LATITUDE, searchableContext.getGeoPosition().getLatitude());
        params.put(LONGITUDE, searchableContext.getGeoPosition().getLongitude());
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_HOSPITAL, "searchByDistance", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<HospitalDocument> searchHospitalsByName(HospitalNameSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(QUERY, searchableContext.getQuery());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);

        Stream.of(NAME_KO, NAME_EN, NAME_ZH, NAME_JA)
                .forEach(x -> params.put(x, null));
        if (searchableContext.isExactly()) {
            params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                    List.of(LocaleKoText.of(NAME_KO),
                            LocaleEnText.of(NAME_EN),
                            LocaleZhText.of(NAME_ZH),
                            LocaleJaText.of(NAME_JA))), searchableContext.getQuery());
        }

        String query = queryTemplate.build(QUERY_NAMESPACE_HOSPITAL, "searchByName", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<HospitalDocument> searchHospitals(FrayHospitalSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(FRAY, true);
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_HOSPITAL, "searchFrayHospitals", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<TreatmentReviewDocument> searchTreatmentReviewsByLatest(
            TreatmentReviewSearchableContext searchableContext) {
        List<Long> hospitalIds = DiagnosticContext.fetchLocale() == Locale.KOREAN
                ? null
                : hospitalAsBadgeRepository.findAllByBadgeType(BadgeType.KAHF_CERTIFICATE)
                        .stream()
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toList());

        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(INCLUDE_PHOTO, searchableContext.getReview() == TreatmentReviewType.PHOTO);
        params.put(AGES, searchableContext.getAges());
        params.put(SKIN_TYPES, searchableContext.getSkinTypes());
        params.put(SEXES, searchableContext.getSexes());
        params.put(SALES_EVENT_ID, searchableContext.getSalesEventId().orElse(null));
        params.put(HOSPITAL_ID, searchableContext.getHospitalId().orElse(null));
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TROUBLE_CATEGORIES, searchableContext.getTroubles());
        params.put(HOSPITAL_IDS, hospitalIds);
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, getQueryMinimumShouldMatchCount(searchableContext.getQuery()));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_TREATMENT_REVIEW, "searchByLatest", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<TreatmentReviewDocument> response = searchTemplate.searchTreatmentReview(query);

        return SearchResult.of(Query.PAGE_DEFAULT_SIZE, response);
    }

    public SearchResult<TreatmentReviewDocument> searchTreatmentReviewsByRecommend(
            TreatmentReviewSearchableContext searchableContext) {
        List<Long> hospitalIds = DiagnosticContext.fetchLocale() == Locale.KOREAN
                ? null
                : hospitalAsBadgeRepository.findAllByBadgeType(BadgeType.KAHF_CERTIFICATE)
                        .stream()
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toList());

        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(INCLUDE_PHOTO, searchableContext.getReview() == TreatmentReviewType.PHOTO);
        params.put(AGES, searchableContext.getAges());
        params.put(SKIN_TYPES, searchableContext.getSkinTypes());
        params.put(SEXES, searchableContext.getSexes());
        params.put(SALES_EVENT_ID, searchableContext.getSalesEventId().orElse(null));
        params.put(HOSPITAL_ID, searchableContext.getHospitalId().orElse(null));
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TROUBLE_CATEGORIES, searchableContext.getTroubles());
        params.put(HOSPITAL_IDS, hospitalIds);
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, getQueryMinimumShouldMatchCount(searchableContext.getQuery()));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        Optional<String> template = queryTemplate.build(QUERY_NAMESPACE_TREATMENT_REVIEW, "searchByRecommend", params);

        String query = template.orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<TreatmentReviewDocument> response = searchTemplate.searchTreatmentReview(query);

        return SearchResult.of(Query.PAGE_DEFAULT_SIZE, response);
    }

    public SearchResult<TreatmentReviewDocument> searchTreatmentReviewsByInterest(
            TreatmentReviewSearchableContext searchableContext) {
        List<Long> hospitalIds = DiagnosticContext.fetchLocale() == Locale.KOREAN
                ? null
                : hospitalAsBadgeRepository.findAllByBadgeType(BadgeType.KAHF_CERTIFICATE)
                        .stream()
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toList());

        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(INCLUDE_PHOTO, searchableContext.getReview() == TreatmentReviewType.PHOTO);
        params.put(AGES, searchableContext.getAges());
        params.put(SKIN_TYPES, searchableContext.getSkinTypes());
        params.put(SEXES, searchableContext.getSexes());
        params.put(SALES_EVENT_ID, searchableContext.getSalesEventId().orElse(null));
        params.put(HOSPITAL_ID, searchableContext.getHospitalId().orElse(null));
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TROUBLE_CATEGORIES, searchableContext.getTroubles());
        params.put(HOSPITAL_IDS, hospitalIds);
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, getQueryMinimumShouldMatchCount(searchableContext.getQuery()));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_TREATMENT_REVIEW, "searchByInterest", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<TreatmentReviewDocument> response = searchTemplate.searchTreatmentReview(query);

        return SearchResult.of(Query.PAGE_DEFAULT_SIZE, response);
    }

    public SearchResult<TreatmentReviewDocument> searchTreatmentReviewsBySatisfaction(
            TreatmentReviewSearchableContext searchableContext) {
        List<Long> hospitalIds = DiagnosticContext.fetchLocale() == Locale.KOREAN
                ? null
                : hospitalAsBadgeRepository.findAllByBadgeType(BadgeType.KAHF_CERTIFICATE)
                        .stream()
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toList());

        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(STAR_POINT_SORT_ORDER,
                searchableContext.getSort() == SortType.HIGH_SATISFACTION ? SORT_ORDER_DESC : SORT_ORDER_ASC);
        params.put(INCLUDE_PHOTO, searchableContext.getReview() == TreatmentReviewType.PHOTO);
        params.put(AGES, searchableContext.getAges());
        params.put(SKIN_TYPES, searchableContext.getSkinTypes());
        params.put(SEXES, searchableContext.getSexes());
        params.put(SALES_EVENT_ID, searchableContext.getSalesEventId().orElse(null));
        params.put(HOSPITAL_ID, searchableContext.getHospitalId().orElse(null));
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TROUBLE_CATEGORIES, searchableContext.getTroubles());
        params.put(HOSPITAL_IDS, hospitalIds);
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, getQueryMinimumShouldMatchCount(searchableContext.getQuery()));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_TREATMENT_REVIEW, "searchBySatisfaction", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<TreatmentReviewDocument> response = searchTemplate.searchTreatmentReview(query);

        return SearchResult.of(Query.PAGE_DEFAULT_SIZE, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByRecommend(
            SalesEventSearchableContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();

        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(PLACE_SCORE_WEIGHT, searchableContext.weightPlaceScore());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(FALLBACK, searchableContext.getFallback().orElse(false));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));

        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByRecommend", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByPopular(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));

        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByPopular", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByMuchOrders(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByMuchOrders", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByHighPrice(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByHighPrice", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByLowPrice(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByLowPrice", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByDistance(
            SalesEventSearchableContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByDistance", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByLatest(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByLatest", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByRelated(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags^2");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByRelated", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<SalesEventDocument> searchSalesEventsByTreatmentReviewCount(
            SalesEventSearchableContext searchableContext) {
        int size = settingTemplate.searchSalesEventPageSize(Query.PAGE_DEFAULT_SIZE);

        String matchQuery = searchableContext.getQuery();
        List<String> fields = StringUtils.length(matchQuery) == 1 ?
                List.of("name", "place_tags") : List.of("name", "normalize_tags", "place_tags");

        Map<String, Object> params = new HashMap<>();
        Stream.of(ORDER_KO, ORDER_EN, ORDER_ZH, ORDER_JA, CONSULTATION_KO, CONSULTATION_EN, CONSULTATION_ZH, CONSULTATION_JA)
                .forEach(x -> params.put(x, null));
        params.put(SIZE, size);
        params.put(QUERY, matchQuery);
        params.put(FIELDS, fields);
        params.put(QUERY_OPERATOR, QUERY_OPERATOR_AND);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, 0);
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(PLACES, searchableContext.getSearchablePlaces());
        params.put(TROUBLE_IDS, searchableContext.getTroubleIds());
        params.put(TROUBLE_BODY_PART_IDS, searchableContext.getTroubleBodyPartIds());
        params.put(HOSPITAL_ADDITION_IDS, searchableContext.getHospitalAdditionIds());
        params.put(TREATMENT_IDS, searchableContext.getTreatmentIds());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_SALES_EVENT, "searchByTreatmentReviewCount", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(size, response);
    }

    public SearchResult<HospitalDocument> searchExplorerHospitalsByDistance(
            ExplorerHospitalSearchableRadiusContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();

        String distanceUnit = searchableContext.getDistanceUnit().lowerCase();
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(DISTANCE, searchableContext.getDistance() + distanceUnit);
        params.put(DISTANCE_UNIT, distanceUnit);
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_EXPLORER, "searchHospitalsByDistance", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<HospitalDocument> searchExplorerHospitalsByRecommend(
            ExplorerHospitalSearchableRadiusContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();

        String distanceUnit = searchableContext.getDistanceUnit().lowerCase();
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(DISTANCE, searchableContext.getDistance() + distanceUnit);
        params.put(DISTANCE_UNIT, distanceUnit);
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_EXPLORER, "searchHospitalsByRecommend", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<HospitalDocument> searchExplorerHospitalsByLatest(
            ExplorerHospitalSearchableRadiusContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();

        String distanceUnit = searchableContext.getDistanceUnit().lowerCase();

        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(DISTANCE, searchableContext.getDistance() + distanceUnit);
        params.put(DISTANCE_UNIT, distanceUnit);
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_EXPLORER, "searchHospitalsByLatest", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalDocument> response = searchTemplate.searchHospital(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<HospitalLocationDocument> searchMapHospitalsByDistance(
            MapHospitalClusterContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();

        String distanceUnit = searchableContext.getDistanceUnit().lowerCase();

        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(DISTANCE, searchableContext.getRadius().getSearchRadiusKm() + distanceUnit);
        params.put(DISTANCE_UNIT, distanceUnit);
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, getQueryMinimumShouldMatchCount(searchableContext.getQuery()));
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(SALES_TYPE, searchableContext.getSales().getSearchableType());
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(ORDER_KO),
                        LocaleEnText.of(ORDER_EN),
                        LocaleZhText.of(ORDER_ZH),
                        LocaleJaText.of(ORDER_JA))), searchableContext.getOrder().map(YN::of).orElse(null));
        params.put(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                List.of(LocaleKoText.of(CONSULTATION_KO),
                        LocaleEnText.of(CONSULTATION_EN),
                        LocaleZhText.of(CONSULTATION_ZH),
                        LocaleJaText.of(CONSULTATION_JA))), searchableContext.getConsultation().map(YN::of).orElse(null));
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_MAP, "searchHospitalsByDistance", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<HospitalLocationDocument> response = searchTemplate.searchHospitalLocation(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    public SearchResult<SalesEventDocument> searchMapRadiusSalesEvents(
            MapRadiusSalesEventSearchableContext searchableContext) {
        GeoPosition geoPosition = searchableContext.getGeoPosition();

        String distanceUnit = searchableContext.getDistanceUnit().lowerCase();
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(DISTANCE, searchableContext.getRadius().getSearchRadiusKm() + distanceUnit);
        params.put(DISTANCE_UNIT, distanceUnit);
        params.put(QUERY, searchableContext.getQuery());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(QUERY_MINIMUM_SHOULD_MATCH, getQueryMinimumShouldMatchCount(searchableContext.getQuery()));
        params.put(RESERVATION_TYPE, searchableContext.getReservation().getSearchableType());
        params.put(LATITUDE, geoPosition.getLatitude());
        params.put(LONGITUDE, geoPosition.getLongitude());
        params.put(TERMS, searchableContext.getExcludeSalesEventIds()
                /*
                    {
                        "term" : {
                            "_id" : "{x}"
                        }
                    }
                */
                .stream()
                .map(x -> JsonUtils.toJsonString(
                        Collections.singletonMap("term",
                                Collections.singletonMap("_id", String.valueOf(x)))))
                .collect(Collectors.toList()));
        params.put(TEST, applicationProps.getSearch().isIncludeTest());
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_MAP, "searchRadiusSalesEventsByRecommend", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }


    public SearchResult<SalesEventDocument> searchMapHospitalSalesEvents(
            MapHospitalSalesEventSearchableContext searchableContext) {
        Map<String, Object> params = new HashMap<>();
        params.put(SIZE, searchableContext.getSize());
        params.put(QUERY, searchableContext.getQuery());
        params.put(HOSPITAL_ID, searchableContext.getHospitalId());
        params.put(QUERY_OPERATOR, DEFAULT_QUERY_OPERATOR);
        params.put(QUERY_MATCH_TYPE, DEFAULT_QUERY_MATCH_TYPE);
        params.put(KAHF, DiagnosticContext.recommendScope() == RecommendScope.PRIVATE);
        params.put(SEARCH_AFTER, searchableContext.getSearchAfter());

        String query = queryTemplate.build(QUERY_NAMESPACE_MAP, "searchHospitalSalesEventsByRecommend", params)
                .orElseThrow(() -> new SearchException(CommonCode.ERROR));

        log.debug("{}", query);

        SearchResponse<SalesEventDocument> response = searchTemplate.searchSalesEvent(query);

        return SearchResult.of(searchableContext.getSize(), response);
    }

    private int getQueryMinimumShouldMatchCount(String query) {
        String[] tokens = StringUtils.split(query, StringUtils.SPACE);
        if (ArrayUtils.getLength(tokens) == 1) {
            return 1;
        } else {
            return DEFAULT_QUERY_MINIMUM_SHOULD_MATCH_COUNT;
        }
    }
}




================================================
File: backend/src/main/java/kr/co/yeoshin/backend/search/usecase/SearchUseCase.java
================================================
package kr.co.yeoshin.backend.search.usecase;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Recommend;
import kr.co.yeoshin.backend.common.Constant.Search;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.payload.SearchKeywordsPayload;
import kr.co.yeoshin.backend.payload.SearchKeywordsRankingPayload;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.common.dictionary.entity.RecommendRankingKeyword;
import kr.co.yeoshin.common.member.entity.MemberSearchKeyword;
import kr.co.yeoshin.common.utils.ListUtils;
import kr.co.yeoshin.common.utils.ProbabilityUtils;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;

@AllArgsConstructor
@UseCase
public class SearchUseCase {

    private final SearchService searchService;
    private final RecommendService recommendService;
    private final PayloadFactory payloadFactory;
    private final TransactionTemplate transactionTemplate;

    public SearchKeywordsRankingPayload searchWordRankings() {
        List<RecommendRankingKeyword> rankingKeywords = recommendService.findRecommendRankingKeywords()
                .stream()
                .filter(RecommendRankingKeyword::isActivated)
                .sorted(Comparator.comparing(RecommendRankingKeyword::getPriority))
                .limit(Recommend.SEARCH_WORD_RANKING_COUNT)
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(rankingKeywords)) {
            return SearchKeywordsRankingPayload.empty();
        }

        return SearchKeywordsRankingPayload.builder()
                .keywords(payloadFactory.rankingTemplates(rankingKeywords))
                .build();
    }

    public SearchKeywordsPayload recentKeywords() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberSearchKeyword> keywords = searchService.findSearchKeywordsByMemberId(memberId);
        if (CollectionUtils.isEmpty(keywords)) {
            return SearchKeywordsPayload.empty();
        }

        keywords.sort(Comparator.comparing(MemberSearchKeyword::getSearchAt).reversed());

        List<MemberSearchKeyword> recentKeywords = ListUtils.subList(keywords, Search.MAX_RECENT_SEARCH_KEYWORD_COUNT);
        List<MemberSearchKeyword> oldKeywords = ListUtils.subList(
                keywords, Search.MAX_RECENT_SEARCH_KEYWORD_COUNT, CollectionUtils.size(keywords));

        int PROBABILITY_CLEAR_OLD_SEARCH_KEYWORDS = 80;
        if (CollectionUtils.isNotEmpty(oldKeywords)) {
            ProbabilityUtils.execute(() -> transactionTemplate.executeMainWritableTransaction(() ->
                    searchService.removeSearchKeywords(oldKeywords)
            ), PROBABILITY_CLEAR_OLD_SEARCH_KEYWORDS);
        }

        return SearchKeywordsPayload.builder()
                .keywords(recentKeywords.stream()
                        .map(payloadFactory::textTemplate)
                        .collect(Collectors.toList()))
                .build();

    }

    public BoolPayload removeRecentKeywords(List<Long> ids) {
        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() ->
                        searchService.removeSearchKeywords(ids, memberId)
                )).build();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/setting/component/SettingTemplate.java
================================================
package kr.co.yeoshin.backend.setting.component;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Cpm;
import kr.co.yeoshin.backend.queue.model.cpm.CpmEventType;
import kr.co.yeoshin.backend.recommend.service.model.RecommendTakePolicy;
import kr.co.yeoshin.backend.setting.service.SettingService;
import kr.co.yeoshin.common.type.DeviceType;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.verify.type.VerificationType;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.EnumUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.stereotype.Component;

@AllArgsConstructor
@Component
public class SettingTemplate {

    private final SettingService settingService;

    public int clientViewRefreshHomeIntervalInSeconds(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "client.view.refresh.interval_in_seconds.home",
                defaultValue);
    }

    public int clientViewRefreshHomeIntervalInSeconds(DeviceType devicePlatform, int defaultValue) {
        if (devicePlatform == null) {
            return clientViewRefreshHomeIntervalInSeconds(defaultValue);
        }

        List<String> settingKeys = List.of(
                MessageUtils.format("client.{}.view.refresh.interval_in_seconds.home",
                        StringUtils.lowerCase(devicePlatform.name())),
                MessageUtils.format("client.{}.view.refresh.interval_in_seconds.home", devicePlatform.name())
        );

        for (String key : settingKeys) {
            int seconds = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (seconds > 0) {
                return seconds;
            }
        }

        return clientViewRefreshHomeIntervalInSeconds(defaultValue);
    }

    public int clientViewRefreshSearchIntervalInSeconds(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "client.view.refresh.interval_in_seconds.search",
                defaultValue);
    }

    public int clientViewRefreshSearchIntervalInSeconds(DeviceType devicePlatform, int defaultValue) {
        if (devicePlatform == null) {
            return clientViewRefreshSearchIntervalInSeconds(defaultValue);
        }

        List<String> settingKeys = List.of(
                MessageUtils.format("client.{}.view.refresh.interval_in_seconds.search",
                        StringUtils.lowerCase(devicePlatform.name())),
                MessageUtils.format("client.{}.view.refresh.interval_in_seconds.search", devicePlatform.name())
        );

        for (String key : settingKeys) {
            int seconds = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (seconds > 0) {
                return seconds;
            }
        }

        return clientViewRefreshSearchIntervalInSeconds(defaultValue);
    }

    public int clientViewRefreshExplorerIntervalInSeconds(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "client.view.refresh.interval_in_seconds.explorer",
                defaultValue);
    }

    public int clientViewRefreshExplorerIntervalInSeconds(DeviceType devicePlatform, int defaultValue) {
        if (devicePlatform == null) {
            return clientViewRefreshExplorerIntervalInSeconds(defaultValue);
        }

        List<String> settingKeys = List.of(
                MessageUtils.format("client.{}.view.refresh.interval_in_seconds.explorer",
                        StringUtils.lowerCase(devicePlatform.name())),
                MessageUtils.format("client.{}.view.refresh.interval_in_seconds.explorer", devicePlatform.name())
        );

        for (String key : settingKeys) {
            int seconds = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (seconds > 0) {
                return seconds;
            }
        }

        return clientViewRefreshExplorerIntervalInSeconds(defaultValue);
    }

    public boolean applicationFirebaseAppCheckActive(boolean defaultValue) {
        return MapUtils.getBoolean(
                settingService.findSettings(),
                "application.firebase_app_check.active",
                defaultValue);
    }

    public LocalTime applicationMoneyReceiptIdentifierDisableAfter(LocalTime defaultAt) {
        String at = MapUtils.getString(
                settingService.findSettings(),
                "application.money_receipt_identifier_disable.after");
        if (StringUtils.isBlank(at)) {
            return defaultAt;
        }

        try {
            return LocalTime.parse(at, DateTimeFormatter.ofPattern("HH:mm:ss"));
        } catch (Exception e) {
            return defaultAt;
        }
    }

    public List<String> applicationVerificationCaptchaAllowCountryCallingCodes(VerificationType type) {
        List<String> settingKeys = List.of(
                MessageUtils.format(
                        "application.verification.{}.captcha.allow.country_calling_codes",
                        StringUtils.lowerCase(type.name())),
                MessageUtils.format(
                        "application.verification.{}.captcha.allow.country_calling_codes",
                        StringUtils.upperCase(type.name()))
        );

        for (String key : settingKeys) {
            String countryCallingCodes = MapUtils.getString(
                    settingService.findSettings(),
                    key,
                    StringUtils.EMPTY);
            if (StringUtils.isBlank(countryCallingCodes)) {
                continue;
            }

            return Arrays.stream(StringUtils.split(countryCallingCodes, ","))
                    .collect(Collectors.toList());
        }

        return Collections.emptyList();
    }

    @Deprecated
    public List<String> applicationVerificationReCaptchaAllowCountryCallingCodes(VerificationType type) {
        List<String> settingKeys = List.of(
                MessageUtils.format(
                        "application.verification.{}.re_captcha.allow.country_calling_codes",
                        StringUtils.lowerCase(type.name())),
                MessageUtils.format(
                        "application.verification.{}.re_captcha.allow.country_calling_codes",
                        StringUtils.upperCase(type.name()))
        );

        for (String key : settingKeys) {
            String countryCallingCodes = MapUtils.getString(
                    settingService.findSettings(),
                    key,
                    StringUtils.EMPTY);
            if (StringUtils.isBlank(countryCallingCodes)) {
                continue;
            }

            return Arrays.stream(StringUtils.split(countryCallingCodes, ","))
                    .collect(Collectors.toList());
        }

        return Collections.emptyList();
    }

    public int recommendSalesEventsByTroubles(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_trouble.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByLocation(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_location.take.count",
                defaultValue);
    }

    public List<Long> recommendSalesEventFixHospitalIdsByLocation() {
        String hospitalIds = MapUtils.getString(
                settingService.findSettings(),
                "recommend.sales_event_by_location.fixed.hospital_ids",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(hospitalIds)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(hospitalIds, ","))
                .map(x -> NumberUtils.toLong(x, -1))
                .filter(x -> x > 0)
                .collect(Collectors.toList());
    }

    public List<Long> recommendSalesEventExcludeTreatmentIdsByLocation() {
        String treatmentIds = MapUtils.getString(
                settingService.findSettings(),
                "recommend.sales_event_by_location.exclude.treatment_ids",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(treatmentIds)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(treatmentIds, ","))
                .map(x -> NumberUtils.toLong(x, -1))
                .filter(x -> x > 0)
                .collect(Collectors.toList());
    }

    public List<Long> recommendSalesEventExcludeSalesEventIdsByLocation() {
        String salesEventIds = MapUtils.getString(
                settingService.findSettings(),
                "recommend.sales_event_by_location.exclude.sales_event_ids",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(salesEventIds)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(salesEventIds, ","))
                .map(x -> NumberUtils.toLong(x, -1))
                .filter(x -> x > 0)
                .collect(Collectors.toList());
    }

    public int recommendSalesEventTakeCountByLocation(long hospitalId, int defaultValue) {
        String key = MessageUtils.format("recommend.sales_event_by_location.hospital_id.{}.take.count", hospitalId);

        return MapUtils.getInteger(
                settingService.findSettings(),
                key,
                defaultValue);
    }

    public int recommendSalesEventGroupTakeCountByLocation(String group, int defaultValue) {
        List<String> settingKeys = List.of(
                MessageUtils.format("recommend.sales_event_by_location.group.{}.take.count", StringUtils.lowerCase(group)),
                MessageUtils.format("recommend.sales_event_by_location.group.{}.take.count", StringUtils.upperCase(group))
        );

        for (String key : settingKeys) {
            int count = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (count > 0) {
                return count;
            }
        }

        return defaultValue;
    }


    public int recommendSalesEventCpmClickCountPercentageByLocation() {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_location.cpm.click_count.percentage",
                0);
    }

    public int recommendSalesEventCpmClickCountBucketCountByLocation() {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_location.cpm.click_count.bucket_count",
                10);
    }

    public int recommendSalesEventCpmScoreBucketCountByLocation() {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_location.cpm.cpm_score.bucket_count",
                10);
    }

    public RecommendTakePolicy recommendSalesEventTakePolicyByLocation() {
        return EnumUtils.getEnum(RecommendTakePolicy.class, MapUtils.getString(
                        settingService.findSettings(),
                        "recommend.sales_event_by_location.cpm.take.policy",
                        RecommendTakePolicy.RANDOM.name()),
                RecommendTakePolicy.RANDOM);
    }

    public int recommendSalesEventCpmExtraBucketCountByLocation() {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_location.cpm.extra.bucket_count",
                0);
    }


    public int recommendSalesEventCpmExtraTakeCountByLocation() {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_location.cpm.extra.take.count",
                1);
    }


    public int recommendSalesEventTakeCountByPopularity(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_popularity.take.count",
                defaultValue);
    }

    public List<Long> recommendSalesEventFixHospitalIdsByPopularity() {
        String hospitalIds = MapUtils.getString(
                settingService.findSettings(),
                "recommend.sales_event_by_popularity.fixed.hospital_ids",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(hospitalIds)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(hospitalIds, ","))
                .map(x -> NumberUtils.toLong(x, -1))
                .filter(x -> x > 0)
                .collect(Collectors.toList());
    }

    public int recommendSalesEventBucketCountByPopularity(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_popularity.bucket.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByExclusive(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_exclusive.take.count",
                defaultValue);
    }

    public int recommendSalesEventsByRecentViews(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_recent_view.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByHospital(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_hospital.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByTheme(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_theme.take.count",
                defaultValue);
    }

    public int recommendTreatmentFocusSalesEventTakeCountByTvs(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.treatment_focus_sales_event_by_tv.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByTreatmentCounseling(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_treatment_counseling.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByTv(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_tv.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountBySalesEvent(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_sales_event.take.count",
                defaultValue);
    }


    public int recommendSynergySalesEventTakeCountBySalesEvent(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.synergy_sales_event_by_sales_event.take.count",
                defaultValue);
    }

    public int recommendHospitalTakeCountByPlaces(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.hospital_by_places.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByHospitalCoupon(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_hospital_coupon.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByHospitalFocus(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_hospital_focus.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByLowPrice(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_low_price.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByLatest(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_latest.take.count",
                defaultValue);
    }

    public int recommendSalesEventTakeCountByConsultationSalesEvent(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "recommend.sales_event_by_consultation_sales_event.take.count",
                defaultValue);
    }

    public boolean notificationActive(boolean defaultValue) {
        return MapUtils.getBoolean(
                settingService.findSettings(),
                "notification.active",
                defaultValue);
    }

    public int cpmFreeViewIntervalSeconds(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "cpm.free_view.interval.seconds",
                defaultValue);
    }

    public int cpmEventUnitPrice(CpmEventType cpmEventType, int defaultValue) {
        List<String> settingKeys = List.of(
                MessageUtils.format("cpm.event.{}.unit_price", StringUtils.lowerCase(cpmEventType.name())),
                MessageUtils.format("cpm.event.{}.unit_price", cpmEventType.name())
        );

        for (String key : settingKeys) {
            int unitPrice = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (unitPrice > 0) {
                return unitPrice;
            }
        }

        return defaultValue;
    }

    public int cpmEventFreeViewIntervalFixSeconds(CpmEventType cpmEventType, int defaultValue) {
        List<String> settingKeys = List.of(
                MessageUtils.format("cpm.event.{}.free_view.interval.seconds", StringUtils.lowerCase(cpmEventType.name())),
                MessageUtils.format("cpm.event.{}.free_view.interval.seconds", cpmEventType.name())
        );

        for (String key : settingKeys) {
            int second = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (second > 0) {
                return second;
            }
        }

        return defaultValue;
    }


    public List<String> searchSalesEventFreeViewQueries() {
        String queries = MapUtils.getString(
                settingService.findSettings(),
                "search.sales_event.free_view.query",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(queries)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(queries, ","))
                .filter(StringUtils::isNotBlank)
                .collect(Collectors.toList());
    }

    public int searchSalesEventPageSize(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "search.sales_event.page.size",
                defaultValue);
    }

    public int searchSalesEventRuleHospitalDownThreshold(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "search.sales_event.rule.hospital_down.threshold",
                defaultValue);
    }

    public int searchSalesEventRuleHospitalDownOffset(int defaultValue) {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "search.sales_event.rule.hospital_down.offset",
                defaultValue);
    }

    public List<Long> searchSalesEventRuleHospitalDownHospitalIds() {
        String hospitalIds = MapUtils.getString(
                settingService.findSettings(),
                "search.sales_event.rule.hospital_down.hospital_ids",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(hospitalIds)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(hospitalIds, ","))
                .map(x -> NumberUtils.toLong(x, -1))
                .filter(x -> x > 0)
                .collect(Collectors.toList());
    }

    public String notificationBlackList() {
        return MapUtils.getString(
                settingService.findSettings(),
                "notification.blacklist.recipients",
                StringUtils.EMPTY);
    }

    public String notificationDisableIds() {
        return MapUtils.getString(
                settingService.findSettings(),
                "notification.disable.ids",
                StringUtils.EMPTY);
    }

    public int cpmPaidPercentage(CpmEventType cpmEventType, int defaultValue) {
        List<String> settingKeys = List.of(
                MessageUtils.format("cpm.event.{}.paid.percentage", StringUtils.lowerCase(cpmEventType.name())),
                MessageUtils.format("cpm.event.{}.paid.percentage", cpmEventType.name())
        );
        for (String key : settingKeys) {
            int percentage = MapUtils.getInteger(
                    settingService.findSettings(),
                    key,
                    -1);
            if (Cpm.CPM_FREE_PERCENTAGE <= percentage && percentage <= Cpm.CPM_PAID_PERCENTAGE) {
                return percentage;
            }
        }

        return defaultValue;
    }

    public int cpmFixBudgetWeightPercentage() {
        return MapUtils.getInteger(
                settingService.findSettings(),
                "cpm.fixed.paid.weight.percentage",
                0);
    }

    public int cpmHourFixPaidPercentage(int hour, int defaultValue) {
        String settingKey = MessageUtils.format("cpm.hour.{}.fixed.paid.percentage", hour);

        return MapUtils.getInteger(
                settingService.findSettings(),
                settingKey,
                defaultValue);
    }


    public List<Long> cpmFreeViewSalesEventIds() {
        String salesEventIds = MapUtils.getString(
                settingService.findSettings(),
                "cpm.free_view.sales_event_ids",
                StringUtils.EMPTY);

        if (StringUtils.isBlank(salesEventIds)) {
            return Collections.emptyList();
        }

        return Arrays.stream(StringUtils.split(salesEventIds, ","))
                .map(x -> NumberUtils.toLong(x, -1))
                .filter(x -> x > 0)
                .collect(Collectors.toList());
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/setup/usecase/SetupUseCase.java
================================================
package kr.co.yeoshin.backend.setup.usecase;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant.Client;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.context.Header;
import kr.co.yeoshin.backend.exception.SetupException;
import kr.co.yeoshin.backend.payload.InitializationPayload;
import kr.co.yeoshin.backend.payload.template.AppConfigTemplate;
import kr.co.yeoshin.backend.payload.template.CardTemplate;
import kr.co.yeoshin.backend.setting.component.SettingTemplate;
import kr.co.yeoshin.backend.setup.controller.model.DeviceExtPackageRequest;
import kr.co.yeoshin.backend.setup.controller.model.DeviceRequest;
import kr.co.yeoshin.backend.setup.model.*;
import kr.co.yeoshin.backend.setup.service.*;
import kr.co.yeoshin.common.type.YN;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class SetupUseCase {

    private final AppVersionService appVersionService;
    private final AppInitNoticeService noticeService;
    private final SplashService splashService;
    private final DeviceTokenService deviceTokenService;
    private final DevicePackageService devicePackageService;
    private final PayloadFactory payloadFactory;
    private final SettingTemplate settingTemplate;
    private final TransactionTemplate transactionTemplate;

    public InitializationPayload appInitUseCase(Header header) {
        // 강제업데이트여부, 웹뷰 URL 가져오기 기본적으로 데이터가 없어도 앱은 열려야 하므로 기본값 설정
        AppVersionResult appVersionResult = appVersionService.findAppVersion(header.devicePlatform(), header.clientVersion());

        // 스플래시 데이터 가져오기
        LocalDateTime nowAt = LocalDateTime.now();
        SplashResult splash = splashService.findByInPeriod(YN.Y, nowAt, nowAt);

        // 공지사항 기본값은 앱진입 가능 (공지사항 데이터가 없더라도 앱은 켜져야되니까)
        List<AppInitNoticeResult> initNoticeResults = noticeService.createAppInitNoticeResult();

        boolean appLoad = noticeService.isAppLoad(initNoticeResults);

        return InitializationPayload.builder()
                .appLoad(appLoad)
                .appConfig(AppConfigTemplate.builder()
                        .view(View.builder()
                                .refreshHomeIntervalInSeconds(settingTemplate.clientViewRefreshHomeIntervalInSeconds(
                                        header.devicePlatform(), Client.VIEW_REFRESH_INTERVAL_IN_SECONDS))
                                .refreshExplorerIntervalInSeconds(settingTemplate.clientViewRefreshExplorerIntervalInSeconds(
                                        header.devicePlatform(), Client.VIEW_REFRESH_INTERVAL_IN_SECONDS))
                                .refreshSearchIntervalInSeconds(settingTemplate.clientViewRefreshSearchIntervalInSeconds(
                                        header.devicePlatform(), Client.VIEW_REFRESH_INTERVAL_IN_SECONDS))
                                .build())
                        .build())
                .appVersion(payloadFactory.appVersionTemplate(appVersionResult))
                .splash(payloadFactory.splashTemplateByPublic(splash))
                .notices(initNoticeResults.stream().map(x -> CardTemplate.builder()
                                .title(x.getTitle())
                                .body(x.getContent())
                                .build())
                        .collect(Collectors.toList()))
                .build();
    }

    public BoolPayload device(Header header, DeviceRequest deviceRequest) {
        final int MAX_VALID_DEVICE_TOKEN_COUNT = 5;

        long memberId = DiagnosticContext.fetchMemberId();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(() -> {
                    if (!deviceTokenService.upsertDeviceToken(
                            memberId,
                            DeviceTokenContext.builder()
                                    .pushToken(StringUtils.getIfBlank(deviceRequest.getPushToken(), () -> StringUtils.EMPTY))
                                    .clientId(header.clientId())
                                    .deviceType(header.devicePlatform())
                                    .appsflyerId(deviceRequest.getAppsflyerId())
                                    .idfv(deviceRequest.getIdfv())
                                    .build()

                    )) {
                        throw new SetupException(CommonCode.ERROR);
                    }

                    return deviceTokenService.removeExcessDeviceToken(memberId, MAX_VALID_DEVICE_TOKEN_COUNT);

                })).build();
    }

    public BoolPayload deviceExtPackages(DeviceExtPackageRequest deviceExtPackageRequest) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);
        if (memberId <= 0) {
            return BoolPayload.success();
        }

        Header header = DiagnosticContext.header();
        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> devicePackageService.registerExtPackages(
                                memberId,
                                header.devicePlatform(),
                                header.clientId(),
                                deviceExtPackageRequest.getPackages())))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/share/usecase/ShareUseCase.java
================================================
package kr.co.yeoshin.backend.share.usecase;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.backend.board.service.PromotionService;
import kr.co.yeoshin.backend.common.Constant.Auth;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.ShareException;
import kr.co.yeoshin.backend.face.service.FaceAnalysisService;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.payload.ShareCodePayload;
import kr.co.yeoshin.backend.payload.ShareUrlPayload;
import kr.co.yeoshin.backend.review.service.TreatmentReviewService;
import kr.co.yeoshin.backend.salesevent.model.Ref;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.share.service.ShareService;
import kr.co.yeoshin.backend.share.service.model.ShareContext;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.common.board.entity.Promotion;
import kr.co.yeoshin.common.face.entity.FaceAnalysisReport;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctor;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.share.entity.ShareUrlWhitelist;
import kr.co.yeoshin.common.share.type.ShareDomainType;
import kr.co.yeoshin.common.tv.entity.Tv;
import kr.co.yeoshin.common.type.Language;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class ShareUseCase {

    private final ShareService shareService;
    private final TreatmentReviewService treatmentReviewService;
    private final SalesEventService salesEventService;
    private final HospitalService hospitalService;
    private final TvService tvService;
    private final PromotionService promotionService;
    private final FaceAnalysisService faceAnalysisService;
    private final PayloadFactory payloadFactory;

    public ShareUrlPayload shareTreatmentReview(long treatmentReviewId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        TreatmentReview treatmentReview = treatmentReviewService.findTreatmentReviewByTreatmentReviewId(treatmentReviewId)
                .orElseThrow(() -> {
                    log.debug("share treatment-review({}) is not exist", treatmentReviewId);
                    return new ShareException(CommonCode.ERROR);
                });

        ShareContext shareContext = shareService.registerShare(memberId, ShareDomainType.TREATMENT_REVIEW,
                treatmentReview.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .treatmentReview(payloadFactory.treatmentReviewShortTemplate(treatmentReview, Collections.emptyList()))
                .build();
    }

    public ShareUrlPayload shareSalesEvent(long salesEventId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        SalesEventContainer salesEventContainer = salesEventService.fetchSalesEventContainer(
                salesEventId, Language.findByCode(DiagnosticContext.fetchLocale().getLanguage()).orElse(Language.KOREAN));

        ShareContext shareContext = shareService.registerShare(
                memberId, ShareDomainType.SALES_EVENT, salesEventContainer.getSalesEvent().getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .salesEvent(payloadFactory.salesEventTemplate(salesEventContainer, Ref.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesEventContainer.fetchSalesProducts()))
                .build();
    }


    public ShareUrlPayload shareHospitalDoctor(long hospitalDoctorId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        HospitalDoctor hospitalDoctor = hospitalService.findHospitalDoctorByHospitalDoctorId(hospitalDoctorId)
                .orElseThrow(() -> {
                    log.debug("share hospital doctor({}) is not exist", hospitalDoctorId);
                    return new ShareException(CommonCode.ERROR);
                });

        ShareContext shareContext = shareService.registerShare(memberId, ShareDomainType.HOSPITAL_DOCTOR, hospitalDoctor.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .hospitalDoctor(payloadFactory.hospitalDoctorTemplate(hospitalDoctor))
                .build();
    }

    public ShareUrlPayload shareHospital(long hospitalId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        Hospital hospital = hospitalService.findHospitalByHospitalId(hospitalId); // TODO refactor hospital exception

        ShareContext shareContext = shareService.registerShare(memberId, ShareDomainType.HOSPITAL, hospital.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .hospital(payloadFactory.hospitalTemplate(hospital))
                .build();
    }

    public ShareUrlPayload shareTv(long tvId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        Tv tv = tvService.findTvByTvId(tvId)
                .orElseThrow(() -> {
                    log.debug("share tv({}) is not exist", tvId);
                    return new ShareException(CommonCode.ERROR);
                });

        ShareContext shareContext = shareService.registerShare(memberId, ShareDomainType.TV, tv.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .tv(payloadFactory.tvTemplate(tv))
                .build();
    }

    public ShareUrlPayload sharePromotion(long promotionId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        Promotion promotion = promotionService.findPromotion(promotionId);

        ShareContext shareContext = shareService.registerShare(memberId, ShareDomainType.PROMOTION, promotion.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .promotion(payloadFactory.promotionTemplate(promotion))
                .build();
    }

    public ShareUrlPayload shareFaceAnalyse(long faceAnalyseId) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        FaceAnalysisReport faceAnalysisReport = faceAnalysisService.findFaceAnalysisReport(faceAnalyseId);

        ShareContext shareContext = shareService.registerShare(
                memberId, ShareDomainType.FACE_ANALYSIS, faceAnalysisReport.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .faceAnalysisReport(payloadFactory.faceAnalysisReportTemplate(
                        faceAnalysisReport, Optional.empty(), Collections.emptyList()))
                .build();
    }

    public ShareUrlPayload shareExternals(String referer) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        ShareUrlWhitelist urlWhitelist = shareService.findSharableExternalUrl(referer)
                .orElseThrow(() -> new ShareException(CommonCode.ERROR));

        ShareContext shareContext = shareService.registerShare(memberId, ShareDomainType.EXTERNAL_URL, urlWhitelist.getId());

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .build();
    }


    public ShareUrlPayload shareContexts(Map<String, Object> contexts) {
        long memberId = DiagnosticContext.ifVirtualMemberOrElse(() -> -1L, (id) -> id);

        ShareContext shareContext = shareService.registerShareContext(memberId, contexts);

        return ShareUrlPayload.builder()
                .url(payloadFactory.urlTemplate(shareContext.getUrl()))
                .build();
    }


    public ShareCodePayload code(String code) {
        if (StringUtils.isBlank(code)) {
            throw new ShareException(CommonCode.ERROR);
        }

        ShareContext shareContext = shareService.findShare(code)
                .orElseThrow(() -> {
                    log.debug("share code({}) is invalid", code);
                    throw new ShareException(CommonCode.ERROR);
                });

        long refId = shareContext.getShare().getRefId();
        ShareDomainType refType = shareContext.getShare().getRefType();
        String language = Optional.ofNullable(shareContext.getShare().getLanguage())
                .orElse(Auth.DEFAULT_LANGUAGE_CODE);

        return ShareCodePayload.builder()
                .id(refId)
                .domain(refType)
                .language(language)
                .promotion(refType == ShareDomainType.PROMOTION
                        ? Optional.ofNullable(promotionService.findPromotion(refId))
                        .map(payloadFactory::promotionTemplate)
                        .orElse(null) : null)
                .contexts(refType == ShareDomainType.CONTEXT
                        ? shareService.findSharableContexts(refId).orElse(null) : null)
                .external(refType == ShareDomainType.EXTERNAL_URL
                        ? shareService.findSharableExternalUrl(refId)
                        .map(x -> payloadFactory.urlTemplate(x.getFullUrl()))
                        .orElse(null) : null)
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/systemcash/usecase/SystemCashUseCase.java
================================================
package kr.co.yeoshin.backend.systemcash.usecase;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.Constant.At;
import kr.co.yeoshin.backend.common.Constant.Template;
import kr.co.yeoshin.backend.common.component.GlobalCacheTemplate;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.component.type.CacheKey;
import kr.co.yeoshin.backend.common.component.type.CacheType.Service;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.SystemCashCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.props.ApplicationProps;
import kr.co.yeoshin.backend.config.props.NicepayProps;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.SystemCashException;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.SystemCashRefundTemplate;
import kr.co.yeoshin.backend.payment.service.RemittanceService;
import kr.co.yeoshin.backend.payment.service.model.RemittanceBalanceContext;
import kr.co.yeoshin.backend.payment.service.model.RemittanceContext;
import kr.co.yeoshin.backend.ratelimit.component.handler.DomainActionLimiter;
import kr.co.yeoshin.backend.ratelimit.component.model.DomainAction;
import kr.co.yeoshin.backend.ratelimit.component.model.DomainActionQuotaEvaluation;
import kr.co.yeoshin.backend.ratelimit.component.model.DomainActionQuotaRule;
import kr.co.yeoshin.backend.systemcash.controller.model.SystemCashRefundAccountRequest;
import kr.co.yeoshin.backend.systemcash.service.SystemCashService;
import kr.co.yeoshin.backend.systemcash.service.model.SystemCashAddContext;
import kr.co.yeoshin.backend.systemcash.service.model.SystemCashUsageReport;
import kr.co.yeoshin.backend.systemcash.service.model.SystemCashVoucherValidationResult;
import kr.co.yeoshin.backend.systemcash.usecase.model.SystemCashPageableContext;
import kr.co.yeoshin.backend.utils.SystemCashUtils;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.payment.entity.*;
import kr.co.yeoshin.common.payment.model.SystemCashComposition;
import kr.co.yeoshin.common.payment.type.*;
import kr.co.yeoshin.common.type.Bank;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.servlet.View;

@Slf4j
@AllArgsConstructor
@UseCase
public class SystemCashUseCase {

    private final ApplicationProps applicationProps;
    private final MemberService memberService;
    private final SystemCashService systemCashService;
    private final RemittanceService remittanceService;
    private final OrderService orderService;
    private final TransactionTemplate transactionTemplate;
    private final GlobalCacheTemplate cacheTemplate;
    private final PayloadFactory payloadFactory;
    private final DomainActionLimiter actionLimiter;
    private final View error;

    public SystemCashPageablePayload list(SystemCashPageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = systemCashService.pageable(pageableContext);
        Page<SystemCash> systemCashes = systemCashService.fetchAllSystemCashesByMemberId(
                memberId,
                pageableContext.getTypes(),
                pageable);

        List<OrderPurchase> orders = orderService.findAllOrders(systemCashes.stream()
                .filter(x -> x.getRefType() == DomainType.ORDER)
                .map(SystemCash::getRefId)
                .collect(Collectors.toList()));

        List<SystemCashRefundStatus> refundStatuses = systemCashService.findAllRefundStatuses(systemCashes.stream()
                .filter(x -> x.getRefType() == DomainType.SYSTEM_CASH_MONEY)
                .map(SystemCash::getRefId)
                .collect(Collectors.toList()));

        String nextToken = systemCashes.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                SystemCashPageableContext.builder()
                        .types(pageableContext.getTypes())
                        .page(systemCashes.getPageable().getPageNumber() + 1)
                        .build());

        return SystemCashPageablePayload.builder()
                .systemCashes(payloadFactory.systemCashTemplates(systemCashes.getContent()))
                .orders(payloadFactory.orderTemplates(orders))
                .systemCashRefundStatuses(payloadFactory.systemCashRefundStatusTemplates(refundStatuses))
                .pageable(payloadFactory.pageableTemplate(systemCashes, nextToken))
                .build();
    }

    public BanksPayload banks() {
        List<Bank> banks = new ArrayList<>();
        banks.add(Bank.KN);
        banks.add(Bank.KWANGJU);
        banks.add(Bank.KB);
        banks.add(Bank.IBK);
        banks.add(Bank.NH);
        banks.add(Bank.DAEGU);
        banks.add(Bank.BUSAN);
        banks.add(Bank.KDB);
        banks.add(Bank.SANGHO);
        banks.add(Bank.SAEMAUL);
        banks.add(Bank.KOREA_EXIM);
        banks.add(Bank.SUHYUP);
        banks.add(Bank.SHINHAN);
        banks.add(Bank.SHINHYUP);
        banks.add(Bank.WOORI);
        banks.add(Bank.POST_BANK);
        banks.add(Bank.JB);
        banks.add(Bank.JEJU);
        banks.add(Bank.KAKAO);
        banks.add(Bank.K_BANK);
        banks.add(Bank.TOSS);
        banks.add(Bank.HANA);
        banks.add(Bank.CITI);
        banks.add(Bank.SC);

        return BanksPayload.builder()
                .banks(payloadFactory.bankTemplates(banks))
                .build();
    }

    public SystemCashBankAccountsPayload refundAccount() {
        long memberId = DiagnosticContext.fetchMemberId();

        return SystemCashBankAccountsPayload.builder()
                .bankAccounts(payloadFactory.bankAccountTemplates(
                        systemCashService.findAllRefundAccounts(memberId)))
                .build();
    }

    public BoolPayload refundAccount(SystemCashRefundAccountRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        MemberServiceSummary summary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        if (!summary.getIdentificationYn().toBoolean()) {
            log.info("member({}) do not complete identification.", memberId);
            throw new SystemCashException(CommonCode.ERROR);
        }

        Member member = summary.getMember();
        if (!StringUtils.equals(request.getAccountHolder(), member.getName())) {
            log.info("system cash refund account member name({}/{}-{}) is not matched.",
                    request.getAccountHolder(), member.getId(), member.getName());
            throw new SystemCashException(CommonCode.ERROR);
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            if (CollectionUtils.isNotEmpty(systemCashService.findAllRefundAccounts(memberId))) {
                log.info("system cash refund account member({}) is duplicated.", member.getId());
                throw new SystemCashException(CommonCode.ERROR);
            }

            return systemCashService.registerRefundAccounts(
                    memberId, request.getBank(), request.getAccountHolder(), request.getAccount());
        });

        return BoolPayload.success();
    }


    public BoolPayload refundAccount(long id, SystemCashRefundAccountRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        MemberServiceSummary summary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
        if (!summary.getIdentificationYn().toBoolean()) {
            log.info("member({}) do not complete identification.", memberId);
            throw new SystemCashException(CommonCode.ERROR);
        }

        Member member = summary.getMember();
        if (!StringUtils.equals(request.getAccountHolder(), member.getName())) {
            log.info("system cash refund account member name({}/{}-{}) is not matched.",
                    request.getAccountHolder(), member.getId(), member.getName());
            throw new SystemCashException(CommonCode.ERROR);
        }

        transactionTemplate.executeMainWritableTransaction(() -> {
            SystemCashRefundAccount refundAccount = systemCashService.findRefundAccounts(id)
                    .orElseThrow(() -> new SystemCashException(CommonCode.ERROR));

            if (refundAccount.getMember().getId() != memberId) {
                throw new SystemCashException(CommonCode.ERROR);
            }

            refundAccount.changeBank(request.getBank());
            refundAccount.changeAccountHolder(request.getAccountHolder());
            refundAccount.changeAccount(request.getAccount());
            refundAccount.changeEncryptAccount(request.getAccount());

            return true;
        });

        return BoolPayload.success();
    }

    public SystemCashRefundablePayload refunds() {
        long memberId = DiagnosticContext.fetchMemberId();

        List<SystemCashSummary> systemCashSummaries = systemCashService.findAllSystemCashSummaries(memberId);

        int refundableSystemCash = SystemCashUtils.getRefundableSystemCash(systemCashSummaries);
        int refundFee = SystemCashUtils.getRefundFee(refundableSystemCash);
        int refundExpectSystemCash = Math.max(0, refundableSystemCash - refundFee);

        return SystemCashRefundablePayload.builder()
                .systemCashRefund(SystemCashRefundTemplate.builder()
                        .id(Template.DEFAULT_ID)
                        .systemCash(systemCashSummaries.stream()
                                .map(SystemCashSummary::getAccumulateCash)
                                .reduce(0, Integer::sum))
                        .refundableSystemCash(refundableSystemCash)
                        .refundFee(refundFee)
                        .refundExpectSystemCash(refundExpectSystemCash)
                        .build())
                .build();
    }

    public SystemCashRefundStatusPayload applyRefund() {
        long memberId = DiagnosticContext.fetchMemberId();

        if (cacheTemplate.increaseValue(new CacheKey(Service.SYSTEM_CASH_REFUND,
                        MessageUtils.format("{}", memberId)),
                30,
                TimeUnit.SECONDS) > 1) {
            log.info("member({}) try to apply refund too many.", memberId);
            throw new SystemCashException(CommonCode.TOO_MANY_REQUESTS);
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            SystemCashRefundStatus systemCashRefundStatus = systemCashService.refundSystemCash(memberId);
            if (!applicationProps.getSystemCash().isActivateRefund()) {
                return SystemCashRefundStatusPayload.builder()
                        .systemCashRefundStatus(payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus))
                        .build();
            }
            if (systemCashRefundStatus.getStatus() == RefundStatus.COMPLETE) {
                return SystemCashRefundStatusPayload.builder()
                        .systemCashRefundStatus(payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus))
                        .build();
            }

            NicepayProps nicepayProps = applicationProps.getPayment().getNicePay();

            RemittanceBalanceContext remittanceBalanceContext = RemittanceBalanceContext.builder()
                    .orderId(systemCashRefundStatus.getId())
                    .at(LocalDateTime.now())
                    .merchantId(nicepayProps.getRemittanceSystemCashRefundMerchantId())
                    .merchantKey(nicepayProps.getRemittanceSystemCashRefundMerchantKey())
                    .build();

            int balance = remittanceService.retrieveBalance(remittanceBalanceContext);
            if (balance < systemCashRefundStatus.getRefundCash()) {
                systemCashRefundStatus.changeStatus(RefundStatus.WAIT);
                systemCashRefundStatus.changeReason(RefundStatusReasonType.REMITTANCE_ACCOUNT_BALANCE_INSUFFICIENT);

                return SystemCashRefundStatusPayload.builder()
                        .systemCashRefundStatus(payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus))
                        .build();
            }

            PaymentNicepayRemittance remittance = remittanceService.remit(RemittanceContext.builder()
                    .refType(DomainType.ORDER)
                    .refId(systemCashRefundStatus.getId())
                    .bankType(systemCashRefundStatus.getBank())
                    .accountHolder(systemCashRefundStatus.getAccountHolder())
                    .accountNumber(systemCashRefundStatus.getAccount())
                    .amount(systemCashRefundStatus.getRefundCash())
                    .at(LocalDateTime.now())
                    .merchantId(nicepayProps.getRemittanceSystemCashRefundMerchantId())
                    .merchantKey(nicepayProps.getRemittanceSystemCashRefundMerchantKey())
                    .build());
            if (remittance.getResult() == NicepayRemittanceResultType.RECEIVING_RESULT_DELAYED) {
                systemCashRefundStatus.changeStatus(RefundStatus.DELAY);
                systemCashRefundStatus.changeReason(RefundStatusReasonType.REMITTANCE_ACCOUNT_BALANCE_INSUFFICIENT);

                return SystemCashRefundStatusPayload.builder()
                        .systemCashRefundStatus(payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus))
                        .build();
            }

            if (remittance.getResult() == NicepayRemittanceResultType.INCORRECT_ACCOUNT_HOLDER
                    || remittance.getResult() == NicepayRemittanceResultType.INCORRECT_ACCOUNT_NUMBER) {
                throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_INVALID_BANK_ACCOUNT);
            } else if (remittance.getResult() == NicepayRemittanceResultType.LACK_OF_BALANCE) {
                throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_LACK_OF_BALANCE);
            } else if (remittance.getResult() != NicepayRemittanceResultType.SUCCESS) {
                throw new SystemCashException(SystemCashCode.SYSTEM_CASH_REFUND_BY_BANK_ACCOUNT_FAILURE);
            }

            if (remittance.getResult() != NicepayRemittanceResultType.SUCCESS) {
                systemCashRefundStatus.changeStatus(RefundStatus.WAIT);
                systemCashRefundStatus.changeReason(RefundStatusReasonType.REMITTANCE_ACCOUNT_BALANCE_INSUFFICIENT);

                return SystemCashRefundStatusPayload.builder()
                        .systemCashRefundStatus(payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus))
                        .build();
            } else {
                systemCashRefundStatus.changeStatus(RefundStatus.COMPLETE).changeCompleteAt(LocalDateTime.now());
            }

            return SystemCashRefundStatusPayload.builder()
                    .systemCashRefundStatus(payloadFactory.systemCashRefundStatusTemplate(systemCashRefundStatus))
                    .build();
        });
    }

    public SystemCashPayload extinctionSystemCashes(int days) {
        long memberId = DiagnosticContext.fetchMemberId();
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime to = SystemCashUtils.expireAt(now.plusDays(days));

        int cash = systemCashService.findAllSystemCashSummaries(memberId)
                .stream()
                .filter(x -> x.getExpireAt().isAfter(now))
                .filter(x -> x.getExpireAt().isBefore(to) || x.getExpireAt().equals(to))
                .map(SystemCashSummary::getAccumulateCash)
                .mapToInt(Integer::intValue)
                .sum();

        return SystemCashPayload.builder()
                .systemCash(cash)
                .build();
    }

    public SystemCashRefundStatusesPayload systemCashRefund(List<RefundStatus> status) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<SystemCashRefundStatus> systemCashRefundStatuses = systemCashService.findRefundSystemCash(memberId, status);

        return SystemCashRefundStatusesPayload.builder()
                .systemCashRefundStatuses(payloadFactory.systemCashRefundStatusTemplates(systemCashRefundStatuses))
                .build();
    }

    public SystemCashResultPayload registerVoucher(String code) {
        long memberId = DiagnosticContext.fetchMemberId();

        LocalDateTime at = LocalDateTime.now();
        DomainActionQuotaRule dailyRule =
                DomainActionQuotaRule.builder()
                        .memberId(memberId)
                        .domainType(DomainType.SYSTEM_CASH_VOUCHER)
                        .at(at)
                        .quota(Constant.SystemCash.MAX_REGISTER_ATTEMPT_DAILY_QUOTA)
                        .durationSeconds(ChronoUnit.DAYS.getDuration().getSeconds())
                        .retryableAfterSeconds(ChronoUnit.DAYS.getDuration().getSeconds())
                        .windowSize(Long.MAX_VALUE)
                        .build();

        DomainActionQuotaEvaluation dailyQuota = actionLimiter.evaluate(dailyRule);
        if (dailyQuota.exceedsLimit()) {
            throw new SystemCashException(SystemCashCode.SYSTEM_CASH_VOUCHER_REGISTER_ATTEMPT_DAILY_QUOTA_EXCEED,
                    List.of(dailyQuota.retryableAfter("MM.dd HH:mm")));
        }

        DomainActionQuotaRule hourlyRule =
                DomainActionQuotaRule.builder()
                        .memberId(memberId)
                        .domainType(DomainType.SYSTEM_CASH_VOUCHER)
                        .at(at)
                        .quota(Constant.SystemCash.MAX_REGISTER_ATTEMPT_HOURLY_QUOTA)
                        .durationSeconds(ChronoUnit.HOURS.getDuration().getSeconds())
                        .retryableAfterSeconds(ChronoUnit.HOURS.getDuration().getSeconds())
                        .windowSize(Constant.SystemCash.MAX_REGISTER_ATTEMPT_HOURLY_QUOTA)
                        .build();

        DomainActionQuotaEvaluation hourlyQuota = actionLimiter.evaluate(hourlyRule);
        if (hourlyQuota.exceedsLimit()) {
            throw new SystemCashException(SystemCashCode.SYSTEM_CASH_VOUCHER_REGISTER_ATTEMPT_HOURLY_QUOTA_EXCEED,
                    List.of(hourlyQuota.retryableAfter("MM.dd HH:mm")));
        }

        MemberServiceSummary summary = memberService.fetchMemberServiceSummaryByMemberId(memberId);

        SystemCashVoucherValidationResult validationResult = systemCashService.validateUsableVoucher(code, summary);
        if (!validationResult.isSuccess()) {
            transactionTemplate.executeMainWritableTransaction(() ->
                    actionLimiter.register(DomainAction.builder()
                            .memberId(memberId)
                            .domainType(DomainType.SYSTEM_CASH_VOUCHER)
                            .successYn(YN.N)
                            .at(at)
                            .build()));

            throw new SystemCashException(validationResult.getErrorCode());
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            SystemCashVoucher voucher = validationResult.getSystemCashVoucher();

            SystemCashVoucherConfig config = validationResult.getSystemCashVoucherConfig();

            LocalDateTime now = LocalDateTime.now();
            LocalDateTime expireAt = config.cashExpiredAt(now);

            SystemCashUsageReport report = systemCashService.registerCash(memberId, SystemCashAddContext.builder()
                    .titleKo(MessageUtils.format(SystemCashAction.VOUCHER.getTitleKo(), config.getTitleKo()))
                    .titleEn(MessageUtils.format(SystemCashAction.VOUCHER.getTitleEn(), config.getTitleKo()))
                    .titleZh(MessageUtils.format(SystemCashAction.VOUCHER.getTitleZh(), config.getTitleKo()))
                    .titleJa(MessageUtils.format(SystemCashAction.VOUCHER.getTitleJa(), config.getTitleKo()))
                    .action(SystemCashAction.VOUCHER)
                    .cash(config.getCash())
                    .publishType(PublishType.SYSTEM)
                    .compositions(Collections.singletonList(SystemCashComposition.builder()
                            .cash(config.getCash())
                            .type(SystemCashType.VOUCHER)
                            .expireAt(PointUtils.expireAt(expireAt))
                            .build()))
                    .type(SystemCashStatus.REWARD)
                    .refType(DomainType.SYSTEM_CASH_VOUCHER)
                    .refId(voucher.getId())
                    .build());

            // TODO system_cash_extra_benefit (추가혜택)

            systemCashService.modifyStatus(voucher.getId(), SystemCashVoucherStatus.USED);

            actionLimiter.register(DomainAction.builder()
                    .memberId(memberId)
                    .domainType(DomainType.SYSTEM_CASH_VOUCHER)
                    .successYn(YN.Y)
                    .at(at)
                    .build());

            actionLimiter.clear(DomainType.SYSTEM_CASH_VOUCHER, At.MIN_LOCAL_DATETIME, at.minusDays(1));

            return SystemCashResultPayload.builder()
                    .systemCash(payloadFactory.systemCashTemplate(report.getSystemCash()))
                    .build();
        });
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/terms/usecase/TermsUseCase.java
================================================
package kr.co.yeoshin.backend.terms.usecase;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.payload.TermsAgreementsPayload;
import kr.co.yeoshin.backend.payload.TermsPayload;
import kr.co.yeoshin.backend.terms.service.TermsService;
import kr.co.yeoshin.common.member.entity.MemberTermsAgreeLog;
import kr.co.yeoshin.common.member.type.AgreementTermsType;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@UseCase
public class TermsUseCase {

    private final TermsService termsService;
    private final PayloadFactory payloadFactory;

    public TermsPayload terms() {
        return TermsPayload.builder()
                .terms(payloadFactory.termsTemplates(
                        termsService.findAllTermsByTermsType(Arrays.stream(AgreementTermsType.values())
                                .collect(Collectors.toList()))))
                .build();
    }

    public TermsPayload terms(List<AgreementTermsType> termsTypes) {
        return TermsPayload.builder()
                .terms(payloadFactory.termsTemplates(termsService.findAllTermsByTermsType(new HashSet<>(termsTypes))))
                .build();
    }

    public TermsAgreementsPayload agreementTerms(List<AgreementTermsType> termsTypes) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<MemberTermsAgreeLog> termsAgreeLogs = termsService.fetchAllAgreementTerms(memberId, termsTypes)
                .stream()
                .filter(x -> x.getAgreeYn().toBoolean())
                .collect(Collectors.toList());

        return TermsAgreementsPayload.builder()
                .termsAgreements(termsAgreeLogs.stream()
                        .map(x -> payloadFactory.termsAgreementTemplate(x.getTerms(), x))
                        .collect(Collectors.toList()))
                .build();
    }

    public BoolPayload agreeTerms(List<AgreementTermsType> termsTypes) {
        long memberId = DiagnosticContext.fetchMemberId();

        termsService.registerMemberTemrsAgreeLog(memberId, termsTypes);

        return BoolPayload.success();
    }

    public BoolPayload rejectTerms(List<AgreementTermsType> termsTypes) {
        long memberId = DiagnosticContext.fetchMemberId();

        termsService.removeMemberTemrsAgreeLog(memberId, termsTypes);

        return BoolPayload.success();
    }

}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/component/model/FrayImageApiPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.component.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class FrayImageApiPayload {

    @JsonProperty("photoId")
    private String frayImageKey;

    @JsonProperty("url")
    private String image;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/component/model/FrayImageApiRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.component.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Getter;
import lombok.ToString;

@Getter
@ToString
public class FrayImageApiRequestPayload {

    @JsonProperty("orgCode")
    private long hospitalId;

    @JsonProperty("customerId")
    private String frayMemberKey;

    @JsonProperty("photoId")
    private String frayImageKey;

    @Builder
    public FrayImageApiRequestPayload(long hospitalId, String frayMemberKey, String frayImageKey) {
        this.hospitalId = hospitalId;
        this.frayMemberKey = frayMemberKey;
        this.frayImageKey = frayImageKey;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/CouponsPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.CouponTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class CouponsPayload {

    private List<CouponTemplate> coupons;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/FrayHighDefinitionImagesRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayHighDefinitionImagesRequestPayload {

    private long frayMemberId;
    private int width;
    private List<Long> frayImageIds;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/FrayImagePageablePayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.backend.payload.template.HospitalTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayImageTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayMemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder(toBuilder = true)
public class FrayImagePageablePayload {

    private List<FrayImageGroup> imageGroups;
    private List<FrayImageTemplate> images;
    private List<FrayMemberTemplate> memberFrayAccounts;
    private List<HospitalTemplate> hospitals;
    private PageableTemplate pageable;

    public static FrayImagePageablePayload empty() {
        return FrayImagePageablePayload.builder()
                .imageGroups(Collections.emptyList())
                .images(Collections.emptyList())
                .memberFrayAccounts(Collections.emptyList())
                .hospitals(Collections.emptyList())
                .pageable(PageableTemplate.empty())
                .build();
    }

    @Getter
    @Builder
    public static class FrayImageGroup {

        private long memberFrayAccountId;
        private long hospitalId;
        @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
        private ZonedDateTime takeDate;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/FrayImagePageableRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import kr.co.yeoshin.backend.thirdparty.fray.usecase.model.FrayImagePageableContext;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayImagePageableRequestPayload {

    private FrayImagePageableContext pageableContext;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/FrayMemberMappingResultPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import java.util.List;
import kr.co.yeoshin.backend.payload.template.CouponTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayMemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayMemberMappingResultPayload {

    private FrayMemberTemplate frayMember;
    private List<CouponTemplate> coupons;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/FrayRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import kr.co.yeoshin.backend.thirdparty.model.RequestContext;
import kr.co.yeoshin.backend.thirdparty.model.RequestMetadata;
import kr.co.yeoshin.backend.thirdparty.model.ThirdPartyRequestPayload;
import lombok.Builder;
import lombok.Getter;

@Getter
public class FrayRequestPayload<T> extends ThirdPartyRequestPayload<T> {

    private final T payload;

    @Builder
    public FrayRequestPayload(RequestMetadata metadata, RequestContext context, T payload) {
        super(metadata, context);
        this.payload = payload;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/MemberFrayAccountImageRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import java.time.LocalDate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberFrayAccountImageRequestPayload {

    private long memberFrayAccountId;
    private LocalDate takeDate;
    private int width;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/controller/model/MemberFrayImageRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.controller.model;

import java.time.LocalDateTime;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberFrayImageRequestPayload {

    private long memberFrayImageId;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/model/FrayImageTemplate.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.ZonedDateTime;
import kr.co.yeoshin.backend.common.Constant.Api;
import kr.co.yeoshin.common.fray.entity.FrayImage;
import kr.co.yeoshin.common.utils.DateUtil;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayImageTemplate {

    private long id;
    @JsonProperty("memberFrayAccountId")
    private long frayMemberId;
    private String type;
    private String image;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime takeDate;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime takeAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime createdAt;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime updatedAt;

    public static FrayImageTemplate of(FrayImage frayImage, String image) {
        return FrayImageTemplate.builder()
                .id(frayImage.getId())
                .frayMemberId(frayImage.getFrayMember().getId())
                .type(frayImage.getType())
                .image(image)
                .takeDate(DateUtil.convertFrom(frayImage.getTakeDate()))
                .takeAt(DateUtil.convertFrom(frayImage.getTakeAt()))
                .createdAt(DateUtil.convertFrom(frayImage.getCreated()))
                .updatedAt(DateUtil.convertFrom(frayImage.getUpdated()))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/model/FrayMemberTemplate.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.model;

import java.util.List;
import kr.co.yeoshin.backend.common.model.locale.LocaleEnText;
import kr.co.yeoshin.backend.common.model.locale.LocaleJaText;
import kr.co.yeoshin.backend.common.model.locale.LocaleKoText;
import kr.co.yeoshin.backend.common.model.locale.LocaleZhText;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.utils.LocaleUtils;
import kr.co.yeoshin.common.fray.entity.FrayMember;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayMemberTemplate {

    private long id;
    private String frayMemberKey;
    private long memberId;
    private String hospitalName;
    private long hospitalId;

    public static FrayMemberTemplate of(FrayMember frayMember, Hospital hospital) {
        return FrayMemberTemplate.builder()
                .id(frayMember.getId())
                .frayMemberKey(frayMember.getFrayMemberKey())
                .memberId(frayMember.getMember().getId())
                .hospitalName(LocaleUtils.text(DiagnosticContext.fetchLocale(),
                        List.of(LocaleKoText.of(hospital.getNameKo()),
                                LocaleEnText.of(hospital.getNameEn()),
                                LocaleZhText.of(hospital.getNameZh()),
                                LocaleJaText.of(hospital.getNameJa()))))
                .hospitalId(hospital.getId())
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/service/model/FrayGuestMemberPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.service.model;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@AllArgsConstructor
@NoArgsConstructor
@Builder(toBuilder = true)
public class FrayGuestMemberPayload {

    private String frayMemberKey;
    private String name;
    private String countryCode;
    private String countryCallingCode;
    private String cellPhone;
    private LocalDate birthdate;
    private long hospitalId;
    private String hospitalName;
    private String orgCode;
    private String organizationType;
    private List<ThirdPartyAgreementTermsType> agreements;
    private LocalDateTime createdAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/service/model/FrayImagePayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.service.model;

import java.time.LocalDateTime;
import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayImagePayload {

    private String frayMemberKey;
    private List<Image> images;

    @Getter
    @Builder
    public static class Image {

        private String type;
        private String frayImageKey;
        private LocalDateTime takeAt;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/FrayUseCase.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase;

import static kr.co.yeoshin.backend.common.Constant.Api.BIRTHDATE_FORMAT;
import static kr.co.yeoshin.backend.common.Constant.At.MAX_LOCAL_DATETIME;

import java.time.LocalDateTime;
import java.util.*;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import kr.co.yeoshin.backend.common.Constant.Auth;
import kr.co.yeoshin.backend.common.Constant.Member;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.FrayCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.coupon.service.CouponService;
import kr.co.yeoshin.backend.coupon.service.model.CouponMeta;
import kr.co.yeoshin.backend.exception.FrayException;
import kr.co.yeoshin.backend.hospital.service.HospitalScrapService;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.hospital.service.model.HospitalStat;
import kr.co.yeoshin.backend.hospital.usecase.model.FrayHospitalSearchableContext;
import kr.co.yeoshin.backend.hospital.usecase.model.HospitalSearchableContext;
import kr.co.yeoshin.backend.notification.component.model.NhnKakaoAlimTalkNotificationContext;
import kr.co.yeoshin.backend.notification.component.model.NhnSmsNotificationContext;
import kr.co.yeoshin.backend.notification.component.template.AlimTalkTemplateFactory;
import kr.co.yeoshin.backend.notification.component.template.SmsTemplateFactory;
import kr.co.yeoshin.backend.payload.HospitalPageablePayload;
import kr.co.yeoshin.backend.payload.template.MemberTemplate;
import kr.co.yeoshin.backend.payload.template.PageableTemplate;
import kr.co.yeoshin.backend.queue.component.publisher.SqsQueueMessagePublisher;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.queue.model.notification.NotificationMessage;
import kr.co.yeoshin.backend.queue.utils.NotificationMessageUtils;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.backend.thirdparty.common.Constant.Fray;
import kr.co.yeoshin.backend.thirdparty.fray.component.model.FrayImageApiPayload;
import kr.co.yeoshin.backend.thirdparty.fray.controller.model.*;
import kr.co.yeoshin.backend.thirdparty.fray.controller.model.FrayImagePageablePayload.FrayImageGroup;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayImageTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayMemberTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.type.FrayOrganizationType;
import kr.co.yeoshin.backend.thirdparty.fray.service.FrayApiService;
import kr.co.yeoshin.backend.thirdparty.fray.service.FrayService;
import kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayGuestMemberPayload;
import kr.co.yeoshin.backend.thirdparty.fray.service.model.VerificationCodeRegister;
import kr.co.yeoshin.backend.thirdparty.fray.usecase.model.*;
import kr.co.yeoshin.backend.thirdparty.model.RequestContext;
import kr.co.yeoshin.backend.thirdparty.service.ThirdPartyVerificationService;
import kr.co.yeoshin.backend.thirdparty.utils.VerificationCodeUtils;
import kr.co.yeoshin.common.coupon.entity.Coupon;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.CouponIssueStatus;
import kr.co.yeoshin.common.coupon.type.PublishType;
import kr.co.yeoshin.common.elasticsearch.document.HospitalDocument;
import kr.co.yeoshin.common.fray.entity.FrayImage;
import kr.co.yeoshin.common.fray.entity.FrayMember;
import kr.co.yeoshin.common.fray.model.MemberFrayImageGroup;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.entity.HospitalScrap;
import kr.co.yeoshin.common.thirdpaty.entity.ThirdPartyVerificationCode;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyServiceType;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyVerificationCodeType;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.DateUtil;
import kr.co.yeoshin.common.utils.MessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class FrayUseCase {

    private final FrayService frayService;
    private final FrayApiService frayApiService;
    private final ThirdPartyVerificationService thirdPartyVerificationService;
    private final CouponService couponService;
    private final SearchService searchService;
    private final HospitalService hospitalService;
    private final HospitalScrapService hospitalScrapService;
    private final SalesProductService salesProductService;
    private final RecommendService recommendService;
    private final AlimTalkTemplateFactory alimTalkTemplateFactory;
    private final SmsTemplateFactory smsTemplateFactory;
    private final TransactionTemplate transactionTemplate;
    private final SqsQueueMessagePublisher messagePublisher;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final PayloadFactory payloadFactory;

    private static final int FRAY_INVITATION_CODE_LENGTH = 20;

    public BoolPayload registerFrayMember(FrayRequestPayload<FrayGuestMemberPayload> request) {
        FrayGuestMemberPayload payload = request.getPayload();

        if (StringUtils.isAnyBlank(payload.getFrayMemberKey(), payload.getName(), payload.getCellPhone()) ||
                Objects.isNull(payload.getBirthdate())) {
            log.error("register fray member payload({}) is invalid (request metadata: {})", payload, request.getMetadata());
            return BoolPayload.fail();
        }

        FrayMember frayMember = transactionTemplate.executeMainWritableTransaction(() -> frayService.registerFrayMember(payload));

        queueMessageDomainEventContext.addDomainEvent(DomainEventType.FRAY_MEMBER_CREATE, frayMember.getId());

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload registerFrayImage(
            FrayRequestPayload<kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayImagePayload> request) {
        kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayImagePayload payload = request.getPayload();

        if (StringUtils.isBlank(payload.getFrayMemberKey())
                || CollectionUtils.isEmpty(payload.getImages())) {
            log.error("register fray image payload({}) is invalid (request metadata: {})", payload, request.getMetadata());
            return BoolPayload.fail();
        }

        return transactionTemplate.executeMainWritableTransaction(() -> {
            FrayMember frayMember = frayService.fetchFrayMember(payload.getFrayMemberKey())
                    .orElseThrow(() -> new FrayException(CommonCode.ERROR,
                            MessageUtils.format("request metadata: ({}), fray member key: ({})",
                                    request.getMetadata(), payload.getFrayMemberKey())));

            if (!frayService.isTermsAgreedMember(frayMember.getId(),
                    Set.of(ThirdPartyAgreementTermsType.THIRD_PARTY_PERSONAL_INFORMATION))) {
                log.error("fray member(key: {}) does not agree mandatory terms.", frayMember.getFrayMemberKey());
                return BoolPayload.fail();
            }

            FrayImage frayImage = frayService.registerFrayImages(payload).stream().findFirst().get();

            LocalDateTime at = LocalDateTime.now();

            List<FrayMember> frayMembers = frayMember.getSystemSignUpYn() == YN.Y
                    ? frayService.retrieveFrayMembersByMemberId(frayMember.getMember().getId())
                    : Collections.emptyList();

            List<FrayMember> others = frayMembers.stream()
                    .filter(x -> Objects.equals(x.getOrgCode(), frayMember.getOrgCode()))
                    .filter(x -> !Objects.equals(x.getId(), frayMember.getId()))
                    .collect(Collectors.toList());

            boolean issueCoupon = issueMemberCoupon(frayMember, others, at);

            frayService.modifyFrayMemberLatestPhotoTakeAt(frayMember.getId(), at);

            sendNotification(frayMember, others, at, issueCoupon);

            return BoolPayload.success();
        });
    }

    private void sendNotification(FrayMember frayMember, Collection<FrayMember> others, LocalDateTime at, boolean issueCoupon) {
        // https://fastlane.atlassian.net/wiki/spaces/YR/pages/1843429624/F-RAY+M1+-+Cloud+Ver.+Spec#03.-%EC%95%8C%EB%A6%BC%ED%86%A1-(%2B%EB%B3%91%EC%9B%90-%EC%A0%84%EC%9A%A9-%EB%A6%B4%EB%A0%88%EC%9D%B4-%EC%BF%A0%ED%8F%B0-%EB%B0%9C%EA%B8%89)
        // 병원 & 휴대전화번호당 1일 1알림톡 발송
        List<FrayMember> merged =
                Stream.concat(Stream.of(frayMember), others.stream())
                        .collect(Collectors.toList());

        if (merged.stream().anyMatch(x -> x.isInvitedAt(at.toLocalDate()))) {
            return;
        }

        frayService.modifyFrayMemberLatestInviteAt(frayMember.getId(), at);

        // https://fastlane.atlassian.net/browse/FR-454
        // 국가코드가 +82인 경우에만 알림톡 발송.
        boolean isKorean = frayMember.hasCountryCallingCode(Auth.DEFAULT_COUNTRY_CALLING_CODE);
        NotificationMessage notificationMessage;

        NhnKakaoAlimTalkNotificationContext skinLogAlimTalkTemplate = issueCoupon
                ? alimTalkTemplateFactory.fraySkinLog(frayMember)
                : alimTalkTemplateFactory.fraySkinLogWithoutCoupon(frayMember);
        NhnSmsNotificationContext skinLogSmsTemplate = issueCoupon
                ? smsTemplateFactory.fraySkinLog(frayMember)
                : smsTemplateFactory.fraySkinLogWithoutCoupon(frayMember);
        if (frayMember.getSystemSignUpYn() == YN.Y) {
            notificationMessage = isKorean
                    ? NotificationMessageUtils.notificationMessage(skinLogAlimTalkTemplate)
                    : NotificationMessageUtils.notificationMessage(skinLogSmsTemplate);
        } else {
            // 기존 미사용 인증 코드가 있다면 해당 코드를 재사용하고, 없는 경우 발급
            ThirdPartyVerificationCode verificationCode = thirdPartyVerificationService.retrieveLatestVerificationCode(
                            ThirdPartyServiceType.FRAY,
                            ThirdPartyVerificationCodeType.FRAY_MEMBER,
                            frayMember.getId())
                    .filter(code -> !code.isExpired(LocalDateTime.now()) && code.getVerificationYn() == YN.N)
                    .orElseGet(() -> thirdPartyVerificationService.registerVerificationCode(
                            VerificationCodeRegister.builder()
                                    .service(ThirdPartyServiceType.FRAY)
                                    .refType(ThirdPartyVerificationCodeType.FRAY_MEMBER)
                                    .refId(frayMember.getId())
                                    .code(VerificationCodeUtils.generateCodeWithLength(Fray.VERIFICATION_CODE_LENGTH))
                                    // TODO 인증코드 유효기간 기획에서 결정 후 수정 필요함 https://fastlane.atlassian.net/wiki/spaces/YR/pages/1973747714?focusedCommentId=1981808796
                                    .expireAt(LocalDateTime.now().plusYears(3))
                                    .build()));

            notificationMessage = isKorean
                    ? NotificationMessageUtils.notificationMessage(
                    alimTalkTemplateFactory.frayInvitationByDeferredDeepLink(frayMember, verificationCode.getCode()))
                    : NotificationMessageUtils.notificationMessage(
                            smsTemplateFactory.frayInvitationByDeferredDeepLink(frayMember, verificationCode.getCode()));
        }

        messagePublisher.publishNotification(notificationMessage);
    }

    private boolean issueMemberCoupon(FrayMember frayMember, Collection<FrayMember> others, LocalDateTime at) {
        // 피부로그 연동 된 회원에게만 지급
        if (frayMember.getSystemSignUpYn() == YN.N) {
            return false;
        }

        // 에스테틱 회원에게는 미발급
        if (FrayOrganizationType.findByName(frayMember.getOrganizationType()) == FrayOrganizationType.AESTHETIC) {
            return false;
        }

        // 병원 & 회원당 1일 1쿠폰 지급
        if (Stream.concat(Stream.of(frayMember), others.stream())
                .anyMatch(x -> x.isPhotoTakenAt(at.toLocalDate()))) {
            return false;
        }

        List<MemberCoupon> memberCoupons = couponService.issueMemberCoupons(frayMember.getMember().getId(),
                CouponIssueConditionType.FRAY_EXTRA_TAKE_HOSPITAL_ID,
                CouponMeta.builder()
                        .value(String.valueOf(frayMember.getHospital().getId()))
                        .build());

        return CollectionUtils.isNotEmpty(memberCoupons);
    }

    public FrayMemberAccountsPayload retrieveMemberFrayAccounts(FrayRequestPayload<Void> request) {
        RequestContext context = request.getContext();
        MemberTemplate memberContext = context.getMember();

        List<FrayMember> frayMembers = frayService.retrieveFrayMembersByMemberId(memberContext.getId());

        Map<Long, Hospital> hospitalsById = hospitalService.findHospitalsByHospitalIds(frayMembers.stream()
                        .map(x -> x.getHospital().getId())
                        .collect(Collectors.toSet()))
                .stream()
                .collect(Collectors.toMap(Hospital::getId, Function.identity()));

        return FrayMemberAccountsPayload.builder()
                .frayMembers(frayMembers.stream()
                        .map(x -> FrayMemberTemplate.of(x, hospitalsById.get(x.getHospital().getId())))
                        .collect(Collectors.toList()))
                .build();
    }

    public FrayMemberMappingResultPayload registerMemberFrayAccount(FrayRequestPayload<MemberFrayAccountRequestPayload> request) {
        MemberFrayAccountRequestPayload payload = request.getPayload();
        RequestContext context = request.getContext();
        MemberTemplate memberContext = context.getMember();

        ThirdPartyVerificationCode verificationCode =
                thirdPartyVerificationService.retrieveVerificationCode(ThirdPartyServiceType.FRAY,
                                payload.getVerificationCode())
                        .filter(x -> x.getRefType() == ThirdPartyVerificationCodeType.FRAY_MEMBER)
                        .orElseThrow(() -> new FrayException(FrayCode.FRAY_AUTH_CODE_IS_NOT_MATCH));

        if (verificationCode.getVerificationYn().toBoolean()) {
            throw new FrayException(FrayCode.FRAY_AUTH_CODE_ALREADY_VERIFIED,
                    MessageUtils.format("member(id: {})'s fray account(id: {}) is already mapped.",
                            memberContext.getId(), verificationCode.getRefId()));
        }

        if (verificationCode.isExpired(LocalDateTime.now())) {
            throw new FrayException(FrayCode.FRAY_AUTH_CODE_EXPIRED);
        }

        FrayMember frayMember =
                frayService.fetchFrayMember(verificationCode.getRefId())
                        .orElseThrow(() -> new FrayException(CommonCode.ERROR,
                                MessageUtils.format("fray member(id: {}) is not exist.", verificationCode.getRefId())));

        Optional<FrayCode> frayCode = transactionTemplate.executeMainWritableTransaction(() -> {
            if (frayMember.equalsPersonalInformation(
                    memberContext.getName(),
                    memberContext.getCellPhone(),
                    DateUtil.parseOrDefault(memberContext.getBirthdate(), BIRTHDATE_FORMAT, MAX_LOCAL_DATETIME.toLocalDate()))) {
                return Optional.empty();
            }

            log.error("fray member(id: {}) information is different from system member's (id: {})",
                    frayMember.getId(), memberContext.getId());

            ThirdPartyVerificationCode code =
                    thirdPartyVerificationService.increaseAttemptCount(verificationCode.getId());

            if (code.exceedMaxAttemptCount(Fray.VERIFICATION_MAX_ATTEMPT_COUNT)) {
                return Optional.of(FrayCode.FRAY_AUTH_MAX_ATTEMPT_COUNT_EXCEED);
            }

            return Optional.of(FrayCode.FRAY_MEMBER_IS_DIFFERENT_FROM_SYSTEM_MEMBER);
        });

        frayCode.ifPresent(it -> {
            throw new FrayException(it);
        });

        return transactionTemplate.executeMainWritableTransaction(() -> {
            FrayMember mappedFrayMember = frayService.mapFrayMemberToMember(frayMember.getId(), memberContext.getId());

            Hospital hospital = hospitalService.findHospitalByHospitalId(mappedFrayMember.getHospital().getId());

            List<MemberCoupon> memberCoupons = new ArrayList<>();
            // 에스테틱 회원에게는 미발급
            if (FrayOrganizationType.findByName(frayMember.getOrganizationType()) != FrayOrganizationType.AESTHETIC) {
                memberCoupons.addAll(couponService.issueMemberCoupons(mappedFrayMember.getMember().getId(),
                        CouponIssueConditionType.FRAY_TAKE_HOSPITAL_ID,
                        CouponMeta.builder()
                                .value(String.valueOf(mappedFrayMember.getHospital().getId()))
                                .build()));
            }

            queueMessageDomainEventContext.addDomainEvent(DomainEventType.FRAY_MEMBER_UPDATE, mappedFrayMember.getId(),
                    Map.of("linkMember", true));

            thirdPartyVerificationService.modifyVerificationYn(verificationCode.getId(), YN.Y);

            return FrayMemberMappingResultPayload.builder()
                    .frayMember(FrayMemberTemplate.of(mappedFrayMember, hospital))
                    .coupons(payloadFactory.couponTemplates(memberCoupons.stream()
                            .map(MemberCoupon::getCoupon).collect(Collectors.toList())))
                    .build();
        });
    }

    public FrayImagePageablePayload retrieveFrayImages(FrayRequestPayload<FrayImagePageableRequestPayload> request) {
        RequestContext context = request.getContext();
        MemberTemplate memberContext = context.getMember();
        FrayImagePageableRequestPayload payload = request.getPayload();

        List<FrayMember> frayMembers = frayService.retrieveFrayMembersByMemberId(memberContext.getId());

        Pageable pageable = frayService.pageable(payload.getPageableContext());

        Page<MemberFrayImageGroup> frayImagePage =
                frayService.retrieveMemberFrayImageThumbnails(
                        pageable,
                        frayMembers.stream()
                                .map(FrayMember::getId)
                                .collect(Collectors.toSet()),
                        payload.getPageableContext().getTypes());

        if (CollectionUtils.isEmpty(frayImagePage.getContent())) {
            return FrayImagePageablePayload.empty();
        }

        List<FrayImage> memberFrayImages =
                frayService.fetchAllFrayImages(
                        frayImagePage.stream()
                                .map(MemberFrayImageGroup::getFrayMemberId)
                                .collect(Collectors.toSet()),
                        frayImagePage.stream().map(MemberFrayImageGroup::getTakeDate)
                                .collect(Collectors.toSet()),
                        payload.getPageableContext().getTypes());

        List<FrayImageApiPayload> frayImagePayload = frayApiService.retrieveFrayThumbnailImages(
                request.getMetadata(),
                Fray.IMAGE_DEFAULT_WIDTH,
                memberFrayImages.stream()
                        .map(x -> kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayImage.builder()
                                .frayMemberKey(x.getFrayMember().getFrayMemberKey())
                                .hospitalId(x.getFrayMember().getHospital().getId())
                                .frayImageKey(x.getFrayImageKey())
                                .build())
                        .collect(Collectors.toList()));

        Map<String, String> imagesByFrayImageKey = frayImagePayload.stream()
                .collect(Collectors.toMap(FrayImageApiPayload::getFrayImageKey, FrayImageApiPayload::getImage, (a, b) -> a));

        Map<Long, Long> hospitalIdsByFrayMemberId = frayMembers.stream()
                .collect(Collectors.toMap(FrayMember::getId, fm -> fm.getHospital().getId(), (a, b) -> a));

        Map<Long, Hospital> hospitalsById = hospitalService.findHospitalsByHospitalIds(hospitalIdsByFrayMemberId.values())
                .stream()
                .collect(Collectors.toMap(Hospital::getId, Function.identity()));

        return FrayImagePageablePayload.builder()
                .imageGroups(frayImagePage.getContent().stream()
                        .map(x -> FrayImageGroup.builder()
                                .memberFrayAccountId(x.getFrayMemberId())
                                .hospitalId(hospitalIdsByFrayMemberId.get(x.getFrayMemberId()))
                                .takeDate(DateUtil.convertFrom(x.getTakeDate()))
                                .build())
                        .collect(Collectors.toList()))
                .memberFrayAccounts(memberFrayImages.stream()
                        .map(FrayImage::getFrayMember)
                        .map(x -> FrayMemberTemplate.of(x, hospitalsById.get(x.getHospital().getId())))
                        .collect(Collectors.toList()))
                .images(memberFrayImages.stream()
                        .map(x -> FrayImageTemplate.of(x, imagesByFrayImageKey.get(x.getFrayImageKey())))
                        .collect(Collectors.toList()))
                .pageable(PageableTemplate.builder()
                        .totalCount(frayImagePage.getTotalElements())
                        .next(frayImagePage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                                FrayImagePageableContext.builder()
                                        .page(frayImagePage.getPageable().getPageNumber() + 1)
                                        .size(payload.getPageableContext().getSize())
                                        .sort(payload.getPageableContext().getSort())
                                        .types(payload.getPageableContext().getTypes())
                                        .build()))
                        .build())
                .build();
    }

    public FrayMemberImagesPayload retrieveMemberFrayAccountImages(
            FrayRequestPayload<MemberFrayAccountImageRequestPayload> request) {
        MemberFrayAccountImageRequestPayload payload = request.getPayload();
        RequestContext context = request.getContext();
        MemberTemplate memberContext = context.getMember();

        FrayMember frayMember = frayService.fetchFrayMember(payload.getMemberFrayAccountId())
                .filter(fm -> fm.getMember() != null)
                .filter(fm -> Optional.ofNullable(fm.getMember().getId()).orElse(Member.MEMBER_NOT_EXIST_ID)
                        != Member.MEMBER_NOT_EXIST_ID)
                .orElseThrow(() -> new FrayException(FrayCode.FRAY_MEMBER_FRAY_ACCOUNT_NOT_EXIST));

        if (!Objects.equals(memberContext.getId(), frayMember.getMember().getId())) {
            throw new FrayException(CommonCode.ERROR,
                    MessageUtils.format("member id: {}, member fray account's: {}",
                            memberContext.getId(), frayMember.getMember().getId()));
        }

        List<FrayImage> memberFrayImages =
                frayService.fetchAllFrayImages(List.of(frayMember.getId()),
                        List.of(payload.getTakeDate()), Collections.emptySet());

        Hospital hospital = hospitalService.findHospitalByHospitalId(frayMember.getHospital().getId());

        if (CollectionUtils.isEmpty(memberFrayImages)) {
            return FrayMemberImagesPayload.builder()
                    .memberFrayAccount(FrayMemberTemplate.of(frayMember, hospital))
                    .memberFrayImages(Collections.emptyList())
                    .build();
        }

        List<FrayImageApiPayload> frayImages = frayApiService.retrieveFrayThumbnailImages(
                request.getMetadata(),
                payload.getWidth(),
                memberFrayImages.stream()
                        .map(x -> kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayImage.builder()
                                .frayMemberKey(x.getFrayMember().getFrayMemberKey())
                                .hospitalId(x.getFrayMember().getHospital().getId())
                                .frayImageKey(x.getFrayImageKey())
                                .build())
                        .collect(Collectors.toList()));

        Map<String, String> imagesByFrayImageKey = frayImages.stream()
                .collect(Collectors.toMap(FrayImageApiPayload::getFrayImageKey, FrayImageApiPayload::getImage, (a, b) -> a));

        return FrayMemberImagesPayload.builder()
                .memberFrayAccount(FrayMemberTemplate.of(frayMember, hospital))
                .memberFrayImages(memberFrayImages.stream()
                        .map(x -> FrayImageTemplate.of(x, imagesByFrayImageKey.get(x.getFrayImageKey())))
                        .collect(Collectors.toList()))
                .build();
    }

    public FrayMemberImagesPayload retrieveHighDefinitionImages(
            FrayRequestPayload<FrayHighDefinitionImagesRequestPayload> request) {
        FrayHighDefinitionImagesRequestPayload payload = request.getPayload();
        RequestContext context = request.getContext();
        MemberTemplate memberContext = context.getMember();

        FrayMember frayMember =
                frayService.retrieveFrayMemberByIdAndMemberId(payload.getFrayMemberId(), memberContext.getId())
                        .orElseThrow(() -> new FrayException(FrayCode.FRAY_MEMBER_FRAY_ACCOUNT_NOT_EXIST));

        if (!Objects.equals(memberContext.getId(), frayMember.getMember().getId())) {
            throw new FrayException(CommonCode.ERROR,
                    MessageUtils.format("member id: {}, member fray account's: {}",
                            memberContext.getId(), frayMember.getMember().getId()));
        }

        List<FrayImage> memberFrayImages = frayService.fetchAllFrayImages(payload.getFrayImageIds());

        Hospital hospital = hospitalService.findHospitalByHospitalId(frayMember.getHospital().getId());

        if (CollectionUtils.isEmpty(memberFrayImages)) {
            return FrayMemberImagesPayload.builder()
                    .memberFrayAccount(FrayMemberTemplate.of(frayMember, hospital))
                    .memberFrayImages(Collections.emptyList())
                    .build();
        }

        if (memberFrayImages.stream().anyMatch(x -> !Objects.equals(x.getFrayMember().getId(), frayMember.getId()))) {
            throw new FrayException(CommonCode.ERROR);
        }

        List<FrayImageApiPayload> frayImages = frayApiService.retrieveFrayImages(
                request.getMetadata(),
                payload.getWidth(),
                memberFrayImages.stream()
                        .map(x -> kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayImage.builder()
                                .frayMemberKey(x.getFrayMember().getFrayMemberKey())
                                .hospitalId(x.getFrayMember().getHospital().getId())
                                .frayImageKey(x.getFrayImageKey())
                                .build())
                        .collect(Collectors.toList()));

        Map<String, String> imagesByFrayImageKey = frayImages.stream()
                .collect(Collectors.toMap(FrayImageApiPayload::getFrayImageKey,
                        FrayImageApiPayload::getImage, (a, b) -> a));

        return FrayMemberImagesPayload.builder()
                .memberFrayAccount(FrayMemberTemplate.of(frayMember, hospital))
                .memberFrayImages(memberFrayImages.stream()
                        .filter(x -> imagesByFrayImageKey.containsKey(x.getFrayImageKey()))
                        .map(x -> FrayImageTemplate.of(x, imagesByFrayImageKey.get(x.getFrayImageKey())))
                        .collect(Collectors.toList()))
                .build();
    }

    public FrayImagePayload retrieveFrayImage(FrayRequestPayload<MemberFrayImageRequestPayload> request) {
        MemberFrayImageRequestPayload payload = request.getPayload();
        RequestContext context = request.getContext();
        MemberTemplate memberContext = context.getMember();

        FrayImage frayImage = frayService.fetchFrayImage(payload.getMemberFrayImageId())
                .orElseThrow(() -> new FrayException(CommonCode.ERROR));

        FrayMember frayMember = frayImage.getFrayMember();

        if (!Objects.equals(memberContext.getId(), frayMember.getMember().getId())) {
            throw new FrayException(CommonCode.ERROR,
                    MessageUtils.format("member id: {}, member fray account's: {}",
                            memberContext.getId(), frayMember.getMember().getId()));
        }

        FrayImageApiPayload image = // TODO [width] 사진의 pixel 단위 너비. 높이는 너비:높이 비율 2:3 으로 자동 설정(max 3456 pixel, default 3456 pixel) 추후 수정 필요할 듯
                frayApiService.retrieveFrayImages(request.getMetadata(), 3456,
                                List.of(kr.co.yeoshin.backend.thirdparty.fray.service.model.FrayImage.builder()
                                        .frayMemberKey(frayMember.getFrayMemberKey())
                                        .hospitalId(frayMember.getHospital().getId())
                                        .frayImageKey(frayImage.getFrayImageKey())
                                        .build())).stream()
                        .findFirst()
                        .orElseThrow(() -> new FrayException(CommonCode.ERROR));

        Hospital hospital = hospitalService.findHospitalByHospitalId(frayMember.getHospital().getId());

        return FrayImagePayload.builder()
                .memberFrayAccount(FrayMemberTemplate.of(frayMember, hospital))
                .memberFrayImage(FrayImageTemplate.of(frayImage, image.getImage()))
                .build();
    }

    public CouponsPayload hospitalIssuableCoupons(String invitationCode) {
        return transactionTemplate.executeMainReadableTransaction(() -> {
            ThirdPartyVerificationCode code = thirdPartyVerificationService.retrieveVerificationCode(
                            ThirdPartyServiceType.FRAY, invitationCode)
                    .orElseThrow(() -> new FrayException(CommonCode.ERROR));

            FrayImage frayImage = frayService.fetchFrayImage(code.getRefId())
                    .orElseThrow(() -> new FrayException(CommonCode.ERROR));

            FrayMember frayMember = frayImage.getFrayMember();

            Map<Long, Coupon> couponsById = couponService.findAllPublishableCoupons(PublishType.AUTO,
                            CouponIssueStatus.ISSUE,
                            CouponIssueConditionType.FRAY_TAKE_HOSPITAL_ID).stream()
                    .collect(Collectors.toMap(Coupon::getId, Function.identity()));

            List<CouponIssueCondition> issueConditions = couponService.findCouponIssueConditionsByCouponIds(couponsById.keySet());

            Map<Long, List<CouponIssueCondition>> issuableConditionsByCouponId =
                    issueConditions.stream()
                            .filter(x -> Arrays.stream(StringUtils.split(x.getValue(), ","))
                                    .map(hospitalId -> NumberUtils.toLong(hospitalId, -1))
                                    .filter(hospitalId -> hospitalId > 0)
                                    .collect(Collectors.toSet())
                                    .contains(frayMember.getHospital().getId()))
                            .collect(Collectors.groupingBy(x -> x.getCoupon().getId()));

            return CouponsPayload.builder()
                    .coupons(couponsById.entrySet().stream()
                            .filter(entry -> issuableConditionsByCouponId.containsKey(entry.getKey()))
                            .map(Entry::getValue)
                            .map(payloadFactory::couponTemplate)
                            .collect(Collectors.toList()))
                    .build();
        });
    }

    public HospitalPageablePayload searchHospitals(FrayHospitalSearchableContext searchableContext) {
        SearchResult<HospitalDocument> searchResult = searchService.search(searchableContext);

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                HospitalSearchableContext.builder()
                        .size(searchableContext.getSize())
                        .searchAfter(searchResult.getSearchAfter())
                        .build());

        Set<Long> hospitalIds = searchResult.getDocuments().stream()
                .map(HospitalDocument::getId)
                .collect(Collectors.toSet());

        List<HospitalStat> hospitalStats = hospitalService.findHospitalStatsByHospitalIds(hospitalIds);
        List<HospitalScrap> hospitalScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> hospitalScrapService.findHospitalScrapsByHospitalIds(memberId, hospitalIds));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> badgeContainers = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), hospitalStats, recommendFacade);

        return HospitalPageablePayload.builder()
                .hospitals(payloadFactory.hospitalTemplatesByHospitalDocuments(searchResult.getDocuments()))
                .hospitalScraps(payloadFactory.hospitalScrapTemplates(hospitalScraps))
                .hospitalStats(payloadFactory.hospitalStatTemplates(hospitalStats))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, badgeContainers))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), nextToken))
                .build();

    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/model/FrayGuestImagePayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.ZonedDateTime;
import java.util.List;
import kr.co.yeoshin.backend.common.Constant.Api;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayGuestImagePayload {

    private String verificationCode;
    private List<String> images;
    @JsonFormat(pattern = Api.DATE_TIME_FORMAT)
    private ZonedDateTime takeAt;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/model/FrayGuestImageRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase.model;

import java.time.LocalDate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayGuestImageRequestPayload {

    private final String invitationCode;
    private final String name;
    private final String cellPhone;
    private final LocalDate birthdate;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/model/FrayImagePayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase.model;

import kr.co.yeoshin.backend.thirdparty.fray.model.FrayMemberTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayImageTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayImagePayload {

    private FrayMemberTemplate memberFrayAccount;
    private FrayImageTemplate memberFrayImage;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/model/FrayMemberAccountsPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase.model;

import java.util.List;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayMemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FrayMemberAccountsPayload {

    private List<FrayMemberTemplate> frayMembers;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/model/FrayMemberImagesPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase.model;

import java.util.List;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayImageTemplate;
import kr.co.yeoshin.backend.thirdparty.fray.model.FrayMemberTemplate;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder(toBuilder = true)
public class FrayMemberImagesPayload {

    private FrayMemberTemplate memberFrayAccount;
    private List<FrayImageTemplate> memberFrayImages;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/fray/usecase/model/MemberFrayAccountRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.fray.usecase.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class MemberFrayAccountRequestPayload {

    private final String verificationCode;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/model/ThirdPartyRequestPayload.java
================================================
package kr.co.yeoshin.backend.thirdparty.model;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public abstract class ThirdPartyRequestPayload<P> {

    private RequestMetadata metadata;
    private RequestContext context;

    public abstract P getPayload();
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/thirdparty/usecase/ThirdPartyUseCase.java
================================================
package kr.co.yeoshin.backend.thirdparty.usecase;

import kr.co.yeoshin.backend.auth.model.RegisteredThirdPartyMember;
import kr.co.yeoshin.backend.auth.model.Token;
import kr.co.yeoshin.backend.auth.model.TokenClaims;
import kr.co.yeoshin.backend.auth.service.TokenService;
import kr.co.yeoshin.backend.common.model.api.code.AuthCode;
import kr.co.yeoshin.backend.common.model.api.code.ThirdPartyCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.webclient.WebClientTemplate;
import kr.co.yeoshin.backend.exception.AuthenticationException;
import kr.co.yeoshin.backend.exception.ThirdPartyException;
import kr.co.yeoshin.backend.payload.TokenPayload;
import kr.co.yeoshin.backend.thirdparty.model.ThirdPartySignInRequest;
import kr.co.yeoshin.backend.thirdparty.model.ThirdPartyTokenClaim;
import kr.co.yeoshin.backend.thirdparty.model.TokenReviewResponse;
import kr.co.yeoshin.backend.thirdparty.service.ThirdPartyService;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.member.type.MemberStatusType;
import kr.co.yeoshin.common.thirdpaty.entity.ThirdPartyConfig;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.core.ParameterizedTypeReference;

@UseCase
@RequiredArgsConstructor
public class ThirdPartyUseCase {

    private final TokenService tokenService;
    private final WebClientTemplate webClientTemplate;
    private final ThirdPartyService thirdPartyService;

    public TokenPayload authenticate(String service, ThirdPartySignInRequest request) {
        ThirdPartyTokenClaim tokenClaim = thirdPartyService.parseTokenClaims(request.getToken());

        ThirdPartyConfig config = thirdPartyService.findThirdPartyByService(service);

        if ((tokenClaim.getCellPhone().isEmpty() && config.getClaimCellPhoneYn().toBoolean()) ||
                (tokenClaim.getEmail().isEmpty() && config.getClaimEmailYn().toBoolean()) ||
                (tokenClaim.getName().isEmpty() && config.getClaimNameYn().toBoolean())) {
            throw new ThirdPartyException(ThirdPartyCode.THIRD_PARTY_IS_NOT_AUTHENTICATE);
        }

        TokenReviewResponse tokenResponse = webClientTemplate.post(
                config.getAuthenticateUrl(),
                request,
                new ParameterizedTypeReference<TokenReviewResponse>() {
                });

        if (!tokenResponse.isAuthenticated()) {
            throw new ThirdPartyException(ThirdPartyCode.THIRD_PARTY_IS_NOT_AUTHENTICATE);
        }

        Token token = tokenService.createToken(
                config.getId(), MemberStatusType.ACTIVE, AuthProvider.SYSTEM, config.getSecretKey());

        return TokenPayload.builder().token(token).build();
    }

    public RegisteredThirdPartyMember findRegisteredThirdPartyService(String token) {
        if (StringUtils.isBlank(token)) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is blank");
        }

        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null || !claims.isValid()) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is invalid");
        }

        RegisteredThirdPartyMember registeredThirdPartyMember = thirdPartyService.findThirdPartyServiceByClaim(claims);
        if (registeredThirdPartyMember == null) {
            throw new AuthenticationException(ThirdPartyCode.THIRD_PARTY_NOT_EXIST, "third party is not exist");
        }

        if (!tokenService.verifyToken(token, registeredThirdPartyMember.getSignature())) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token verify failed");
        }

        return registeredThirdPartyMember;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/ticket/usecase/TicketUseCase.java
================================================
package kr.co.yeoshin.backend.ticket.usecase;

import java.util.*;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.hospital.service.HospitalService;
import kr.co.yeoshin.backend.hospital.service.model.HospitalBadgeContainer;
import kr.co.yeoshin.backend.order.service.OrderService;
import kr.co.yeoshin.backend.payload.*;
import kr.co.yeoshin.backend.payload.template.TicketGroupHospitalViewTemplate;
import kr.co.yeoshin.backend.recommend.component.RecommendFacade;
import kr.co.yeoshin.backend.recommend.service.RecommendService;
import kr.co.yeoshin.backend.reservation.service.ReservationService;
import kr.co.yeoshin.backend.salesevent.model.Ref;
import kr.co.yeoshin.backend.salesevent.model.Refer;
import kr.co.yeoshin.backend.salesevent.service.SalesEventService;
import kr.co.yeoshin.backend.salesevent.service.model.SalesEventContainer;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.ticket.controller.model.TicketStatusType;
import kr.co.yeoshin.backend.ticket.service.TicketService;
import kr.co.yeoshin.backend.ticket.usecase.model.TicketPageableContext;
import kr.co.yeoshin.backend.utils.TicketUtils;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicket;
import kr.co.yeoshin.common.reservation.entity.ReservationLatestStatus;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.ListUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@AllArgsConstructor
@UseCase
public class TicketUseCase {

    private final TicketService ticketService;
    private final HospitalService hospitalService;
    private final ReservationService reservationService;
    private final SalesEventService salesEventService;
    private final OrderService orderService;
    private final SalesProductService salesProductService;
    private final RecommendService recommendService;
    private final PayloadFactory payloadFactory;

    public TicketsGroupHospitalViewPayload views(TicketStatusType status) {
        long memberId = DiagnosticContext.fetchMemberId();

        final int MAX_TICKET_VISIBLE_COUNT = 15;

        Map<Hospital, List<Ticket>> ticketsByHospital = ticketService.fetchAllTicketsByMemberIdAndStatuses(memberId,
                        status.getTicketStatuses())
                .stream()
                .sorted(Comparator.comparing(Ticket::getUpdated, Comparator.reverseOrder())
                        .thenComparing(Ticket::getId, Comparator.reverseOrder()))
                .collect(Collectors.groupingBy(Ticket::getHospital, LinkedHashMap::new, Collectors.toList()));
        if (MapUtils.isEmpty(ticketsByHospital)) {
            return TicketsGroupHospitalViewPayload.empty();
        }

        Set<Long> orderSalesProductIds = ticketsByHospital.values().stream()
                .flatMap(x -> ListUtils.subList(x, MAX_TICKET_VISIBLE_COUNT).stream())
                .map(x -> x.getOrderSalesProduct().getId())
                .collect(Collectors.toSet());

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(orderSalesProductIds);

        Map<Long, OrderPurchase> orderByOrderSalesProductIds = orderSalesProducts.stream()
                .collect(Collectors.toMap(OrderSalesProduct::getId, OrderSalesProduct::getOrder, (a, b) -> a));

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderSalesProducts.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList()),
                orderSalesProducts.stream()
                        .map(x -> x.getSalesProductVersion().getSalesProduct().getId())
                        .collect(Collectors.toList()));

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        Map<Hospital, Reservation> reservationsByHospital = reservationService.findAllReservationLatestStatusByMemberId(memberId)
                .stream()
                .collect(Collectors.toMap(ReservationLatestStatus::getHospital, ReservationLatestStatus::getReservation));

        Map<Reservation, List<ReservationAsTicket>> reservationAsTickets = reservationService.fetchAllReservationAsTicketByReservationIds(
                        reservationService.findAllReservationLatestStatusByMemberId(memberId).stream()
                                .map(x -> x.getReservation().getId())
                                .collect(Collectors.toSet()))
                .stream()
                .collect(Collectors.groupingBy(ReservationAsTicket::getReservation));

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                ticketsByHospital.keySet().stream()
                        .map(Hospital::getId)
                        .collect(Collectors.toList()), hospitalService.getBadges(), recommendFacade);

        List<TicketGroupHospitalViewTemplate> groups = new ArrayList<>();
        for (var entry : ticketsByHospital.entrySet()) {
            Hospital hospital = entry.getKey();
            List<Ticket> allTickets = entry.getValue();

            List<Ticket> visibleTickets = ListUtils.subList(allTickets, MAX_TICKET_VISIBLE_COUNT)
                    .stream()
                    .filter(x -> !TicketUtils.isTrash(x, orderByOrderSalesProductIds.get(x.getOrderSalesProduct().getId())))
                    .collect(Collectors.toList());

            Optional<Reservation> reservation = Optional.ofNullable(reservationsByHospital.get(hospital));
            List<Ticket> tickets = reservation.map(x -> reservationAsTickets.getOrDefault(x, Collections.emptyList()))
                    .map(x -> x.stream().map(ReservationAsTicket::getTicket)
                            .collect(Collectors.toList()))
                    .orElse(Collections.emptyList());

            groups.add(TicketGroupHospitalViewTemplate.builder()
                    .hospital(payloadFactory.hospitalTemplate(hospital))
                    .hospitalBadge(payloadFactory.hospitalBadgeTemplate(
                            hospital.getId(),
                            hospitalBadges.stream()
                                    .filter(x -> x.getHospitalId() == hospital.getId())
                                    .findFirst()
                                    .orElse(null)))
                    .tickets(payloadFactory.ticketTemplates(visibleTickets, orderSalesProducts))
                    .reservation(reservation.map(x -> payloadFactory.reservationShortTemplate(x, tickets))
                            .orElse(null))
                    .totalTicketCount(CollectionUtils.size(allTickets))
                    .build());
        }

        return TicketsGroupHospitalViewPayload.builder()
                .groups(groups)
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .build();
    }

    public TicketPayload ticket(long ticketId) {
        long memberId = DiagnosticContext.fetchMemberId();

        Ticket ticket = ticketService.fetchTicketByTicketIdAndMemberId(ticketId, memberId);

        Optional<ReservationAsTicket> reservationAsTicket = ticket.getStatus() == TicketStatus.RESERVED ?
                reservationService.fetchLatestReservationAsTicketByTicketId(ticketId) : Optional.empty();

        OrderSalesProduct orderSalesProduct = orderService.fetchOrderSalesProductById(
                ticket.getOrderSalesProduct().getId());

        SalesEventContainer salesEventWithSalesProducts = salesEventService.fetchSalesEventContainerBySalesProductIds(
                orderSalesProduct.getSalesEvent().getId(),
                Collections.singletonList(orderSalesProduct.getSalesProductVersion().getSalesProduct().getId()),
                EnumSet.allOf(YN.class),
                EnumSet.allOf(YN.class));

        Reservation reservation = reservationAsTicket.map(ReservationAsTicket::getReservation)
                .orElse(null);
        List<Ticket> tickets = reservationAsTicket.map(x -> Collections.singletonList(x.getTicket()))
                .orElse(Collections.emptyList());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        long hospitalId = ticket.getHospital().getId();
        Optional<HospitalBadgeContainer> hospitalBadge = hospitalService.findHospitalBadgeContainer(
                hospitalId, hospitalService.getBadges(), recommendFacade);

        return TicketPayload.builder()
                .ticket(payloadFactory.ticketTemplate(ticket,
                        Collections.singletonList(orderSalesProduct.getSalesProductVersion())))
                .reservation(reservation != null ? payloadFactory.reservationTemplate(reservation, tickets) : null)
                .hospital(payloadFactory.hospitalTemplate(ticket.getHospital()))
                .hospitalBadge(payloadFactory.hospitalBadgeTemplate(hospitalId, hospitalBadge.orElse(null)))
                .salesEvent(payloadFactory.salesEventTemplate(salesEventWithSalesProducts, Ref.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        Collections.singleton(orderSalesProduct.getSalesProductVersion())))
                .build();

    }

    public TicketsPageablePayload list(TicketPageableContext context) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = ticketService.pageable(context);
        Page<Ticket> ticketPage = context.getHospitalId().isPresent() ?
                ticketService.fetchAllTicketsByMemberIdAndHospitalIdAndStatuses(
                        memberId, context.getHospitalId().get(), context.getStatuses(), pageable)
                : ticketService.fetchAllTicketsByMemberIdAndStatuses(memberId, context.getStatuses(), pageable);
        if (ticketPage.isEmpty()) {
            return TicketsPageablePayload.empty();
        }

        String nextToken = ticketPage.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TicketPageableContext.builder()
                        .page(ticketPage.getPageable().getPageNumber() + 1)
                        .hospitalId(context.getHospitalId())
                        .statuses(context.getStatuses())
                        .build());

        List<Ticket> tickets = ticketPage.getContent();

        List<Long> orderSalesProductIds = tickets.stream()
                .map(x -> x.getOrderSalesProduct().getId())
                .collect(Collectors.toList());

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(orderSalesProductIds);

        Map<Long, OrderPurchase> orderByOrderSalesProductIds = orderSalesProducts.stream()
                .collect(Collectors.toMap(OrderSalesProduct::getId, OrderSalesProduct::getOrder, (a, b) -> a));

        List<Hospital> hospitals = tickets.stream().map(Ticket::getHospital).collect(Collectors.toList());

        List<SalesEventContainer> salesEventContainers = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderSalesProducts.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList()),
                orderSalesProducts.stream()
                        .map(x -> x.getSalesProductVersion().getSalesProduct().getId())
                        .collect(Collectors.toList()));

        List<SalesProduct> salesProducts = salesEventContainers
                .stream()
                .flatMap(x -> x.fetchSalesProducts().stream())
                .collect(Collectors.toList());

        Set<Long> hospitalIds = hospitals.stream()
                .map(Hospital::getId)
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        return TicketsPageablePayload.builder()
                .tickets(payloadFactory.ticketTemplates(tickets.stream()
                        .filter(x -> !TicketUtils.isTrash(x, orderByOrderSalesProductIds.get(x.getOrderSalesProduct().getId())))
                        .collect(Collectors.toList()), orderSalesProducts))
                .hospitals(payloadFactory.hospitalTemplates(hospitals))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventContainers, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplates(salesProducts))
                .pageable(payloadFactory.pageableTemplate(ticketPage, nextToken))
                .build();
    }

    public TicketsPayload usableTickets(Optional<Long> hospitalId, List<TicketStatus> ticketStatuses) {
        long memberId = DiagnosticContext.fetchMemberId();

        List<Ticket> tickets = hospitalId.isPresent() ?
                ticketService.fetchAllTicketsByMemberIdAndHospitalId(memberId, hospitalId.get(), ticketStatuses)
                : ticketService.fetchAllTicketsByMemberIdAndStatuses(memberId, ticketStatuses);

        List<OrderSalesProduct> orderSalesProducts = orderService.fetchOrderSalesProductsByIds(
                tickets.stream()
                        .map(x -> x.getOrderSalesProduct().getId())
                        .collect(Collectors.toList()));

        List<SalesEventContainer> salesEventWithSalesProducts = salesEventService.fetchSalesEventContainersBySalesProductIds(
                orderSalesProducts.stream()
                        .map(x -> x.getSalesEvent().getId())
                        .collect(Collectors.toList()),
                orderSalesProducts.stream()
                        .map(x -> x.getSalesProductVersion().getSalesProduct().getId())
                        .collect(Collectors.toList()));

        Set<Long> hospitalIds = tickets.stream()
                .map(x -> x.getHospital().getId())
                .collect(Collectors.toSet());

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        RecommendFacade recommendFacade = recommendService.getRecommendFacade(attributeFacade);

        List<HospitalBadgeContainer> hospitalBadges = hospitalService.findHospitalBadgeContainers(
                hospitalIds, hospitalService.getBadges(), recommendFacade);

        return TicketsPayload.builder()
                .tickets(payloadFactory.ticketTemplates(tickets, orderSalesProducts))
                .hospitals(payloadFactory.hospitalTemplates(tickets.stream()
                        .map(Ticket::getHospital)
                        .collect(Collectors.toList())))
                .hospitalBadges(payloadFactory.hospitalBadgeTemplates(hospitalIds, hospitalBadges))
                .salesEvents(payloadFactory.salesEventTemplatesByContainers(salesEventWithSalesProducts, Refer.empty()))
                .salesProducts(payloadFactory.salesProductTemplatesBySalesProductVersions(
                        orderSalesProducts.stream()
                                .map(OrderSalesProduct::getSalesProductVersion)
                                .collect(Collectors.toList())))
                .build();
    }

    public TicketCountPayload count(List<TicketStatusType> statuses) {
        long memberId = DiagnosticContext.fetchMemberId();

        long count = ticketService.findTicketCountByMemberIdAndStatus(memberId, statuses);
        return TicketCountPayload.builder()
                .count(count)
                .build();
    }

    public BoolPayload extendExpirations(long ticketId, boolean group) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (group) {
            return BoolPayload.builder()
                    .result(ticketService.extendTicketGroupExpiration(memberId, ticketId))
                    .build();
        } else {
            return BoolPayload.builder()
                    .result(ticketService.extendTicketExpiration(memberId, ticketId))
                    .build();
        }
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/treatment/usecase/TreatmentUseCase.java
================================================
package kr.co.yeoshin.backend.treatment.usecase;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.payload.TreatmentLibrariesPayload;
import kr.co.yeoshin.backend.treatment.service.TreatmentLibraryService;
import kr.co.yeoshin.backend.treatment.service.model.TreatmentLibraryFacade;
import lombok.AllArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;

@AllArgsConstructor
@UseCase
public class TreatmentUseCase {

    private final TreatmentLibraryService treatmentLibraryService;
    private final PayloadFactory payloadFactory;

    public TreatmentLibrariesPayload treatmentLibraries(Collection<Long> treatmentIds) {
        List<TreatmentLibraryFacade> treatmentLibraryFacades = treatmentLibraryService.fetchAllTreatmentLibraries(treatmentIds)
                .stream()
                .map(x -> TreatmentLibraryFacade.builder()
                        .treatment(Optional.ofNullable(x.getTreatment()))
                        .treatmentLibrary(Optional.of(x))
                        .build())
                .collect(Collectors.toList());
        if (CollectionUtils.isEmpty(treatmentLibraryFacades)) {
            return TreatmentLibrariesPayload.empty();
        }

        return TreatmentLibrariesPayload.builder()
                .treatments(treatmentLibraryFacades.stream()
                        .map(TreatmentLibraryFacade::getTreatment)
                        .filter(Optional::isPresent)
                        .map(Optional::get)
                        .map(payloadFactory::textIconTemplate)
                        .collect(Collectors.toList()))
                .treatmentLibraries(payloadFactory.treatmentLibraryTemplates(treatmentLibraryFacades))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/tv/usecase/TvUseCase.java
================================================
package kr.co.yeoshin.backend.tv.usecase;

import java.time.LocalDate;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.model.api.code.TvCode;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.TvException;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.payload.TvCategoriesPayload;
import kr.co.yeoshin.backend.payload.TvPageablePayload;
import kr.co.yeoshin.backend.payload.TvPayload;
import kr.co.yeoshin.backend.payload.TvRepliesPageablePayload;
import kr.co.yeoshin.backend.point.service.MemberPointService;
import kr.co.yeoshin.backend.point.service.model.MemberPointAddContext;
import kr.co.yeoshin.backend.quest.service.QuestService;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.report.service.ReportService;
import kr.co.yeoshin.backend.salesproduct.component.SalesProductAttributeFacade;
import kr.co.yeoshin.backend.salesproduct.service.SalesProductService;
import kr.co.yeoshin.backend.search.model.SearchResult;
import kr.co.yeoshin.backend.search.service.SearchService;
import kr.co.yeoshin.backend.tv.controller.model.TvReplyModifyRequest;
import kr.co.yeoshin.backend.tv.controller.model.TvReplyRegisterRequest;
import kr.co.yeoshin.backend.tv.service.TvLikeService;
import kr.co.yeoshin.backend.tv.service.TvScrapService;
import kr.co.yeoshin.backend.tv.service.TvService;
import kr.co.yeoshin.backend.tv.service.model.TvPageableVisitor;
import kr.co.yeoshin.backend.tv.service.model.TvStat;
import kr.co.yeoshin.backend.tv.usecase.model.TvPageableContext;
import kr.co.yeoshin.backend.tv.usecase.model.TvReplyByMePageableContext;
import kr.co.yeoshin.backend.tv.usecase.model.TvReplyPageableContext;
import kr.co.yeoshin.backend.tv.usecase.model.TvSearchableContext;
import kr.co.yeoshin.common.Constant.Point;
import kr.co.yeoshin.common.elasticsearch.document.TvDocument;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.point.model.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.tv.entity.Tv;
import kr.co.yeoshin.common.tv.entity.TvLike;
import kr.co.yeoshin.common.tv.entity.TvReply;
import kr.co.yeoshin.common.tv.entity.TvScrap;
import kr.co.yeoshin.common.type.DomainType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.utils.CryptUtils;
import kr.co.yeoshin.common.utils.MessageUtils;
import kr.co.yeoshin.common.utils.PointUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class TvUseCase {

    private final TvService tvService;
    private final TvScrapService tvScrapService;
    private final TvLikeService tvLikeService;
    private final MemberService memberService;
    private final SalesProductService salesProductService;
    private final SearchService searchService;
    private final ReportService reportService;
    private final QuestService questService;
    private final MemberPointService memberPointService;
    private final QueueMessageDomainEventContext queueMessageDomainEventContext;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public TvCategoriesPayload categories() {
        return TvCategoriesPayload.builder()
                .categories(tvService.findActiveTvCategories().stream()
                        .map(payloadFactory::textTemplate)
                        .collect(Collectors.toList()))
                .build();
    }

    public TvPageablePayload listTvs(TvPageableContext pageableContext) {
        TvPageableVisitor pageableVisitor = tvService.pageableVisitor(pageableContext);

        SalesProductAttributeFacade attributeFacade = salesProductService.getAttributeFacade();
        List<Long> treatmentIds = tvService.findTreatmentIdsByCategories(pageableContext.getCategoryIds(), attributeFacade);

        Page<Tv> tvList = pageableVisitor.findAllByTreatmentIds(treatmentIds);

        String nextToken = tvList.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TvPageableContext.builder()
                        .sort(pageableContext.getSort())
                        .page(tvList.getPageable().getPageNumber() + 1)
                        .categoryIds(pageableContext.getCategoryIds())
                        .build());

        List<TvScrap> tvScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> tvScrapService.findTvScraps(memberId, tvList.getContent().stream()
                        .map(Tv::getId)
                        .collect(Collectors.toList())));

        List<TvStat> tvStats = tvService.findStatsByTvIds(tvList.getContent().stream()
                .map(Tv::getId)
                .collect(Collectors.toList()));

        return TvPageablePayload.builder()
                .tvs(payloadFactory.tvTemplates(tvList.getContent()))
                .tvStats(payloadFactory.tvStatTemplates(tvStats))
                .tvScraps(payloadFactory.tvScrapTemplates(tvScraps))
                .pageable(payloadFactory.pageableTemplate(tvList, nextToken))
                .build();
    }

    public TvPageablePayload searchTvs(TvSearchableContext searchableContext) {
        SearchResult<TvDocument> searchResult = searchService.search(searchableContext);

        String nextToken = searchResult.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TvSearchableContext.builder()
                        .size(searchableContext.getSize())
                        .sort(searchableContext.getSort())
                        .query(searchableContext.getQuery())
                        .searchAfter(searchResult.getSearchAfter())
                        .build());

        List<Long> tvIds = searchResult.getDocuments().stream()
                .map(TvDocument::getId)
                .collect(Collectors.toList());

        List<TvScrap> tvScraps = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptyList,
                (memberId) -> tvScrapService.findTvScraps(memberId, tvIds));

        List<TvStat> tvStats = tvService.findStatsByTvIds(tvIds);

        return TvPageablePayload.builder()
                .tvs(payloadFactory.tvTemplatesByTvDocuments(searchResult.getDocuments()))
                .tvStats(payloadFactory.tvStatTemplates(tvStats))
                .tvScraps(payloadFactory.tvScrapTemplates(tvScraps))
                .pageable(payloadFactory.pageableTemplate(
                        searchResult.getTotalCount(), searchResult.getSearchSize(), nextToken))
                .build();
    }

    public TvPayload tv(long tvId) {
        Tv tv = tvService.findTvByTvId(tvId)
                .orElseThrow(() -> new TvException(CommonCode.ERROR));

        TvStat tvStat = tvService.findStatByTvId(tvId);
        TvScrap tvScrap = DiagnosticContext.ifVirtualMemberOrElse(
                Optional::<TvScrap>empty,
                (memberId) -> tvScrapService.findTvScrap(memberId, tvId)).orElse(null);

        TvLike tvLike = DiagnosticContext.ifVirtualMemberOrElse(
                Optional::<TvLike>empty,
                (memberId) -> tvLikeService.findTvLike(memberId, tvId)).orElse(null);

        DiagnosticContext.ifVirtualMemberOrElse(
                () -> null,
                (memberId) -> tvService.viewTv(memberId, tvId));

        return TvPayload.builder()
                .tv(payloadFactory.tvTemplate(tv))
                .tvStat(payloadFactory.tvStatTemplate(tvStat))
                .tvScrap(payloadFactory.tvScrapTemplate(tvScrap))
                .tvLike(payloadFactory.tvLikeTemplate(tvLike))
                .build();
    }

    public TvRepliesPageablePayload listReplies(TvReplyPageableContext pageableContext) {
        Pageable pageable = tvService.pageable(pageableContext);

        Page<TvReply> tvReplies = tvService.fetchAllTvRepliesByTvId(pageableContext.getTvId(), pageable);
        if (tvReplies.isEmpty()) {
            return TvRepliesPageablePayload.empty();
        }

        Page<TvReply> excludeTvReplies = reportService.excludeReportedMember(
                tvReply -> tvReply.getMember().getId(), tvReplies);

        Set<Long> memberIds = excludeTvReplies.stream()
                .map(tvReply -> tvReply.getMember().getId())
                .collect(Collectors.toSet());

        Set<Long> reportReplyIds = DiagnosticContext.ifVirtualMemberOrElse(
                Collections::emptySet,
                (memberId) -> reportService.findReportContents(memberId, ContentType.TV_REPLY, excludeTvReplies.stream()
                        .map(TvReply::getId)
                        .collect(Collectors.toList())));

        Map<Long, Member> members = memberService.findAllByMemberIds(memberIds)
                .stream()
                .collect(Collectors.toMap(Member::getId, Function.identity()));

        String nextToken = excludeTvReplies.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TvReplyPageableContext.builder()
                        .sort(pageableContext.getSort())
                        .tvId(pageableContext.getTvId())
                        .page(excludeTvReplies.getPageable().getPageNumber() + 1)
                        .build());

        return TvRepliesPageablePayload.builder()
                .tvs(payloadFactory.tvTemplates(excludeTvReplies.stream()
                        .map(TvReply::getTv)
                        .collect(Collectors.toList())))
                .replies(payloadFactory.tvReplyTemplates(excludeTvReplies.getContent(), members, reportReplyIds))
                .pageable(payloadFactory.pageableTemplate(excludeTvReplies, nextToken))
                .build();
    }

    public BoolPayload registerReply(TvReplyRegisterRequest request, long tvId) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (!tvService.validateReplyRegistrable(memberId)) {
            queueMessageDomainEventContext.addDomainEvent(DomainEventType.TV_ABUSE_CREATE, memberId);
            throw new TvException(TvCode.TV_REPLY_WRITABLE_QUOTA_EXCEED);
        }

        TvReply tvReply = tvService.registerReply(memberId, tvId, request.getContents());

        if (questService.tvReplyStatus() == ProgressStatus.PROGRESS) {
            questService.registerTvReply(memberId, tvReply, LocalDate.now())
                    .ifPresent(x -> memberPointService.registerPoint(
                            memberId, MemberPointAddContext.builder()
                                    .title(Action.QUEST_TV_REPLY.getTitleKo())
                                    .action(Action.QUEST_TV_REPLY)
                                    .publishType(PublishType.SYSTEM)
                                    .compositions(Collections.singletonList(MemberPointComposition.builder()
                                            .expireAt(PointUtils.expireAt(Point.QUEST_TV_REPLY))
                                            .point(x.getPoint())
                                            .build()))
                                    .point(x.getPoint())
                                    .type(MemberPointType.REWARD)
                                    .refType(DomainType.QUEST_TV_REPLY)
                                    .refId(x.getId())
                                    .build()));
        }

        return BoolPayload.builder()
                .result(true)
                .build();
    }

    public BoolPayload modifyReply(TvReplyModifyRequest request, long tvId, long replyId) {
        long memberId = DiagnosticContext.fetchMemberId();

        return transactionTemplate.executeMainWritableTransaction(() -> {
            Member member = memberService.findMember(memberId);

            TvReply tvReply = tvService.modifyReply(replyId, tvId, request.getContents(), member.getProfileId());

            if (memberId != tvReply.getMember().getId()) {
                throw new TvException(CommonCode.ERROR,
                        MessageUtils.format("modify request member id({}) is different from reply member id({})",
                                memberId, tvReply.getMember().getId()));
            }

            return BoolPayload.builder()
                    .result(true)
                    .build();
        });
    }

    public BoolPayload removeReply(long tvId, long replyId) {
        long memberId = DiagnosticContext.fetchMemberId();

        boolean result = transactionTemplate.executeMainWritableTransaction(() -> {
            TvReply tvReply = tvService.findTvReplyByReplyIdAndTvId(replyId, tvId);

            if (memberId != tvReply.getMember().getId()) {
                throw new TvException(CommonCode.ERROR,
                        MessageUtils.format("remove request member id({}) is different from reply member id({})",
                                memberId, tvReply.getMember().getId()));
            }

            return tvService.removeReply(tvReply);
        });

        return BoolPayload.builder().result(result).build();
    }

    public TvRepliesPageablePayload repliesByMe(TvReplyByMePageableContext pageableContext) {
        long memberId = DiagnosticContext.fetchMemberId();

        Pageable pageable = tvService.pageable(pageableContext);
        Page<TvReply> replies = tvService.fetchAllRepliesByMemberId(memberId, pageable);

        String nextToken = replies.isLast() ? StringUtils.EMPTY : CryptUtils.AES.encrypt(
                TvReplyByMePageableContext.builder()
                        .page(replies.getPageable().getPageNumber() + 1)
                        .build());

        return TvRepliesPageablePayload.builder()
                .tvs(payloadFactory.tvTemplates(replies.getContent().stream().map(TvReply::getTv).collect(Collectors.toList())))
                .replies(payloadFactory.tvReplyTemplates(replies.getContent()))
                .pageable(payloadFactory.pageableTemplate(replies, nextToken))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/validator/usecase/ValidatorUseCase.java
================================================
package kr.co.yeoshin.backend.validator.usecase;

import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.validator.controller.model.ValidateRequest;
import kr.co.yeoshin.backend.validator.service.ValidatorService;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@UseCase
public class ValidatorUseCase {

    private final ValidatorService validatorService;

    public BoolPayload validate(ValidateRequest request) {

        return BoolPayload.builder()
                .result(request.getValidator().validate(validatorService))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/verify/controller/model/EmailVerificationSendPayload.java
================================================
package kr.co.yeoshin.backend.verify.controller.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class EmailVerificationSendPayload {

    private int expiresInSeconds;
    private int retryAfterSeconds;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/verify/controller/model/SmsVerificationSendPayload.java
================================================
package kr.co.yeoshin.backend.verify.controller.model;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SmsVerificationSendPayload {

    private int expiresInSeconds;
    private int retryAfterSeconds;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/verify/controller/model/SmsVerificationSendTemplate.java
================================================
package kr.co.yeoshin.backend.verify.controller.model;

import lombok.Data;
import org.apache.commons.lang3.StringUtils;

@Data
public class SmsVerificationSendTemplate {

    private String prefix = StringUtils.EMPTY;
    private String suffix = StringUtils.EMPTY;

    public static SmsVerificationSendTemplate empty() {
        SmsVerificationSendTemplate template = new SmsVerificationSendTemplate();
        template.setPrefix(StringUtils.EMPTY);
        template.setSuffix(StringUtils.EMPTY);

        return template;
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/verify/service/model/VerificationProcessorTemplate.java
================================================
package kr.co.yeoshin.backend.verify.service.model;

import kr.co.yeoshin.backend.verify.component.verification.VerificationMemberStatusProcessor;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class VerificationProcessorTemplate {

    private VerificationMemberStatusProcessor memberStatusProcessor;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/verify/usecase/VerificationUseCase.java
================================================
package kr.co.yeoshin.backend.verify.usecase;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import kr.co.yeoshin.backend.auth.model.RegisteredMember;
import kr.co.yeoshin.backend.auth.service.AuthService;
import kr.co.yeoshin.backend.common.Constant.Auth;
import kr.co.yeoshin.backend.common.Constant.Auth.Verification;
import kr.co.yeoshin.backend.common.Constant.Member;
import kr.co.yeoshin.backend.common.Constant.Notification;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.component.TransactionTemplate;
import kr.co.yeoshin.backend.common.model.api.code.*;
import kr.co.yeoshin.backend.common.model.api.payload.BoolPayload;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageDomainEventContext;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.AuthenticationException;
import kr.co.yeoshin.backend.exception.VerificationException;
import kr.co.yeoshin.backend.iamport.component.retrofit.model.IdentificationPayload;
import kr.co.yeoshin.backend.member.service.MemberService;
import kr.co.yeoshin.backend.notification.component.model.*;
import kr.co.yeoshin.backend.notification.service.NotificationService;
import kr.co.yeoshin.backend.payload.ProfilePayload;
import kr.co.yeoshin.backend.payload.VerificationDanalIdentitySecretPayload;
import kr.co.yeoshin.backend.payload.VerificationNiceIdentityPayload;
import kr.co.yeoshin.backend.payload.VerificationNiceIdentitySecretPayload;
import kr.co.yeoshin.backend.queue.model.domainevent.DomainEventType;
import kr.co.yeoshin.backend.utils.CellPhoneUtils;
import kr.co.yeoshin.backend.verify.component.nice.model.IdentityNiceVerification;
import kr.co.yeoshin.backend.verify.component.nice.model.IdentityNiceVerificationSecret;
import kr.co.yeoshin.backend.verify.component.verification.VerificationMemberStatusProcessor;
import kr.co.yeoshin.backend.verify.controller.model.*;
import kr.co.yeoshin.backend.verify.service.DanalService;
import kr.co.yeoshin.backend.verify.service.NiceService;
import kr.co.yeoshin.backend.verify.service.VerificationService;
import kr.co.yeoshin.backend.verify.service.model.*;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.type.YN;
import kr.co.yeoshin.common.utils.*;
import kr.co.yeoshin.common.verify.type.VerificationType;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@AllArgsConstructor
@UseCase
public class VerificationUseCase {

    private final AuthService authService;
    private final VerificationService verificationService;
    private final NotificationService notificationService;
    private final NiceService niceService;
    private final DanalService danalService;
    private final MemberService memberService;
    private final VerificationMemberStatusProcessor verificationMemberStatusProcessor;
    private final QueueMessageDomainEventContext domainEventContext;
    private final TransactionTemplate transactionTemplate;
    private final PayloadFactory payloadFactory;

    public SmsVerificationSendPayload sendSms(SmsVerificationSendRequest request) {

        String code = verificationService.createVerificationCode(Verification.AUTH_SMS_VERIFICATION_CODE_NUMBER_OF_DIGITS);

        SmsVerificationRegister verificationRegister = SmsVerificationRegister.of(
                request,
                code);
        SmsTo to = verificationRegister.getTo();
        if (!ValidationUtils.isValidCellPhone(to.getCountryCallingCode(), to.getCellPhone())
                || !to.isValid()) {
            log.debug("auth sms send request({}) invalid", request);
            throw new VerificationException(
                    ValidatorCode.VALIDATOR_CELL_PHONE_INVALID,
                    MessageUtils.format("invalid cell phone:{}", request.getTo())
            );
        }

        String clientIp = DiagnosticContext.fetchClientIp();

        SmsSendability sendability = transactionTemplate.executeMainWritableTransaction(
                () -> {
                    if (verificationService.blockAuthVerificationSms(
                            request.getType(), request.getTo().getCountryCallingCode())) {
                        throw new VerificationException(VerificationCode.VERIFICATION_SMS_BLOCK);
                    }
                    if (verificationService.exceedAuthVerificationSmsQuota(request.getType(), clientIp)) {
                        log.info("auth sms quota exceed to {}", clientIp);
                        return SmsSendability.fail();
                    }

                    if (verificationService.exceedAuthVerificationSmsQuota(to.getCellPhone())) {
                        log.info("auth sms quota exceed to {}", to.getCellPhone());
                        return SmsSendability.fail();
                    }

                    return to.assessSendability(request.getType(), authService, verificationService,
                            VerificationProcessorTemplate.builder()
                                    .memberStatusProcessor(verificationMemberStatusProcessor)
                                    .build());
                });

        if (!sendability.isResult()) {
            throw sendability.getThrowable()
                    .orElse(new VerificationException(CommonCode.ERROR,
                            MessageUtils.format("sms send condition not fulfilled : {}", verificationRegister)));
        }

        long memberId = DiagnosticContext.fetchMemberId(() -> Member.MEMBER_NOT_EXIST_ID);

        SmsVerificationSendTemplate smsTemplate = Optional.ofNullable(request.getTemplate())
                .orElse(SmsVerificationSendTemplate.empty());

        Map<String, Object> notificationParams = new HashMap<>();
        notificationParams.put("authNumber", verificationRegister.getCode());
        notificationParams.put("templatePrefix", Optional.ofNullable(smsTemplate.getPrefix()).orElse(StringUtils.EMPTY));
        notificationParams.put("templateSuffix", Optional.ofNullable(smsTemplate.getSuffix()).orElse(StringUtils.EMPTY));

        NotificationResult<NhnSmsNotificationContext> notificationResult = notificationService.send(
                List.of(NhnSmsNotificationContext
                        .builder(
                                Collections.singletonList(SmsRecipient.builder()
                                        .recipientNo(to.getCellPhone())
                                        .countryCode(to.getCountryCallingCode())
                                        .build()),
                                NotificationSmsIdType.SMS_VERIFICATION)
                        .templateParams(notificationParams)
                        .locale(CellPhoneUtils.isKorean(verificationRegister.getTo().getCountryCallingCode())
                                ? Locale.KOREAN : Locale.ENGLISH)
                        .useConversion(to.useConversion())
                        .build()));
        if (CollectionUtils.isEmpty(notificationResult.getSuccess())) {
            throw new VerificationException(NotificationCode.NOTIFICATION_SMS_SEND_ERROR,
                    "auth verification sms send failed");
        }
        NotificationContextResult<NhnSmsNotificationContext> notificationContextResult = notificationResult.getSuccess()
                .stream()
                .findFirst()
                .orElseThrow(() -> new VerificationException(NotificationCode.NOTIFICATION_SMS_SEND_ERROR,
                        "auth verification sms send result not exist"));

        String requestId = MapUtils.getString(
                notificationContextResult.getMeta(),
                Notification.META_SMS_REQUEST_ID,
                UUIDUtils.randomString());

        RegisteredSmsVerification registeredSmsVerification = transactionTemplate.executeMainWritableTransaction(
                () -> verificationService.registerAuthVerificationSms(memberId, requestId, verificationRegister));

        return SmsVerificationSendPayload.builder()
                .expiresInSeconds(registeredSmsVerification.getExpiresInSeconds())
                .retryAfterSeconds(Verification.AUTH_SMS_SEND_RETRY_AFTER_SECONDS)
                .build();
    }

    public BoolPayload checkSmsCode(SmsVerificationCheckRequest request) {
        SmsVerificationCheck verificationCheck = SmsVerificationCheck.of(request);
        if (!ValidationUtils.isValidCellPhone(verificationCheck.getCountryCallingCode(), verificationCheck.getCellPhone())) {
            log.debug("auth sms check request({}) invalid", request);
            throw new VerificationException(
                    ValidatorCode.VALIDATOR_CELL_PHONE_INVALID,
                    MessageUtils.format("invalid cell phone:{}", request.getCellPhone())
            );
        }

        VerificationInspection inspection = transactionTemplate.executeMainWritableTransaction(() -> {
            VerificationInspection result = verificationService.checkVerificationSmsCode(verificationCheck);
            if (!result.isResult()) {
                return result;
            }

            verificationService.checkVerificationPostHandlers(verificationCheck);

            return result;
        });

        if (!inspection.isResult()) {
            log.debug("auth sms check verification sms code({}) invalid", request);

            throw inspection.getThrowable()
                    .orElse(new VerificationException(CommonCode.ERROR));
        }

        return BoolPayload.builder()
                .result(inspection.isResult())
                .build();
    }

    public EmailVerificationSendPayload sendEmail(EmailVerificationSendRequest request) {
        EmailVerificationRegister verificationRegister = EmailVerificationRegister.of(
                request,
                Verification.AUTH_EMAIL_VERIFICATION_CODE_NUMBER_OF_DIGITS);
        if (!ValidationUtils.isValidEmail(verificationRegister.getTo().getEmail())
                || !verificationRegister.getTo().isValid()) {
            log.debug("auth email send request({}) invalid", request);
            throw new VerificationException(
                    ValidatorCode.VALIDATOR_EMAIL_INVALID,
                    MessageUtils.format("invalid email :{}", request.getTo().getEmail())
            );
        }

        boolean existEmail = transactionTemplate.executeMainReadableTransaction(
                () -> {
                    EmailTo to = verificationRegister.getTo();
                    if (verificationService.exceedAuthVerificationEmailQuota(to.getEmail())) {
                        log.info("auth email quota exceed to {}", to.getEmail());
                        return false;
                    }
                    return to.existEmail(authService);
                });

        if (!existEmail) {
            throw new VerificationException(CommonCode.ERROR,
                    MessageUtils.format("email is not exist : {}", request.getTo()));
        }

        long memberId = DiagnosticContext.fetchMemberId(() -> Member.MEMBER_NOT_EXIST_ID);
        RegisteredEmailVerification emailVerification = verificationService.registerAuthVerificationEmail(
                memberId, verificationRegister);
        NotificationResult<GmailNotificationContext> notificationResult = notificationService.send(
                GmailNotificationContext.builder(
                                Collections.singletonList(verificationRegister.getTo().getEmail()),
                                // TODO conf + i18n
                                "[여신티켓] 이메일 인증을 위한 인증번호에요.",
                                NotificationMailTemplateType.AUTH_VERIFICATION_CODE)
                        .templateParams(Collections.singletonMap("code", emailVerification.getCode()))
                        .build());
        if (CollectionUtils.isEmpty(notificationResult.getSuccess())) {
            throw new VerificationException(NotificationCode.NOTIFICATION_EMAIL_SEND_ERROR,
                    "auth verification sms send failed");
        }

        return EmailVerificationSendPayload.builder()
                .expiresInSeconds(emailVerification.getExpiresInSeconds())
                .retryAfterSeconds(Verification.AUTH_EMAIL_SEND_RETRY_AFTER_SECONDS)
                .build();
    }

    public BoolPayload checkEmailCode(EmailVerificationCheckRequest request) {
        EmailVerificationCheck verificationCheck = EmailVerificationCheck.of(request);
        if (!ValidationUtils.isValidEmail(verificationCheck.getEmail())) {
            log.debug("auth email check request({}) invalid", request);
            throw new VerificationException(
                    ValidatorCode.VALIDATOR_EMAIL_INVALID,
                    MessageUtils.format("invalid email :{}", request.getEmail())
            );
        }

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> verificationService.checkVerificationEmailCode(verificationCheck)))
                .build();
    }

    public BoolPayload checkPassword(RegisteredMember registeredMember,
            PasswordVerificationRequest request) {
        long memberId = registeredMember.getId().orElseThrow(
                () -> new AuthenticationException(AuthCode.AUTH_MEMBER_NOT_EXIST)
        );

        if (registeredMember.getAuthProvider() != AuthProvider.SYSTEM) {
            throw new VerificationException(CommonCode.ERROR,
                    MessageUtils.format("member(id: {}) is not system member", memberId));
        }

        boolean verified = verificationService.verifyAuthPassword(memberId, request.getPassword());
        if (!verified) {
            throw new VerificationException(CommonCode.ERROR,
                    MessageUtils.format("member(id: {}, provider:{}) password verification is invalid ",
                            registeredMember.getId(), registeredMember.getAuthProvider()));
        }

        PasswordVerificationRegister passwordVerificationRegister =
                PasswordVerificationRegister.builder()
                        .memberId(memberId)
                        .type(request.getType())
                        .build();

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> verificationService.registerAuthVerificationPassword(passwordVerificationRegister)))
                .build();
    }

    public VerificationNiceIdentitySecretPayload identityVerification(VerificationNiceIdentityRequest request) {

        long memberId = DiagnosticContext.fetchMemberId();

        if (verificationService.exceedAuthVerificationNiceIdentityQuota(memberId)) {
            throw new VerificationException(CommonCode.ERROR,
                    MessageUtils.format("verification identity exceed quota from memberId({])", memberId));
        }

        IdentityNiceVerificationSecret payload = niceService.identityVerificationSecret(request.getUrl());

        String context = CryptUtils.AES.encrypt(payload.getContext());

        RegisteredIdentityNiceVerification identityVerification = verificationService.registerAuthVerificationIdentity(
                memberId, request.getType(), context);

        return VerificationNiceIdentitySecretPayload.builder()
                .expiresInSeconds(identityVerification.getExpiresInSeconds())
                .retryAfterSeconds(Verification.AUTH_IDENTITY_VERIFICATION_RETRY_AFTER_SECONDS)
                .encryptionData(payload.getEncryptionData())
                .integrityValue(payload.getIntegrityValue())
                .tokenVersionId(payload.getTokenVersionId())
                .context(context)
                .build();
    }

    public BoolPayload checkIdentityVerification(VerificationNiceIdentityCheckRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        IdentityNiceVerification verification = niceService.decryptSecret(
                request.getContext(), request.getEncryptionData());
        if (verification == null) {
            log.error("nice identity validation failed from {}", request);
            throw new VerificationException(CommonCode.ERROR);
        }

        return BoolPayload.builder()
                .result(transactionTemplate.executeMainWritableTransaction(
                        () -> verificationService.checkAuthVerificationIdentity(memberId,
                                VerificationNiceIdentityCheck.of(request))))
                .build();
    }

    public VerificationNiceIdentityPayload decryptIdentityVerification(VerificationNiceIdentityEncryption encryption) {
        IdentityNiceVerification verification = niceService.decryptSecret(
                encryption.getContext(), encryption.getEncryptionData());

        return VerificationNiceIdentityPayload.builder()
                .results(JsonUtils.toJsonString(verification))
                .build();
    }

    public VerificationDanalIdentitySecretPayload identityVerification(VerificationDanalIdentityRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        if (verificationService.exceedAuthVerificationDanalIdentityQuota(memberId)) {
            throw new VerificationException(CommonCode.ERROR,
                    MessageUtils.format("verification identity exceed quota from memberId({])", memberId));
        }

        RegisteredIdentityDanalVerification identityVerification = verificationService.registerAuthVerificationIdentity(
                memberId, request.getType());

        return VerificationDanalIdentitySecretPayload.builder()
                .expiresInSeconds(identityVerification.getExpiresInSeconds())
                .retryAfterSeconds(Verification.AUTH_IDENTITY_VERIFICATION_RETRY_AFTER_SECONDS)
                .key(identityVerification.getKey())
                .build();
    }

    public ProfilePayload checkIdentityVerification(VerificationDanalIdentityCheckRequest request) {
        long memberId = DiagnosticContext.fetchMemberId();

        IdentificationPayload identification = danalService.retrieveIdentification(request.getCode());

        return ProfilePayload.builder()
                .member(payloadFactory.memberTemplate(transactionTemplate.executeMainWritableTransaction(() -> {
                    MemberServiceSummary summary = memberService.fetchMemberServiceSummaryByMemberId(memberId);
                    boolean identified = summary.getIdentificationYn().toBoolean();
                    if (identified && !StringUtils.equals(summary.getIdentificationKey(), identification.getUniqueInSite())) {
                        throw new VerificationException(VerificationCode.VERIFICATION_IDENTIFICATION_INVALID);
                    }

                    verificationService.checkAuthVerificationIdentity(memberId, VerificationDanalIdentityCheck.of(request));

                    kr.co.yeoshin.common.member.entity.Member member = summary.getMember();
                    if (request.getType() != VerificationType.MEMBER_PROFILE) {
                        return member;
                    }

                    memberService.fetchMemberServiceSummaryByIdentificationKey(identification.getUniqueInSite())
                            .filter(x -> x.getMember().getId() != memberId)
                            .ifPresent(x -> {
                                throw new VerificationException(VerificationCode.VERIFICATION_IDENTIFICATION_INVALID);
                            });

                    memberService.findMemberByCellPhone(identification.getCellPhone())
                            .filter(x -> x.getId() != memberId)
                            .ifPresent(x -> {
                                memberService.invalidateMemberCellPhone(x.getId());
                                domainEventContext.addDomainEvent(DomainEventType.MEMBER_UPDATE, x.getId());
                                domainEventContext.addDomainEvent(DomainEventType.MEMBER_CELL_PHONE_DELETE, x.getId());
                            });
                    if (!identified) {
                        domainEventContext.addDomainEvent(DomainEventType.VERIFICATION_IDENTITY_CREATE, memberId);
                    }

                    LocalDate birthday = identification.getBirthday();
                    member.changeName(identification.getName())
                            .changeCountryCode(Auth.DEFAULT_COUNTRY_CODE)
                            .changeCountryCallingCode(Auth.DEFAULT_COUNTRY_CALLING_CODE)
                            .changeCellPhone(identification.getCellPhone())
                            .changeBirthYear(birthday.getYear())
                            .changeBirthMonth(birthday.getMonthValue())
                            .changeBirthDay(birthday.getDayOfMonth());

                    summary.changeIdentificationYn(YN.Y)
                            .changeIdentificationAt(LocalDateTime.now())
                            .changeIdentificationKey(identification.getUniqueInSite());

                    domainEventContext.addDomainEvent(DomainEventType.MEMBER_UPDATE, memberId);

                    return member;
                })))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/weather/component/model/accuweather/GeoPositionSearchPayload.java
================================================
package kr.co.yeoshin.backend.weather.component.model.accuweather;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class GeoPositionSearchPayload {

    @JsonProperty("Version")
    private int version;
    @JsonProperty("Key")
    private String key;
    @JsonProperty("Type")
    private String type;
    @JsonProperty("Rype")
    private int rank;
    @JsonProperty("LocalizedName")
    private String localizedName;
    @JsonProperty("EnglishName")
    private String englishName;
    @JsonProperty("PrimaryPostalCode")
    private String primaryPostalCode;
    @JsonProperty("Region")
    private Region region;
    @JsonProperty("Country")
    private Country country;
    @JsonProperty("AdministrativeArea")
    private AdministrativeArea administrativeArea;
    @JsonProperty("TimeZone")
    private TimeZone timeZone;
    @JsonProperty("GeoPosition")
    private GeoPosition geoPosition;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/weather/component/model/openweather/AirPollutionPayload.java
================================================
package kr.co.yeoshin.backend.weather.component.model.openweather;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Data;

@Data
public class AirPollutionPayload {

    @JsonProperty("list")
    private List<AirPollution> airPollutions;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/weather/component/model/openweather/WeatherPayload.java
================================================
package kr.co.yeoshin.backend.weather.component.model.openweather;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class WeatherPayload {

    /*
    {
      "lat": 33.44,
      "lon": -94.04,
      "timezone": "America/Chicago",
      "timezone_offset": -18000,
      "current": {
        "dt": 1729869076,
        "sunrise": 1729859348,
        "sunset": 1729899056,
        "temp": 293.51,
        "feels_like": 293.72,
        "pressure": 1021,
        "humidity": 81,
        "dew_point": 290.14,
        "uvi": 1.45,
        "clouds": 100,
        "visibility": 10000,
        "wind_speed": 4.12,
        "wind_deg": 250,
        "weather": [
          {
            "id": 804,
            "main": "Clouds",
            "description": "overcast clouds",
            "icon": "04d"
          }
        ]
      }
    }
    */
    @JsonProperty("lat")
    private double latitude;
    @JsonProperty("lon")
    private double longitude;
    @JsonProperty("timezone")
    private String timezone;
    private int timezoneOffset;

    private Weather current;
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/weather/usecase/WeatherUseCase.java
================================================
package kr.co.yeoshin.backend.weather.usecase;

import java.time.LocalDateTime;
import kr.co.yeoshin.backend.common.Constant;
import kr.co.yeoshin.backend.common.component.PayloadFactory;
import kr.co.yeoshin.backend.common.model.api.code.CommonCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.config.scope.QueueMessageRestrictionContext;
import kr.co.yeoshin.backend.exception.WeatherException;
import kr.co.yeoshin.backend.payload.WeatherPayload;
import kr.co.yeoshin.backend.weather.service.WeatherService;
import kr.co.yeoshin.backend.weather.service.model.OpenWeather;
import kr.co.yeoshin.backend.weather.service.model.WeatherContext;
import kr.co.yeoshin.common.utils.GeoUtils.H3;
import kr.co.yeoshin.common.utils.model.GeoPoint;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@UseCase
public class WeatherUseCase {

    private final WeatherService weatherService;
    private final QueueMessageRestrictionContext queueMessageRestrictionContext;
    private final PayloadFactory payloadFactory;

    public WeatherPayload weather(double latitude, double longitude) {
        String geoCell = H3.geoToH3Address(new GeoPoint(latitude, longitude), Constant.Weather.REGION_H3_RESOLUTION_LEVEL);
        WeatherContext context = WeatherContext.builder()
                .now(LocalDateTime.now())
                .geoCell(geoCell)
                .latitude(latitude)
                .longitude(longitude)
                .build();

        queueMessageRestrictionContext.addGeoPositionUsages(latitude, longitude);

        OpenWeather cachedWeather = weatherService.findCachedWeather(context).orElse(null);
        if (cachedWeather != null) {
            return WeatherPayload.builder()
                    .weather(payloadFactory.weatherTemplate(cachedWeather))
                    .weatherConfig(payloadFactory.weatherConfigTemplate(cachedWeather))
                    .build();
        }

        OpenWeather currentWeather = weatherService.retrieveCurrentWeather(context)
                .orElseThrow(() -> new WeatherException(CommonCode.ERROR));

        weatherService.registerWeather(context, currentWeather);

        return WeatherPayload.builder()
                .weather(payloadFactory.weatherTemplate(currentWeather))
                .weatherConfig(payloadFactory.weatherConfigTemplate(currentWeather))
                .build();
    }
}



================================================
File: backend/src/main/java/kr/co/yeoshin/backend/zendesk/usecase/ZenDeskUseCase.java
================================================
package kr.co.yeoshin.backend.zendesk.usecase;

import kr.co.yeoshin.backend.auth.model.Token;
import kr.co.yeoshin.backend.auth.model.TokenClaims;
import kr.co.yeoshin.backend.auth.service.AuthService;
import kr.co.yeoshin.backend.auth.service.TokenService;
import kr.co.yeoshin.backend.common.Constant.ZenDesk;
import kr.co.yeoshin.backend.common.model.api.code.AuthCode;
import kr.co.yeoshin.backend.common.stereotype.UseCase;
import kr.co.yeoshin.backend.context.DiagnosticContext;
import kr.co.yeoshin.backend.exception.AuthenticationException;
import kr.co.yeoshin.backend.payload.TokenPayload;
import kr.co.yeoshin.backend.zendesk.controller.model.ZenDeskTokenResponse;
import kr.co.yeoshin.backend.zendesk.service.ZenDeskService;
import kr.co.yeoshin.common.member.entity.Member;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;

@AllArgsConstructor
@UseCase
public class ZenDeskUseCase {

    private final TokenService tokenService;
    private final AuthService authService;
    private final ZenDeskService zenDeskService;

    public ZenDeskTokenResponse createClassicToken(String token) {
        TokenClaims claims = tokenService.getClaims(token);
        if (claims == null || !claims.isValid()) {
            throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token is invalid");
        }

        if (claims.isVirtual()) {
            String signature = tokenService.findVirtualTokenSignature(token);
            if (StringUtils.isBlank(signature)) {
                throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "virtual token verify failed");
            }

            Token zenDeskToken = zenDeskService.createClassicToken(ZenDesk.DEFAULT_UNKNOWN_EMAIL, ZenDesk.DEFAULT_UNKNOWN_NAME);

            return ZenDeskTokenResponse.builder()
                    .jwt(zenDeskToken.getAccessToken())
                    .build();
        } else {
            Member member = authService.findMemberByClaim(claims);
            if (!tokenService.verifyToken(token, member.getSignature())) {
                throw new AuthenticationException(AuthCode.AUTH_TOKEN_VERIFY_ERROR, "token verify failed");
            }

            Token zenDeskToken = zenDeskService.createClassicToken(member.getEmail(), member.getName());

            return ZenDeskTokenResponse.builder()
                    .jwt(zenDeskToken.getAccessToken())
                    .build();
        }
    }

    public TokenPayload createWebToken() {
        long memberId = DiagnosticContext.fetchMemberId();

        Member member = authService.findMemberById(memberId);

        Token zenDeskToken = zenDeskService.createWebToken(member);

        return TokenPayload.builder()
                .token(zenDeskToken)
                .build();
    }
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/AdminAccountRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.administrator.entity.AdminAccount;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminAccountRepository extends JpaRepository<AdminAccount, Long>, CustomAdminAccountRepository {

    List<AdminAccount> findAllByAdminId(long adminId);

    List<AdminAccount> findAllByAdminIdIn(Collection<Long> adminIds);

    Optional<AdminAccount> findByAdminIdAndProvider(long adminId, AuthProvider provider);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/AdminChiefDirectorRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import kr.co.yeoshin.common.administrator.entity.AdminChiefDirector;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminChiefDirectorRepository extends JpaRepository<AdminChiefDirector, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/AdminGroupAsAdminRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import kr.co.yeoshin.common.administrator.entity.AdminGroupAsAdmin;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminGroupAsAdminRepository extends JpaRepository<AdminGroupAsAdmin, Long>,
        CustomAdminGroupAsAdminRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/AdminGroupRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import kr.co.yeoshin.common.administrator.entity.AdminGroup;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminGroupRepository extends JpaRepository<AdminGroup, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/AdminRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.type.Level;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminRepository extends JpaRepository<Admin, Long>, CustomAdminRepository {

    Optional<Admin> findById(long id);

    List<Admin> findAllByIdIn(List<Long> ids);

    Optional<Admin> findByEmailAndLevelTypeIn(String email, Collection<Level> levels);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/AdminResignRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import java.util.Optional;
import kr.co.yeoshin.common.administrator.entity.AdminResign;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminResignRepository extends JpaRepository<AdminResign, Long> {

    Optional<AdminResign> findByProviderAndProviderId(AuthProvider provider, String providerId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/CustomAdminAccountRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.common.administrator.entity.AdminAccount;
import kr.co.yeoshin.common.auth.type.AuthProvider;

public interface CustomAdminAccountRepository {

    Optional<AdminAccount> findAdminAccountByProvider(AuthProvider provider, String providerId);

    Optional<AdminAccount> fetchAdminAccountByProvider(AuthProvider provider, String providerId);

    AdminAccount findAdminAccountByAdminId(Long id);

    AdminAccount fetchByAdminIdAndProvider(Long id, AuthProvider provider);

    List<AdminAccount> fetchAllByAdminIds(Collection<Long> adminId);

    Map<Long, List<AdminAccount>> findGroupedListByAdminIds(Collection<Long> adminIds);

    boolean updateAdminAccountSecret(long id, String encryptedPassword);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/CustomAdminGroupAsAdminRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.administrator.entity.AdminGroupAsAdmin;

public interface CustomAdminGroupAsAdminRepository {

    List<AdminGroupAsAdmin> fetchAllByAdminGroupId(long adminGroupId);

    Optional<AdminGroupAsAdmin> fetchByAdminGroupIdAndAdminId(long adminGroupId, long adminId);

    List<AdminGroupAsAdmin> fetchByAdminGroupIdAndAdminIds(long adminGroupId, List<Long> adminId);

    List<AdminGroupAsAdmin> fetchByAdminId(long adminId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/administrator/repository/CustomAdminRepository.java
================================================
package kr.co.yeoshin.common.administrator.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.administrator.entity.Admin;
import kr.co.yeoshin.common.administrator.model.AdminWhereCondition;
import kr.co.yeoshin.common.administrator.model.PlusAdminWhereCondition;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.administrator.type.LevelGroup;
import org.springframework.data.domain.Page;

public interface CustomAdminRepository {

    Admin fetchByIdWithAccounts(Long id);

    List<Admin> fetchAllByIdsWithAccounts(Collection<Long> ids);

    boolean existAdminCellPhone(String cellPhone);

    boolean existAdminCellPhone(String name, String cellPhone);

    boolean updateAdminSignature(Long id, String signature);

    long updateAllAdminSignature(Collection<LevelGroup> levelGroups, String signature);

    Page<Admin> findAllByLevelTypes(List<Level> levelType, AdminWhereCondition whereCondition);

    Page<Admin> findAllByLevel(Level level, AdminWhereCondition whereCondition);

    List<Admin> findAllByHospitalId(long hospitalId);

    Page<Admin> findAllByIdsWithRolePermission(PlusAdminWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/audit/repository/AdminAuditRepository.java
================================================
package kr.co.yeoshin.common.audit.repository;

import kr.co.yeoshin.common.audit.entity.AdminAudit;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminAuditRepository extends JpaRepository<AdminAudit, Long>, CustomAdminAuditRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/audit/repository/CustomAdminAuditRepository.java
================================================
package kr.co.yeoshin.common.audit.repository;

import kr.co.yeoshin.common.audit.entity.AdminAudit;
import kr.co.yeoshin.common.audit.model.AdminAuditWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomAdminAuditRepository {

    Page<AdminAudit> findAll(AdminAuditWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/audit/repository/CustomJaversRepository.java
================================================
package kr.co.yeoshin.common.audit.repository;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import kr.co.yeoshin.common.audit.model.CommitInfo;
import org.javers.core.Changes;
import org.javers.shadow.Shadow;

public interface CustomJaversRepository {

    Changes fetchChangesByLocalIdAndType(String localId, Class<?> type, boolean includeOtherObjects);

    List<CommitInfo> fetchCommitInfosByLocalIdAndType(String localId, Class<?> type, boolean includeOtherObjects);

    <T> List<CommitInfo> fetchCommitInfosByLocalIdAndTypeAndChangedProperties(String localId, Class<T> type,
            Collection<String> changedProperties);

    List<CommitInfo> fetchCommitInfosByGroupId(String groupId);

    Map<String, List<CommitInfo>> fetchCommitInfosByGroupIds(Collection<String> groupIds);

    <T> List<Shadow<T>> fetchShadowsByLocalIdAndTypeAndCommitIds(String localId, Class<T> type, Collection<BigDecimal> commitIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/audit/repository/InstantLogRepository.java
================================================
package kr.co.yeoshin.common.audit.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.audit.entity.InstantLog;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InstantLogRepository extends JpaRepository<InstantLog, Long> {
    List<InstantLog> findAllByRefTypeAndRefIdOrderByIdDesc(DomainType refType, long refId);

    List<InstantLog> findAllByRefTypeAndRefIdIn(DomainType refType, Collection<Long> refIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/banner/repository/BannerRepository.java
================================================
package kr.co.yeoshin.common.banner.repository;

import kr.co.yeoshin.common.banner.entity.Banner;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BannerRepository extends JpaRepository<Banner, Long>, CustomBannerRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/banner/repository/CustomBannerRepository.java
================================================
package kr.co.yeoshin.common.banner.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.banner.entity.Banner;
import kr.co.yeoshin.common.banner.model.BannerWhereCondition;
import kr.co.yeoshin.common.banner.type.BannerLocation;
import kr.co.yeoshin.common.banner.type.BannerPosition;
import kr.co.yeoshin.common.banner.type.BannerType;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;

public interface CustomBannerRepository {

    Page<Banner> findAllBy(BannerLocation location, BannerWhereCondition whereCondition);

    List<Banner> findAllByLocationAndStatuses(BannerLocation location, Collection<ProgressStatus> statuses);

    List<Banner> findAllByLocationAndViewYnAndStatus(BannerLocation location, YN viewYn, ProgressStatus status);

    List<Banner> findAllByLocationAndViewYnAndStatus(
            Collection<BannerLocation> locations, Collection<BannerPosition> positions, YN viewYn, ProgressStatus status);

    List<Banner> findAllByLocationAndTypeAndPositionAndStatuses(BannerLocation location, BannerType type, BannerPosition position,
            Collection<ProgressStatus> statuses);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminBoardCommentRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.AdminBoardComment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminBoardCommentRepository extends JpaRepository<AdminBoardComment, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminBoardImageRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.AdminBoardImage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminBoardImageRepository extends JpaRepository<AdminBoardImage, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminBoardInfoBulletRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.AdminBoardInfoBullet;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminBoardInfoBulletRepository extends JpaRepository<AdminBoardInfoBullet, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminBoardInfoRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.AdminBoardInfo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminBoardInfoRepository extends JpaRepository<AdminBoardInfo, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminBoardRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.AdminBoard;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminBoardRepository extends JpaRepository<AdminBoard, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminBoardViewLogRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.AdminBoardViewLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminBoardViewLogRepository extends JpaRepository<AdminBoardViewLog, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminMemoAsJvCommitRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.board.entity.AdminMemoAsJvCommit;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminMemoAsJvCommitRepository extends JpaRepository<AdminMemoAsJvCommit, Long> {

    List<AdminMemoAsJvCommit> findAllByAdminMemoId(long adminMemoId);

    List<AdminMemoAsJvCommit> findAllByAdminMemoIdIn(Collection<Long> adminMemoIds);

    long deleteAllByAdminMemoId(long adminMemoId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/AdminMemoRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.board.entity.AdminMemo;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminMemoRepository extends JpaRepository<AdminMemo, Long>, CustomAdminMemoRepository {

    Optional<AdminMemo> findByIdAndRefType(long id, AdminMemoType refType);

    List<AdminMemo> findAllByRefTypeAndRefIdInAndSecretYnInOrderByIdDesc(AdminMemoType refType, Collection<Long> refIds,
            Collection<YN> secretYns);

    List<AdminMemo> findAllByRefTypeAndRefIdIn(AdminMemoType refType, Collection<Long> refIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomAdminMemoRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.common.board.entity.AdminMemo;
import kr.co.yeoshin.common.board.model.AdminMemoStatPerRefId;
import kr.co.yeoshin.common.board.model.AdminMemoWhereCondition;
import kr.co.yeoshin.common.board.type.AdminMemoType;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;

public interface CustomAdminMemoRepository {

    Page<AdminMemo> fetchAllByWhereCondition(AdminMemoWhereCondition whereCondition);

    Optional<AdminMemo> fetchByIdAndRefType(long id, AdminMemoType refType);

    Map<Long, AdminMemoStatPerRefId> findStatPerRefIdByRefTypeAndRefIdInAndSecretYnIn(AdminMemoType refType,
            Collection<Long> refIds, Collection<YN> secretYns);

    List<Long> findAllLatestIdsByRefTypeAndRefIds(AdminMemoType refType, Collection<Long> refIds);

    List<AdminMemo> fetchAllByIds(Collection<Long> ids);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomExplorerRankingCategoryRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.ExplorerRankingCategory;

public interface CustomExplorerRankingCategoryRepository {

    List<ExplorerRankingCategory> fetchAll();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomExplorerThemeAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.board.entity.ExplorerThemeAsTreatment;

public interface CustomExplorerThemeAsTreatmentRepository {

    List<ExplorerThemeAsTreatment> fetchAllByExplorerThemeId(long id);

    List<ExplorerThemeAsTreatment> fetchAllByExplorerThemeIds(Collection<Long> ids);

    List<ExplorerThemeAsTreatment> findAllByExplorerThemeIds(Collection<Long> ids);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomExplorerThemeRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.board.entity.ExplorerTheme;
import kr.co.yeoshin.common.board.model.ExplorerThemeWhereCondition;
import kr.co.yeoshin.common.board.type.ExplorerThemeLocationType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomExplorerThemeRepository {

    Page<ExplorerTheme> fetchAllByWhereCondition(ExplorerThemeWhereCondition whereCondition);

    List<ExplorerTheme> findAllByActivatedAndLocationType(ExplorerThemeLocationType locationType);

    Page<ExplorerTheme> findAllByActivatedAndLocationType(ExplorerThemeLocationType locationType, Pageable pageable);

    Optional<ExplorerTheme> fetchById(long id);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomExplorerThemeTreatmentAsTvRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.board.entity.ExplorerThemeTreatmentAsTv;

public interface CustomExplorerThemeTreatmentAsTvRepository {

    List<ExplorerThemeTreatmentAsTv> fetchAllByThemeTreatmentId(long id);

    List<ExplorerThemeTreatmentAsTv> fetchAllByThemeTreatmentIds(Collection<Long> ids);

    List<ExplorerThemeTreatmentAsTv> findAllByThemeTreatmentIds(Collection<Long> ids);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomPromotionKakaoShareRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Optional;
import kr.co.yeoshin.common.board.entity.PromotionKakaoShare;

public interface CustomPromotionKakaoShareRepository {

    Optional<PromotionKakaoShare> findOne(long memberId, long promotionId, String participationKey);

    boolean exist(long memberId, long promotionId, String participationKey);

    void deleteAll(long memberId, long promotionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomPromotionParticipationConfigRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.board.entity.PromotionParticipationConfig;
import kr.co.yeoshin.common.board.type.PromotionParticipationType;

public interface CustomPromotionParticipationConfigRepository {

    List<PromotionParticipationConfig> fetchAllByPromotion(long promotionId);

    Optional<PromotionParticipationConfig> findByPromotion(long promotionId, PromotionParticipationType type);

    Optional<PromotionParticipationConfig> fetchByPromotion(long promotionId, PromotionParticipationType type);

    void deleteByPromotion(long promotionId, PromotionParticipationType type);

    void deleteByPromotion(long promotionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomPromotionParticipationRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.PromotionParticipation;

public interface CustomPromotionParticipationRepository {

    List<PromotionParticipation> findAll(long memberId, long promotionId, String participationKey);

    long countByPromotionParticipation(
            long promotionId, long promotionRewardGroupId, long promotionRewardId, String participationKey);

    void deleteAll(long memberId, long promotionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomPromotionReplyRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.board.entity.PromotionReply;
import kr.co.yeoshin.common.board.model.PromotionReplyWhereCondition;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomPromotionReplyRepository {

    Page<PromotionReply> fetchAll(PromotionReplyWhereCondition whereCondition);

    Optional<PromotionReply> fetchById(long id);

    Page<PromotionReply> fetchAllByPromotion(long promotionId, Collection<YN> viewYns, Pageable pageable);

    Page<PromotionReply> fetchAllByMember(long memberId, Collection<YN> viewYns, Pageable pageable);

    List<PromotionReply> findRepliesByMemberIdAndAtAfter(long memberId, LocalDateTime at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomPromotionRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Optional;
import kr.co.yeoshin.common.board.entity.Promotion;
import kr.co.yeoshin.common.board.model.PromotionWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomPromotionRepository {

    Page<Promotion> findAll(PromotionWhereCondition whereCondition);

    Optional<Promotion> fetchById(long promotionId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomPromotionRewardRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.PromotionReward;

public interface CustomPromotionRewardRepository {

    List<PromotionReward> fetchAllByPromotion(long promotionId);

    List<PromotionReward> fetchAllByPromotionReward(long promotionId, long promotionRewardGroupId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomTreatmentCounselingRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.board.entity.TreatmentCounseling;
import kr.co.yeoshin.common.board.model.TreatmentCounselingWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomTreatmentCounselingRepository {

    Page<TreatmentCounseling> fetchAll(TreatmentCounselingWhereCondition whereCondition);

    Optional<TreatmentCounseling> fetchById(long id);

    List<TreatmentCounseling> findAllByActivated();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/CustomTreatmentFocusRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.TreatmentFocus;
import kr.co.yeoshin.common.board.model.TreatmentFocusWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomTreatmentFocusRepository {

    List<TreatmentFocus> fetchAllVisibleTreatmentFocus();

    Page<TreatmentFocus> fetchAllTreatmentFocus(TreatmentFocusWhereCondition whereCondition);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/ExplorerRankingCategoryRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.ExplorerRankingCategory;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExplorerRankingCategoryRepository
        extends JpaRepository<ExplorerRankingCategory, Long>, CustomExplorerRankingCategoryRepository {

}


================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/ExplorerThemeAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.ExplorerThemeAsTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExplorerThemeAsTreatmentRepository extends JpaRepository<ExplorerThemeAsTreatment, Long>,
        CustomExplorerThemeAsTreatmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/ExplorerThemeRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.ExplorerTheme;
import kr.co.yeoshin.common.board.type.ExplorerThemeLocationType;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExplorerThemeRepository extends JpaRepository<ExplorerTheme, Long>, CustomExplorerThemeRepository {

    List<ExplorerTheme> findAllByIdInAndLocationType(List<Long> ids, ExplorerThemeLocationType locationType);

    List<ExplorerTheme> findAllByViewYn(YN viewYn);
}


================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/ExplorerThemeTreatmentAsTvRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.ExplorerThemeTreatmentAsTv;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExplorerThemeTreatmentAsTvRepository
        extends JpaRepository<ExplorerThemeTreatmentAsTv, Long>, CustomExplorerThemeTreatmentAsTvRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/FrontBoardCommentRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.FrontBoardComment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrontBoardCommentRepository extends JpaRepository<FrontBoardComment, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/FrontBoardEventRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.FrontBoardEvent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrontBoardEventRepository extends JpaRepository<FrontBoardEvent, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/FrontBoardImageRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.FrontBoardImage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrontBoardImageRepository extends JpaRepository<FrontBoardImage, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/FrontBoardInfoRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.FrontBoardInfo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrontBoardInfoRepository extends JpaRepository<FrontBoardInfo, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/FrontBoardRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.FrontBoard;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrontBoardRepository extends JpaRepository<FrontBoard, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/MemberQuestionRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.MemberQuestion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberQuestionRepository extends JpaRepository<MemberQuestion, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PartnershipQuestionRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.PartnershipQuestion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PartnershipQuestionRepository extends JpaRepository<PartnershipQuestion, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionAsSalesEventRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.board.entity.PromotionAsSalesEvent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionAsSalesEventRepository extends JpaRepository<PromotionAsSalesEvent, Long> {

    List<PromotionAsSalesEvent> findAllByPromotionId(long promotionId);

    List<PromotionAsSalesEvent> findAllBySalesEventIdIn(Collection<Long> salesEventIds);

    void deleteAllByPromotionId(long promotionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionKakaoShareRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.PromotionKakaoShare;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionKakaoShareRepository
        extends JpaRepository<PromotionKakaoShare, Long>, CustomPromotionKakaoShareRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionParticipationConfigRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.PromotionParticipationConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionParticipationConfigRepository
        extends JpaRepository<PromotionParticipationConfig, Long>, CustomPromotionParticipationConfigRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionParticipationQuestRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.Optional;
import kr.co.yeoshin.common.board.entity.PromotionParticipationQuest;
import kr.co.yeoshin.common.board.type.PromotionParticipationType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionParticipationQuestRepository extends JpaRepository<PromotionParticipationQuest, Long> {

    Optional<PromotionParticipationQuest> findByPromotionIdAndType(long promotionId, PromotionParticipationType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionParticipationRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.PromotionParticipation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionParticipationRepository
        extends JpaRepository<PromotionParticipation, Long>, CustomPromotionParticipationRepository {

    List<PromotionParticipation> findAllByMemberIdAndPromotionId(long memberId, long promotionId);


}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionReplyRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.PromotionReply;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionReplyRepository extends JpaRepository<PromotionReply, Long>, CustomPromotionReplyRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.Promotion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionRepository extends JpaRepository<Promotion, Long>, CustomPromotionRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionRewardGroupRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.PromotionRewardGroup;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionRewardGroupRepository extends JpaRepository<PromotionRewardGroup, Long> {

    List<PromotionRewardGroup> findAllByPromotionId(long promotionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/PromotionRewardRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.PromotionReward;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PromotionRewardRepository extends JpaRepository<PromotionReward, Long>, CustomPromotionRewardRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/TreatmentCounselingFaqRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import java.util.List;
import kr.co.yeoshin.common.board.entity.TreatmentCounselingFaq;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentCounselingFaqRepository extends JpaRepository<TreatmentCounselingFaq, Long> {

    List<TreatmentCounselingFaq> findAllByTreatmentCounselingId(long treatmentCounselingId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/TreatmentCounselingRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.TreatmentCounseling;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentCounselingRepository extends JpaRepository<TreatmentCounseling, Long>, CustomTreatmentCounselingRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/board/repository/TreatmentFocusRepository.java
================================================
package kr.co.yeoshin.common.board.repository;

import kr.co.yeoshin.common.board.entity.TreatmentFocus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentFocusRepository extends JpaRepository<TreatmentFocus, Long>,
        CustomTreatmentFocusRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/model/BrowserCollectionTemplate.java
================================================
package kr.co.yeoshin.common.browser.model;

import java.util.List;
import lombok.*;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public class BrowserCollectionTemplate {

    private List<BrowserSegmentTemplate> browserSegments;
    private List<BrowserLibraryTemplate> browserLibraries;
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/model/BrowserLibraryTemplate.java
================================================
package kr.co.yeoshin.common.browser.model;

import java.time.LocalDateTime;
import java.util.Map;
import kr.co.yeoshin.common.browser.entity.BrowserLibrary;
import kr.co.yeoshin.common.browser.type.BrowserLibraryTemplateType;
import lombok.*;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public class BrowserLibraryTemplate {

    private long id;
    private BrowserLibraryTemplateType type;
    private String titleKo;
    private String titleEn;
    private String titleZh;
    private String titleJa;
    private String subtitleKo;
    private String subtitleEn;
    private String subtitleZh;
    private String subtitleJa;
    private Map<String, Object> parameter;
    private String image;
    private String campaign;
    private LocalDateTime startAt;
    private LocalDateTime endAt;

    public static BrowserLibraryTemplate of(BrowserLibrary library) {
        return BrowserLibraryTemplate.builder()
                .id(library.getId())
                .type(library.getType())
                .titleKo(library.getTitleKo())
                .titleEn(library.getTitleEn())
                .titleZh(library.getTitleZh())
                .titleJa(library.getTitleJa())
                .subtitleKo(library.getSubtitleKo())
                .subtitleEn(library.getSubtitleEn())
                .subtitleZh(library.getSubtitleZh())
                .subtitleJa(library.getSubtitleJa())
                .parameter(library.getParameter())
                .image(library.getImage())
                .campaign(library.getCampaign())
                .startAt(library.getStartAt())
                .endAt(library.getEndAt())
                .build();
    }
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/model/BrowserSegmentTemplate.java
================================================
package kr.co.yeoshin.common.browser.model;

import java.util.Map;
import kr.co.yeoshin.common.browser.entity.BrowserSegment;
import kr.co.yeoshin.common.browser.type.BrowserSegmentType;
import lombok.*;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public class BrowserSegmentTemplate {

    private long id;
    private BrowserSegmentType type;
    private String title;
    private String description;
    private Map<String, Object> parameter;

    public static BrowserSegmentTemplate of(BrowserSegment segment) {
        return BrowserSegmentTemplate.builder()
                .id(segment.getId())
                .type(segment.getType())
                .title(segment.getTitle())
                .description(segment.getDescription())
                .parameter(segment.getParameter())
                .build();
    }
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserCollectionAsLibraryRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import java.util.List;
import kr.co.yeoshin.common.browser.entity.BrowserCollectionAsLibrary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserCollectionAsLibraryRepository
        extends JpaRepository<BrowserCollectionAsLibrary, Long>, CustomBrowserCollectionAsLibraryRepository {

    List<BrowserCollectionAsLibrary> findAllByBrowserLibraryId(long browserLibraryId);

    void deleteAllByBrowserCollectionId(long browserCollectionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserCollectionAsSegmentRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserCollectionAsSegment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserCollectionAsSegmentRepository
        extends JpaRepository<BrowserCollectionAsSegment, Long>, CustomBrowserCollectionAsSegmentRepository {

    void deleteAllByBrowserCollectionId(long browserCollectionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserCollectionPublishLogRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserCollectionPublishLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserCollectionPublishLogRepository
        extends JpaRepository<BrowserCollectionPublishLog, Long>, CustomBrowserCollectionPublishLogRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserCollectionPublishRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import java.util.List;
import kr.co.yeoshin.common.browser.entity.BrowserCollectionPublish;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserCollectionPublishRepository
        extends JpaRepository<BrowserCollectionPublish, Long>, CustomBrowserCollectionPublishRepository {

    List<BrowserCollectionPublish> findAllByBrowserCollectionId(long browserCollectionId);
    
    void deleteAllByBrowserCollectionId(long browserCollectionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserCollectionRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserCollection;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserCollectionRepository
        extends JpaRepository<BrowserCollection, Long>, CustomBrowserCollectionRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserLibraryRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserLibrary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserLibraryRepository extends JpaRepository<BrowserLibrary, Long>, CustomBrowserLibraryRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/BrowserSegmentRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserSegment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BrowserSegmentRepository extends JpaRepository<BrowserSegment, Long>, CustomBrowserSegmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserCollectionAsLibraryRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.browser.entity.BrowserCollectionAsLibrary;
import kr.co.yeoshin.common.browser.type.BrowserLibraryTemplateType;

public interface CustomBrowserCollectionAsLibraryRepository {

    List<BrowserCollectionAsLibrary> fetchAllBy(long browserCollectionId);

    List<BrowserCollectionAsLibrary> fetchAllBy(Collection<Long> browserCollectionIds);

    List<BrowserCollectionAsLibrary> fetchAllByTypes(Collection<BrowserLibraryTemplateType> types);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserCollectionAsSegmentRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.browser.entity.BrowserCollectionAsSegment;
import kr.co.yeoshin.common.browser.type.BrowserSegmentType;

public interface CustomBrowserCollectionAsSegmentRepository {

    List<BrowserCollectionAsSegment> fetchAllBy(long browserCollectionId);

    List<BrowserCollectionAsSegment> fetchAllBy(Collection<Long> browserCollectionIds);

    List<BrowserCollectionAsSegment> fetchAllByTypes(Collection<BrowserSegmentType> types);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserCollectionPublishLogRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.browser.entity.BrowserCollectionPublishLog;
import kr.co.yeoshin.common.browser.repository.model.BrowserCollectionPublishLatestLog;
import kr.co.yeoshin.common.type.YN;

public interface CustomBrowserCollectionPublishLogRepository {

    List<BrowserCollectionPublishLog> fetchAllBy(Collection<Long> ids);

    List<BrowserCollectionPublishLog> fetchAllLatestBy(long browserCollectionId, Collection<YN> testYns, int limit);

    List<BrowserCollectionPublishLatestLog> fetchAllLatestBy(Collection<Long> browserCollectionIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserCollectionPublishRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.browser.entity.BrowserCollectionPublish;
import kr.co.yeoshin.common.browser.type.BrowserLocationType;
import kr.co.yeoshin.common.type.YN;

public interface CustomBrowserCollectionPublishRepository {

    Optional<BrowserCollectionPublish> findBy(long browserCollectionId, YN testYn);

    List<BrowserCollectionPublish> findAllBy(BrowserLocationType location, LocalDateTime at);

    List<BrowserCollectionPublish> fetchAllBy(BrowserLocationType location, LocalDateTime at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserCollectionRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserCollection;
import kr.co.yeoshin.common.browser.model.BrowserCollectionWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomBrowserCollectionRepository {

    Page<BrowserCollection> findAllBy(BrowserCollectionWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserLibraryRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserLibrary;
import kr.co.yeoshin.common.browser.model.BrowserLibraryWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomBrowserLibraryRepository {

    Page<BrowserLibrary> findAllBy(BrowserLibraryWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/browser/repository/CustomBrowserSegmentRepository.java
================================================
package kr.co.yeoshin.common.browser.repository;

import kr.co.yeoshin.common.browser.entity.BrowserSegment;
import kr.co.yeoshin.common.browser.model.BrowserSegmentWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomBrowserSegmentRepository {

    Page<BrowserSegment> findAllBy(BrowserSegmentWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/coupon/repository/CouponIssueConditionRepository.java
================================================
package kr.co.yeoshin.common.coupon.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CouponIssueConditionRepository
        extends JpaRepository<CouponIssueCondition, Long>, CustomerCouponIssueConditionRepository {

    List<CouponIssueCondition> findAllByCouponId(long couponId);

    List<CouponIssueCondition> findAllByCouponIdIn(Collection<Long> couponIds);

    void deleteAllByCouponId(long couponId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/coupon/repository/CouponRepository.java
================================================
package kr.co.yeoshin.common.coupon.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.coupon.entity.Coupon;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CouponRepository extends JpaRepository<Coupon, Long>, CustomerCouponRepository {

    Optional<Coupon> findCouponByCode(String code);

    List<Coupon> findCouponsByCodeIn(Collection<String> code);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/coupon/repository/CustomMemberCouponRepository.java
================================================
package kr.co.yeoshin.common.coupon.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import kr.co.yeoshin.common.coupon.model.MemberCouponSummary;
import kr.co.yeoshin.common.coupon.model.MemberCouponWhereCondition;
import kr.co.yeoshin.common.coupon.repository.model.MemberCouponCountDto;
import kr.co.yeoshin.common.coupon.repository.model.MemberCouponIssueCountDto;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.MemberCouponStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberCouponRepository {

    List<MemberCoupon> fetchAllByMemberIdAndStatuses(long memberId, Collection<MemberCouponStatus> statuses);

    List<MemberCoupon> fetchAllByMemberIdAndStatusesAndCodes(
            long memberId, Collection<MemberCouponStatus> statuses, Collection<String> codes);

    List<MemberCoupon> fetchAllByMemberIdAndStatusesAndCodePrefix(
            long memberId, Collection<MemberCouponStatus> statuses, String code);

    List<MemberCoupon> fetchAllCouponsByCode(String code);

    List<MemberCoupon> fetchAllByMemberIdAndCouponIds(
            long memberId, Collection<Long> couponIds);

    List<MemberCoupon> findAllByMemberIdAndCouponIds(
            long memberId, Collection<Long> couponIds);

    long countByCode(String code);

    Page<MemberCoupon> fetchAll(MemberCouponWhereCondition whereCondition);

    Optional<MemberCoupon> fetchById(long memberCouponId);

    Optional<MemberCoupon> findByIdAndMemberId(long memberCouponId, long memberId);

    List<MemberCoupon> fetchAllByIdInAndMemberId(Collection<Long> memberCouponIds, long memberId);

    List<MemberCoupon> findAllByIdInAndMemberId(Collection<Long> memberCouponIds, long memberId);

    List<MemberCoupon> fetchAllByIds(Collection<Long> ids);

    Page<MemberCoupon> fetchAllByMemberId(long memberId, Pageable pageable);

    boolean existByCouponId(long couponId);

    List<MemberCouponCountDto> countGroupByCouponIds(long memberId, List<Long> couponsIds);

    List<MemberCouponCountDto> countGroupByCouponIds(List<Long> couponsIds);

    List<MemberCouponIssueCountDto> countIssueGroupByCouponIds(List<Long> couponsIds);

    long countByMemberIdAndCode(long memberId, String code);

    MemberCouponSummary summarizeMemberCouponStat(long memberId);

    boolean existMemberCoupon(
            long memberId, Collection<CouponIssueConditionType> issueConditionTypes, Collection<MemberCouponStatus> statuses);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/coupon/repository/CustomerCouponIssueConditionRepository.java
================================================
package kr.co.yeoshin.common.coupon.repository;

import java.util.List;
import kr.co.yeoshin.common.coupon.entity.CouponIssueCondition;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.PublishType;

public interface CustomerCouponIssueConditionRepository {

    List<CouponIssueCondition> fetchAll(PublishType publishType, CouponIssueConditionType issueConditionType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/coupon/repository/CustomerCouponRepository.java
================================================
package kr.co.yeoshin.common.coupon.repository;

import java.util.List;
import kr.co.yeoshin.common.coupon.entity.Coupon;
import kr.co.yeoshin.common.coupon.model.CouponWhereCondition;
import kr.co.yeoshin.common.coupon.type.CouponIssueConditionType;
import kr.co.yeoshin.common.coupon.type.CouponIssueStatus;
import kr.co.yeoshin.common.coupon.type.PublishType;
import org.springframework.data.domain.Page;

public interface CustomerCouponRepository {

    Page<Coupon> fetchAll(CouponWhereCondition whereCondition);

    List<Coupon> findAllPublishableCoupons(PublishType publishType, CouponIssueStatus issueStatus, CouponIssueConditionType issueConditionType);

    List<Coupon> findAllPublishableCoupons(PublishType publishType, CouponIssueStatus issueStatus);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/coupon/repository/MemberCouponRepository.java
================================================
package kr.co.yeoshin.common.coupon.repository;

import kr.co.yeoshin.common.coupon.entity.MemberCoupon;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberCouponRepository extends JpaRepository<MemberCoupon, Long>, CustomMemberCouponRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpaAdReportHourlyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDate;
import kr.co.yeoshin.common.cpm.entity.CpaAdReportHourly;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlDialectInspection"})
public interface CpaAdReportHourlyRepository extends JpaRepository<CpaAdReportHourly, Long>, CustomCpaAdReportHourlyRepository {

    @Modifying
    @Query(value =
            "INSERT INTO cpa_ad_report_hourly(sales_event_id, report_at, report_hour, sales_event_consultation_apply_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     sales_event_consultation_apply_count = sales_event_consultation_apply_count + :value",
            nativeQuery = true)
    int increaseSalesEventConsultationApplyCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpa_ad_report_hourly(sales_event_id, report_at, report_hour, sales_event_consultation_paid_ad_price)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     sales_event_consultation_paid_ad_price = sales_event_consultation_paid_ad_price + :value",
            nativeQuery = true)
    int increaseSalesEventConsultationPaidAdPrice(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpa_ad_report_hourly(sales_event_id, report_at, report_hour, sales_event_consultation_paid_ad_view_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     sales_event_consultation_paid_ad_view_count = sales_event_consultation_paid_ad_view_count + :value",
            nativeQuery = true)
    int increaseSalesEventConsultationPaidAdViewCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);


    @Modifying
    @Query(value =
            "INSERT INTO cpa_ad_report_hourly(sales_event_id, report_at, report_hour, sales_event_consultation_free_ad_view_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     sales_event_consultation_free_ad_view_count = sales_event_consultation_free_ad_view_count + :value",
            nativeQuery = true)
    int increaseSalesEventConsultationFreeAdViewCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpa_ad_report_hourly(sales_event_id, report_at, report_hour, sales_event_consultation_sales_product_price)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     sales_event_consultation_sales_product_price = sales_event_consultation_sales_product_price + :value",
            nativeQuery = true)
    int increaseSalesEventConsultationSalesProductPrice(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpa_ad_report_hourly(sales_event_id, report_at, report_hour, sales_event_consultation_visit_complete_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     sales_event_consultation_visit_complete_count = sales_event_consultation_visit_complete_count + :value",
            nativeQuery = true)
    int increaseSalesEventConsultationVisitCompleteCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmAdConfigRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmAdConfigRepository extends JpaRepository<CpmAdConfig, Long>, CustomCpmAdConfigRepository {

    Optional<CpmAdConfig> findByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmAdGuidanceReportRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdGuidanceReport;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmAdGuidanceReportRepository extends JpaRepository<CpmAdGuidanceReport, Long>,
        CustomCpmAdGuidanceReportRepository {

    Optional<CpmAdGuidanceReport> findFirstByOrderByIdDesc();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmAdHospitalReportDailyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDate;
import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdHospitalReportDaily;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmAdHospitalReportDailyRepository extends
        JpaRepository<CpmAdHospitalReportDaily, Long>, CustomCpmAdHospitalReportDailyRepository {

    Optional<CpmAdHospitalReportDaily> findTopByHospitalIdAndReportAtLessThanEqualOrderByReportAtDesc(long hospitalId,
            LocalDate reportAt);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmAdReportDailyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.entity.CpmAdReportDaily;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmAdReportDailyRepository extends JpaRepository<CpmAdReportDaily, Long>, CustomCpmAdReportDailyRepository {

    long countBySalesEventId(long salesEventId);

}


================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmAdReportHourlyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDate;
import kr.co.yeoshin.common.cpm.entity.CpmAdReportHourly;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlDialectInspection"})
public interface CpmAdReportHourlyRepository extends JpaRepository<CpmAdReportHourly, Long>,
        CustomCpmAdReportHourlyRepository {

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, paid_ad_price, paid_ad_view_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :unitPrice, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     paid_ad_view_count = paid_ad_view_count + :value,"
                    + "     paid_ad_price = paid_ad_price + :unitPrice",
            nativeQuery = true)
    int increasePaidViewCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("unitPrice") int unitPrice,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, free_ad_price, free_ad_view_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :unitPrice, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     free_ad_view_count = free_ad_view_count + :value,"
                    + "     free_ad_price = free_ad_price + :unitPrice",
            nativeQuery = true)
    int increaseFreeViewCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("unitPrice") int unitPrice,
            @Param("value") int value);


    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, paid_to_free_ad_price, paid_to_free_ad_view_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :unitPrice, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     paid_to_free_ad_view_count = paid_to_free_ad_view_count + :value,"
                    + "     paid_to_free_ad_price = paid_to_free_ad_price + :unitPrice",
            nativeQuery = true)
    int increasePaidToFreeViewCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("unitPrice") int unitPrice,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, payment_count, payment_price, price_per_payment)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, 1, :value, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     payment_count = payment_count + 1, "
                    + "     payment_price = payment_price + :value,"
                    + "     price_per_payment = payment_price / payment_count",
            nativeQuery = true)
    int increasePayment(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, payment_coupon_price)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     payment_coupon_price = payment_coupon_price + :value",
            nativeQuery = true)
    int increasePaymentCoupon(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, payment_point_price)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     payment_point_price = payment_point_price + :value",
            nativeQuery = true)
    int increasePaymentPoint(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, used_ticket_price)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     used_ticket_price = used_ticket_price + :value",
            nativeQuery = true)
    int increaseTicketUsePrice(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, cancel_ticket_price)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     cancel_ticket_price = cancel_ticket_price + :value",
            nativeQuery = true)
    int increaseTicketCancelPrice(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, free_ad_click_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     free_ad_click_count = free_ad_click_count + :value",
            nativeQuery = true)
    int increaseFreeAdClickCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, extra_free_ad_click_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     extra_free_ad_click_count = extra_free_ad_click_count + :value",
            nativeQuery = true)
    int increaseExtraFreeAdClickCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, scrap_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     scrap_count = scrap_count + :value",
            nativeQuery = true)
    int increaseSalesEventScrap(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, question_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     question_count = question_count + :value",
            nativeQuery = true)
    int increaseSalesEventQuestion(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);

    @Modifying
    @Query(value =
            "INSERT INTO cpm_ad_report_hourly(sales_event_id, report_at, report_hour, review_count)"
                    + " VALUES(:salesEventId, :reportAt, :reportHour, :value)"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     review_count = review_count + :value",
            nativeQuery = true)
    int increaseTreatmentReviewCount(@Param("salesEventId") long salesEventId,
            @Param("reportAt") LocalDate reportAt,
            @Param("reportHour") int reportHour,
            @Param("value") int value);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmAdStatusLogRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.entity.CpmAdStatusLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmAdStatusLogRepository extends JpaRepository<CpmAdStatusLog, Long>, CustomCpmAdStatusLogRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmPaidAdPointStatusRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.entity.CpmPaidAdPointStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmPaidAdPointStatusRepository extends JpaRepository<CpmPaidAdPointStatus, Long>,
        CustomCpmPaidAdPointStatusRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmSearchExperimentRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.entity.CpmSearchExperiment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmSearchExperimentRepository
        extends JpaRepository<CpmSearchExperiment, Long>, CustomCpmSearchExperimentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CpmSearchPriceRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.entity.CpmSearchPrice;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CpmSearchPriceRepository extends JpaRepository<CpmSearchPrice, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpaAdReportHourlyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.cpm.model.CpmAdAnalysisReportWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.CpaAdReportFigureDto;

public interface CustomCpaAdReportHourlyRepository {

    List<CpaAdReportFigureDto> findGroupByHourAnalysisReports(CpmAdAnalysisReportWhereCondition whereCondition);

    Optional<CpaAdReportFigureDto> findSummaryAnalysisReportsWhereCondition(CpmAdAnalysisReportWhereCondition whereCondition);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmAdConfigRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdConfig;
import kr.co.yeoshin.common.cpm.model.CpmAdWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdHospitalReportDto;
import kr.co.yeoshin.common.cpm.type.CpmAdStatus;
import org.springframework.data.domain.Page;

public interface CustomCpmAdConfigRepository {

    List<CpmAdConfig> findAllByHospitalIds(Collection<Long> hospitalIds);

    Optional<CpmAdConfig> fetchByHospitalId(long id);

    List<CpmAdConfig> fetchAllByHospitalIds(Collection<Long> hospitalIds);

    Page<CpmAdHospitalReportDto> fetchAllByWhereCondition(CpmAdWhereCondition toWhereCondition);

    List<CpmAdHospitalReportDto> findAllByWhereCondition(CpmAdWhereCondition toWhereCondition);

    Optional<CpmAdHospitalReportDto> findSummaryCpmAdHospitalReportFigure(Collection<Long> hospitalIds, LocalDate fromAt,
            LocalDate toAt);

    List<CpmAdHospitalReportDto> findCpmAdHospitalReportFigures(Collection<Long> hospitalIds, LocalDate fromAt, LocalDate toAt);

    List<CpmAdConfig> findAllByStatuses(Collection<CpmAdStatus> cpmAdStatuses);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmAdGuidanceReportRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.model.CpmAdGuidanceReportWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdGuidanceDto;
import org.springframework.data.domain.Page;

public interface CustomCpmAdGuidanceReportRepository {

    Page<CpmAdGuidanceDto> findAllCpmAdGuidanceReport(CpmAdGuidanceReportWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmAdHospitalReportDailyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdHospitalReportDaily;
import kr.co.yeoshin.common.cpm.model.CpmAdAnalysisReportWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.AvgPaidAdPriceGroupByHospital;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdHospitalOfflineUpsellPriceDto;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdReportFigureDto;

public interface CustomCpmAdHospitalReportDailyRepository {

    List<CpmAdHospitalOfflineUpsellPriceDto> findHospitalOfflineUpsellWhereCondition(
            CpmAdAnalysisReportWhereCondition whereCondition);

    Optional<CpmAdReportFigureDto> findSumCpmAdHospitalReportFigureByHospitalIdAndReportAt(long hospitalId, LocalDate reportAt);

    List<AvgPaidAdPriceGroupByHospital> avgPaidAdPriceGroupByHospitalIds(Collection<Long> hospitalIds, int scopeDayCount);

    List<CpmAdHospitalReportDaily> findAll(Collection<Long> hospitalIds, LocalDate reportAt);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmAdReportDailyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdReportDaily;
import kr.co.yeoshin.common.cpm.model.CpmAdAnalysisReportWhereCondition;
import kr.co.yeoshin.common.cpm.model.CpmAdSalesEventReportWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdAnalysisReportDto;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdOrderTicketReportDto;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdSalesEventReportDto;
import kr.co.yeoshin.common.cpm.repository.model.GuidanceAvgClickCountDto;
import org.springframework.data.domain.Page;

public interface CustomCpmAdReportDailyRepository {

    List<CpmAdReportDaily> findAllByHospitalIds(Collection<Long> hospitalIds, LocalDate at);

    Optional<Integer> realtimeBudget(long id);

    Page<CpmAdSalesEventReportDto> fetchAllByHospitalIdAndWhereCondition(CpmAdSalesEventReportWhereCondition whereCondition);

    List<CpmAdAnalysisReportDto> findAnalysisReportsWhereCondition(CpmAdAnalysisReportWhereCondition whereCondition);

    List<CpmAdOrderTicketReportDto> findOrderTicketReports(CpmAdAnalysisReportWhereCondition whereCondition);

    Optional<CpmAdSalesEventReportDto> fetchSummaryByHospitalIdAndWhereCondition(
            CpmAdSalesEventReportWhereCondition whereCondition);

    Optional<CpmAdAnalysisReportDto> findSummaryAnalysisReportWhereCondition(CpmAdAnalysisReportWhereCondition toWhereCondition);

    List<GuidanceAvgClickCountDto> findAllGuidanceByHospitalIdsAndReportAt(Collection<Long> hospitalIds, LocalDate fromAt,
            LocalDate toAt);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmAdReportHourlyRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.cpm.entity.CpmAdReportHourly;
import kr.co.yeoshin.common.cpm.model.CpmAdAnalysisReportWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.CpmAdAnalysisReportDto;

public interface CustomCpmAdReportHourlyRepository {

    Optional<CpmAdReportHourly> findBySalesEventIdAndReportAt(long salesEventId, LocalDateTime reportAt);

    List<CpmAdAnalysisReportDto> findAnalysisReportsWhereCondition(CpmAdAnalysisReportWhereCondition whereCondition);

    Optional<CpmAdAnalysisReportDto> findSummaryAnalysisReportWhereCondition(CpmAdAnalysisReportWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmAdStatusLogRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import kr.co.yeoshin.common.cpm.entity.CpmAdStatusLog;
import kr.co.yeoshin.common.cpm.model.CpmAdStatusLogWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomCpmAdStatusLogRepository {

    Page<CpmAdStatusLog> fetchAllCpmAdStatusLogs(CpmAdStatusLogWhereCondition toWhereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmPaidAdPointStatusRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.util.List;
import kr.co.yeoshin.common.cpm.model.CpmPaidAdPointStatusWhereCondition;
import kr.co.yeoshin.common.cpm.repository.model.CpmPaidAdPointStatusDto;

public interface CustomCpmPaidAdPointStatusRepository {

    List<CpmPaidAdPointStatusDto> findAllByHospitalIdAndReportAtBetween(CpmPaidAdPointStatusWhereCondition whereCondition);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/cpm/repository/CustomCpmSearchExperimentRepository.java
================================================
package kr.co.yeoshin.common.cpm.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.cpm.entity.CpmSearchExperiment;

public interface CustomCpmSearchExperimentRepository {

    List<CpmSearchExperiment> findAll(LocalDateTime at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/dictionary/repository/CustomRecommendRankingKeywordRepository.java
================================================
package kr.co.yeoshin.common.dictionary.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.dictionary.entity.RecommendRankingKeyword;
import kr.co.yeoshin.common.dictionary.model.RecommendKeywordWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomRecommendRankingKeywordRepository {

    Page<RecommendRankingKeyword> findAll(RecommendKeywordWhereCondition condition);

    List<RecommendRankingKeyword> findAllActivate(LocalDateTime at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/dictionary/repository/CustomSearchDictionaryRepository.java
================================================
package kr.co.yeoshin.common.dictionary.repository;

import kr.co.yeoshin.common.dictionary.entity.SearchDictionary;
import kr.co.yeoshin.common.dictionary.model.SearchDictionaryWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSearchDictionaryRepository {

    Page<SearchDictionary> findAllByWhereCondition(SearchDictionaryWhereCondition whereCondition);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/dictionary/repository/CustomTabooDictionaryRepository.java
================================================
package kr.co.yeoshin.common.dictionary.repository;

import kr.co.yeoshin.common.dictionary.entity.TabooDictionary;
import kr.co.yeoshin.common.dictionary.model.TabooDictionaryWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomTabooDictionaryRepository {

    Page<TabooDictionary> findAllByWhereCondition(TabooDictionaryWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/dictionary/repository/RecommendRankingKeywordRepository.java
================================================
package kr.co.yeoshin.common.dictionary.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.dictionary.entity.RecommendRankingKeyword;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendRankingKeywordRepository extends JpaRepository<RecommendRankingKeyword, Long>,
        CustomRecommendRankingKeywordRepository {

    Optional<RecommendRankingKeyword> findByKeyword(String keyword);

    List<RecommendRankingKeyword> findAllByGroupId(long groupId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/dictionary/repository/SearchDictionaryRepository.java
================================================
package kr.co.yeoshin.common.dictionary.repository;

import java.util.Optional;
import kr.co.yeoshin.common.dictionary.entity.SearchDictionary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SearchDictionaryRepository extends JpaRepository<SearchDictionary, Long>,
        CustomSearchDictionaryRepository {

    Optional<SearchDictionary> findDictionaryByWord(String word);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/dictionary/repository/TabooDictionaryRepository.java
================================================
package kr.co.yeoshin.common.dictionary.repository;

import java.util.Optional;
import kr.co.yeoshin.common.dictionary.entity.TabooDictionary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TabooDictionaryRepository extends JpaRepository<TabooDictionary, Long>, CustomTabooDictionaryRepository {

    Optional<TabooDictionary> findDictionaryByWord(String word);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/face/repository/CustomFaceAnalysisReportRepository.java
================================================
package kr.co.yeoshin.common.face.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.face.entity.FaceAnalysisReport;
import kr.co.yeoshin.common.face.model.FaceAnalysisReportWhereCondition;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomFaceAnalysisReportRepository {

    Page<FaceAnalysisReport> fetchAll(FaceAnalysisReportWhereCondition whereCondition);

    Page<FaceAnalysisReport> fetchAll(long memberId, Pageable pageable);

    Optional<FaceAnalysisReport> fetchOne(long faceAnalysisReportId, long memberId);

    List<FaceAnalysisReport> fetchAll(Collection<Long> faceAnalysisReportIds, long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/face/repository/FaceAnalysisReportAsSolutionTagRepository.java
================================================
package kr.co.yeoshin.common.face.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.face.entity.FaceAnalysisReportAsSolutionTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FaceAnalysisReportAsSolutionTagRepository extends JpaRepository<FaceAnalysisReportAsSolutionTag, Long> {

    List<FaceAnalysisReportAsSolutionTag> findAllByFaceAnalysisReportIdIn(Collection<Long> faceAnalysisReportIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/face/repository/FaceAnalysisReportRepository.java
================================================
package kr.co.yeoshin.common.face.repository;

import kr.co.yeoshin.common.face.entity.FaceAnalysisReport;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FaceAnalysisReportRepository extends JpaRepository<FaceAnalysisReport, Long>,
        CustomFaceAnalysisReportRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/fray/repository/CustomFrayImageRepository.java
================================================
package kr.co.yeoshin.common.fray.repository;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.fray.entity.FrayImage;
import kr.co.yeoshin.common.fray.model.MemberFrayImageGroup;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomFrayImageRepository {

    Optional<FrayImage> fetchById(long id);

    List<FrayImage> fetchAllByIds(Collection<Long> ids);

    List<FrayImage> fetchAllByFrayMemberIdsAndTakeDatesTypes(Collection<Long> frayMemberIds,
            Collection<LocalDate> takeDates, Collection<String> types);

    Page<MemberFrayImageGroup> findAllFrayImagesGroupByHospitalIdAndTakeDates(Pageable pageable,
            Collection<Long> frayMemberIds, Collection<String> imageTypes);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/fray/repository/CustomFrayMemberRepository.java
================================================
package kr.co.yeoshin.common.fray.repository;

import java.util.Optional;
import kr.co.yeoshin.common.fray.entity.FrayMember;
import kr.co.yeoshin.common.fray.model.FrayMemberWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomFrayMemberRepository {
    Optional<FrayMember> fetchById(long frayMemberId);

    Optional<FrayMember> fetchByFrayMemberKey(String frayMemberKey);

    Page<FrayMember> fetchAllBy(FrayMemberWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/fray/repository/FrayImageRepository.java
================================================
package kr.co.yeoshin.common.fray.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.fray.entity.FrayImage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrayImageRepository extends JpaRepository<FrayImage, Long>, CustomFrayImageRepository {

    List<FrayImage> findAllByFrayMemberIdAndTakeAtBetween(long frayMemberId, LocalDateTime from, LocalDateTime to);

    List<FrayImage> findAllByFrayMemberIdIn(Collection<Long> frayMemberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/fray/repository/FrayMemberRepository.java
================================================
package kr.co.yeoshin.common.fray.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.fray.entity.FrayMember;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FrayMemberRepository extends JpaRepository<FrayMember, Long>, CustomFrayMemberRepository {

    Optional<FrayMember> findByFrayMemberKey(String frayMemberKey);

    Optional<FrayMember> findByIdAndMemberId(long id, long memberId);

    List<FrayMember> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/health/repository/HealthRepository.java
================================================
package kr.co.yeoshin.common.health.repository;

import javax.persistence.EntityManager;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

@AllArgsConstructor
@Repository
public class HealthRepository {

    private final EntityManager entityManager;

    public boolean health() {
        return entityManager.createNativeQuery("select 1").getSingleResult() != null;
    }
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/BadgeRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.Badge;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BadgeRepository extends JpaRepository<Badge, Long>, CustomBadgeRepository {

    List<Badge> findAllByType(BadgeType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomBadgeRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.Badge;
import kr.co.yeoshin.common.hospital.type.BadgeType;

public interface CustomBadgeRepository {

    List<Badge> findAllByTypes(Collection<BadgeType> badgeTypes);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalAsBadgeRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsBadge;
import kr.co.yeoshin.common.hospital.type.BadgeType;

public interface CustomHospitalAsBadgeRepository {

    List<HospitalAsBadge> fetchAllByHospitalId(long hospitalId);

    List<HospitalAsBadge> fetchAllByHospitalIds(Collection<Long> hospitalIds);

    List<HospitalAsBadge> findAllByHospitalIds(Collection<Long> hospitalIds);

    List<HospitalAsBadge> findAllByBadgeType(BadgeType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalAsHospitalDepartmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalDepartment;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.hospital.model.HospitalDepartmentWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalAsHospitalDepartmentRepository {

    List<HospitalAsHospitalDepartment> fetchAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalAsHospitalDoctorRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsBadge;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalDoctor;
import kr.co.yeoshin.common.hospital.type.BadgeType;

public interface CustomHospitalAsHospitalDoctorRepository {

    List<HospitalAsHospitalDoctor> fetchAllByHospitalDoctorIds(Collection<Long> hospitalDoctorIds);

    List<HospitalAsHospitalDoctor> fetchAllByHospitalDoctorIdsAndHospitalId(Collection<Long> hospitalDoctorIds, long hospitalId);

    List<HospitalAsHospitalDoctor> fetchAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalAsHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalDepartment;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalTreatment;

public interface CustomHospitalAsHospitalTreatmentRepository {

    List<HospitalAsHospitalTreatment> fetchAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalAsTreatmentPrincipleRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsTreatmentPrinciple;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomHospitalAsTreatmentPrincipleRepository {

    List<HospitalAsTreatmentPrinciple> fetchAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDepartmentAsHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartmentAsHospitalTreatment;

public interface CustomHospitalDepartmentAsHospitalTreatmentRepository {

    List<HospitalDepartmentAsHospitalTreatment> fetchAllByHospitalDepartmentIds(Collection<Long> hospitalDepartmentIds);

    List<HospitalDepartmentAsHospitalTreatment> fetchAllByHospitalTreatmentIds(Collection<Long> hospitalTreatmentIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDepartmentAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartmentAsTreatment;

public interface CustomHospitalDepartmentAsTreatmentRepository {

    List<HospitalDepartmentAsTreatment> fetchAllByTreatmentIdIn(Collection<Long> treatmentIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDepartmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.hospital.model.HospitalDepartmentWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalDepartmentRepository {

    Page<HospitalDepartment> findAllHospitalDepartments(HospitalDepartmentWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDoctorApprovalRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorApproval;
import kr.co.yeoshin.common.hospital.model.HospitalDoctorApprovalWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalDoctorApprovalRepository {

    List<HospitalDoctorApproval> fetchAllByHospitalDoctorId(long hospitalDoctorId);

    Page<HospitalDoctorApproval> findAll(HospitalDoctorApprovalWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDoctorAsHospitalDepartmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctor;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorAsHospitalDepartment;
import kr.co.yeoshin.common.hospital.model.HospitalDoctorWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalDoctorAsHospitalDepartmentRepository {

    List<HospitalDoctorAsHospitalDepartment> fetchAllByHospitalDoctorIds(Collection<Long> hospitalDoctorIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDoctorAsHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorAsHospitalTreatment;

public interface CustomHospitalDoctorAsHospitalTreatmentRepository {

    List<HospitalDoctorAsHospitalTreatment> fetchAllByHospitalDoctorIds(Collection<Long> hospitalDoctorIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalDoctorRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalDoctor;
import kr.co.yeoshin.common.hospital.model.HospitalDoctorWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalDoctorRepository {

    Page<HospitalDoctor> findAll(HospitalDoctorWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalManagementContactRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalManagementContact;

public interface CustomHospitalManagementContactRepository {

    List<HospitalManagementContact> fetchAllByHospitalIdIn(Collection<Long> hospitalIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalOfflineUpsellRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalOfflineUpsell;
import kr.co.yeoshin.common.hospital.model.HospitalOfflineUpsellWhereCondition;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.domain.Page;

public interface CustomHospitalOfflineUpsellRepository {

    Page<HospitalOfflineUpsell> findAllHospitalOfflineUpsell(HospitalOfflineUpsellWhereCondition request);

    Optional<HospitalOfflineUpsell> findByHospitalIdAndRef(long hospitalId, DomainType refType, long refId);

    List<HospitalOfflineUpsell> findAllByRefs(DomainType refType, List<Long> refIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalOnboardMemberRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalOnboardMember;
import kr.co.yeoshin.common.hospital.model.HospitalOnboardMemberWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalOnboardMemberRepository {

    List<HospitalOnboardMember> fetchAll(long hospitalOnboardId);

    Page<HospitalOnboardMember> fetchAllHospitalOnboardMembers(HospitalOnboardMemberWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalOnboardRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalOnboard;
import kr.co.yeoshin.common.hospital.model.HospitalOnboardWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalOnboardRepository {

    Optional<HospitalOnboard> fetchByHospitalOnboardId(long hospitalOnboardId);

    Page<HospitalOnboard> fetchAllHospitalOnboards(HospitalOnboardWhereCondition condition);

    List<HospitalOnboard> fetchAllHospitalOnboards(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import kr.co.yeoshin.common.hospital.model.HospitalWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalRepository {

    Optional<Hospital> fetchHospitalById(long hospitalId);

    Page<Hospital> fetchAllHospital(HospitalWhereCondition request);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalScrapRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalScrap;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomHospitalScrapRepository extends ScrapCountRepository {

    boolean existScrapHospitalByMemberIdAndHospitalId(long memberId, long hospitalId);

    Page<HospitalScrap> fetchAllByMemberIdAndViewYn(long memberId, YN viewYn, Pageable pageable);

    List<HospitalScrap> findAllByMemberIdAndHospitalIds(long memberId, Collection<Long> hospitalIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalStatRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

public interface CustomHospitalStatRepository {

    void increaseScrapCount(long id);

    void decreaseScrapCount(long id);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalSuggestRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalSuggest;
import kr.co.yeoshin.common.hospital.model.HospitalSuggestWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalSuggestRepository {

    Page<HospitalSuggest> fetchAll(HospitalSuggestWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalTreatmentGuideRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalTreatmentGuide;
import kr.co.yeoshin.common.hospital.model.HospitalTreatmentGuideWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomHospitalTreatmentGuideRepository {

    Page<HospitalTreatmentGuide> findAllBy(HospitalTreatmentGuideWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/CustomHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

public interface CustomHospitalTreatmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalAdditionalInfoRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAdditionalInfo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalAdditionalInfoRepository extends JpaRepository<HospitalAdditionalInfo, Long> {

    List<HospitalAdditionalInfo> findAllByHospitalId(long hospitalId);

    void deleteAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalAsBadgeRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalAsBadge;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalAsBadgeRepository extends JpaRepository<HospitalAsBadge, Long>, CustomHospitalAsBadgeRepository {

    void deleteAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalAsHospitalDepartmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalDepartment;
import kr.co.yeoshin.common.hospital.entity.HospitalTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalAsHospitalDepartmentRepository extends JpaRepository<HospitalAsHospitalDepartment, Long>,
        CustomHospitalAsHospitalDepartmentRepository {

    List<HospitalAsHospitalDepartment> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalAsHospitalDoctorRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalDoctor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalAsHospitalDoctorRepository extends JpaRepository<HospitalAsHospitalDoctor, Long>,
        CustomHospitalAsHospitalDoctorRepository {

    List<HospitalAsHospitalDoctor> findAllByHospitalDoctorId(long hospitalDoctorId);

    List<HospitalAsHospitalDoctor> findAllByHospitalIdAndHospitalDoctorIdIn(long hospitalId, Collection<Long> hospitalDoctorIds);

    Optional<HospitalAsHospitalDoctor> findByHospitalIdAndHospitalDoctorId(long hospitalId, long hospitalDoctorId);

    List<HospitalAsHospitalDoctor> findAllByHospitalDoctorIdAndHospitalIdIn(long hospitalDoctorId, Collection<Long> hospitalIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalAsHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalAsHospitalTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalAsHospitalTreatmentRepository extends JpaRepository<HospitalAsHospitalTreatment, Long>,
        CustomHospitalAsHospitalTreatmentRepository {

    List<HospitalAsHospitalTreatment> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalAsTreatmentPrincipleRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.Badge;
import kr.co.yeoshin.common.hospital.entity.HospitalAsTreatmentPrinciple;
import kr.co.yeoshin.common.hospital.type.BadgeType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalAsTreatmentPrincipleRepository extends JpaRepository<HospitalAsTreatmentPrinciple, Long>,
        CustomHospitalAsTreatmentPrincipleRepository {

    List<HospitalAsTreatmentPrinciple> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalConfigRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalConfig;
import kr.co.yeoshin.common.hospital.type.HospitalConfigType;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface HospitalConfigRepository extends JpaRepository<HospitalConfig, Long> {

    Optional<HospitalConfig> findByHospitalIdAndConfigType(long hospitalId, HospitalConfigType configType);

    List<HospitalConfig> findAllByHospitalIdAndConfigTypeIn(long hospitalId, Collection<HospitalConfigType> configTypes);

    List<HospitalConfig> findAllByConfigTypeAndHospitalIdIn(HospitalConfigType configType, Collection<Long> hospitalIds);

    void deleteByHospitalIdAndConfigType(long hospitalId, HospitalConfigType configType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDepartmentAsHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartmentAsHospitalTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDepartmentAsHospitalTreatmentRepository
        extends JpaRepository<HospitalDepartmentAsHospitalTreatment, Long>,
        CustomHospitalDepartmentAsHospitalTreatmentRepository {

    List<HospitalDepartmentAsHospitalTreatment> findAllByHospitalTreatmentId(long hospitalTreatmentId);

    List<HospitalDepartmentAsHospitalTreatment> findAllByHospitalDepartmentIdIn(Collection<Long> hospitalDepartmentIds);

    void deleteAllByHospitalTreatmentId(long hospitalTreatmentId);

    List<HospitalDepartmentAsHospitalTreatment> findAllByHospitalTreatmentIdIn(Collection<Long> hospitalTreatmentIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDepartmentAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalDepartmentAsTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDepartmentAsTreatmentRepository
        extends JpaRepository<HospitalDepartmentAsTreatment, Long>, CustomHospitalDepartmentAsTreatmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDepartmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartment;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDepartmentRepository
        extends JpaRepository<HospitalDepartment, Long>, CustomHospitalDepartmentRepository {

    List<HospitalDepartment> findAllByViewYn(YN viewYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDepartmentStatRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDepartmentStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDepartmentStatRepository extends JpaRepository<HospitalDepartmentStat, Long> {

    List<HospitalDepartmentStat> findAllByHospitalDepartmentIdIn(Collection<Long> hospitalDepartmentIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDoctorApprovalRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorApproval;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDoctorApprovalRepository extends JpaRepository<HospitalDoctorApproval, Long>,
        CustomHospitalDoctorApprovalRepository {

    List<HospitalDoctorApproval> findAllByHospitalDoctorIdIn(Collection<Long> hospitalDoctorIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDoctorAsHospitalDepartmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorAsHospitalDepartment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDoctorAsHospitalDepartmentRepository extends JpaRepository<HospitalDoctorAsHospitalDepartment, Long>,
        CustomHospitalDoctorAsHospitalDepartmentRepository {

    List<HospitalDoctorAsHospitalDepartment> findAllByHospitalDoctorId(long id);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDoctorAsHospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctorAsHospitalTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDoctorAsHospitalTreatmentRepository extends JpaRepository<HospitalDoctorAsHospitalTreatment, Long>,
        CustomHospitalDoctorAsHospitalTreatmentRepository {

    List<HospitalDoctorAsHospitalTreatment> findAllByHospitalDoctorId(Long id);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalDoctorRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalDoctor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalDoctorRepository extends JpaRepository<HospitalDoctor, Long>, CustomHospitalDoctorRepository {

    List<HospitalDoctor> findAllByHospitalId(long hospitalId);

    Optional<HospitalDoctor> findByIdAndHospitalId(long doctorId, long hospitalId);

    Optional<HospitalDoctor> findByLicenseNumber(String licenseNumber);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalImageRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalImage;
import kr.co.yeoshin.common.hospital.type.HospitalImageType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalImageRepository extends JpaRepository<HospitalImage, Long> {

    List<HospitalImage> findAllByHospitalId(long hospitalId);

    List<HospitalImage> findAllByHospitalIdAndTypeIn(long hospitalId, Collection<HospitalImageType> types);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalKahfRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalKahf;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalKahfRepository extends JpaRepository<HospitalKahf, Long> {

    Optional<HospitalKahf> findByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalManagementContactRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalManagementContact;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalManagementContactRepository extends JpaRepository<HospitalManagementContact, Long>,
        CustomHospitalManagementContactRepository {

    List<HospitalManagementContact> findAllByHospitalId(long hospitalId);

    Optional<HospitalManagementContact> findByIdAndHospitalId(long contactId, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalMessengerRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalMessenger;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalMessengerRepository extends JpaRepository<HospitalMessenger, Long> {

    List<HospitalMessenger> findAllByHospitalId(long hospitalId);

    List<HospitalMessenger> findAllByHospitalIdIn(Collection<Long> hospitalIds);

    void deleteAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalOfflineUpsellRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalOfflineUpsell;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalOfflineUpsellRepository extends JpaRepository<HospitalOfflineUpsell, Long>,
        CustomHospitalOfflineUpsellRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalOnboardMemberRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalOnboardMember;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalOnboardMemberRepository
        extends JpaRepository<HospitalOnboardMember, Long>, CustomHospitalOnboardMemberRepository {

    Optional<HospitalOnboardMember> findByHospitalOnboardIdAndMemberId(long hospitalOnboardId, long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalOnboardRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalOnboard;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalOnboardRepository extends JpaRepository<HospitalOnboard, Long>, CustomHospitalOnboardRepository {

    Optional<HospitalOnboard> findByHospitalIdAndVersion(long hospitalId, long version);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalOnboardVersionRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalOnboardVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalOnboardVersionRepository extends JpaRepository<HospitalOnboardVersion, Long> {

    Optional<HospitalOnboardVersion> findByHospitalId(long hospitalId);

    void deleteByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalPartnershipRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalPartnership;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalPartnershipRepository extends JpaRepository<HospitalPartnership, Long> {

    Optional<HospitalPartnership> findByHospitalId(long hospitalId);

    Optional<HospitalPartnership> findByHiraId(String hiraId);

    List<HospitalPartnership> findAllByHospitalIdIn(Collection<Long> hospitalIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.Hospital;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalRepository extends JpaRepository<Hospital, Long>, CustomHospitalRepository {

    Optional<Hospital> findByAdminId(long adminId);

    Optional<Hospital> findByIdAndAdminId(long id, long adminId);

    List<Hospital> findByIdIn(Collection<Long> ids);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalScrapRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalScrap;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalScrapRepository
        extends JpaRepository<HospitalScrap, Long>, CustomHospitalScrapRepository {

    void deleteByMemberIdAndHospitalId(long memberId, long hospitalId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalStatRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalStatRepository extends JpaRepository<HospitalStat, Long>, CustomHospitalStatRepository {

    Optional<HospitalStat> findByHospitalId(long hospitalId);

    List<HospitalStat> findAllByHospitalIdIn(Collection<Long> hospitalIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalSuggestRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalSuggest;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalSuggestRepository extends JpaRepository<HospitalSuggest, Long>, CustomHospitalSuggestRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalTreatmentGuideRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.hospital.entity.HospitalTreatmentGuide;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalTreatmentGuideRepository extends JpaRepository<HospitalTreatmentGuide, Long>,
        CustomHospitalTreatmentGuideRepository {

    List<HospitalTreatmentGuide> findAllByHospitalId(long hospitalId);

    Optional<HospitalTreatmentGuide> findByIdAndHospitalId(long id, long hospitalId);

    void deleteAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalTreatmentRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import kr.co.yeoshin.common.hospital.entity.HospitalTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalTreatmentRepository extends JpaRepository<HospitalTreatment, Long>, CustomHospitalTreatmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/hospital/repository/HospitalTreatmentStatRepository.java
================================================
package kr.co.yeoshin.common.hospital.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.hospital.entity.HospitalTreatmentStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalTreatmentStatRepository extends JpaRepository<HospitalTreatmentStat, Long> {

    List<HospitalTreatmentStat> findAllByHospitalTreatmentIdIn(Collection<Long> hospitalTreatmentIds);

    void deleteByHospitalTreatmentId(long hospitalTreatmentId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/inquiry/repository/InquiryHospitalEntryRepository.java
================================================
package kr.co.yeoshin.common.inquiry.repository;

import kr.co.yeoshin.common.inquiry.entity.InquiryHospitalEntry;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InquiryHospitalEntryRepository extends JpaRepository<InquiryHospitalEntry, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/insurance/repository/CustomInsuranceRelationRepository.java
================================================
package kr.co.yeoshin.common.insurance.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.insurance.entity.InsuranceRelation;

public interface CustomInsuranceRelationRepository {

    List<InsuranceRelation> fetchByMemberId(long memberId);

    Optional<InsuranceRelation> fetchByTicketIdAndMemberId(long ticketId, long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/insurance/repository/InsuranceClaimRepository.java
================================================
package kr.co.yeoshin.common.insurance.repository;

import java.util.Optional;
import kr.co.yeoshin.common.insurance.entity.InsuranceClaim;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InsuranceClaimRepository extends JpaRepository<InsuranceClaim, Long> {

    Optional<InsuranceClaim> findByTicketCode(String ticketCode);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/insurance/repository/InsuranceRelationRepository.java
================================================
package kr.co.yeoshin.common.insurance.repository;


import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.insurance.entity.InsuranceRelation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InsuranceRelationRepository extends JpaRepository<InsuranceRelation, Long>, CustomInsuranceRelationRepository {

    List<InsuranceRelation> findByTicketIdIn(Collection<Long> ticketIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/interesting/repository/InterestingRepository.java
================================================
package kr.co.yeoshin.common.interesting.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.interesting.entity.Interesting;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InterestingRepository extends JpaRepository<Interesting, Long> {

    void deleteByMemberId(long memberId);

    void deleteByIdAndMemberId(long id, long memberId);

    Optional<Interesting> findByMemberId(long memberId);

    List<Interesting> findByMemberIdIn(Collection<Long> memberIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/ip/repository/CountryIpRepository.java
================================================
package kr.co.yeoshin.common.ip.repository;

import java.util.Optional;
import kr.co.yeoshin.common.ip.entity.CountryIp;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface CountryIpRepository extends JpaRepository<CountryIp, Long>, CustomCountryIpRepository {

    @Query(value = ""
            + "SELECT * FROM country_ip /*! FORCE INDEX (idx_country_ip_start_end_ip_as_long) */ "
            + "WHERE :ip BETWEEN start_ip_as_long AND end_ip_as_long "
            + "LIMIT 1", nativeQuery = true)
    Optional<CountryIp> findByIpAsLong(@Param("ip") long ip);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/ip/repository/CustomCountryIpRepository.java
================================================
package kr.co.yeoshin.common.ip.repository;

public interface CustomCountryIpRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/media/repository/CustomMediaStatusRepository.java
================================================
package kr.co.yeoshin.common.media.repository;

import java.util.Collection;
import java.util.Optional;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import kr.co.yeoshin.common.type.UserType;
import kr.co.yeoshin.common.type.YN;

public interface CustomMediaStatusRepository {

    Optional<MediaStatus> findByIdAndUploader(long id, UserType uploaderType, long uploaderId);

    void deleteMediaStatuses(Collection<String> fileNames);

    void updateRegisterYnByIdIn(Collection<Long> mediaStatusIds, YN yn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/media/repository/MediaStatusRepository.java
================================================
package kr.co.yeoshin.common.media.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.media.entity.MediaStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MediaStatusRepository extends JpaRepository<MediaStatus, Long>, CustomMediaStatusRepository {

    Optional<MediaStatus> findByFileName(String fileName);

    List<MediaStatus> findAllByFileNameIn(Collection<String> fileNames);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/BlacklistMemberRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.BlacklistMemberHistory;
import kr.co.yeoshin.common.member.type.BlacklistType;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BlacklistMemberRepository extends JpaRepository<BlacklistMemberHistory, Long>, CustomBlacklistMemberRepository {

    Optional<BlacklistMemberHistory> findTopByMemberIdAndTypeOrderByIdDesc(long memberId, BlacklistType type);

    List<BlacklistMemberHistory> findAllByMemberIdInAndTypeAndLatestYnOrderByIdDesc(Collection<Long> memberIds, BlacklistType type, YN latestYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomBlacklistMemberRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.BlacklistMemberHistory;
import kr.co.yeoshin.common.member.model.BlacklistMemberHistoryWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomBlacklistMemberRepository {

    Page<BlacklistMemberHistory> fetchAll(BlacklistMemberHistoryWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomDormantMemberRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Optional;
import kr.co.yeoshin.common.member.entity.DormantMember;
import kr.co.yeoshin.common.member.model.MemberWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomDormantMemberRepository {

    Page<DormantMember> findAll(MemberWhereCondition whereCondition);

    Optional<DormantMember> fetchByMemberId(long memberId);

    Optional<DormantMember> findByMemberId(long memberId);

    long countByProfileId(String profileId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberAccountRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.member.entity.MemberAccount;

public interface CustomMemberAccountRepository {

    Optional<MemberAccount> findMemberAccountByProvider(AuthProvider provider, String providerId);

    Optional<MemberAccount> findMemberAccountByProvider(Collection<AuthProvider> providers, String providerId);

    Optional<MemberAccount> fetchMemberAccountByProvider(AuthProvider provider, String providerId);

    List<MemberAccount> findMemberAccountsByMemberId(long memberId);

    List<MemberAccount> fetchMemberAccountsByMemberId(long memberId);

    List<MemberAccount> findAllByMemberIds(Collection<Long> memberIds);

    Optional<MemberAccount> fetchByMemberIdAndProvider(long id, AuthProvider provider);

    boolean updateMemberAccountSecret(long id, String encryptedPassword);

    Optional<MemberAccount> findPrimaryMemberAccountByMemberId(long memberId);

    void deleteByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberLevelRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberLevel;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomMemberLevelRepository {

    Optional<MemberLevel> findLatestByMemberIdAndStartAtBetween(long memberId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberLevelRewardRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.member.entity.MemberLevelReward;
import kr.co.yeoshin.common.type.DomainType;

public interface CustomMemberLevelRewardRepository {

    List<MemberLevelReward> findAll(long memberId, DomainType refType, Collection<Long> refId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberMigrationMappingLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberMigrationMappingLog;

public interface CustomMemberMigrationMappingLogRepository {

    Optional<MemberMigrationMappingLog> findByOldId(String oldId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.List;
import kr.co.yeoshin.common.member.entity.Member;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.member.model.HospitalTicketOwnedMemberWhereCondition;
import kr.co.yeoshin.common.member.model.MemberWhereCondition;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberRepository {

    boolean existMemberCellPhone(String cellPhone);

    boolean existMemberCountryCellPhone(String countryCallingCode, String cellPhone);

    boolean existMemberCellPhone(String name, String cellPhone);

    boolean existMemberEmail(String name, String email);

    boolean existMemberProfileId(String profileId);

    boolean updateMemberSignature(long id, String signature);

    boolean updateMemberCellPhone(long id, String countryCode, String countryCallingCode, String cellPhone);

    List<Member> findRegisteredMembersByCellPhoneAndName(String cellPhone, String name);

    List<Member> findRegisteredMembersByEmailAndName(String email, String name);

    Page<Member> fetchAll(Pageable pageable);

    Page<Member> fetchAllByWhereCondition(MemberWhereCondition condition);

    long countByProfileId(String profileId);

    List<Member> findAllByProfileId(String profileId);

    Page<MemberServiceSummary> fetchAllHospitalTicketOwnedMembersBy(HospitalTicketOwnedMemberWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberResignRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Optional;
import kr.co.yeoshin.common.auth.type.AuthProvider;
import kr.co.yeoshin.common.member.entity.MemberResign;

public interface CustomMemberResignRepository {

    Optional<MemberResign> findByMemberId(Long memberId);

    Optional<MemberResign> findLatestByEncryptedCellPhone(String encryptedCellPhone);

    Optional<MemberResign> findByProvider(AuthProvider provider, String providerId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberSearchKeywordRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;

public interface CustomMemberSearchKeywordRepository {

    void deleteAllByIdInAndMemberId(Collection<Long> ids, long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberServiceStatRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.time.LocalDate;
import kr.co.yeoshin.common.member.model.MemberServiceStatSummary;

public interface CustomMemberServiceStatRepository {

    MemberServiceStatSummary findSummary(long memberId, LocalDate from, LocalDate to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberServiceStatTicketLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.time.LocalDateTime;
import kr.co.yeoshin.common.member.entity.MemberServiceStatTicketLog;
import kr.co.yeoshin.common.member.model.MemberServiceStatTicketLogWhereCondition;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberServiceStatTicketLogRepository {

    Page<MemberServiceStatTicketLog> findAll(long memberId, LocalDateTime from, LocalDateTime to, Pageable pageable);

    Page<MemberServiceStatTicketLog> findAll(MemberServiceStatTicketLogWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberServiceSummaryRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import kr.co.yeoshin.common.member.model.MemberServiceSummaryWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomMemberServiceSummaryRepository {

    boolean existInviteCode(String inviteCode);

    Optional<MemberServiceSummary> findByInviteCode(String inviteCode);

    Optional<MemberServiceSummary> findByMemberId(long memberId);

    Optional<MemberServiceSummary> fetchByMemberId(long memberId);

    Optional<MemberServiceSummary> fetchByIdentificationKey(String identificationKey);

    Optional<MemberServiceSummary> fetchByMemberCellPhone(String cellPhone);

    List<MemberServiceSummary> fetchAllByMemberCellPhones(Collection<String> cellPhones);

    boolean incrementSalesEventScrapCount(long memberId);

    boolean decrementSalesEventScrapCount(long memberId);

    List<MemberServiceSummary> fetchAllByMemberId(List<Long> memberId);

    Optional<MemberServiceSummary> fetchByInviteCode(String inviteCode);

    Page<MemberServiceSummary> fetchAll(MemberServiceSummaryWhereCondition whereCondition);

    long increaseAbusingCount(Collection<Long> memberIds);

    long increaseAttentionCount(Collection<Long> memberIds);

    long updateFirstOrderAt(long memberId);

    long updateFirstSalesEventConsultationAt(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/CustomMemberTermsAgreeLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.member.entity.MemberTermsAgreeLog;
import kr.co.yeoshin.common.member.type.AgreementTermsType;

public interface CustomMemberTermsAgreeLogRepository {

    List<MemberTermsAgreeLog> fetchAllByIds(Collection<Long> memberTermsAgreeLogIds);

    List<MemberTermsAgreeLog> fetchAllByMemberId(long memberId);

    List<MemberTermsAgreeLog> fetchAllByMemberIdAndTermsType(long memberId, Collection<AgreementTermsType> agreementTermsTypes);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/DormantMemberRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.DormantMember;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DormantMemberRepository extends JpaRepository<DormantMember, Long>, CustomDormantMemberRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberAccountRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.MemberAccount;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberAccountRepository extends JpaRepository<MemberAccount, Long>, CustomMemberAccountRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberDomainLatestStatusRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberDomainLatestStatus;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberDomainLatestStatusRepository extends JpaRepository<MemberDomainLatestStatus, Long> {

    List<MemberDomainLatestStatus> findAllByMemberId(long memberId);

    Optional<MemberDomainLatestStatus> findByMemberIdAndDomain(long memberId, DomainType domain);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberLevelRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberLevel;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberLevelRepository extends JpaRepository<MemberLevel, Long> {

    List<MemberLevel> findAllByMemberIdAndStartAtBetween(long memberId, LocalDateTime from, LocalDateTime to);

    Optional<MemberLevel> findLatestByMemberIdAndStartAtBetween(long memberId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberLevelRewardRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.member.entity.MemberLevelReward;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberLevelRewardRepository extends JpaRepository<MemberLevelReward, Long>,
        CustomMemberLevelRewardRepository {

    List<MemberLevelReward> findAllByRefTypeAndRefIdIn(DomainType refType, Collection<Long> refIds);

    List<MemberLevelReward> findAllByMemberIdAndRefTypeAndRefIdIn(long memberId, DomainType refType, Collection<Long> refIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberMigrationMappingLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.MemberMigrationMappingLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberMigrationMappingLogRepository
        extends JpaRepository<MemberMigrationMappingLog, Long>, CustomMemberMigrationMappingLogRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.Member;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberRepository extends JpaRepository<Member, Long>, CustomMemberRepository {

    List<Member> findAllByIdIn(Collection<Long> memberIds);

    Optional<Member> findByCellPhone(String cellPhone);

    Optional<Member> findByCellPhoneAndCountryCallingCode(String cellPhone, String countryCallingCode);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberResignLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.MemberResignLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberResignLogRepository extends JpaRepository<MemberResignLog, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberResignRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.MemberResign;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberResignRepository extends JpaRepository<MemberResign, Long>, CustomMemberResignRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberSalesEventViewRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberSalesEventRecentView;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberSalesEventViewRepository extends JpaRepository<MemberSalesEventRecentView, Long> {

    Optional<MemberSalesEventRecentView> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberSearchKeywordRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberSearchKeyword;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface MemberSearchKeywordRepository
        extends JpaRepository<MemberSearchKeyword, Long>, CustomMemberSearchKeywordRepository {

    Optional<MemberSearchKeyword> findByMemberIdAndKeyword(long memberId, String keyword);

    List<MemberSearchKeyword> findAllByMemberId(long memberId);

    void deleteByMemberIdAndKeyword(long memberId, String keyword);

    @Modifying
    @Query(value = "INSERT INTO member_search_keyword(member_id, keyword, search_at, created, updated) "
            + "VALUES (:#{#register.memberId}, :#{#register.keyword}, :#{#register.searchAt}, NOW(), NOW()) "
            + "ON DUPLICATE KEY UPDATE "
            + "  search_at = NOW(), "
            + "  updated = NOW()",
            nativeQuery = true)
    int upsertSearchKeyword(@Param("register") MemberSearchKeyword register);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberServiceStatRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.time.LocalDate;
import java.util.Optional;
import kr.co.yeoshin.common.member.entity.MemberServiceStat;
import kr.co.yeoshin.common.member.model.MemberOrderStatIncrement;
import kr.co.yeoshin.common.member.model.MemberTicketStatIncrement;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface MemberServiceStatRepository extends JpaRepository<MemberServiceStat, Long>, CustomMemberServiceStatRepository {

    Optional<MemberServiceStat> findByMemberIdAndAt(long memberId, LocalDate at);

    @Modifying
    @Query(value =
            "INSERT INTO member_service_stat ("
                    + "member_id, "
                    + "at, "
                    + "order_count, "
                    + "sale_point_price, "
                    + "sale_coupon_price, "
                    + "payment_price, "
                    + "created, "
                    + "updated)"
                    + " VALUES ("
                    + ":#{#stat.memberId}, "
                    + ":#{#stat.at}, "
                    + ":#{#stat.orderCount}, "
                    + ":#{#stat.salePointPrice}, "
                    + ":#{#stat.saleCouponPrice}, "
                    + ":#{#stat.paymentPrice}, "
                    + ":#{#stat.updateAt}, "
                    + ":#{#stat.updateAt})"
                    + " ON DUPLICATE KEY UPDATE "
                    + "order_count = order_count + :#{#stat.orderCount}, "
                    + "sale_point_price = sale_point_price + :#{#stat.salePointPrice}, "
                    + "sale_coupon_price = sale_coupon_price + :#{#stat.saleCouponPrice}, "
                    + "payment_price = payment_price + :#{#stat.paymentPrice}, "
                    + "updated = :#{#stat.updateAt}",
            nativeQuery = true)
    int increase(@Param("stat") MemberOrderStatIncrement stat);

    @Modifying
    @Query(value =
            "INSERT INTO member_service_stat ("
                    + "member_id, "
                    + "at, "
                    + "ticket_use_price, "
                    + "ticket_use_count, "
                    + "cancel_ticket_use_price, "
                    + "cancel_ticket_use_count, "
                    + "created, "
                    + "updated)"
                    + " VALUES ("
                    + ":#{#stat.memberId}, "
                    + ":#{#stat.at}, "
                    + ":#{#stat.ticketUsePrice}, "
                    + ":#{#stat.ticketUseCount}, "
                    + ":#{#stat.cancelTicketUsePrice}, "
                    + ":#{#stat.cancelTicketUseCount}, "
                    + ":#{#stat.updateAt}, "
                    + ":#{#stat.updateAt})"
                    + " ON DUPLICATE KEY UPDATE "
                    + "ticket_use_price = ticket_use_price + :#{#stat.ticketUsePrice}, "
                    + "ticket_use_count = ticket_use_count + :#{#stat.ticketUseCount}, "
                    + "cancel_ticket_use_price = cancel_ticket_use_price + :#{#stat.cancelTicketUsePrice}, "
                    + "cancel_ticket_use_count = cancel_ticket_use_count + :#{#stat.cancelTicketUseCount}, "
                    + "updated = :#{#stat.updateAt}",
            nativeQuery = true)
    int increase(@Param("stat") MemberTicketStatIncrement stat);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberServiceStatTicketLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.member.entity.MemberServiceStatTicketLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberServiceStatTicketLogRepository extends JpaRepository<MemberServiceStatTicketLog, Long>,
        CustomMemberServiceStatTicketLogRepository {

    List<MemberServiceStatTicketLog> findAllByMemberIdAndCreatedBetween(long memberId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberServiceSummaryRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.member.entity.MemberServiceSummary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberServiceSummaryRepository extends JpaRepository<MemberServiceSummary, Long>, CustomMemberServiceSummaryRepository {

    List<MemberServiceSummary> findAllByMemberIdIn(Collection<Long> memberIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberSignInLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.MemberSignInLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberSignInLogRepository extends JpaRepository<MemberSignInLog, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/member/repository/MemberTermsAgreeLogRepository.java
================================================
package kr.co.yeoshin.common.member.repository;

import kr.co.yeoshin.common.member.entity.MemberTermsAgreeLog;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MemberTermsAgreeLogRepository extends JpaRepository<MemberTermsAgreeLog, Long>, CustomMemberTermsAgreeLogRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/monitoring/repository/MonitoringSalesEventViewRepository.java
================================================
package kr.co.yeoshin.common.monitoring.repository;

import kr.co.yeoshin.common.monitoring.entity.MonitoringSalesEventView;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MonitoringSalesEventViewRepository extends JpaRepository<MonitoringSalesEventView, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/CustomNotificationRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import java.time.LocalDateTime;
import kr.co.yeoshin.common.notification.entity.Notification;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomNotificationRepository {

    Page<Notification> findAllActive(long memberId, LocalDateTime now, Pageable pageable);

    void deleteExpired(long memberId, LocalDateTime now);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/CustomNotificationSalesEventConsultationRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import java.util.Optional;
import kr.co.yeoshin.common.notification.entity.NotificationSalesEventConsultation;
import kr.co.yeoshin.common.notification.type.NotificationSalesEventConsultationType;

public interface CustomNotificationSalesEventConsultationRepository {

    Optional<NotificationSalesEventConsultation> findByMember(
            long memberId, long salesEventConsultationId, NotificationSalesEventConsultationType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/HospitalPeriodicalNotificationRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.HospitalPeriodicalNotification;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalPeriodicalNotificationRepository extends JpaRepository<HospitalPeriodicalNotification, String> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationBoxRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.NotificationBox;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationBoxRepository extends JpaRepository<NotificationBox, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationConfigRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.notification.entity.NotificationConfig;
import kr.co.yeoshin.common.notification.type.NotificationConfigType;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface NotificationConfigRepository extends JpaRepository<NotificationConfig, Long> {

    boolean existsByMemberIdAndType(long memberId, NotificationConfigType type);

    List<NotificationConfig> findAllByMemberId(long memberId);

    List<NotificationConfig> findAllByMemberIdIn(Collection<Long> memberIds);

    Optional<NotificationConfig> findByMemberIdAndType(long memberId, NotificationConfigType type);

    List<NotificationConfig> findAllByMemberIdAndTypeIn(long memberId, Collection<NotificationConfigType> types);

    void deleteByMemberIdAndType(long memberId, NotificationConfigType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationFallbackRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.NotificationFallback;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationFallbackRepository extends JpaRepository<NotificationFallback, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationHospitalOnboardCompleteRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.NotificationHospitalOnboardComplete;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationHospitalOnboardCompleteRepository extends JpaRepository<NotificationHospitalOnboardComplete, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationMemberStatusRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import java.util.Optional;
import kr.co.yeoshin.common.member.type.MemberStatusType;
import kr.co.yeoshin.common.notification.entity.NotificationMemberStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationMemberStatusRepository extends JpaRepository<NotificationMemberStatus, Long> {

    void deleteByMemberIdAndType(long memberId, MemberStatusType type);

    void deleteByMemberId(long memberId);

    Optional<NotificationMemberStatus> findByMemberIdAndType(long memberId, MemberStatusType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationPrivateInfoUsageRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.NotificationPrivateInfoUsage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationPrivateInfoUsageRepository
        extends JpaRepository<NotificationPrivateInfoUsage, Long> {

    void deleteByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import java.util.List;
import kr.co.yeoshin.common.notification.entity.Notification;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationRepository extends JpaRepository<Notification, Long>, CustomNotificationRepository {

    List<Notification> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationSalesEventConsultationRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.NotificationSalesEventConsultation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationSalesEventConsultationRepository
        extends JpaRepository<NotificationSalesEventConsultation, Long>, CustomNotificationSalesEventConsultationRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/NotificationWhitelistRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import kr.co.yeoshin.common.notification.entity.NotificationWhitelist;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NotificationWhitelistRepository extends JpaRepository<NotificationWhitelist, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/notification/repository/SlackIdManagementRepository.java
================================================
package kr.co.yeoshin.common.notification.repository;

import java.util.List;
import kr.co.yeoshin.common.notification.entity.SlackIdManagement;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SlackIdManagementRepository extends JpaRepository<SlackIdManagement, Long> {

    List<SlackIdManagement> findAllByAdminId(long adminId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/openai/repository/CustomOpenAiAssistantStatusRepository.java
================================================
package kr.co.yeoshin.common.openai.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.openai.entity.OpenAiAssistantStatus;

public interface CustomOpenAiAssistantStatusRepository {

    List<OpenAiAssistantStatus> findAllLatest(long memberId, String clientId, long limit);

    Optional<OpenAiAssistantStatus> findLatest(long memberId, String clientId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/openai/repository/OpenAiAssistantConfigRepository.java
================================================
package kr.co.yeoshin.common.openai.repository;

import java.util.List;
import kr.co.yeoshin.common.openai.entity.OpenAiAssistantConfig;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OpenAiAssistantConfigRepository extends JpaRepository<OpenAiAssistantConfig, Long> {

    List<OpenAiAssistantConfig> findAllByDomainType(DomainType domainType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/openai/repository/OpenAiAssistantStatusRepository.java
================================================
package kr.co.yeoshin.common.openai.repository;

import kr.co.yeoshin.common.openai.entity.OpenAiAssistantStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OpenAiAssistantStatusRepository extends JpaRepository<OpenAiAssistantStatus, Long>,
        CustomOpenAiAssistantStatusRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CartRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.Cart;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CartRepository extends JpaRepository<Cart, Long>, CustomCartRepository {

    Optional<Cart> findByIdAndMemberId(long cartId, long memberId);

    List<Cart> findAllByIdInAndMemberId(List<Long> cartIds, long memberId);

    List<Cart> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomCartRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.Cart;

public interface CustomCartRepository {

    boolean existByMemberIdAndSalesEventIdAndSalesProductId(long memberId, long salesEventId, long salesProductId);

    List<Cart> fetchAllByMemberId(long memberId);

    Optional<Cart> fetchByIdAndMemberId(long id, long memberId);

    List<Cart> findAllByMemberIdAndSalesEventIdAndSalesProductId(long memberId, long salesEventId, long salesProductId);

    List<Cart> fetchAllByIdAndMemberId(List<Long> ids, long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomOrderRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.payment.entity.OrderRefundBankAccount;
import kr.co.yeoshin.common.payment.model.OrderSummary;
import kr.co.yeoshin.common.payment.pageable.OrderWhereCondition;
import kr.co.yeoshin.common.payment.type.OrderStatus;
import kr.co.yeoshin.common.type.UserType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomOrderRepository {

    Optional<OrderPurchase> fetchById(long orderId);

    Page<OrderPurchase> findAllByPageable(OrderWhereCondition orderWhereCondition);

    Page<OrderPurchase> findAllByPageable(
            UserType ordererType, long ordererId, Collection<OrderStatus> statuses, Pageable pageable);

    Optional<OrderPurchase> fetchByIdAndOrderer(long orderId, UserType ordererType, long ordererId);

    OrderSummary summarizeOrderStat(UserType ordererType, long ordererId, Collection<OrderStatus> statuses);

    Optional<OrderRefundBankAccount> fetchOrderRefundBankAccountByOrderId(long orderId);

    Optional<Long> findFirstOrderIdByOrderer(UserType ordererType, long ordererId);

    Optional<OrderPurchase> findByOrderCodeAndTicketCode(String orderCode, String ticketCode);

    long countByOrderStatus(UserType ordererType, long ordererId, Collection<OrderStatus> statuses);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomOrderSalesProductRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomOrderSalesProductRepository {

    List<OrderSalesProduct> fetchAllByOrderId(long orderId);

    List<OrderSalesProduct> findAllByOrderId(long orderId);

    Optional<OrderSalesProduct> fetchById(long id);

    List<OrderSalesProduct> fetchAllByIds(Collection<Long> ids);

    List<OrderSalesProduct> fetchAllByOrderIds(Collection<Long> orderIds);

    Page<OrderSalesProduct> fetchAllByMemberId(long memberId, Pageable pageable);

    List<OrderSalesProduct> fetchAllByTicketIds(Collection<Long> ticketIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomPaymentAllatRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

public interface CustomPaymentAllatRepository {


}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomPaymentBenefitRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.PaymentBenefit;
import kr.co.yeoshin.common.payment.model.PaymentBenefitWhereCondition;
import kr.co.yeoshin.common.type.ProgressStatus;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;

public interface CustomPaymentBenefitRepository {

    Page<PaymentBenefit> findAll(PaymentBenefitWhereCondition whereCondition);

    List<PaymentBenefit> findAll(Collection<ProgressStatus> statuses, Collection<YN> viewYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomPaymentCouponRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentCoupon;
import kr.co.yeoshin.common.payment.type.OrderStatus;

public interface CustomPaymentCouponRepository {

    List<PaymentCoupon> findAllByOrderIds(Collection<Long> orderIds);

    List<PaymentCoupon> fetchAllByMemberCouponIds(Collection<Long> memberCouponIds, Collection<OrderStatus> orderStatuses);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomPaymentIamportRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;

public interface CustomPaymentIamportRepository {

    Optional<PaymentIamport> findByOrderId(long orderId);

    Optional<PaymentIamport> fetchByOrderId(long orderId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomPaymentKcpRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

public interface CustomPaymentKcpRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomPaymentNicepayRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

public interface CustomPaymentNicepayRepository {


}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomSystemCashRefundStatusRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.SystemCashRefundStatus;
import kr.co.yeoshin.common.payment.model.SystemCashRefundStatusWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSystemCashRefundStatusRepository {

    Page<SystemCashRefundStatus> findAllByWhereCondition(SystemCashRefundStatusWhereCondition toWhereCondition);

    Optional<SystemCashRefundStatus> fetchById(Long id);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomSystemCashRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.SystemCash;
import kr.co.yeoshin.common.payment.model.SystemCashWhereCondition;
import kr.co.yeoshin.common.payment.type.SystemCashStatus;
import kr.co.yeoshin.common.payment.type.SystemCashType;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomSystemCashRepository {

    Page<SystemCash> fetchAllByMemberIdAndTypeIn(
            long memberId, Collection<SystemCashStatus> statuses, Pageable pageable);

    Page<SystemCash> findAllByWhereCondition(SystemCashWhereCondition toWhereCondition);

    List<SystemCash> findAllByRef(
            long memberId, DomainType refType, long refId);

    List<SystemCash> findAllByRefs(DomainType refType, Collection<Long> refIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomSystemCashSummaryRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.SystemCashSummary;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomSystemCashSummaryRepository {

    int sumCashByMemberIdAndExpireAtAfter(long memberId, LocalDateTime now);

    List<SystemCashSummary> findAllByMemberIdAndExpireAtAfter(long memberId, LocalDateTime now);

    Page<SystemCashSummary> findAllByMemberIdAndExpireAtAfter(long memberId, LocalDateTime now, Pageable pageable);

    Optional<SystemCashSummary> findByMemberIdAndExpireAt(long memberId, LocalDateTime expireAt);

    void deleteByMemberIdAndExpireAtBefore(long memberId, LocalDateTime now);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomSystemCashVoucherConfigRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.SystemCashVoucherConfig;
import kr.co.yeoshin.common.payment.model.SystemCashVoucherConfigWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSystemCashVoucherConfigRepository {

    Page<SystemCashVoucherConfig> findAll(SystemCashVoucherConfigWhereCondition whereCondition);

    Optional<SystemCashVoucherConfig> fetchById(long id);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomSystemCashVoucherQueryRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import kr.co.yeoshin.common.payment.entity.SystemCashVoucher;

public interface CustomSystemCashVoucherQueryRepository {

    boolean saveAllInBatch(List<SystemCashVoucher> systemCashVouchers);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomSystemCashVoucherRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.SystemCashVoucher;
import kr.co.yeoshin.common.payment.model.SystemCashVoucherStat;
import kr.co.yeoshin.common.payment.model.SystemCashVoucherWhereCondition;
import kr.co.yeoshin.common.payment.type.SystemCashVoucherStatus;
import org.springframework.data.domain.Page;

public interface CustomSystemCashVoucherRepository {

    Page<SystemCashVoucher> findAll(SystemCashVoucherWhereCondition whereCondition);

    List<SystemCashVoucherStat> aggregateStatByConfigIds(Collection<Long> systemCashVoucherConfigIds);

    Optional<SystemCashVoucher> findLatestByConfigIdAndStatus(long systemCashVoucherConfigId, SystemCashVoucherStatus status);

    Optional<SystemCashVoucher> fetchByCode(String code);

    List<SystemCashVoucher> fetchByIds(Collection<Long> systemCashVoucherIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomTicketRestorationInquiryRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.TicketRestorationInquiry;
import kr.co.yeoshin.common.payment.model.TicketRestorationInquiryWhereCondition;
import kr.co.yeoshin.common.type.UserType;
import org.springframework.data.domain.Page;

public interface CustomTicketRestorationInquiryRepository {

    Page<TicketRestorationInquiry> fetchAll(TicketRestorationInquiryWhereCondition whereCondition);

    Optional<TicketRestorationInquiry> fetchByIdAndType(long inquiryId, UserType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomTicketTrashRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.TicketTrash;

public interface CustomTicketTrashRepository {

    List<TicketTrash> fetchAllByOrderSalesProductIds(Collection<Long> orderSalesProductIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomerPaymentCardRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentCard;

public interface CustomerPaymentCardRepository {

    Optional<PaymentCard> findByMemberIdAndIamportCustomerUid(long memberId, String customerUniqueId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomerPaymentSystemCashCheckoutRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentSystemCashCheckout;

public interface CustomerPaymentSystemCashCheckoutRepository {

    Optional<PaymentSystemCashCheckout> fetchSystemCashByMemberId(long memberId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomerPaymentSystemEasyCheckoutRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentSystemEasyCheckout;

public interface CustomerPaymentSystemEasyCheckoutRepository {

    Optional<PaymentSystemEasyCheckout> fetchSystemEasyByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomerRefundAccountRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

public interface CustomerRefundAccountRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/CustomerTicketRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.Ticket;
import kr.co.yeoshin.common.payment.model.TicketWhereCondition;
import kr.co.yeoshin.common.payment.type.TicketStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomerTicketRepository {

    Optional<Ticket> fetchByTicketIdAndMemberId(long ticketId, long memberId);

    Optional<Ticket> fetchById(long id);

    Optional<Ticket> fetchByCode(String code);

    List<Ticket> findAllTicketsByMemberId(long memberId, Collection<TicketStatus> statuses);

    List<Ticket> fetchAllTicketsByMemberId(long memberId, Collection<TicketStatus> statuses);

    List<Ticket> fetchAllTicketsByMemberId(
            long memberId, Collection<TicketStatus> statuses, LocalDateTime fromUpdated, LocalDateTime toUpdated);

    List<Ticket> fetchAllTicketsByMemberIdAndHospitalId(long memberId, long hospitalId, Collection<TicketStatus> statuses);

    List<Ticket> fetchAllByTicketIds(Collection<Long> ticketIds);

    List<Ticket> fetchAllByMemberIdAndStatuses(long memberId, Collection<TicketStatus> statuses);

    Page<Ticket> fetchAllByMemberIdAndStatuses(long memberId, Collection<TicketStatus> statuses, Pageable pageable);

    Page<Ticket> fetchAllByMemberIdAndHospitalIdAndStatuses(
            long memberId, long hospitalId, Collection<TicketStatus> statuses, Pageable pageable);

    List<Ticket> fetchAllByOrderSalesProductIds(Collection<Long> orderSalesProductIds);

    List<Ticket> findAllByOrderSalesProductIds(Collection<Long> orderSalesProductIds);

    Page<Long> findAllIds(TicketWhereCondition whereCondition);

    Page<Long> findAllGroupIds(TicketWhereCondition whereCondition);

    List<Ticket> fetchAllByGroupIds(List<Long> groupIds);

    boolean updateGroupIdByTicketIds(Collection<Long> ticketIds, long groupId);

    boolean updateTicketStatus(Collection<Long> ticketIds, TicketStatus status);

    boolean updateHospitalMemo(long ticketId, String hospitalMemo);

    boolean updateAdminMemo(long ticketId, String adminMemo);

    long countByMemberIdAndStatuses(long memberId, Collection<TicketStatus> statuses);

    long countDelayedVisitConfirmations(long hospitalId);

    boolean existTicketsByHospitalIdAndStatus(long hospitalId, TicketStatus status);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/GiftOrderRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.GiftOrder;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GiftOrderRepository extends JpaRepository<GiftOrder, Long> {

    Optional<GiftOrder> findByOrderId(long orderId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/MoneyReceiptLogRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import kr.co.yeoshin.common.payment.entity.MoneyReceiptLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MoneyReceiptLogRepository extends JpaRepository<MoneyReceiptLog, Long> {

    List<MoneyReceiptLog> findAllByOrderId(long orderId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/OrderPartCancelRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.OrderPartCancel;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderPartCancelRepository extends JpaRepository<OrderPartCancel, Long> {

    Optional<OrderPartCancel> findByOrderId(long orderId);

    List<OrderPartCancel> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/OrderPartCancelTicketRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import kr.co.yeoshin.common.payment.entity.OrderPartCancelTicket;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderPartCancelTicketRepository extends JpaRepository<OrderPartCancelTicket, Long> {

    List<OrderPartCancelTicket> findAllByOrderPartCancelId(long orderPartCancelId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/OrderRefundBankAccountRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.OrderRefundBankAccount;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderRefundBankAccountRepository extends JpaRepository<OrderRefundBankAccount, Long> {

    Optional<OrderRefundBankAccount> findByOrderId(long orderId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/OrderRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.OrderPurchase;
import kr.co.yeoshin.common.type.UserType;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface OrderRepository extends JpaRepository<OrderPurchase, Long>, CustomOrderRepository {

    Optional<OrderPurchase> findByIdAndOrdererTypeAndOrdererId(long orderId, UserType ordererType, long ordererId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/OrderSalesProductRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.OrderSalesProduct;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderSalesProductRepository extends JpaRepository<OrderSalesProduct, Long>, CustomOrderSalesProductRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/OrderSheetConfigRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.OrderSheetConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderSheetConfigRepository extends JpaRepository<OrderSheetConfig, Long> {

    Optional<OrderSheetConfig> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentAllatRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentAllat;
import kr.co.yeoshin.common.payment.type.PgType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentAllatRepository extends JpaRepository<PaymentAllat, Long>, PaymentPgRepository<PaymentAllat> {

    default PgType pgType() {
        return PgType.ALLAT;
    }

    @Override
    Optional<PaymentAllat> findByOrderId(long orderId);

    @Override
    List<PaymentAllat> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentBenefitRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.PaymentBenefit;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentBenefitRepository extends JpaRepository<PaymentBenefit, Long>, CustomPaymentBenefitRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentCardRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.PaymentCard;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentCardRepository extends JpaRepository<PaymentCard, Long>, CustomerPaymentCardRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentCouponRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import kr.co.yeoshin.common.payment.entity.PaymentCoupon;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentCouponRepository extends JpaRepository<PaymentCoupon, Long>, CustomPaymentCouponRepository {

    List<PaymentCoupon> findAllByOrderId(long orderId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentFailureRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import kr.co.yeoshin.common.payment.entity.PaymentFailure;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentFailureRepository extends JpaRepository<PaymentFailure, Long> {

    Optional<PaymentFailure> findByOrderId(long orderId);

    List<PaymentFailure> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentIamportRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentIamport;
import kr.co.yeoshin.common.payment.type.PgType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentIamportRepository extends JpaRepository<PaymentIamport, Long>, PaymentPgRepository<PaymentIamport>,
        CustomPaymentIamportRepository {

    default PgType pgType() {
        return PgType.IAMPORT;
    }

    Optional<PaymentIamport> findByMerchantUid(String merchantUid);

    @Override
    Optional<PaymentIamport> findByOrderId(long orderId);

    @Override
    List<PaymentIamport> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentKcpRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentKcp;
import kr.co.yeoshin.common.payment.type.PgType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentKcpRepository extends JpaRepository<PaymentKcp, Long>, PaymentPgRepository<PaymentKcp> {

    default PgType pgType() {
        return PgType.KCP;
    }

    @Override
    Optional<PaymentKcp> findByOrderId(long orderId);

    @Override
    List<PaymentKcp> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentLogRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.PaymentLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentLogRepository extends JpaRepository<PaymentLog, Long> {

    List<PaymentLog> findAllByOrderId(long orderId);

    List<PaymentLog> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentNicepayConfigRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentNicepayConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentNicepayConfigRepository extends JpaRepository<PaymentNicepayConfig, Long> {

    Optional<PaymentNicepayConfig> findByHospitalId(long hospitalId);

    List<PaymentNicepayConfig> findAllByHospitalIdIn(Collection<Long> hospitalIds);

    List<PaymentNicepayConfig> findAllByMerchantId(String mid);

    List<PaymentNicepayConfig> findAllByMerchantIdIn(Collection<String> mids);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentNicepayRemittanceRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.PaymentNicepayRemittance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentNicepayRemittanceRepository extends JpaRepository<PaymentNicepayRemittance, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentNicepayRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentNicepay;
import kr.co.yeoshin.common.payment.type.PgType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentNicepayRepository extends JpaRepository<PaymentNicepay, Long>, PaymentPgRepository<PaymentNicepay> {

    default PgType pgType() {
        return PgType.NICEPAY;
    }

    @Override
    Optional<PaymentNicepay> findByOrderId(long orderId);

    @Override
    List<PaymentNicepay> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentPgRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.model.Payment;
import kr.co.yeoshin.common.payment.type.PgType;

public interface PaymentPgRepository<T extends Payment> {

    PgType pgType();

    Optional<T> findByOrderId(long orderId);

    List<T> findAllByOrderIdIn(Collection<Long> orderIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import kr.co.yeoshin.common.payment.model.Payment;
import kr.co.yeoshin.common.payment.type.PgType;
import org.springframework.stereotype.Repository;

@Repository
public class PaymentRepository {

    private final Map<PgType, PaymentPgRepository<? extends Payment>> paymentRepositories;

    public PaymentRepository(List<PaymentPgRepository<? extends Payment>> paymentPgRepositories) {
        this.paymentRepositories = paymentPgRepositories.stream()
                .collect(Collectors.toMap(PaymentPgRepository::pgType, Function.identity()));
    }

    public Optional<? extends Payment> findByPgTypeAndOrderId(PgType pgType, long orderId) {
        if (!paymentRepositories.containsKey(pgType)) {
            return Optional.empty();
        }

        return paymentRepositories.get(pgType).findByOrderId(orderId);
    }

    public List<Payment> findAllByOrderIds(Collection<Long> orderIds) {
        return paymentRepositories.values().stream()
                .flatMap(repo -> repo.findAllByOrderIdIn(orderIds).stream())
                .collect(Collectors.toList());
    }
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentSystemCashCheckoutRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.PaymentSystemCashCheckout;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentSystemCashCheckoutRepository extends JpaRepository<PaymentSystemCashCheckout, Long> ,
        CustomerPaymentSystemCashCheckoutRepository {


}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentSystemEasyCheckoutRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.PaymentSystemEasyCheckout;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentSystemEasyCheckoutRepository extends JpaRepository<PaymentSystemEasyCheckout, Long>,
        CustomerPaymentSystemEasyCheckoutRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/PaymentVirtualBankRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.PaymentVirtualBank;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaymentVirtualBankRepository extends JpaRepository<PaymentVirtualBank, Long> {

    Optional<PaymentVirtualBank> findByOrderAdPointProductId(long orderAdPointProductId);

    List<PaymentVirtualBank> findByOrderAdPointProductIdIn(Collection<Long> orderAdPointProductIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/RefundAccountRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.RefundAccount;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RefundAccountRepository extends JpaRepository<RefundAccount, Long>, CustomerRefundAccountRepository {

    Optional<RefundAccount> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashDailyReportRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.SystemCashDailyReport;
import kr.co.yeoshin.common.payment.type.SystemCashType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashDailyReportRepository extends JpaRepository<SystemCashDailyReport, Long> {

    List<SystemCashDailyReport> findAllByAt(LocalDate at);

    List<SystemCashDailyReport> findAllByAtAndCashTypeIn(LocalDate at, Collection<SystemCashType> types);

    Optional<SystemCashDailyReport> findTopByAtBeforeAndCashTypeOrderByIdDesc(LocalDate at, SystemCashType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashRefundAccountRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.SystemCashRefundAccount;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashRefundAccountRepository extends JpaRepository<SystemCashRefundAccount, Long> {

    List<SystemCashRefundAccount> findAllByMemberId(long memberId);

    List<SystemCashRefundAccount> findAllByMemberIdIn(Collection<Long> memberIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashRefundStatusRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.SystemCashRefundStatus;
import kr.co.yeoshin.common.payment.type.RefundStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashRefundStatusRepository extends JpaRepository<SystemCashRefundStatus, Long>,
        CustomSystemCashRefundStatusRepository {

    List<SystemCashRefundStatus> findBySystemCashIdIn(Collection<Long> systemCashIds);

    Optional<SystemCashRefundStatus> findBySystemCashId(long systemCashId);

    List<SystemCashRefundStatus> findByMemberIdAndStatusIn(long memberId, Collection<RefundStatus> status);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.SystemCash;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashRepository extends JpaRepository<SystemCash, Long>, CustomSystemCashRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashSummaryRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import kr.co.yeoshin.common.payment.entity.SystemCashSummary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashSummaryRepository extends JpaRepository<SystemCashSummary, Long>, CustomSystemCashSummaryRepository {

    List<SystemCashSummary> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashVoucherConfigRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.SystemCashVoucherConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashVoucherConfigRepository extends JpaRepository<SystemCashVoucherConfig, Long>,
        CustomSystemCashVoucherConfigRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashVoucherExtraBenefitRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.SystemCashVoucherExtraBenefit;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashVoucherExtraBenefitRepository extends JpaRepository<SystemCashVoucherExtraBenefit, Long> {

    List<SystemCashVoucherExtraBenefit> findAllBySystemCashVoucherConfigIdIn(Collection<Long> systemCashVoucherConfigIds);

    void deleteAllBySystemCashVoucherConfigId(long systemCashVoucherConfigId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashVoucherPartnershipRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.SystemCashVoucherPartnership;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashVoucherPartnershipRepository extends JpaRepository<SystemCashVoucherPartnership, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/SystemCashVoucherRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.SystemCashVoucher;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SystemCashVoucherRepository extends
        JpaRepository<SystemCashVoucher, Long>,
        CustomSystemCashVoucherRepository,
        CustomSystemCashVoucherQueryRepository {

    List<SystemCashVoucher> findAllByCodeIn(Collection<String> codes);

    void deleteAllBySystemCashVoucherConfigId(long systemCashVoucherConfigId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/TicketRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.payment.entity.Ticket;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface TicketRepository extends JpaRepository<Ticket, Long>, CustomerTicketRepository {

    List<Ticket> findAllByIdInAndHospitalId(Collection<Long> ticketIds, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/TicketRestorationInquiryRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.List;
import kr.co.yeoshin.common.payment.entity.TicketRestorationInquiry;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TicketRestorationInquiryRepository extends JpaRepository<TicketRestorationInquiry, Long>,
        CustomTicketRestorationInquiryRepository {

    List<TicketRestorationInquiry> findAllByReservationId(long reservationId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/TicketTrashRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import kr.co.yeoshin.common.payment.entity.TicketTrash;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TicketTrashRepository extends JpaRepository<TicketTrash, Long>, CustomTicketTrashRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/payment/repository/VerificationCheckoutSecretRepository.java
================================================
package kr.co.yeoshin.common.payment.repository;

import java.util.Optional;
import kr.co.yeoshin.common.payment.entity.VerificationCheckoutSecret;
import kr.co.yeoshin.common.payment.type.CheckoutType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationCheckoutSecretRepository extends JpaRepository<VerificationCheckoutSecret, Long> {

    Optional<VerificationCheckoutSecret> findByMemberIdAndCheckoutType(long memberId, CheckoutType checkoutType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/hospital/repository/CustomHospitalRolePermissionRepository.java
================================================
package kr.co.yeoshin.common.permission.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.permission.hospital.entity.HospitalRolePermission;

public interface CustomHospitalRolePermissionRepository {

    HospitalRolePermission findByAdminIdAndHospitalId(long adminId, long hospitalId);

    List<HospitalRolePermission> findAllByAdminIdOrderByHospitalNameAsc(long adminId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/hospital/repository/HospitalRolePermissionRepository.java
================================================
package kr.co.yeoshin.common.permission.hospital.repository;

import java.util.List;
import kr.co.yeoshin.common.permission.hospital.entity.HospitalRolePermission;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HospitalRolePermissionRepository extends JpaRepository<HospitalRolePermission, Long>,
        CustomHospitalRolePermissionRepository {

    List<HospitalRolePermission> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/resource/repository/CustomResourceRepository.java
================================================
package kr.co.yeoshin.common.permission.resource.repository;

import java.util.List;
import kr.co.yeoshin.common.permission.resource.model.ResourceRoleDto;

public interface CustomResourceRepository {

    List<ResourceRoleDto> findAllResourceRole();

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/resource/repository/ResourceAsRoleRepository.java
================================================
package kr.co.yeoshin.common.permission.resource.repository;

import kr.co.yeoshin.common.permission.resource.entity.ResourceAsRole;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ResourceAsRoleRepository extends JpaRepository<ResourceAsRole, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/resource/repository/ResourceRepository.java
================================================
package kr.co.yeoshin.common.permission.resource.repository;


import kr.co.yeoshin.common.permission.resource.entity.Resource;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ResourceRepository extends JpaRepository<Resource, Long>, CustomResourceRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/role/repository/CustomRoleRepository.java
================================================
package kr.co.yeoshin.common.permission.role.repository;

import java.util.List;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.permission.role.entity.Role;

public interface CustomRoleRepository {

    List<Role> findAllByRoleTypeWithSubRoles(Level roleType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/role/repository/RoleHierarchyRepository.java
================================================
package kr.co.yeoshin.common.permission.role.repository;

import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.permission.role.entity.RoleHierarchy;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface RoleHierarchyRepository extends JpaRepository<RoleHierarchy, Long> {

    RoleHierarchy findByRoleType(Level roleType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/permission/role/repository/RoleRepository.java
================================================
package kr.co.yeoshin.common.permission.role.repository;

import java.util.Optional;
import kr.co.yeoshin.common.administrator.type.Level;
import kr.co.yeoshin.common.permission.role.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {

    Optional<Role> findByRoleType(Level roleType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/AdPointProductRepository.java
================================================
package kr.co.yeoshin.common.point.repository;


import kr.co.yeoshin.common.point.entity.AdPointProduct;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdPointProductRepository extends JpaRepository<AdPointProduct, Long>, CustomAdPointProductRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/AdPointRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import kr.co.yeoshin.common.point.entity.AdPoint;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdPointRepository extends JpaRepository<AdPoint, Long>, CustomAdPointRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/AdPointSummaryRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import kr.co.yeoshin.common.point.entity.AdPointSummary;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface AdPointSummaryRepository extends JpaRepository<AdPointSummary, Long>,
        CustomAdPointSummaryRepository {

    @Modifying
    @Query(value =
            "INSERT INTO ad_point_summary(hospital_id, order_product_type, charge_type, accumulate_point, expire_at, created, updated) "
                    + "VALUES (:#{#summary.hospital.id}, :#{#summary.orderProductType.name()}, :#{#summary.chargeType.name()}, :#{#summary.accumulatePoint}, :#{#summary.expireAt}, NOW(), NOW()) "
                    + "ON DUPLICATE KEY UPDATE "
                    + "  accumulate_point = accumulate_point + :#{#summary.accumulatePoint}, "
                    + "  updated = NOW()",
            nativeQuery = true)
    int increaseAdPointSummary(@Param("summary") AdPointSummary summary);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomAdPointProductRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.util.Optional;
import kr.co.yeoshin.common.point.entity.AdPointProduct;
import kr.co.yeoshin.common.point.model.AdPointProductWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomAdPointProductRepository {

    Optional<AdPointProduct> fetchById(long id);

    Page<AdPointProduct> findAllByWhereCondition(AdPointProductWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomAdPointRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.point.entity.AdPoint;
import kr.co.yeoshin.common.point.model.AdPointWhereCondition;
import kr.co.yeoshin.common.point.repository.model.RemainAdPointDto;
import org.springframework.data.domain.Page;

public interface CustomAdPointRepository {

    Page<AdPoint> findAll(AdPointWhereCondition whereCondition);

    Optional<AdPoint> findByHospitalIdAndId(Long hospitalId, long id);

    List<RemainAdPointDto> findAllRemainAdPointByAdPointIds(Collection<Long> adPointIds, OrderProductType orderProductType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomAdPointSummaryRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.payment.type.OrderProductType;
import kr.co.yeoshin.common.point.entity.AdPointSummary;
import kr.co.yeoshin.common.point.model.PointSummaryWhereCondition;
import kr.co.yeoshin.common.point.repository.model.HospitalAdPointDto;

public interface CustomAdPointSummaryRepository {

    int sumPointByHospitalId(long hospitalId, OrderProductType orderProductType);

    int sumPointByWhereCondition(PointSummaryWhereCondition whereCondition);

    List<HospitalAdPointDto> findAllHospitalAdPointsByHospitalAndOrderProductType(Collection<Long> hospitalIds,
            OrderProductType orderProductType);

    List<AdPointSummary> findAllByWhereCondition(PointSummaryWhereCondition whereCondition);

    Optional<AdPointSummary> findByWhereCondition(PointSummaryWhereCondition whereCondition);

    void deleteByWhereCondition(PointSummaryWhereCondition whereCondition);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomMemberPointCompositionRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import kr.co.yeoshin.common.point.entity.MemberPointComposition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberPointCompositionRepository {

    Page<MemberPointComposition> fetchAll(long memberId, Collection<MemberPointType> memberPointTypes,
            Collection<PublishType> publishTypes, Collection<Action> actions,
            LocalDateTime from, LocalDateTime to, Pageable pageable);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomMemberPointRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.point.entity.MemberPoint;
import kr.co.yeoshin.common.point.model.MemberPointWhereCondition;
import kr.co.yeoshin.common.point.type.Action;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberPointRepository {

    Page<MemberPoint> fetchAll(MemberPointWhereCondition whereCondition);

    Page<MemberPoint> fetchAllByMemberIdAndTypeIn(
            long memberId, Collection<MemberPointType> types, Pageable pageable);

    Page<MemberPoint> fetchAllByMemberIdAndTypeIn(
            long memberId, Collection<MemberPointType> types, LocalDateTime from, LocalDateTime to, Pageable pageable);

    List<MemberPoint> findAllByRef(
            long memberId, DomainType refType, long refId);

    List<MemberPoint> findAllByType(
            long memberId, MemberPointType type, PublishType publishType, Collection<Action> actions);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomMemberPointSummaryRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.point.entity.MemberPointSummary;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberPointSummaryRepository {

    int sumPointByMemberIdAndExpireAtAfter(long memberId, LocalDateTime now);

    List<MemberPointSummary> findAllByMemberIdAndExpireAtAfter(long memberId, LocalDateTime now);

    Page<MemberPointSummary> findAllByMemberIdAndExpireAtAfter(long memberId, LocalDateTime now, Pageable pageable);

    Optional<MemberPointSummary> findByMemberIdAndExpireAt(long memberId, LocalDateTime expireAt);

    void deleteByMemberIdAndExpireAtBefore(long memberId, LocalDateTime now);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/CustomOrderAdPointProductRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.util.Optional;
import kr.co.yeoshin.common.point.entity.OrderAdPointProduct;
import kr.co.yeoshin.common.point.model.OrderAdPointProductWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomOrderAdPointProductRepository {

    Page<OrderAdPointProduct> fetchAll(OrderAdPointProductWhereCondition whereCondition);

    Optional<OrderAdPointProduct> fetchByOrderId(long orderId);

    Optional<OrderAdPointProduct> fetchById(long id);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/MemberPointCompositionRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.point.entity.MemberPointComposition;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberPointCompositionRepository extends JpaRepository<MemberPointComposition, Long>,
        CustomMemberPointCompositionRepository {

    List<MemberPointComposition> findAllByMemberPointIdIn(Collection<Long> memberPointIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/MemberPointRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.point.entity.MemberPoint;
import kr.co.yeoshin.common.point.type.MemberPointType;
import kr.co.yeoshin.common.point.type.PublishType;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberPointRepository extends JpaRepository<MemberPoint, Long>, CustomMemberPointRepository {

    List<MemberPoint> findByRefTypeAndRefIdInAndMemberIdIn(DomainType type, Collection<Long> refIds, Collection<Long> memberIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/MemberPointSpecRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import kr.co.yeoshin.common.point.entity.MemberPointSpec;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberPointSpecRepository extends JpaRepository<MemberPointSpec, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/MemberPointSummaryRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.point.entity.MemberPointSummary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberPointSummaryRepository extends JpaRepository<MemberPointSummary, Long>,
        CustomMemberPointSummaryRepository {

    List<MemberPointSummary> findAllByMemberId(long memberId);

    List<MemberPointSummary> findAllByMemberIdAndExpireAtBetween(long memberId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/point/repository/OrderAdPointProductRepository.java
================================================
package kr.co.yeoshin.common.point.repository;

import kr.co.yeoshin.common.point.entity.OrderAdPointProduct;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderAdPointProductRepository extends JpaRepository<OrderAdPointProduct, Long>,
        CustomOrderAdPointProductRepository {

    void deleteByOrderId(Long orderId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/popup/repository/CustomPopupRepository.java
================================================
package kr.co.yeoshin.common.popup.repository;

import java.util.List;
import kr.co.yeoshin.common.popup.entity.Popup;
import kr.co.yeoshin.common.popup.model.PopupWhereCondition;
import kr.co.yeoshin.common.popup.type.PopupExposureTarget;
import kr.co.yeoshin.common.popup.type.PopupPosition;
import kr.co.yeoshin.common.popup.type.PopupLocation;
import org.springframework.data.domain.Page;

public interface CustomPopupRepository {

    Page<Popup> findAllByType(PopupLocation location, PopupWhereCondition whereCondition);

    List<Popup> findExposurePopups(PopupLocation location, PopupPosition position, PopupExposureTarget target);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/popup/repository/PopupRepository.java
================================================
package kr.co.yeoshin.common.popup.repository;

import kr.co.yeoshin.common.popup.entity.Popup;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PopupRepository extends JpaRepository<Popup, Long>, CustomPopupRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/model/AttributeTypeDescriptionPayload.java
================================================
package kr.co.yeoshin.common.product.model;

public interface AttributeTypeDescriptionPayload {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/model/InjectableMedicinePayload.java
================================================
package kr.co.yeoshin.common.product.model;

import java.util.List;
import kr.co.yeoshin.common.type.MultiLanguageCode;
import lombok.*;
import org.javers.core.metamodel.annotation.Value;

@Value
@Getter
@Builder
@EqualsAndHashCode
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class InjectableMedicinePayload implements AttributeTypeDescriptionPayload {

    private long treatmentId;

    private String treatmentName;

    private Volume volume;

    private CountryOfOrigin countryOfOrigin;

    private List<String> productNames;

    private List<String> bodyParts;

    @Value
    @Getter
    @Builder
    @EqualsAndHashCode
    @NoArgsConstructor(access = AccessLevel.PRIVATE)
    @AllArgsConstructor(access = AccessLevel.PRIVATE)
    public static class Volume {
        private int amount;

        private Unit unit;

        @Getter
        @RequiredArgsConstructor
        public enum Unit implements MultiLanguageCode {
            PART("부위", "area", "部位", "部位"),
            FULL_FACE("얼굴전체", "Full Face", "全脸", "顔全体"),
            UNLIMITED("무제한", "Unlimited", "无限", "無制限"),
            CC("cc", "cc", "cc", "cc"),
            UNIT("units", "units", "units", "units");

            private final String ko;

            private final String en;

            private final String zh;

            private final String ja;

            public String getDescription() {
                return this.ko;
            }
        }
    }


    @Getter
    @RequiredArgsConstructor
    public enum CountryOfOrigin implements MultiLanguageCode {
        KOREA("국산", "Korean", "韩国产", "韓国産"),
        FOREIGN("수입", "Imported", "进口", "輸入");

        private final String ko;

        private final String en;

        private final String zh;

        private final String ja;

        public String getDescription() {
            return this.ko;
        }
    }

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventConsultationAsHospitalDoctorRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationAsHospitalDoctor;

public interface CustomSalesEventConsultationAsHospitalDoctorRepository {

    List<SalesEventConsultationAsHospitalDoctor> fetchAllBySalesEventConsultationId(long salesEventConsultationId);

    List<SalesEventConsultationAsHospitalDoctor> fetchAllBySalesEventConsultationIds(Collection<Long> salesEventConsultationIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventConsultationAsSalesProductVersionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationAsHospitalDoctor;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationAsSalesProductVersion;

public interface CustomSalesEventConsultationAsSalesProductVersionRepository {

    List<SalesEventConsultationAsSalesProductVersion> fetchAllBySalesEventConsultationId(long salesEventConsultationId);

    List<SalesEventConsultationAsSalesProductVersion> fetchAllBySalesEventConsultationIds(
            Collection<Long> salesEventConsultationIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventConsultationPaidStatusLogRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationPaidStatusLog;

public interface CustomSalesEventConsultationPaidStatusLogRepository {

    Optional<SalesEventConsultationPaidStatusLog> findLatest(long salesEventConsultationId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventConsultationRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventConsultation;
import kr.co.yeoshin.common.product.model.SalesEventConsultationWhereCondition;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomSalesEventConsultationRepository {

    Page<SalesEventConsultation> fetchAll(SalesEventConsultationWhereCondition condition);

    Page<SalesEventConsultation> findAll(Pageable pageable, long memberId);

    Page<SalesEventConsultation> findAll(Pageable pageable, long memberId, long hospitalId);

    Optional<SalesEventConsultation> fetchById(long id);

    List<SalesEventConsultation> findAll(long memberId, long hospitalId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventCpmRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventCpm;

public interface CustomSalesEventCpmRepository {

    Optional<Double> avgUnitPriceByHospitalId(long hospitalId);

    Optional<SalesEventCpm> fetchBySalesEventId(long salesEventId);

    List<SalesEventCpm> fetchAllBySalesEventIdIn(Collection<Long> salesEventIds);

    List<SalesEventCpm> findAllBySalesEventIdIn(Collection<Long> salesEventIds);

    List<SalesEventCpm> fetchAllByHospitalIdAndSalesEventIdIn(long hospitalId, Collection<Long> saleEventIds);

    long countProgressCpmAdSalesEventByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventImageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventImage;

public interface CustomSalesEventImageRepository {

    List<SalesEventImage> findValidImagesBySalesEventIdIn(Collection<Long> salesEventIds);

    List<SalesEventImage> fetchAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import kr.co.yeoshin.common.product.model.SalesEventWhereCondition;
import kr.co.yeoshin.common.product.repository.model.SalesEventCountGroupByHospital;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomSalesEventRepository {

    Optional<SalesEvent> fetchSalesEventById(long id);

    List<SalesEvent> fetchSalesEventsByIds(Collection<Long> ids);

    List<SalesEvent> findSalesEventsByHospitalId(long hospitalId);

    Page<SalesEvent> fetchAllByWhereCondition(SalesEventWhereCondition request);

    void increaseSalesCount(long id, long increaseValue);

    List<SalesEventCountGroupByHospital> countSalesEventGroupByHospitalIds(Collection<Long> hospitalIds, Collection<YN> views);

    List<SalesEvent> findVisibleSalesEventHasSalesEventUsageByHospitalId(long hospitalId);

    Page<SalesEvent> findAllVisibleSalesEventHasSalesEventUsage(long hospitalId, long treatmentId, Pageable pageable);
}


================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventRequestRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventCommission;
import kr.co.yeoshin.common.product.model.SalesEventCommissionWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSalesEventRequestRepository {

    Page<SalesEventCommission> fetchAll(SalesEventCommissionWhereCondition condition);

    Optional<SalesEventCommission> fetchById(long id);

    Optional<SalesEventCommission> fetchLatestInProgressBySalesEventId(long salesEventId);

    Optional<SalesEventCommission> fetchLatestImmediateApplyStatusBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventScrapRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventScrap;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomSalesEventScrapRepository extends ScrapCountRepository {

    boolean existScrapSalesEvent(long memberId, long salesEventId);

    Page<SalesEventScrap> fetchAllByMemberId(long memberId, Pageable pageable);

    Page<SalesEventScrap> findAllByMemberId(long memberId, Pageable pageable);

    List<SalesEventScrap> findAllByMemberIdAndSalesEventIds(long memberId, Collection<Long> salesEventIds);

    Optional<SalesEventScrap> findByMemberIdAndSalesEventId(long memberId, long salesEventId);

    long countSalesEventScrapByHospitalIdAndCreated(long hospitalId, LocalDateTime fromCreated, LocalDateTime toCreated);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventStatRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventStat;

public interface CustomSalesEventStatRepository {

    Optional<SalesEventStat> findBySalesEventId(long salesEventId);

    List<SalesEventStat> findBySalesEventIdIn(Collection<Long> salesEventIds);

    List<SalesEventStat> findAllBySalesEventIdsAndOrderByOrderCount1WeekDesc(Collection<Long> salesEventIds, long limit);

    List<SalesEventStat> findAllByHospitalIdsAndOrderByOrderCount1WeekDesc(Collection<Long> hospitalIds, long limit);

    List<SalesEventStat> findAllBySalesEventIdsAndOrderByScrapCount1WeekDesc(Collection<Long> salesEventIds, long limit);

    void increaseScrapCount(long id);

    void decreaseScrapCount(long id);

    List<SalesEventStat> findAllByHospitalIdsAndUsageCount(Collection<Long> hospitalIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventUsageApprovalRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventUsageApproval;
import kr.co.yeoshin.common.product.model.SalesEventUsageApprovalWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSalesEventUsageApprovalRepository {

    List<SalesEventUsageApproval> fetchAllBySalesEventUsageId(long salesEventUsageId);

    Page<SalesEventUsageApproval> findAllByWhereCondition(SalesEventUsageApprovalWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventUsageAsTreatmentMethodTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventUsageAsTreatmentMethodTag;

public interface CustomSalesEventUsageAsTreatmentMethodTagRepository {

    List<SalesEventUsageAsTreatmentMethodTag> fetchAllBySalesEventUsageIds(Collection<Long> salesEventUsageIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesEventUsageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventUsage;
import kr.co.yeoshin.common.product.model.SalesEventUsageWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSalesEventUsageRepository {

    Page<SalesEventUsage> findAll(SalesEventUsageWhereCondition whereCondition);

    List<SalesEventUsage> findAllByHospitalIdAndTreatmentId(long hospitalId, long treatmentId);

    Optional<SalesEventUsage> fetchSalesEventUsageById(long id);

    Optional<SalesEventUsage> fetchById(long id);

    List<Long> findAllVisibleSalesEventUsageTreatmentIdsByHospitalId(long hospitalId);

    List<SalesEventUsage> findAllByHospitalIdAndTitleOrCode(long hospitalId, String query);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesProductAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesProductAsTreatment;

public interface CustomSalesProductAsTreatmentRepository {

    List<SalesProductAsTreatment> fetchAllBySalesProductId(long salesProductId);

    List<SalesProductAsTreatment> fetchAllBySalesProductIds(Collection<Long> salesProductIds);

    List<SalesProductAsTreatment> findAllBySalesProductIds(Collection<Long> salesProductIds);

    List<SalesProductAsTreatment> fetchAllBySalesEventId(long salesEventId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesProductRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import kr.co.yeoshin.common.product.type.SalesProductType;
import kr.co.yeoshin.common.type.YN;

public interface CustomSalesProductRepository {

    List<SalesProduct> fetchAllByIds(Collection<Long> ids);

    List<SalesProduct> findAllByIds(Collection<Long> ids);

    List<SalesProduct> fetchAllBySalesEventId(long salesEventId);

    List<SalesProduct> fetchAllBySalesEventId(long salesEventId, Collection<YN> viewYns, Collection<YN> trashYns);

    List<SalesProduct> fetchAllBySalesEventIdAndProductTypes(long salesEventId, Collection<SalesProductType> salesProductTypes);

    List<SalesProduct> fetchAllBySalesEventIdAndSalesProductIds(long salesEventId, Collection<Long> salesProductId);

    List<SalesProduct> fetchAllBySalesEventIdAndSalesProductIds(
            long salesEventId, Collection<Long> salesProductId, Collection<YN> viewYns, Collection<YN> trashYns);

    List<SalesProduct> fetchAllBySalesEventIds(Collection<Long> salesEventIds);

    List<SalesProduct> fetchAllBySalesEventIdsAndProductTypes(
            Collection<Long> salesEventIds, Collection<SalesProductType> salesProductTypes);

    List<SalesProduct> fetchAllBySalesEventIdsAndSalesProductIds(
            Collection<Long> salesEventIds, Collection<Long> salesProductIds, Collection<YN> viewYns, Collection<YN> trashYns);

    List<SalesProduct> findAllByTreatmentIds(Collection<Long> treatmentIds);

    List<SalesProduct> fetchAllBySalesEventIdsAndProductTypes(Collection<Long> salesEventIds,
            Collection<SalesProductType> salesProductTypes, Collection<YN> viewYns, Collection<YN> trashYns);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomSalesProductVersionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;

public interface CustomSalesProductVersionRepository {

    Optional<SalesProductVersion> fetchById(long salesProductVersionId);

    Optional<SalesProductVersion> fetchLatestBySalesProductId(long salesProductId);

    List<SalesProductVersion> fetchAllByIds(Collection<Long> salesProductVersionIds);

    List<SalesProductVersion> findAllLatestBySalesProductIds(Collection<Long> salesProductIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomTreatmentLibraryRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.TreatmentLibrary;
import kr.co.yeoshin.common.product.model.TreatmentLibraryWhereCondition;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;

public interface CustomTreatmentLibraryRepository {

    Optional<TreatmentLibrary> fetchById(long id);

    Page<TreatmentLibrary> fetchAllBy(TreatmentLibraryWhereCondition whereCondition);

    List<TreatmentLibrary> fetchAllBy(Collection<Long> treatmentIds, Collection<YN> viewYns);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomTreatmentPrincipleDetailRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleDetail;

public interface CustomTreatmentPrincipleDetailRepository {

    List<TreatmentPrincipleDetail> fetchAllByIds(Collection<Long> ids);

    List<TreatmentPrincipleDetail> fetchAllByTreatmentPrincipleId(long treatmentPrincipleId);

    List<TreatmentPrincipleDetail> fetchAllByTreatmentPrincipleIds(Collection<Long> treatmentPrincipleIds);

    List<TreatmentPrincipleDetail> findAllByTreatmentPrincipleIds(Collection<Long> treatmentPrincipleIds);

    List<TreatmentPrincipleDetail> fetchAllByTreatmentPrincipleNameKoIn(Collection<String> treatmentPrincipleNames);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomTreatmentPrincipleRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentPrinciple;
import kr.co.yeoshin.common.product.model.TreatmentPrincipleWhereCondition;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;

public interface CustomTreatmentPrincipleRepository {

    Page<TreatmentPrinciple> fetchAllBy(TreatmentPrincipleWhereCondition whereCondition);

    List<TreatmentPrinciple> findAllBy(Collection<Long> ids, YN viewYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomTreatmentPrincipleUsageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentPrinciple;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleDetail;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleUsage;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleUsageType;

public interface CustomTreatmentPrincipleUsageRepository {

    List<Long> findAllPrincipleIdByRefTypeAndRefId(TreatmentPrincipleUsageType refType, long refId);

    List<TreatmentPrinciple> findAllPrincipleByRefTypeAndRefId(TreatmentPrincipleUsageType refType, long refId);

    List<TreatmentPrincipleUsage> fetchAllByRefTypeAndRefId(TreatmentPrincipleUsageType refType, long refId);

    List<TreatmentPrincipleUsage> findAllByRefTypeAndRefIds(TreatmentPrincipleUsageType refType, Collection<Long> refIds);

    List<TreatmentPrincipleDetail> fetchAllDetailByRefTypeAndRefId(TreatmentPrincipleUsageType refType, long refId);

    boolean existsByTreatmentPrincipleId(long treatmentPrincipleId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/CustomTreatmentRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.Treatment;
import kr.co.yeoshin.common.product.model.TreatmentWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomTreatmentRepository {

    Page<Treatment> findAllByWhereCondition(TreatmentWhereCondition whereCondition);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventBulkCommissionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventBulkCommission;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventBulkCommissionRepository extends JpaRepository<SalesEventBulkCommission, Long> {

    Optional<SalesEventBulkCommission> findBySalesEventCommissionId(long salesEventCommissionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventCommissionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.time.LocalDateTime;
import kr.co.yeoshin.common.product.entity.SalesEventCommission;
import kr.co.yeoshin.common.product.type.SalesEventCommissionStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventCommissionRepository extends JpaRepository<SalesEventCommission, Long>,
        CustomSalesEventRequestRepository {

    long countByHospitalIdAndStatus(long hospitalId, SalesEventCommissionStatus status);

    long countByHospitalIdAndStatusAndStatusUpdatedAfter(long hospitalId, SalesEventCommissionStatus status,
            LocalDateTime statusUpdated);

    long countByHospitalIdAndCommentRegisteredAfter(long hospitalId, LocalDateTime commentRegistered);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventCommissionTempSaveRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventCommissionTempSave;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventCommissionTempSaveRepository extends JpaRepository<SalesEventCommissionTempSave, Long> {
    Optional<SalesEventCommissionTempSave> findByAdminIdAndHospitalId(long adminId, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationAsHospitalDoctorRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationAsHospitalDoctor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationAsHospitalDoctorRepository
        extends JpaRepository<SalesEventConsultationAsHospitalDoctor, Long>,
        CustomSalesEventConsultationAsHospitalDoctorRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationAsSalesProductVersionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationAsSalesProductVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationAsSalesProductVersionRepository
        extends JpaRepository<SalesEventConsultationAsSalesProductVersion, Long>,
        CustomSalesEventConsultationAsSalesProductVersionRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationConfigRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationConfigRepository
        extends JpaRepository<SalesEventConsultationConfig, Long> {

    Optional<SalesEventConsultationConfig> findBySalesEventId(long salesEventId);

    List<SalesEventConsultationConfig> findAllBySalesEventIdIn(Collection<Long> salesEventIds);

    void deleteBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationPaidStatusLogRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationPaidStatusLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationPaidStatusLogRepository
        extends JpaRepository<SalesEventConsultationPaidStatusLog, Long>, CustomSalesEventConsultationPaidStatusLogRepository {

    List<SalesEventConsultationPaidStatusLog> findAllBySalesEventConsultationIdIn(Collection<Long> salesEventConsultationIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationPriceTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationPriceTag;
import kr.co.yeoshin.common.type.ProgressStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationPriceTagRepository
        extends JpaRepository<SalesEventConsultationPriceTag, Long> {

    List<SalesEventConsultationPriceTag> findAllByStatus(ProgressStatus status);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.SalesEventConsultation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationRepository
        extends JpaRepository<SalesEventConsultation, Long>, CustomSalesEventConsultationRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventConsultationStatusLogRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventConsultationStatusLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventConsultationStatusLogRepository
        extends JpaRepository<SalesEventConsultationStatusLog, Long> {

    List<SalesEventConsultationStatusLog> findAllBySalesEventConsultationId(long salesEventConsultationId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventCpmRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.SalesEventCpm;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface SalesEventCpmRepository extends JpaRepository<SalesEventCpm, Long>,
        CustomSalesEventCpmRepository {

    void deleteBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventDetailCommissionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventDetailCommission;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventDetailCommissionRepository extends JpaRepository<SalesEventDetailCommission, Long> {

    Optional<SalesEventDetailCommission> findBySalesEventCommissionId(long salesEventCommissionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventHospitalCommissionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventHospitalCommission;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventHospitalCommissionRepository extends JpaRepository<SalesEventHospitalCommission, Long> {

    Optional<SalesEventHospitalCommission> findBySalesEventDetailCommissionId(long salesEventDetailCommissionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventImageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.SalesEventImage;
import kr.co.yeoshin.common.product.type.SalesEventImageType;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Collection;
import java.util.List;

public interface SalesEventImageRepository extends JpaRepository<SalesEventImage, Long>, CustomSalesEventImageRepository {

    List<SalesEventImage> findAllBySalesEventId(long salesEventId);

    List<SalesEventImage> findAllBySalesEventIdIn(Collection<Long> salesEventIds);

    List<SalesEventImage> findAllBySalesEventIdAndTypeIn(long salesEventId, Collection<SalesEventImageType> types);

    List<SalesEventImage> findAllByImageIn(Collection<String> imageNames);

    void deleteAllBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEvent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventRepository extends JpaRepository<SalesEvent, Long>,
        CustomSalesEventRepository {

    List<SalesEvent> findAllByIdIn(Collection<Long> salesEventIds);

    Optional<SalesEvent> findOneByEventCode(String eventCode);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventScrapRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventScrap;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventScrapRepository
        extends JpaRepository<SalesEventScrap, Long>, CustomSalesEventScrapRepository {

    List<SalesEventScrap> findAllByMemberId(long memberId);

    void deleteByMemberIdAndSalesEventId(long memberId, long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventStatRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.SalesEventStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventStatRepository extends JpaRepository<SalesEventStat, Long>, CustomSalesEventStatRepository {

    void deleteBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventSystemCommissionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventSystemCommission;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventSystemCommissionRepository extends JpaRepository<SalesEventSystemCommission, Long> {

    Optional<SalesEventSystemCommission> findBySalesEventDetailCommissionId(long salesEventDetailCommissionId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventTreatmentLibraryRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.SalesEventTreatmentLibrary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventTreatmentLibraryRepository extends JpaRepository<SalesEventTreatmentLibrary, Long> {

    Optional<SalesEventTreatmentLibrary> findBySalesEventId(long salesEventId);

    List<SalesEventTreatmentLibrary> findAllBySalesEventIdIn(Collection<Long> salesEventIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventUsageApprovalRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventUsageApproval;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventUsageApprovalRepository extends JpaRepository<SalesEventUsageApproval, Long>,
        CustomSalesEventUsageApprovalRepository {

    List<SalesEventUsageApproval> findAllBySalesEventUsageIdIn(Collection<Long> salesEventUsageIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventUsageAsTreatmentMethodTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventUsageAsTreatmentMethodTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventUsageAsTreatmentMethodTagRepository extends JpaRepository<SalesEventUsageAsTreatmentMethodTag, Long>,
        CustomSalesEventUsageAsTreatmentMethodTagRepository {

    List<SalesEventUsageAsTreatmentMethodTag> findAllBySalesEventUsageIdIn(Collection<Long> salesEventUsageIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventUsageImageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventUsageImage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventUsageImageRepository extends JpaRepository<SalesEventUsageImage, Long> {

    List<SalesEventUsageImage> findAllBySalesEventUsageId(long salesEventUsageId);

    List<SalesEventUsageImage> findAllBySalesEventUsageIdIn(Collection<Long> salesEventUsageIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesEventUsageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesEventUsage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventUsageRepository extends JpaRepository<SalesEventUsage, Long>, CustomSalesEventUsageRepository {

    List<SalesEventUsage> findAllBySalesEventId(long salesEventId);

    List<SalesEventUsage> findAllByIdIn(Collection<Long> ids);

    List<SalesEventUsage> findAllBySalesEventIdIn(Collection<Long> salesEventIds);

    List<SalesEventUsage> findAllByHospitalId(long hospitalId);

    long countSalesEventUsageBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesProductAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import kr.co.yeoshin.common.product.entity.SalesProductAsTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesProductAsTreatmentRepository
        extends JpaRepository<SalesProductAsTreatment, Long>, CustomSalesProductAsTreatmentRepository {

    void deleteAllBySalesProductIdIn(Collection<Long> salesProductIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesProductRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesProduct;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesProductRepository extends JpaRepository<SalesProduct, Long>, CustomSalesProductRepository {

    List<SalesProduct> findAllBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesProductTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.SalesProductTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesProductTagRepository extends JpaRepository<SalesProductTag, Long> {
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SalesProductVersionRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.SalesProductVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesProductVersionRepository extends JpaRepository<SalesProductVersion, Long>,
        CustomSalesProductVersionRepository {

    List<SalesProductVersion> findAllBySalesProductIdIn(Collection<Long> salesProductIds);

    void deleteAllBySalesProductIdIn(Collection<Long> salesProductIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/SolutionTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.SolutionTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SolutionTagRepository extends JpaRepository<SolutionTag, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentAsSolutionTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentAsSolutionTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentAsSolutionTagRepository extends JpaRepository<TreatmentAsSolutionTag, Long> {

    List<TreatmentAsSolutionTag> findAllByTreatmentId(long treatmentId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentAsTreatmentMethodTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentAsTreatmentMethodTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentAsTreatmentMethodTagRepository extends JpaRepository<TreatmentAsTreatmentMethodTag, Long> {

    List<TreatmentAsTreatmentMethodTag> findAllByTreatmentId(long treatmentId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentLibraryFaqRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.TreatmentLibraryFaq;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentLibraryFaqRepository extends JpaRepository<TreatmentLibraryFaq, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentLibraryRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentLibrary;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentLibraryRepository extends JpaRepository<TreatmentLibrary, Long>, CustomTreatmentLibraryRepository {

    List<TreatmentLibrary> findAllByTreatmentId(long treatmentId);

    List<TreatmentLibrary> findAllByTreatmentIdAndViewYnIn(long treatmentId, Collection<YN> viewYns);

    List<TreatmentLibrary> findAllByTreatmentIdInAndViewYnIn(Collection<Long> treatmentIds, Collection<YN> viewYns);

    List<TreatmentLibrary> findAllByViewYn(YN viewYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentMethodTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentMethodTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentMethodTagRepository extends JpaRepository<TreatmentMethodTag, Long> {

    List<TreatmentMethodTag> findAllByIdIn(Collection<Long> ids);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentPrincipleDetailRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.TreatmentPrincipleDetail;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentPrincipleDetailRepository extends JpaRepository<TreatmentPrincipleDetail, Long>, CustomTreatmentPrincipleDetailRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentPrincipleRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentPrinciple;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentPrincipleRepository extends JpaRepository<TreatmentPrinciple, Long>, CustomTreatmentPrincipleRepository {

    List<TreatmentPrinciple> findAllByViewYn(YN viewYn);

    List<TreatmentPrinciple> findAllByNameKoIn(Collection<String> names);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentPrincipleUsageRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.List;
import kr.co.yeoshin.common.product.entity.TreatmentPrincipleUsage;
import kr.co.yeoshin.common.product.type.TreatmentPrincipleUsageType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentPrincipleUsageRepository extends JpaRepository<TreatmentPrincipleUsage, Long>, CustomTreatmentPrincipleUsageRepository {

    List<TreatmentPrincipleUsage> findAllByRefTypeAndRefIdOrderByIdAsc(TreatmentPrincipleUsageType refType, long refId);

    long deleteAllByRefTypeAndRefId(TreatmentPrincipleUsageType refType, long refId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.product.entity.Treatment;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentRepository extends JpaRepository<Treatment, Long>, CustomTreatmentRepository {

    List<Treatment> findAllByIdIn(Collection<Long> treatmentIds);

    List<Treatment> findAllByViewYn(YN viewYn);

    List<Treatment> findAllByNameKoIn(Collection<String> names);
}


================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TreatmentStatRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.product.entity.TreatmentStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentStatRepository extends JpaRepository<TreatmentStat, Long> {

    Optional<TreatmentStat> findByTreatmentId(long treatmentId);

    List<TreatmentStat> findAllByTreatmentIdIn(Collection<Long> treatmentIds);
}


================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TroubleCategoryAsSolutionTagRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.TroubleCategoryAsSolutionTag;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TroubleCategoryAsSolutionTagRepository extends JpaRepository<TroubleCategoryAsSolutionTag, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/product/repository/TroubleCategoryRepository.java
================================================
package kr.co.yeoshin.common.product.repository;

import kr.co.yeoshin.common.product.entity.TroubleCategory;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TroubleCategoryRepository extends JpaRepository<TroubleCategory, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/CustomQuestAttendanceRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.time.LocalDate;
import java.util.List;
import kr.co.yeoshin.common.quest.entity.QuestAttendance;

public interface CustomQuestAttendanceRepository {

    List<QuestAttendance> findAllByMemberId(long memberId, LocalDate from, LocalDate to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/CustomQuestKingOfInvitationRankRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestKingOfInvitationRank;

public interface CustomQuestKingOfInvitationRankRepository {

    List<QuestKingOfInvitationRank> findAllByRankLessThanEqual(int rank, int limit, String partitionName);

    Optional<QuestKingOfInvitationRank> findByMemberId(long memberId, String partitionName);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/CustomQuestKingOfInvitationRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestKingOfInvitation;

public interface CustomQuestKingOfInvitationRepository {

    Optional<QuestKingOfInvitation> findByMemberId(long memberId, String partitionName);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/CustomQuestTreatmentReviewLikeRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

public interface CustomQuestTreatmentReviewLikeRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestAttendanceRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.time.LocalDate;
import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestAttendance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestAttendanceRepository extends JpaRepository<QuestAttendance, Long>, CustomQuestAttendanceRepository {

    Optional<QuestAttendance> findByMemberIdAndAt(long memberId, LocalDate at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestBlacklistRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import kr.co.yeoshin.common.quest.entity.QuestBlacklist;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestBlacklistRepository extends JpaRepository<QuestBlacklist, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestFaceAnalysisRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestFaceAnalysis;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestFaceAnalysisRepository extends JpaRepository<QuestFaceAnalysis, Long> {

    Optional<QuestFaceAnalysis> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestHospitalOnboardRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestHospitalOnboard;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestHospitalOnboardRepository extends JpaRepository<QuestHospitalOnboard, Long> {

    Optional<QuestHospitalOnboard> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestInterestingRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestInteresting;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestInterestingRepository extends JpaRepository<QuestInteresting, Long> {

    Optional<QuestInteresting> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestKingOfInvitationRankRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import kr.co.yeoshin.common.quest.entity.QuestKingOfInvitationRank;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestKingOfInvitationRankRepository extends JpaRepository<QuestKingOfInvitationRank, Long>,
        CustomQuestKingOfInvitationRankRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestKingOfInvitationRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import kr.co.yeoshin.common.quest.entity.QuestKingOfInvitation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestKingOfInvitationRepository extends JpaRepository<QuestKingOfInvitation, Long>,
        CustomQuestKingOfInvitationRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestNotificationMarketingAgreeRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestNotificationMarketingAgree;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestNotificationMarketingAgreeRepository
        extends JpaRepository<QuestNotificationMarketingAgree, Long> {

    Optional<QuestNotificationMarketingAgree> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestNotificationMarketingDisturbTimeAgreeRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestNotificationMarketingDisturbTimeAgree;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestNotificationMarketingDisturbTimeAgreeRepository
        extends JpaRepository<QuestNotificationMarketingDisturbTimeAgree, Long> {

    Optional<QuestNotificationMarketingDisturbTimeAgree> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestPaymentSystemEasyCardRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestPaymentSystemEasyCard;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestPaymentSystemEasyCardRepository
        extends JpaRepository<QuestPaymentSystemEasyCard, Long> {

    Optional<QuestPaymentSystemEasyCard> findByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestSalesEventQuestionRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.time.LocalDate;
import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestSalesEventQuestion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestSalesEventQuestionRepository
        extends JpaRepository<QuestSalesEventQuestion, Long> {

    Optional<QuestSalesEventQuestion> findByMemberIdAndAt(long memberId, LocalDate at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestSummaryRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.List;
import kr.co.yeoshin.common.quest.entity.QuestSummary;
import kr.co.yeoshin.common.type.DomainType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface QuestSummaryRepository extends JpaRepository<QuestSummary, Long> {

    List<QuestSummary> findAllByMemberId(long memberId);

    @Modifying
    @Query(value =
            "INSERT INTO quest_summary(member_id, quest, complete_count, created, updated)"
                    + " VALUES(:memberId, :#{#quest.name()}, 1, NOW(), NOW())"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     complete_count = complete_count + 1,"
                    + "     updated = NOW()",
            nativeQuery = true)
    int increaseCompleteCount(@Param("memberId") long memberId, @Param("quest") DomainType quest);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestTreatmentReviewLikeRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestTreatmentReviewLike;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestTreatmentReviewLikeRepository
        extends JpaRepository<QuestTreatmentReviewLike, Long>, CustomQuestTreatmentReviewLikeRepository {

    Optional<QuestTreatmentReviewLike> findByMemberIdAndTreatmentReviewId(long memberId, long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/quest/repository/QuestTvReplyRepository.java
================================================
package kr.co.yeoshin.common.quest.repository;

import java.time.LocalDate;
import java.util.Optional;
import kr.co.yeoshin.common.quest.entity.QuestTvReply;
import org.springframework.data.jpa.repository.JpaRepository;

public interface QuestTvReplyRepository extends JpaRepository<QuestTvReply, Long> {

    Optional<QuestTvReply> findByMemberId(long memberId);

    Optional<QuestTvReply> findByMemberIdAndAt(long memberId, LocalDate at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/ratelimit/repository/CustomDomainActionAttemptRepository.java
================================================
package kr.co.yeoshin.common.ratelimit.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.ratelimit.entity.DomainActionAttempt;
import kr.co.yeoshin.common.type.DomainType;

public interface CustomDomainActionAttemptRepository {

    List<DomainActionAttempt> findAllLatestBy(long memberId, DomainType domainType,
            LocalDateTime from, LocalDateTime to, long limit);

    boolean deleteAll(DomainType domainType, LocalDateTime from, LocalDateTime to);

    boolean deleteAll(long memberId, DomainType domainType, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/ratelimit/repository/DomainActionAttemptRepository.java
================================================
package kr.co.yeoshin.common.ratelimit.repository;

import kr.co.yeoshin.common.ratelimit.entity.DomainActionAttempt;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DomainActionAttemptRepository extends JpaRepository<DomainActionAttempt, Long>,
        CustomDomainActionAttemptRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendExplorerTreatmentAsSalesEventRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.place.type.PlaceType;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerTreatmentAsSalesEvent;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerVersion;

public interface CustomRecommendExplorerTreatmentAsSalesEventRepository {

    List<RecommendExplorerTreatmentAsSalesEvent> fetchAllByTreatmentIds(
            RecommendExplorerVersion version, Collection<Long> treatmentIds);

    List<RecommendExplorerTreatmentAsSalesEvent> findAllByTreatmentIds(
            RecommendExplorerVersion version, Collection<Long> treatmentIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendExplorerTreatmentRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerTreatment;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerVersion;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomRecommendExplorerTreatmentRepository {

    List<RecommendExplorerTreatment> fetchAll(RecommendExplorerVersion version);

    Page<RecommendExplorerTreatment> fetchAllRecommendExplorerTreatmentsByTreatmentIds(
            Pageable pageable, RecommendExplorerVersion version, Collection<Long> treatmentIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendKeepRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Optional;
import kr.co.yeoshin.common.recommend.entity.RecommendKeep;
import kr.co.yeoshin.common.type.DeviceType;

public interface CustomRecommendKeepRepository {

    Optional<RecommendKeep> findOne(long memberId, DeviceType deviceType, String clientId, String eventType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendSalesEventRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.recommend.entity.RecommendSalesEvent;
import kr.co.yeoshin.common.recommend.entity.RecommendSalesEventVersion;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomRecommendSalesEventRepository {

    Page<RecommendSalesEvent> findAll(RecommendSalesEventVersion version, Pageable pageable);

    Page<RecommendSalesEvent> fetchAll(RecommendSalesEventVersion version, Pageable pageable);

    List<RecommendSalesEvent> fetchAllByIds(Collection<Long> recommendSalesEventIds);

    List<RecommendSalesEvent> findAllByIds(Collection<Long> recommendSalesEventIds);

    List<RecommendSalesEvent> findAllByIdsAndVersion(Collection<Long> recommendSalesEventIds, RecommendSalesEventVersion version);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendSearchKeywordRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.recommend.entity.RecommendSearchKeyword;
import kr.co.yeoshin.common.recommend.entity.RecommendSearchKeywordVersion;
import kr.co.yeoshin.common.recommend.type.RecommendScope;
import kr.co.yeoshin.common.type.Language;

public interface CustomRecommendSearchKeywordRepository {

    List<RecommendSearchKeyword> fetchAllRecommendSearchKeywordsBySearchWord(
            RecommendSearchKeywordVersion version,
            String searchWord,
            Collection<RecommendScope> scopes,
            Language language,
            int limit);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendTreatmentReviewAtHomeBestRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.recommend.entity.RecommendTreatmentReviewAtHomeBest;

public interface CustomRecommendTreatmentReviewAtHomeBestRepository {

    List<RecommendTreatmentReviewAtHomeBest> findAllBySalesEventIds(Collection<Long> salesEventIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/CustomRecommendTreatmentReviewAtHomeTroubleRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.recommend.entity.RecommendTreatmentReviewAtHomeTrouble;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomRecommendTreatmentReviewAtHomeTroubleRepository {

    Page<Long> findSalesEventIds(Pageable pageable);

    List<RecommendTreatmentReviewAtHomeTrouble> findAllBySalesEventIds(Collection<Long> salesEventIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendExplorerTreatmentAsSalesEventRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendExplorerTreatmentAsSalesEvent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendExplorerTreatmentAsSalesEventRepository extends
        JpaRepository<RecommendExplorerTreatmentAsSalesEvent, Long>, CustomRecommendExplorerTreatmentAsSalesEventRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendExplorerTreatmentRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendExplorerTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendExplorerTreatmentRepository extends JpaRepository<RecommendExplorerTreatment, Long>,
        CustomRecommendExplorerTreatmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendExplorerVersionRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Optional;
import kr.co.yeoshin.common.recommend.entity.RecommendExplorerVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendExplorerVersionRepository extends JpaRepository<RecommendExplorerVersion, Long> {

    Optional<RecommendExplorerVersion> findTopByOrderByIdDesc();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendKeepRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendKeep;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendKeepRepository extends JpaRepository<RecommendKeep, Long>,
        CustomRecommendKeepRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendSalesEventRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendSalesEvent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendSalesEventRepository extends JpaRepository<RecommendSalesEvent, Long>,
        CustomRecommendSalesEventRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendSalesEventVersionRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Optional;
import kr.co.yeoshin.common.recommend.entity.RecommendSalesEventVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendSalesEventVersionRepository extends JpaRepository<RecommendSalesEventVersion, Long> {

    Optional<RecommendSalesEventVersion> findTopByOrderByIdDesc();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendSearchKeywordRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendSearchKeyword;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendSearchKeywordRepository extends JpaRepository<RecommendSearchKeyword, Long>,
        CustomRecommendSearchKeywordRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendSearchKeywordVersionRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import java.util.Optional;
import kr.co.yeoshin.common.recommend.entity.RecommendSearchKeywordVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendSearchKeywordVersionRepository extends JpaRepository<RecommendSearchKeywordVersion, Long> {

    Optional<RecommendSearchKeywordVersion> findTopByOrderByIdDesc();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendTreatmentReviewAtHomeBestRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendTreatmentReviewAtHomeBest;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendTreatmentReviewAtHomeBestRepository
        extends JpaRepository<RecommendTreatmentReviewAtHomeBest, Long>,
        CustomRecommendTreatmentReviewAtHomeBestRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/recommend/repository/RecommendTreatmentReviewAtHomeTroubleRepository.java
================================================
package kr.co.yeoshin.common.recommend.repository;

import kr.co.yeoshin.common.recommend.entity.RecommendTreatmentReviewAtHomeTrouble;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecommendTreatmentReviewAtHomeTroubleRepository
        extends JpaRepository<RecommendTreatmentReviewAtHomeTrouble, Long>,
        CustomRecommendTreatmentReviewAtHomeTroubleRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/report/repository/ContentReportRepository.java
================================================
package kr.co.yeoshin.common.report.repository;

import java.util.Optional;
import kr.co.yeoshin.common.report.entity.ContentReport;
import kr.co.yeoshin.common.report.model.ContentType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ContentReportRepository extends JpaRepository<ContentReport, Long>, CustomContentReportRepository {

    Optional<ContentReport> findByContentTypeAndContentId(ContentType contentType, long contentId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/report/repository/CustomContentReportRepository.java
================================================
package kr.co.yeoshin.common.report.repository;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import kr.co.yeoshin.common.report.entity.ContentReport;
import kr.co.yeoshin.common.report.model.ContentReportWhereCondition;
import kr.co.yeoshin.common.report.model.ContentType;
import org.springframework.data.domain.Page;

public interface CustomContentReportRepository {

    Page<ContentReport> fetchAll(ContentReportWhereCondition condition);

    Map<Long, Long> aggregateCountByContentTypeAndContentIds(ContentType contentType, Collection<Long> contentIds);

    List<ContentReport> findReportContents(long reporterId, ContentType contentType, Collection<Long> contentIds);

    Optional<ContentReport> findReportContent(long reporterId, ContentType contentType, long contentId);

    Optional<Long> countByContentTypeAndContentId(ContentType contentType, long contentId);

    void deleteAllByContentTypeAndContentId(ContentType contentType, long contentId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/report/repository/CustomMemberReportRepository.java
================================================
package kr.co.yeoshin.common.report.repository;

import kr.co.yeoshin.common.report.entity.MemberReport;
import kr.co.yeoshin.common.report.model.MemberReportWhereCondition;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomMemberReportRepository {

    Page<MemberReport> fetchAll(Pageable pageable);

    Page<MemberReport> fetchAll(MemberReportWhereCondition whereCondition);

    Page<MemberReport> fetchAllByMemberId(long memberId, Pageable pageable);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/report/repository/MemberReportRepository.java
================================================
package kr.co.yeoshin.common.report.repository;

import java.util.Optional;
import java.util.Set;
import kr.co.yeoshin.common.report.entity.MemberReport;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberReportRepository extends JpaRepository<MemberReport, Long>, CustomMemberReportRepository {

    Optional<MemberReport> findByMemberIdAndReportedMemberId(long memberId, long reportedMemberId);

    Set<MemberReport> findAllByMemberId(long memberId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/repository/ScrapCountRepository.java
================================================
package kr.co.yeoshin.common.repository;

import java.util.Collection;
import kr.co.yeoshin.common.type.YN;

public interface ScrapCountRepository {

    long countByMemberIdAndViewYn(long memberId, Collection<YN> viewYns);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmAsHospitalRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmAsHospital;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmAsHospitalRepository extends JpaRepository<CrmAsHospital, Long>, CustomCrmAsHospitalRepository {

    List<CrmAsHospital> findAllByCrmType(CrmDevice crmType);

    List<CrmAsHospital> findAllByHospitalId(long hospitalId);

    List<CrmAsHospital> findAllByHospitalIdIn(Collection<Long> hospitalIds);

    Optional<CrmAsHospital> findByCrmTypeAndHospitalId(CrmDevice crmType, long hospitalId);

    Optional<CrmAsHospital> findByCrmTypeAndCrmHospitalId(CrmDevice crmType, String crmHospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmDrPaletteConfigRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmDrPaletteConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmDrPaletteConfigRepository extends JpaRepository<CrmDrPaletteConfig, Long> {

    Optional<CrmDrPaletteConfig> findByHiraId(String hiraId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmLatestAccessRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmLatestAccess;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmLatestAccessRepository extends JpaRepository<CrmLatestAccess, Long> {

    Optional<CrmLatestAccess> findByHospitalIdAndScrollId(long hospitalId, String scrollId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmReservationActionLogRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.CrmReservationActionLog;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmReservationActionLogRepository extends JpaRepository<CrmReservationActionLog, Long> {

    List<CrmReservationActionLog> findAllByReservationIdAndCrmType(long reservationId, CrmDevice crmType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmReservationCountRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.CrmReservationCount;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmReservationCountRepository extends JpaRepository<CrmReservationCount, Long>,
        CustomCrmReservationCountRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmReservationRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmReservation;
import kr.co.yeoshin.common.reservation.model.CrmReservationRegister;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface CrmReservationRepository extends JpaRepository<CrmReservation, Long>, CustomCrmReservationRepository {

    Optional<CrmReservation> findByCrmReservationId(long crmReservationId);

    Optional<CrmReservation> findByCrmReservationIdAndHospitalId(long crmReservationId, long hopsitalId);

    Optional<CrmReservation> findByCrmReservationIdAndHospitalIdAndCrmDeviceType
            (long crmReservationId, long hospitalId, CrmDevice crmType);

    @Modifying
    @Query(value = "INSERT INTO crm_reservation (reservation_id, hospital_id, reservation_at, "
            + "crm_device_type, crm_access_id, crm_doctor_id, crm_reservation_id, crm_member_id, confirm_yn, created, updated) "
            + "VALUES (:#{#register.reservationId}, "
            + ":#{#register.hospitalId}, "
            + ":#{#register.reservationAt}, "
            + ":#{#register.crmDeviceType.name()}, "
            + ":#{#register.crmAccessId}, "
            + ":#{#register.crmDoctorId}, "
            + ":#{#register.crmReservationId}, "
            + ":#{#register.crmMemberId}, "
            + "'Y', "
            + "NOW(),"
            + "NOW()) "
            + "ON DUPLICATE KEY UPDATE "
            + "reservation_at = :#{#register.reservationAt}, "
            + "crm_device_type = :#{#register.crmDeviceType.name()}, "
            + "crm_doctor_id = :#{#register.crmDoctorId}, "
            + "crm_reservation_id = :#{#register.crmReservationId}, "
            + "crm_member_id = :#{#register.crmMemberId}, "
            + "updated = NOW()"
            , nativeQuery = true)
    int upsertCrmReservationBy(@Param("register") CrmReservationRegister register);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CrmSmartDoctorCrmSalesProductRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmSmartDoctorCrmSalesProduct;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmSmartDoctorCrmSalesProductRepository extends JpaRepository<CrmSmartDoctorCrmSalesProduct, Long> {

    Optional<CrmSmartDoctorCrmSalesProduct> findByHospitalId(long hospitalId);

    Optional<CrmSmartDoctorCrmSalesProduct> findByCrmSalesProductId(String crmSalesProductId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomCrmAsHospitalRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.CrmAsHospital;
import kr.co.yeoshin.common.reservation.model.CrmAsHospitalWhereCondition;

public interface CustomCrmAsHospitalRepository {

    List<CrmAsHospital> fetchAll(CrmAsHospitalWhereCondition condition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomCrmReservationCountRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.reservation.entity.CrmReservationCount;

public interface CustomCrmReservationCountRepository {

    List<CrmReservationCount> findAllByCrmAccessIdAndReservationAt(String crmAccessId, LocalDateTime from, LocalDateTime to);

    List<CrmReservationCount> findAllByHospitalIdAndReservationAt(long hospitalId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomCrmReservationRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmReservation;
import kr.co.yeoshin.common.reservation.type.CrmDevice;

public interface CustomCrmReservationRepository {

    List<CrmReservation> findAllByCrmAccessIdAndReservationAt(String crmHospitalId,
            LocalDateTime fromReservationAt, LocalDateTime toReservationAt);

    List<CrmReservation> findAllByReservationIds(Collection<Long> reservationIds);

    Optional<CrmReservation> findByReservationIdAndCrmType(long reservationId, CrmDevice crmType);

    Optional<CrmReservation> findByCrmAccessIdAndCrmReservationId(String crmAccessId, long crmReservationId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationAsWritableTreatmentReviewRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationAsWritableTreatmentReview;

public interface CustomReservationAsWritableTreatmentReviewRepository {

    List<ReservationAsWritableTreatmentReview> fetchAllByMemberId(long memberId);

    List<ReservationAsWritableTreatmentReview> findAllByMemberId(long memberId);

    List<ReservationAsWritableTreatmentReview> findAllByMemberIdAndReservationId(long memberId, long reservationId);

    Optional<ReservationAsWritableTreatmentReview> fetchByMemberIdAndWritableId(
            long memberId, long treatmentReviewWritableId);


}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationChangeLogRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.ReservationChangeLog;
import kr.co.yeoshin.common.reservation.model.ReservationChangeLogWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomReservationChangeLogRepository {

    Page<ReservationChangeLog> fetchAllReservationChangeLog(ReservationChangeLogWhereCondition request);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationCrmSyncHolidayRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationCrmSyncHoliday;

public interface CustomReservationCrmSyncHolidayRepository {

    List<ReservationCrmSyncHoliday> findAllByHospitalIdAndAt(long hospitalId, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationDoctorRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationDoctor;
import kr.co.yeoshin.common.type.YN;

public interface CustomReservationDoctorRepository {

    List<ReservationDoctor> findAllByIdsAndHospitalId(Collection<Long> ids, long hospitalId);

    List<ReservationDoctor> findAllByHospitalIdAndActivateYn(long hospitalId, YN activateYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationLatestStatusRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationLatestStatus;

public interface CustomReservationLatestStatusRepository {

    List<ReservationLatestStatus> findAllByMemberId(long memberId);

    List<ReservationLatestStatus> fetchAllByMemberId(long memberId);

    Optional<ReservationLatestStatus> findByMemberIdAndHospitalId(long memberId, long hospitalId);

    Optional<ReservationLatestStatus> fetchByMemberIdAndHospitalId(long memberId, long hospitalId);

    List<ReservationLatestStatus> fetchAllByMemberIdsAndHospitalId(Collection<Long> memberIds, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.model.ReservationCalendarWhereCondition;
import kr.co.yeoshin.common.reservation.model.ReservationStatisticsDto;
import kr.co.yeoshin.common.reservation.model.ReservationWhereCondition;
import kr.co.yeoshin.common.reservation.type.CrmDevice;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomReservationRepository {

    List<Reservation> fetchAll(ReservationCalendarWhereCondition condition);

    Page<Reservation> findAllByMemberIdAndHospitalIdAndStatues(
            long memberId, long hospitalId, Collection<ReservationStatus> statuses, Pageable pageable);

    Page<Reservation> findAllByMemberIdAndStatuses(
            long memberId, Collection<ReservationStatus> statuses, Pageable pageable);

    List<Reservation> findAllByMemberIdAndStatuses(
            long memberId, Collection<ReservationStatus> statuses);

    long countByMemberIdAndStatuses(long memberId, Collection<ReservationStatus> statuses);

    Optional<Reservation> fetchById(long reservationId);

    Optional<Reservation> fetchByIdAndMemberId(long reservationId, long memberId);

    List<Reservation> fetchAllByHospitalIdAndStartAtBetweenAndStatuses(long hospitalId,
            LocalDateTime start,
            LocalDateTime end,
            Collection<ReservationStatus> statuses);

    List<Reservation> findAllByHospitalIdAndStartAtBetweenAndStatuses(long hospitalId,
            LocalDateTime start,
            LocalDateTime end,
            Collection<ReservationStatus> statuses);

    List<Reservation> fetchAllByHospitalIdAndCreatedBetweenAndStatusesAndUpdatedAfter(long hospitalId,
            LocalDateTime fromCreated,
            LocalDateTime toCreated,
            Collection<ReservationStatus> statuses,
            LocalDateTime updated);

    List<Reservation> fetchAllByHospitalIdAndMemberIdAndStatuses(long memberId, long hospitalId,
            Collection<ReservationStatus> statuses);

    Page<Reservation> fetchAll(ReservationWhereCondition request);

    List<ReservationStatisticsDto> findAllStatistics();

    boolean updateCrmType(Collection<Long> reservationIds, CrmDevice crmType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationStatusLogRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.ReservationStatusLog;
import kr.co.yeoshin.common.reservation.model.ReservationStatusLogWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomReservationStatusLogRepository {

    Page<ReservationStatusLog> findAllBy(ReservationStatusLogWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomReservationTemporaryOperationTimeRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationTemporaryOperationTime;
import kr.co.yeoshin.common.reservation.type.HospitalOperationStatus;

public interface CustomReservationTemporaryOperationTimeRepository {

    List<ReservationTemporaryOperationTime> findAllByHospitalIdAndDateTimeRangeAndTypes(long hospitalId,
            LocalDateTime from, LocalDateTime to, Collection<HospitalOperationStatus> types);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/CustomerReservationAsTicketRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicket;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;

public interface CustomerReservationAsTicketRepository {

    List<ReservationAsTicket> fetchAllByReservationIds(Collection<Long> reservationIds);

    List<ReservationAsTicket> fetchAllByReservationIdAndSalesEventId(long reservationId, long salesEventId);

    List<ReservationAsTicket> fetchAllByTicketId(long ticketId);

    List<ReservationAsTicket> fetchAllByTicketIdsAndReservationStatuses(
            Collection<Long> ticketIds, Collection<ReservationStatus> statuses);

    Optional<ReservationAsTicket> fetchLatestByTicketId(long ticketId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/HolidayRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.reservation.entity.Holiday;
import org.springframework.data.jpa.repository.JpaRepository;

public interface HolidayRepository extends JpaRepository<Holiday, Long> {

    List<Holiday> findAllByCountryCode(String countryCode);

    List<Holiday> findAllByCountryCodeAndAtBetween(String countryCode, LocalDateTime from, LocalDateTime to);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/MonitoringReservationStatusRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.MonitoringReservationStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MonitoringReservationStatusRepository extends JpaRepository<MonitoringReservationStatus, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationActionStatusRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationActionStatus;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface ReservationActionStatusRepository extends JpaRepository<ReservationActionStatus, Long> {

    Optional<ReservationActionStatus> findByReservationId(long reservationId);

    List<ReservationActionStatus> findAllByReservationId(long reservationId);

    void deleteByReservationId(long reservationId);

    void deleteByReservationIdAndAfterStatus(long reservationId, ReservationStatus afterStatus);

    @Modifying
    @Query(value =
            "INSERT INTO reservation_action_status(action_at, reservation_id, after_status, created, updated)"
                    + " VALUES(:#{#entity.actionAt}, :#{#entity.reservation.id}, :#{#entity.afterStatus.name()}, NOW(), NOW())"
                    + " ON DUPLICATE KEY UPDATE"
                    + "     action_at = :#{#entity.actionAt},"
                    + "     after_status = :#{#entity.afterStatus.name()},"
                    + "     updated = NOW()",
            nativeQuery = true)
    int upsert(@Param("entity") ReservationActionStatus entity);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationAsTicketLogRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicketLog;
import kr.co.yeoshin.common.reservation.model.ReservationAsTicketLogAction;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationAsTicketLogRepository extends JpaRepository<ReservationAsTicketLog, Long> {

    List<ReservationAsTicketLog> findAllByReservationIdAndRefType(long reservationId, ReservationAsTicketLogAction action);

    List<ReservationAsTicketLog> findByRefTypeAndRefId(ReservationAsTicketLogAction type, long refId);

}


================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationAsTicketRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationAsTicket;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationAsTicketRepository extends JpaRepository<ReservationAsTicket, Long>,
        CustomerReservationAsTicketRepository {

    List<ReservationAsTicket> findAllByReservationIdIn(Collection<Long> reservationIds);

    Optional<ReservationAsTicket> findByReservationIdAndTicketId(long reservationId, long ticketId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationAsWritableTreatmentReviewRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationAsWritableTreatmentReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationAsWritableTreatmentReviewRepository extends
        JpaRepository<ReservationAsWritableTreatmentReview, Long>, CustomReservationAsWritableTreatmentReviewRepository {

    List<ReservationAsWritableTreatmentReview> findByReservationIdAndMemberId(long reservationId, long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationChangeLogRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.ReservationChangeLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationChangeLogRepository extends JpaRepository<ReservationChangeLog, Long>, CustomReservationChangeLogRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationCrmSyncHistoryRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.ReservationCrmSyncHistory;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationCrmSyncHistoryRepository extends JpaRepository<ReservationCrmSyncHistory, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationCrmSyncHolidayRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationCrmSyncHoliday;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationCrmSyncHolidayRepository extends JpaRepository<ReservationCrmSyncHoliday, Long>,
        CustomReservationCrmSyncHolidayRepository {

    List<ReservationCrmSyncHoliday> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationDoctorRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationDoctor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationDoctorRepository extends JpaRepository<ReservationDoctor, Long>, CustomReservationDoctorRepository {

    List<ReservationDoctor> findAllByHospitalId(long hospitalId);

    Optional<ReservationDoctor> findByIdAndHospitalId(long id, long hospitalId);

    Optional<ReservationDoctor> findByHospitalIdAndCrmDoctorId(long hospitalId, long crmDoctorId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationHospitalConfigRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationHospitalConfigRepository extends JpaRepository<ReservationHospitalConfig, Long> {

    Optional<ReservationHospitalConfig> findByHospitalId(long hospitalId);

    List<ReservationHospitalConfig> findAllByHospitalIdIn(Collection<Long> hospitalIds);

    Optional<ReservationHospitalConfig> findByHospitalCode(String hospitalCode);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationHospitalCrmInfoRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationHospitalCrmInfoRepository extends JpaRepository<ReservationHospitalConfig, Long> {

    Optional<ReservationHospitalConfig> findByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationHospitalOperationInfoRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalOperationInfo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationHospitalOperationInfoRepository extends JpaRepository<ReservationHospitalOperationInfo, Long> {

    List<ReservationHospitalOperationInfo> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationHospitalOperationTimeRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationHospitalOperationTime;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationHospitalOperationTimeRepository extends JpaRepository<ReservationHospitalOperationTime, Long> {

    List<ReservationHospitalOperationTime> findAllByHospitalId(long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationLatestStatusRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationLatestStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationLatestStatusRepository extends JpaRepository<ReservationLatestStatus, Long>,
        CustomReservationLatestStatusRepository {

    List<ReservationLatestStatus> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.Reservation;
import kr.co.yeoshin.common.reservation.type.ReservationStatus;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface ReservationRepository extends JpaRepository<Reservation, Long>, CustomReservationRepository {

    Optional<Reservation> findFirstByMemberIdOrderByIdDesc(long memberId);

    @Override
    void deleteById(Long reservationId);

    long countByHospitalIdAndStatus(long hospitalId, ReservationStatus status);

    long countByMemberIdAndStatus(long memberId, ReservationStatus status);

    Optional<Reservation> findByIdAndMemberId(long reservationId, long memberId);

    List<Reservation> findAllByHospitalIdAndStatusIn(long hospitalId, Collection<ReservationStatus> statuses);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationStatusLogRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import java.util.List;
import kr.co.yeoshin.common.reservation.entity.ReservationStatusLog;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationStatusLogRepository extends JpaRepository<ReservationStatusLog, Long>,
        CustomReservationStatusLogRepository {

    List<ReservationStatusLog> findAllByReservationId(long reservationId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/reservation/repository/ReservationTemporaryOperationTimeRepository.java
================================================
package kr.co.yeoshin.common.reservation.repository;

import kr.co.yeoshin.common.reservation.entity.ReservationTemporaryOperationTime;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReservationTemporaryOperationTimeRepository extends JpaRepository<ReservationTemporaryOperationTime, Long>,
        CustomReservationTemporaryOperationTimeRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/restriction/repository/CustomRestrictionGeoPositionUsageRepository.java
================================================
package kr.co.yeoshin.common.restriction.repository;

import kr.co.yeoshin.common.restriction.entity.RestrictionGeoPositionUsage;
import kr.co.yeoshin.common.restriction.model.RestrictionGeoPositionUsageWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomRestrictionGeoPositionUsageRepository {

    Page<RestrictionGeoPositionUsage> findAll(RestrictionGeoPositionUsageWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/restriction/repository/RestrictionGeoPositionUsageRepository.java
================================================
package kr.co.yeoshin.common.restriction.repository;

import kr.co.yeoshin.common.restriction.entity.RestrictionGeoPositionUsage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RestrictionGeoPositionUsageRepository extends JpaRepository<RestrictionGeoPositionUsage, Long>,
        CustomRestrictionGeoPositionUsageRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/ContentConcealReasonRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.ContentConcealReason;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ContentConcealReasonRepository extends JpaRepository<ContentConcealReason, Long>,
        CustomContentConcealReasonRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomContentConcealReasonRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.report.model.ContentType;
import kr.co.yeoshin.common.review.entity.ContentConcealReason;

public interface CustomContentConcealReasonRepository {

    Optional<ContentConcealReason> findByRefTypeAndRefId(ContentType refType, long refId);

    List<ContentConcealReason> fetchAllByRefTypeAndRefIdIn(ContentType type, Collection<Long> refIds);

    void deleteAllByRefTypeAndRefIdIn(ContentType type, Collection<Long> refId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomSalesEventAsFirstTreatmentReviewRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Optional;
import kr.co.yeoshin.common.review.entity.SalesEventAsFirstTreatmentReview;

public interface CustomSalesEventAsFirstTreatmentReviewRepository {

    Optional<SalesEventAsFirstTreatmentReview> findOne(long salesEventId, long treatmentReviewId);

    void deleteBySalesEventIdAndTreatmentReviewId(long salesEventId, long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomSalesEventQuestionReplyRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.SalesEventQuestionReply;
import kr.co.yeoshin.common.type.YN;

public interface CustomSalesEventQuestionReplyRepository {

    List<SalesEventQuestionReply> fetchAllBySalesEventQuestionIds(Collection<Long> salesEventQuestionId);

    List<SalesEventQuestionReply> fetchBySalesEventIdOrderByIdDesc(long salesEventId, Collection<YN> viewYns, long limit);

    Optional<SalesEventQuestionReply> fetchSalesEventQuestionReplyByIdAndAdminId(long salesEventQuestionReplyId, long adminId);

    Optional<SalesEventQuestionReply> fetchById(long salesEventQuestionReplyId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomSalesEventQuestionRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.SalesEventQuestion;
import kr.co.yeoshin.common.review.model.SalesEventQuestionWhereCondition;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomSalesEventQuestionRepository {

    Optional<SalesEventQuestion> findById(long id);

    long countBySalesEventId(long salesEventId, Collection<YN> viewYns);

    Page<SalesEventQuestion> fetchAllBySalesEventId(long salesEventId, Collection<YN> viewYns, Pageable pageable);

    Page<SalesEventQuestion> findAllSalesEventQuestion(SalesEventQuestionWhereCondition request);

    Optional<SalesEventQuestion> fetchSalesEventQuestionById(long id);

    Page<SalesEventQuestion> fetchAllQuestionsByMemberId(long memberId, Pageable pageable);

    Page<SalesEventQuestion> fetchAllQuestionsByHospitalId(long hospitalId, Collection<YN> views, Pageable pageable);

    List<SalesEventQuestion> findQuestionsByMemberIdAndAtAfter(long memberId, LocalDateTime at);

    Optional<SalesEventQuestion> fetchSalesEventQuestionByIdAndHospitalId(long id, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReceiptReviewRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

public interface CustomTreatmentReceiptReviewRepository {

    void deleteByTreatmentReviewId(long treatmentReviewId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewAsSalesEventProductRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReviewAsSalesEventProduct;

public interface CustomTreatmentReviewAsSalesEventProductRepository {

    List<TreatmentReviewAsSalesEventProduct> fetchAllTreatmentReviewsBySalesEventIdOrderByLikeCount(long salesEventId, int limit);

    List<TreatmentReviewAsSalesEventProduct> fetchAllTreatmentReviewProductsByTreatmentReviewIds(Collection<Long> treatmentIds);

    void deleteAllByTreatmentReviewId(long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewConfirmImageRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReviewConfirmImage;

public interface CustomTreatmentReviewConfirmImageRepository {

    void deleteAllByIdIn(Collection<Long> ids);

    List<TreatmentReviewConfirmImage> fetchAllByTreatmentReviewConfirmId(long reviewConfirmId);

    List<TreatmentReviewConfirmImage> findAllByTreatmentReviewId(long reviewId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewConfirmRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.review.entity.TreatmentReviewConfirm;
import kr.co.yeoshin.common.review.model.TreatmentReviewConfirmWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomTreatmentReviewConfirmRepository {

    Optional<TreatmentReviewConfirm> findByTreatmentReviewId(long treatmentReviewId);

    List<TreatmentReviewConfirm> findAllByTreatmentReviewIds(Collection<Long> treatmentReviewIds);

    Optional<TreatmentReviewConfirm> fetchTreatmentReviewConfirmByTreatmentReviewId(long treatmentReviewId);

    Page<TreatmentReview> fetchAllTreatmentReviewsWithConfirm(TreatmentReviewConfirmWhereCondition condition);

    void deleteByTreatmentReviewId(long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewHospitalCommentRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReviewHospitalComment;
import kr.co.yeoshin.common.review.model.TreatmentReviewHospitalCommentWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomTreatmentReviewHospitalCommentRepository {

    Page<TreatmentReviewHospitalComment> fetchAll(TreatmentReviewHospitalCommentWhereCondition whereCondition);

    Optional<TreatmentReviewHospitalComment> fetchById(long id);

    Optional<TreatmentReviewHospitalComment> fetchByTreatmentReviewId(long treatmentReviewId);

    Optional<List<TreatmentReviewHospitalComment>> findTreatmentReviewHospitalCommentsByTreatmentReviewIds(
            List<Long> treatmentReviewIds);

    List<TreatmentReviewHospitalComment> findAllByTreatmentReviewIds(Collection<Long> treatmentReviewIds);

    void deleteByTreatmentReviewId(long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewLikeRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReviewLike;
import kr.co.yeoshin.common.type.UserType;

public interface CustomTreatmentReviewLikeRepository {

    Optional<TreatmentReviewLike> findByWriterAndTreatmentReviewId(UserType writerType, long writerId, long treatmentReviewId);

    boolean existByWriterAndTreatmentReviewId(UserType writerType, long writerId, long treatmentReviewId);

    boolean deleteByWriterAndTreatmentReviewId(UserType writerType, long writerId, long treatmentReviewId);

    List<TreatmentReviewLike> findAllByMemberIdAndTreatmentReviewIds(
            UserType writerType, long writerId, Collection<Long> treatmentReviewIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import kr.co.yeoshin.common.review.model.TreatmentReviewWhereCondition;
import kr.co.yeoshin.common.review.repository.model.TreatmentReviewCountGroupBySalesEvent;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomTreatmentReviewRepository {

    List<TreatmentReview> findAllByIds(Collection<Long> treatmentReviewIds);

    Page<TreatmentReview> fetchAllTreatmentReview(TreatmentReviewWhereCondition request);

    Optional<TreatmentReview> fetchOneById(long treatmentReviewId);

    Page<TreatmentReview> fetchAllByMemberId(long memberId, Pageable pageable);

    Page<TreatmentReview> findAllByMemberId(long memberId, Pageable pageable);

    Optional<TreatmentReview> fetchOneByMemberIdAndReviewId(long memberId, long reviewId);

    Optional<TreatmentReview> findOneByMemberIdAndReviewId(long memberId, long reviewId);

    List<TreatmentReview> findAllBySalesEventIdAndStartPoint(
            long salesEventId, long starPointGreater, Collection<YN> views, int limit);

    List<TreatmentReview> findAllByMemberIdAndSalesEventIds(long memberId, Collection<Long> salesEventIds);

    long countBySalesEventIdAndViews(long salesEventId, Collection<YN> views);

    long countBySalesEventIdAndViews(long salesEventId, Collection<YN> views, Collection<Long> excludeTreatmentReviewIds);

    List<TreatmentReview> findAllByMemberIdAndAtAfter(long memberId, LocalDateTime at);

    List<TreatmentReviewCountGroupBySalesEvent> countTreatmentReviewGroupBySalesEventIds(
            Collection<Long> salesEventIds, Collection<YN> views);

    List<TreatmentReview> findAllByMemberIdAndReservationId(long memberId, long reservationId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewScrapRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import kr.co.yeoshin.common.review.entity.TreatmentReviewScrap;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomTreatmentReviewScrapRepository extends ScrapCountRepository {

    Page<TreatmentReviewScrap> fetchAllByMemberIdAndViewYn(long memberId, YN viewYn, Pageable pageable);

    List<TreatmentReviewScrap> findAllByMemberIdAndTreatmentReviewIds(long memberId, Collection<Long> treatmentReviewIds);

    boolean existScrapTreatmentReviewByMemberIdAndReviewId(long memberId, long treatmentReviewId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomTreatmentReviewStatRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReviewStat;

public interface CustomTreatmentReviewStatRepository {

    List<TreatmentReviewStat> findAllBySalesEventIdsAndStarPointGreaterThan(Collection<Long> salesEventIds, int starPoint);

    void increaseScrapCount(long id);

    void decreaseScrapCount(long id);

    void increaseLikeCount(long id);

    void decreaseLikeCount(long id);

    void increaseReportCount(long id);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/CustomerTreatmentReviewTranslationRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

public interface CustomerTreatmentReviewTranslationRepository {

    void deleteByTreatmentReviewId(long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/SalesEventAsFirstTreatmentReviewRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.SalesEventAsFirstTreatmentReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventAsFirstTreatmentReviewRepository
        extends JpaRepository<SalesEventAsFirstTreatmentReview, Long>, CustomSalesEventAsFirstTreatmentReviewRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/SalesEventQuestionReplyRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.SalesEventQuestionReply;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventQuestionReplyRepository extends JpaRepository<SalesEventQuestionReply, Long>,
        CustomSalesEventQuestionReplyRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/SalesEventQuestionRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.SalesEventQuestion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SalesEventQuestionRepository extends JpaRepository<SalesEventQuestion, Long>,
        CustomSalesEventQuestionRepository {
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReceiptReviewRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReceiptReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReceiptReviewRepository
        extends JpaRepository<TreatmentReceiptReview, Long>, CustomTreatmentReceiptReviewRepository {

    Optional<TreatmentReceiptReview> findByTreatmentReviewId(long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewAsSalesEventProductRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.TreatmentReviewAsSalesEventProduct;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewAsSalesEventProductRepository extends JpaRepository<TreatmentReviewAsSalesEventProduct, Long>,
        CustomTreatmentReviewAsSalesEventProductRepository {


}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewConfirmImageRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReviewConfirmImage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewConfirmImageRepository
        extends JpaRepository<TreatmentReviewConfirmImage, Long>, CustomTreatmentReviewConfirmImageRepository {

    List<TreatmentReviewConfirmImage> findAllByTreatmentReviewConfirmId(long treatmentReviewConfirmId);

    List<TreatmentReviewConfirmImage> findAllByTreatmentReviewConfirmIdIn(Collection<Long> treatmentReviewIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewConfirmRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.TreatmentReviewConfirm;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewConfirmRepository extends JpaRepository<TreatmentReviewConfirm, Long>,
        CustomTreatmentReviewConfirmRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewHospitalCommentRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReviewHospitalComment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewHospitalCommentRepository extends JpaRepository<TreatmentReviewHospitalComment, Long>,
        CustomTreatmentReviewHospitalCommentRepository {

    Optional<TreatmentReviewHospitalComment> findById(long treatmentReviewHospitalCommentId);

    Optional<TreatmentReviewHospitalComment> findTreatmentReviewHospitalCommentByTreatmentReviewId(long treatmentReviewId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewImageRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReviewImage;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewImageRepository extends JpaRepository<TreatmentReviewImage, Long> {

    List<TreatmentReviewImage> findAllByTreatmentReviewId(long treatmentReviewId);

    List<TreatmentReviewImage> findAllByTreatmentReviewIdIn(Collection<Long> treatmentReviewIds);

    void deleteByTreatmentReviewId(long treatmentReviewId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewLikeRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.TreatmentReviewLike;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewLikeRepository extends JpaRepository<TreatmentReviewLike, Long>,
        CustomTreatmentReviewLikeRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewRepository extends JpaRepository<TreatmentReview, Long>, CustomTreatmentReviewRepository {

    List<TreatmentReview> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewScrapRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import kr.co.yeoshin.common.review.entity.TreatmentReviewScrap;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewScrapRepository
        extends JpaRepository<TreatmentReviewScrap, Long>, CustomTreatmentReviewScrapRepository {

    void deleteByMemberIdAndTreatmentReviewId(long memberId, long treatmentReviewId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewStatRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.review.entity.TreatmentReviewStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewStatRepository extends JpaRepository<TreatmentReviewStat, Long>,
        CustomTreatmentReviewStatRepository {

    Optional<TreatmentReviewStat> findByTreatmentReviewId(long treatmentReviewId);

    List<TreatmentReviewStat> findByTreatmentReviewIdIn(Collection<Long> treatmentReviewIds);

    void deleteByTreatmentReviewId(long treatmentReviewId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/review/repository/TreatmentReviewTranslationRepository.java
================================================
package kr.co.yeoshin.common.review.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.review.entity.TreatmentReviewTranslation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TreatmentReviewTranslationRepository extends JpaRepository<TreatmentReviewTranslation, Long>,
        CustomerTreatmentReviewTranslationRepository {

    List<TreatmentReviewTranslation> findAllByTreatmentReviewId(long treatmentReviewId);

    List<TreatmentReviewTranslation> findAllByTreatmentReviewIdIn(Collection<Long> treatmentReviewIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setting/repository/SettingRepository.java
================================================
package kr.co.yeoshin.common.setting.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.setting.entity.Setting;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SettingRepository extends JpaRepository<Setting, String> {

    Optional<Setting> findByCode(String code);

    List<Setting> findByCodeIn(Collection<String> codes);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomDepositRefundRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.DepositRefund;
import kr.co.yeoshin.common.settlement.model.DepositRefundWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomDepositRefundRepository {

    Page<DepositRefund> findAllDepositRefund(DepositRefundWhereCondition whereCondition);

    Optional<DepositRefund> fetchDepositRefund(long depositRefundId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomDepositRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.Deposit;
import kr.co.yeoshin.common.settlement.entity.DepositAsTicket;
import kr.co.yeoshin.common.settlement.model.DepositWhereCondition;
import kr.co.yeoshin.common.settlement.repository.model.RemainDepositDto;
import org.springframework.data.domain.Page;

public interface CustomDepositRepository {

    Optional<Deposit> fetchById(long id);

    Page<Deposit> fetchAllDeposit(DepositWhereCondition whereCondition, LocalDateTime at);

    List<Deposit> findAllDepositByDepositRefundIds(Collection<Long> depositRefundIds);

    List<DepositAsTicket> fetchAllDepositAsTicketByDepositIds(Collection<Long> depositIds);

    List<RemainDepositDto> findAllRemainDepositByDepositIds(Collection<Long> depositIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomSettlementAdjustRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.settlement.entity.SettlementAdjust;
import kr.co.yeoshin.common.settlement.entity.SettlementAdjustAsTicket;
import kr.co.yeoshin.common.settlement.entity.SettlementTicket;
import kr.co.yeoshin.common.settlement.model.SettlementAdjustWhereCondition;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import org.springframework.data.domain.Page;

public interface CustomSettlementAdjustRepository {

    Page<SettlementAdjust> fetchAllSettlementAdjust(SettlementAdjustWhereCondition condition, LocalDateTime at);

    List<SettlementAdjust> findByRound(int year, int month, SettlementRound round);

    List<SettlementAdjustAsTicket> fetchAllSettlementAdjustAsTicketBySettlementAdjustIds(Collection<Long> settlementAdjustIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomSettlementPgReportRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import kr.co.yeoshin.common.payment.type.SettlementPgType;
import kr.co.yeoshin.common.settlement.entity.SettlementPgReport;
import kr.co.yeoshin.common.settlement.repository.model.SettlementPgReportDto;

public interface CustomSettlementPgReportRepository {

    List<SettlementPgReportDto> findAllDtoBySettlementReportIds(Collection<Long> settlementIds);

    List<SettlementPgReport> findAllBySettlementReportIdsAndPgTypes(Collection<Long> settlementIds, Set<SettlementPgType> pgTypes);

    Optional<SettlementPgReport> findLatestExpectStatusSettlementPgReport();
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomSettlementReportRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.time.LocalDateTime;
import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.SettlementReport;
import kr.co.yeoshin.common.settlement.model.SettlementPgFeeWhereCondition;
import kr.co.yeoshin.common.settlement.model.SettlementWhereCondition;
import kr.co.yeoshin.common.settlement.repository.model.PgFeeDto;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import org.springframework.data.domain.Page;

public interface CustomSettlementReportRepository {

    Page<SettlementReport> fetchAll(SettlementWhereCondition condition, LocalDateTime at);

    Page<PgFeeDto> fetchAllGroupByYearAndMonthAndHospitalId(SettlementPgFeeWhereCondition condition, LocalDateTime at);

    Optional<SettlementReport> findByRoundAndHospital(int year, int month, SettlementRound round, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomSettlementScheduleRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.SettlementSchedule;
import kr.co.yeoshin.common.settlement.repository.model.SettlementScheduleContext;
import kr.co.yeoshin.common.settlement.repository.model.SettlementScheduleWhereCondition;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import org.springframework.data.domain.Page;

public interface CustomSettlementScheduleRepository {

    List<SettlementSchedule> findAllBySettlementViewAtBefore(LocalDateTime at);


    Optional<SettlementSchedule> findBySettlement(int settlementYear, int settlementMonth, SettlementRound round);

    Optional<SettlementSchedule> findByAggregateSchedule(LocalDateTime at);

    Page<SettlementSchedule> findAllBy(SettlementScheduleWhereCondition whereCondition);

    List<SettlementSchedule> findAllBySettlementSchedules(Collection<SettlementScheduleContext> settlementSchedules);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomSettlementTicketRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.List;
import kr.co.yeoshin.common.settlement.entity.SettlementTicket;
import kr.co.yeoshin.common.settlement.type.SettlementRound;

public interface CustomSettlementTicketRepository {

    List<SettlementTicket> findByRound(int year, int month, SettlementRound round);

    List<SettlementTicket> findByYearAndMonthAndHospitalId(int year, int month, long hospitalId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/CustomVatReportRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.VatReport;
import kr.co.yeoshin.common.settlement.repository.model.VatReportWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomVatReportRepository {

    Page<VatReport> findAllByWhereCondition(VatReportWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/DepositAsAdPointRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.DepositAsAdPoint;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DepositAsAdPointRepository extends JpaRepository<DepositAsAdPoint, Long> {

    Optional<DepositAsAdPoint> findByDepositId(Long depositId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/DepositAsOrdersRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.DepositAsOrders;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DepositAsOrdersRepository extends JpaRepository<DepositAsOrders, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/DepositAsTicketRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.DepositAsTicket;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DepositAsTicketRepository extends JpaRepository<DepositAsTicket, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/DepositRefundRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.settlement.entity.DepositRefund;
import kr.co.yeoshin.common.settlement.type.DepositRefundStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DepositRefundRepository extends JpaRepository<DepositRefund, Long>, CustomDepositRefundRepository {

    List<DepositRefund> findAllByHospitalIdAndStatus(long hospitalId, DepositRefundStatus status);

    List<DepositRefund> findAllByHospitalIdAndStatusIn(long hospitalId, Collection<DepositRefundStatus> statuses);

    List<DepositRefund> findAllByHospitalIdInAndStatus(Collection<Long> hospitalIds, DepositRefundStatus status);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/DepositRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.Deposit;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DepositRepository extends JpaRepository<Deposit, Long>, CustomDepositRepository {

    Optional<Deposit> findByDepositRefundId(Long depositRefundId);

    List<Deposit> findAllByIdInOrderByIdDesc(Collection<Long> depositIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementAdjustAsTicketRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.SettlementAdjustAsTicket;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SettlementAdjustAsTicketRepository extends JpaRepository<SettlementAdjustAsTicket, Long> {

    List<SettlementAdjustAsTicket> findAllBySettlementAdjustIdIn(Collection<Long> settlementAdjustIds);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementAdjustRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.SettlementAdjust;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface SettlementAdjustRepository extends JpaRepository<SettlementAdjust, Long>, CustomSettlementAdjustRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementAsDepositRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.SettlementAsDeposit;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

public interface SettlementAsDepositRepository extends JpaRepository<SettlementAsDeposit, Long> {
    Optional<SettlementAsDeposit> findByDepositId(long depositId);

    List<SettlementAsDeposit> findAllByDepositIdIn(Collection<Long> depositIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementDailyRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.SettlementDaily;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SettlementDailyRepository extends JpaRepository<SettlementDaily, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementPgReportRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.SettlementPgReport;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface SettlementPgReportRepository extends JpaRepository<SettlementPgReport, Long>, CustomSettlementPgReportRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementReportRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.List;
import kr.co.yeoshin.common.settlement.entity.SettlementReport;
import kr.co.yeoshin.common.settlement.type.SettlementStatus;
import org.javers.spring.annotation.JaversSpringDataAuditable;
import org.springframework.data.jpa.repository.JpaRepository;

@JaversSpringDataAuditable
public interface SettlementReportRepository extends JpaRepository<SettlementReport, Long>, CustomSettlementReportRepository {

    List<SettlementReport> findByHospitalIdAndStatus(long hospitalId, SettlementStatus status);

    List<SettlementReport> findBySettlementYearAndSettlementMonthAndHospitalId(int year, int month, long hospitalId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementScheduleRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.settlement.entity.SettlementSchedule;
import kr.co.yeoshin.common.settlement.type.SettlementRound;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SettlementScheduleRepository extends JpaRepository<SettlementSchedule, Long>,
        CustomSettlementScheduleRepository {

    List<SettlementSchedule> findAllByCompleteAtBetween(LocalDateTime from, LocalDateTime to);

    List<SettlementSchedule> findAllByCompleteAtBetweenAndSettlementRoundIn(LocalDateTime from, LocalDateTime to, Collection<SettlementRound> rounds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/SettlementTicketRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import kr.co.yeoshin.common.settlement.entity.SettlementTicket;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SettlementTicketRepository extends JpaRepository<SettlementTicket, Long>, CustomSettlementTicketRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/settlement/repository/VatReportRepository.java
================================================
package kr.co.yeoshin.common.settlement.repository;

import java.util.Optional;
import kr.co.yeoshin.common.settlement.entity.VatReport;
import kr.co.yeoshin.common.settlement.type.VatRound;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VatReportRepository extends JpaRepository<VatReport, Long>, CustomVatReportRepository {

    Optional<VatReport> findByHospitalIdAndVatYearAndVatRound(long hospitalId, int year, VatRound vatRound);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/AppInitNoticeRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import kr.co.yeoshin.common.setup.entity.AppInitNotice;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AppInitNoticeRepository extends JpaRepository<AppInitNotice, String>, CustomAppInitNoticeRepository {
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/AppVersionRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import kr.co.yeoshin.common.setup.entity.AppVersion;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AppVersionRepository extends JpaRepository<AppVersion, Long>, CustomAppVersionRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/CustomAppInitNoticeRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.setup.entity.AppInitNotice;
import kr.co.yeoshin.common.type.YN;

public interface CustomAppInitNoticeRepository {

    List<AppInitNotice> findAllSortByDisplayOrderAsc(YN viewYn, LocalDateTime currentDate);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/CustomAppVersionRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.setup.entity.AppVersion;
import kr.co.yeoshin.common.type.DeviceType;

public interface CustomAppVersionRepository {

    Optional<AppVersion> findOneSortByIdDesc(DeviceType deviceType);

    List<AppVersion> findAllSortByIdDesc(DeviceType deviceType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/CustomDeviceTokenRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import kr.co.yeoshin.common.setup.entity.DeviceToken;
import kr.co.yeoshin.common.type.DeviceType;

public interface CustomDeviceTokenRepository {

    void updateDeviceToken(DeviceToken deviceToken);

    void deletePushToken(long memberId, String clientId, DeviceType deviceType, String pushToken);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/CustomSplashRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import java.util.Optional;
import kr.co.yeoshin.common.setup.entity.Splash;
import kr.co.yeoshin.common.setup.model.PeriodConflictSplashWhereCondition;
import kr.co.yeoshin.common.setup.model.SplashWhereCondition;
import org.springframework.data.domain.Page;

public interface CustomSplashRepository {

    Optional<Splash> findByInPeriod(PeriodConflictSplashWhereCondition whereCondition);

    Page<Splash> findAllByWhereCondition(SplashWhereCondition toWhereCondition);

    Optional<Splash> fetchBySplashId(long splashId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/DeviceExtPackageStatusRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import java.util.List;
import kr.co.yeoshin.common.setup.entity.DeviceExtPackageStatus;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DeviceExtPackageStatusRepository extends JpaRepository<DeviceExtPackageStatus, Long> {

    List<DeviceExtPackageStatus> findAllByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/DeviceTokenRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import java.util.List;
import kr.co.yeoshin.common.setup.entity.DeviceToken;
import kr.co.yeoshin.common.type.DeviceType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DeviceTokenRepository extends JpaRepository<DeviceToken, Long>, CustomDeviceTokenRepository {

    DeviceToken findByClientIdAndDeviceType(String clientId, DeviceType deviceType);

    List<DeviceToken> findAllByMemberId(long memberId);

    List<DeviceToken> findAllByMemberIdOrderByIdAsc(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/setup/repository/SplashRepository.java
================================================
package kr.co.yeoshin.common.setup.repository;

import kr.co.yeoshin.common.setup.entity.Splash;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SplashRepository extends JpaRepository<Splash, String>, CustomSplashRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/share/repository/ShareContextRepository.java
================================================
package kr.co.yeoshin.common.share.repository;

import java.util.Optional;
import kr.co.yeoshin.common.share.entity.ShareContext;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ShareContextRepository extends JpaRepository<ShareContext, Long> {

    Optional<ShareContext> findByHashKey(String hashKye);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/share/repository/ShareRepository.java
================================================
package kr.co.yeoshin.common.share.repository;

import java.util.Optional;
import kr.co.yeoshin.common.share.entity.Share;
import kr.co.yeoshin.common.share.type.ShareDomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ShareRepository extends JpaRepository<Share, Long> {

    Optional<Share> findByMemberIdAndRefTypeAndRefId(long memberId, ShareDomainType refType, long refId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/share/repository/ShareUrlWhitelistRepository.java
================================================
package kr.co.yeoshin.common.share.repository;

import java.util.List;
import kr.co.yeoshin.common.share.entity.ShareUrlWhitelist;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ShareUrlWhitelistRepository extends JpaRepository<ShareUrlWhitelist, Long> {

    List<ShareUrlWhitelist> findAllByUrl(String url);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/terms/repository/TermsRepository.java
================================================
package kr.co.yeoshin.common.terms.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.member.type.AgreementTermsType;
import kr.co.yeoshin.common.terms.entity.Terms;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TermsRepository extends JpaRepository<Terms, Long> {

    List<Terms> findAllByTypeInAndLatestYn(Collection<AgreementTermsType> types, YN latestYn);

    Optional<Terms> findByTypeAndLatestYn(AgreementTermsType type, YN latestYn);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/thirdpaty/repository/CrmConfigRepository.java
================================================
package kr.co.yeoshin.common.thirdpaty.repository;

import java.util.Optional;
import kr.co.yeoshin.common.reservation.entity.CrmConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CrmConfigRepository extends JpaRepository<CrmConfig, Long> {

    Optional<CrmConfig> findByService(String service);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/thirdpaty/repository/MemberThirdPartyAgreementTermsRepository.java
================================================
package kr.co.yeoshin.common.thirdpaty.repository;


import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.thirdpaty.entity.MemberThirdPartyAgreementTerms;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyAgreementTermsType;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyServiceType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberThirdPartyAgreementTermsRepository extends JpaRepository<MemberThirdPartyAgreementTerms, Long> {

    List<MemberThirdPartyAgreementTerms> findAllByServiceAndThirdPartyAccountId(ThirdPartyServiceType service, long thirdPartyAccountId);

    List<MemberThirdPartyAgreementTerms> findAllByServiceAndThirdPartyAccountIdIn(ThirdPartyServiceType service, Collection<Long> thirdPartyAccountIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/thirdpaty/repository/ThirdPartyConfigRepository.java
================================================
package kr.co.yeoshin.common.thirdpaty.repository;

import java.util.Optional;
import kr.co.yeoshin.common.thirdpaty.entity.ThirdPartyConfig;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ThirdPartyConfigRepository extends JpaRepository<ThirdPartyConfig, Long> {
    Optional<ThirdPartyConfig> findThirdPartyConfigByService(String service);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/thirdpaty/repository/ThirdPartyVerificationCodeRepository.java
================================================
package kr.co.yeoshin.common.thirdpaty.repository;

import java.util.Optional;
import kr.co.yeoshin.common.thirdpaty.entity.ThirdPartyVerificationCode;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyServiceType;
import kr.co.yeoshin.common.thirdpaty.type.ThirdPartyVerificationCodeType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ThirdPartyVerificationCodeRepository extends JpaRepository<ThirdPartyVerificationCode, Long> {

    Optional<ThirdPartyVerificationCode> findByServiceAndCode(ThirdPartyServiceType service, String code);

    Optional<ThirdPartyVerificationCode> findTopByServiceAndRefTypeAndRefIdOrderByIdDesc(ThirdPartyServiceType service,
            ThirdPartyVerificationCodeType type, long refId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/translation/repository/MultiLanguageKeywordRepository.java
================================================
package kr.co.yeoshin.common.translation.repository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.translation.entity.MultiLanguageKeyword;
import kr.co.yeoshin.common.translation.type.KeywordDomainType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MultiLanguageKeywordRepository extends JpaRepository<MultiLanguageKeyword, Long> {

    List<MultiLanguageKeyword> findAllByDomainType(KeywordDomainType domainType);

    List<MultiLanguageKeyword> findAllByDomainTypeAndKoIn(KeywordDomainType domainType, Collection<String> ko);

    int deleteAllByDomainTypeAndKoIn(KeywordDomainType domainType, Collection<String> ko);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/translation/repository/TranslationRepository.java
================================================
package kr.co.yeoshin.common.translation.repository;

import java.util.Optional;
import kr.co.yeoshin.common.translation.entity.Translation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TranslationRepository extends JpaRepository<Translation, Long> {

    Optional<Translation> findByHashKeyAndTranslationLanguage(
            String hashKey, String translationLanguage);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/translation/repository/TranslationTextRepository.java
================================================
package kr.co.yeoshin.common.translation.repository;

import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.translation.entity.TranslationText;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TranslationTextRepository extends JpaRepository<TranslationText, Long> {

    Optional<TranslationText> findBySourceText(String sourceText);

    List<TranslationText> findBySourceTextContains(String sourceText);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvAsHospitalRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.tv.entity.TvAsHospital;
import kr.co.yeoshin.common.type.YN;

public interface CustomTvAsHospitalRepository {

    TvAsHospital fetchTvAsHospitalByTvId(long id);

    List<TvAsHospital> fetchAllByTvIds(List<Long> ids);

    List<TvAsHospital> fetchAllByHospitalIds(Collection<Long> hospitalIds, Collection<YN> tvView);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvAsSalesEventRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.List;
import kr.co.yeoshin.common.tv.entity.TvAsSalesEvent;

public interface CustomTvAsSalesEventRepository {

    List<TvAsSalesEvent> fetchAllByTvId(long tvId);

    List<TvAsSalesEvent> fetchAllBySalesEventId(long salesEventId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.tv.entity.TvAsTreatment;

public interface CustomTvAsTreatmentRepository {

    List<TvAsTreatment> fetchAllByTreatmentIds(Collection<Long> treatmentIds);

    List<TvAsTreatment> fetchAllByTvId(long tvId);

    List<TvAsTreatment> fetchAllByTvIdIn(Collection<Long> tvIds);

    void deleteTvAsTreatmentByIds(Collection<Long> tvAsTreatmentIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvCategoryRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.time.LocalDateTime;
import java.util.List;
import kr.co.yeoshin.common.tv.entity.TvCategory;

public interface CustomTvCategoryRepository {

    List<TvCategory> findAllActive(LocalDateTime currentDate);

    List<TvCategory> findAllBook(LocalDateTime currentDate);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvReplyRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvReply;
import kr.co.yeoshin.common.tv.model.TvReplyWhereCondition;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomTvReplyRepository {

    Page<TvReply> findAllByTvId(long tvId, YN viewYn, Pageable pageable);

    Page<TvReply> fetchAllByTvId(long tvId, YN viewYn, Pageable pageable);

    Page<TvReply> fetchAllTvReply(TvReplyWhereCondition whereCondition);

    Page<TvReply> fetchAllByMemberId(long memberId, Pageable pageable);

    Optional<TvReply> fetchById(long tvReplyId);

   List<TvReply> findRepliesByMemberIdAndAtAfter(long memberId, LocalDateTime at);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Collection;
import kr.co.yeoshin.common.tv.entity.Tv;
import kr.co.yeoshin.common.tv.model.TvWhereCondition;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomTvRepository {

    Page<Tv> findAllTvsByTreatmentIdsOrderByIdDesc(Pageable pageable, Collection<Long> treatmentIds, YN view);

    Page<Tv> findAllTvsOrderByIdDesc(Pageable pageable, YN view);

    Page<Tv> findAllTvsByTreatmentIdsOrderByViewCountDesc(Pageable pageable, Collection<Long> treatmentIds, YN Y);

    Page<Tv> findAllTvsOrderByViewCountDesc(Pageable pageable, YN view);

    Page<Tv> findAllTv(TvWhereCondition whereCondition);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvScrapRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Collection;
import java.util.List;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import kr.co.yeoshin.common.tv.entity.TvScrap;
import kr.co.yeoshin.common.type.YN;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface CustomTvScrapRepository extends ScrapCountRepository {

    Page<TvScrap> fetchAllByMemberIdAndViewYn(long memberId, YN viewYn, Pageable pageable);

    List<TvScrap> findAllByMemberIdAndTvIds(long memberId, Collection<Long> tvIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvStatRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvStat;

public interface CustomTvStatRepository {

    Optional<TvStat> fetchByTvId(long tvId);

    void increaseViewCount(long tvId);

    void increaseScrapCount(long id);

    void decreaseScrapCount(long id);

    void increaseLikeCount(long id);

    void decreaseLikeCount(long id);

    void increaseReplyCount(long id);

    void decreaseReplyCount(long id);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/CustomTvViewRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

public interface CustomTvViewRepository {

    void increaseViewCount(long memberId, long tvId);

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvAsHospitalRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvAsHospital;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvAsHospitalRepository extends JpaRepository<TvAsHospital, Long>, CustomTvAsHospitalRepository {

    Optional<TvAsHospital> findByTvId(long tvId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvAsSalesEventRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvAsSalesEvent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvAsSalesEventRepository extends JpaRepository<TvAsSalesEvent, Long>, CustomTvAsSalesEventRepository {

    Optional<TvAsSalesEvent> findByTvId(long tvId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvAsTreatmentRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import kr.co.yeoshin.common.tv.entity.TvAsTreatment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvAsTreatmentRepository extends JpaRepository<TvAsTreatment, Long>, CustomTvAsTreatmentRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvCategoryRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import kr.co.yeoshin.common.tv.entity.TvCategory;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvCategoryRepository extends JpaRepository<TvCategory, Long>, CustomTvCategoryRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvLikeRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvLike;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvLikeRepository extends JpaRepository<TvLike, Long> {

    Optional<TvLike> findByMemberIdAndTvId(long memberId, long tvId);

    void deleteByMemberIdAndTvId(long memberId, long tvId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvReplyRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvReply;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvReplyRepository extends JpaRepository<TvReply, Long>, CustomTvReplyRepository {

    Optional<TvReply> findByIdAndTvId(long replyId, long tvId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import kr.co.yeoshin.common.tv.entity.Tv;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvRepository extends JpaRepository<Tv, Long>, CustomTvRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvScrapRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.repository.ScrapCountRepository;
import kr.co.yeoshin.common.tv.entity.TvScrap;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvScrapRepository extends JpaRepository<TvScrap, Long>, CustomTvScrapRepository {

    Optional<TvScrap> findByMemberIdAndTvId(long memberId, long tvId);

    void deleteByMemberIdAndTvId(long memberId, long tvId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvStatRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvStat;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvStatRepository extends JpaRepository<TvStat, Long>, CustomTvStatRepository {

    Optional<TvStat> findByTvId(long tvId);

    List<TvStat> findByTvIdIn(Collection<Long> tvIds);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/tv/respository/TvViewRepository.java
================================================
package kr.co.yeoshin.common.tv.respository;

import java.util.Optional;
import kr.co.yeoshin.common.tv.entity.TvView;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TvViewRepository extends JpaRepository<TvView, Long>, CustomTvViewRepository {

    Optional<TvView> findByMemberIdAndTvId(long memberId, long tvId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/CustomVerificationDanalIdentityRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import java.util.List;
import kr.co.yeoshin.common.verify.entity.VerificationDanalIdentity;
import kr.co.yeoshin.common.verify.type.VerificationType;

public interface CustomVerificationDanalIdentityRepository {

    VerificationDanalIdentity findLatest(long memberId, VerificationType verificationType);

    List<VerificationDanalIdentity> findRecentListByMemberId(long memberId, int limit);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/CustomVerificationEmailRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import java.util.List;
import kr.co.yeoshin.common.verify.entity.VerificationEmail;
import kr.co.yeoshin.common.verify.type.VerificationType;

public interface CustomVerificationEmailRepository {

    VerificationEmail findLatest(long memberId, VerificationType verificationType);

    VerificationEmail findLatest(String email, VerificationType verificationType);

    List<VerificationEmail> findRecentListByEmail(String email, int limit);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/CustomVerificationNiceIdentityRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import java.util.List;
import kr.co.yeoshin.common.verify.entity.VerificationNiceIdentity;
import kr.co.yeoshin.common.verify.type.VerificationType;

public interface CustomVerificationNiceIdentityRepository {

    VerificationNiceIdentity findLatest(long memberId, VerificationType type);

    List<VerificationNiceIdentity> findRecentListByMemberId(long memberId, int limit);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/CustomVerificationPasswordRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationPassword;
import kr.co.yeoshin.common.verify.type.VerificationType;

public interface CustomVerificationPasswordRepository {

    VerificationPassword findLatest(Long memberId, VerificationType authType);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/CustomVerificationSmsRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import java.util.List;
import kr.co.yeoshin.common.verify.entity.VerificationSms;
import kr.co.yeoshin.common.verify.type.VerificationType;

public interface CustomVerificationSmsRepository {

    VerificationSms findLatest(long memberId, VerificationType verificationType);

    VerificationSms findLatest(String cellPhone, VerificationType verificationType);

    List<VerificationSms> findRecentListByCellPhone(String cellPhone, int limit);

    List<VerificationSms> findByHashKey(String hashKey);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationCaptchaRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationCaptcha;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationCaptchaRepository extends JpaRepository<VerificationCaptcha, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationDanalIdentityRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationDanalIdentity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationDanalIdentityRepository extends JpaRepository<VerificationDanalIdentity, Long>,
        CustomVerificationDanalIdentityRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationEmailRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationEmail;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationEmailRepository extends JpaRepository<VerificationEmail, Long>,
        CustomVerificationEmailRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationNiceIdentityRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationNiceIdentity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationNiceIdentityRepository extends JpaRepository<VerificationNiceIdentity, Long>,
        CustomVerificationNiceIdentityRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationOtpRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationOtp;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationOtpRepository extends JpaRepository<VerificationOtp, Long> {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationPasswordRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationPassword;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationPasswordRepository extends JpaRepository<VerificationPassword, Long>,
        CustomVerificationPasswordRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationSmsBlockRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import java.util.Optional;
import kr.co.yeoshin.common.verify.entity.VerificationSmsBlock;
import kr.co.yeoshin.common.verify.type.VerificationType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationSmsBlockRepository extends JpaRepository<VerificationSmsBlock, Long> {

    Optional<VerificationSmsBlock> findByCountryCallingCodeAndType(String countryCallingCode, VerificationType type);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationSmsFailRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import java.util.Optional;
import kr.co.yeoshin.common.verify.entity.VerificationSmsFail;
import kr.co.yeoshin.common.verify.type.VerificationType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationSmsFailRepository extends JpaRepository<VerificationSmsFail, Long> {

    Optional<VerificationSmsFail> findByMemberIdAndType(long memberId, VerificationType type);

    void deleteByMemberIdAndType(long memberId, VerificationType type);

    void deleteByMemberId(long memberId);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/verify/repository/VerificationSmsRepository.java
================================================
package kr.co.yeoshin.common.verify.repository;

import kr.co.yeoshin.common.verify.entity.VerificationSms;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VerificationSmsRepository extends JpaRepository<VerificationSms, Long>,
        CustomVerificationSmsRepository {

}



================================================
File: common/src/main/java/kr/co/yeoshin/common/weather/repository/CustomWeatherRepository.java
================================================
package kr.co.yeoshin.common.weather.repository;

import java.time.LocalDate;
import java.util.Optional;
import kr.co.yeoshin.common.weather.entity.Weather;

public interface CustomWeatherRepository {

    Optional<Weather> findByAt(LocalDate at, int hour, String geoCell);
}



================================================
File: common/src/main/java/kr/co/yeoshin/common/weather/repository/WeatherRepository.java
================================================
package kr.co.yeoshin.common.weather.repository;

import kr.co.yeoshin.common.weather.entity.Weather;
import org.springframework.data.jpa.repository.JpaRepository;

public interface WeatherRepository extends JpaRepository<Weather, Long>, CustomWeatherRepository {

}


